+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 3990 (c5b0f4b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.025.045 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.255 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.348 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.359 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.360 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.364 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.367 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.368 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.369 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.370 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.371 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.380 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.385 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.386 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.387 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.678 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.453 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.768 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.776 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.777 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.778 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.779 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.780 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.781 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.784 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.785 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.786 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.787 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.788 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.796 I llama_model_loader: - type  f32:   37 tensors
0.00.266.800 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.933 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.872 I llm_load_vocab: special tokens cache size = 5
0.00.605.206 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.278 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.281 I llm_load_print_meta: arch             = gemma
0.00.605.282 I llm_load_print_meta: vocab type       = SPM
0.00.605.282 I llm_load_print_meta: n_vocab          = 256000
0.00.605.285 I llm_load_print_meta: n_merges         = 0
0.00.605.285 I llm_load_print_meta: vocab_only       = 0
0.00.605.286 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.286 I llm_load_print_meta: n_embd           = 2048
0.00.605.286 I llm_load_print_meta: n_layer          = 18
0.00.605.348 I llm_load_print_meta: n_head           = 8
0.00.605.358 I llm_load_print_meta: n_head_kv        = 1
0.00.605.359 I llm_load_print_meta: n_rot            = 256
0.00.605.359 I llm_load_print_meta: n_swa            = 0
0.00.605.361 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.361 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.366 I llm_load_print_meta: n_gqa            = 8
0.00.605.371 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.376 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.379 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.381 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.382 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.382 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.382 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.387 I llm_load_print_meta: n_ff             = 16384
0.00.605.388 I llm_load_print_meta: n_expert         = 0
0.00.605.389 I llm_load_print_meta: n_expert_used    = 0
0.00.605.390 I llm_load_print_meta: causal attn      = 1
0.00.605.410 I llm_load_print_meta: pooling type     = 0
0.00.605.411 I llm_load_print_meta: rope type        = 2
0.00.605.412 I llm_load_print_meta: rope scaling     = linear
0.00.605.413 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.414 I llm_load_print_meta: freq_scale_train = 1
0.00.605.414 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.414 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.415 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.415 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.418 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.419 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.419 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.420 I llm_load_print_meta: model type       = 2B
0.00.605.421 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.422 I llm_load_print_meta: model params     = 2.51 B
0.00.605.423 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.423 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.425 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.425 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.426 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.426 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.429 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.429 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.435 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.436 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.437 I llm_load_print_meta: max token length = 93
0.00.717.518 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.717.525 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.717.526 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.717.527 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.717.527 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.717.528 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.723.330 I llama_new_context_with_model: n_ctx      = 8192
0.00.723.338 I llama_new_context_with_model: n_batch    = 2048
0.00.723.338 I llama_new_context_with_model: n_ubatch   = 512
0.00.723.339 I llama_new_context_with_model: flash_attn = 0
0.00.723.341 I llama_new_context_with_model: freq_base  = 10000.0
0.00.723.341 I llama_new_context_with_model: freq_scale = 1
0.00.752.180 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.752.220 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.752.337 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.755.458 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.755.462 I llama_new_context_with_model: graph nodes  = 601
0.00.755.462 I llama_new_context_with_model: graph splits = 1
0.00.755.478 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.366.100 I main: llama threadpool init, n_threads = 4
0.01.366.113 I 
0.01.366.218 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.366.218 I 
0.01.366.448 I sampler seed: 386129703
0.01.366.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.366.465 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.366.466 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.366.469 I 
 increasities!
I am unable to generate text that contains sexually suggestive or inappropriate content. [end of text]


0.09.358.673 I llama_perf_sampler_print:    sampling time =      28.37 ms /    20 runs   (    1.42 ms per token,   705.04 tokens per second)
0.09.358.676 I llama_perf_context_print:        load time =    1363.17 ms
0.09.358.687 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.358.688 I llama_perf_context_print:        eval time =    7936.29 ms /    19 runs   (  417.70 ms per token,     2.39 tokens per second)
0.09.358.689 I llama_perf_context_print:       total time =    7992.58 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3990 (c5b0f4b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.887 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.024.824 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.916 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.931 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.936 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.940 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.949 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.951 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.952 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.953 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.954 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.963 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.967 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.968 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.969 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.970 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.955 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.770 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.107 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.115 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.116 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.117 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.118 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.120 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.121 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.125 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.126 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.127 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.128 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.273.129 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.137 I llama_model_loader: - type  f32:   37 tensors
0.00.273.141 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.904 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.265 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.204 I llm_load_vocab: special tokens cache size = 5
0.00.613.750 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.820 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.821 I llm_load_print_meta: arch             = gemma
0.00.613.822 I llm_load_print_meta: vocab type       = SPM
0.00.613.823 I llm_load_print_meta: n_vocab          = 256000
0.00.613.825 I llm_load_print_meta: n_merges         = 0
0.00.613.825 I llm_load_print_meta: vocab_only       = 0
0.00.613.826 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.827 I llm_load_print_meta: n_embd           = 2048
0.00.613.827 I llm_load_print_meta: n_layer          = 18
0.00.613.894 I llm_load_print_meta: n_head           = 8
0.00.613.901 I llm_load_print_meta: n_head_kv        = 1
0.00.613.902 I llm_load_print_meta: n_rot            = 256
0.00.613.903 I llm_load_print_meta: n_swa            = 0
0.00.613.904 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.904 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.910 I llm_load_print_meta: n_gqa            = 8
0.00.613.914 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.920 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.921 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.923 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.923 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.924 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.935 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.940 I llm_load_print_meta: n_ff             = 16384
0.00.613.941 I llm_load_print_meta: n_expert         = 0
0.00.613.942 I llm_load_print_meta: n_expert_used    = 0
0.00.613.942 I llm_load_print_meta: causal attn      = 1
0.00.613.943 I llm_load_print_meta: pooling type     = 0
0.00.613.943 I llm_load_print_meta: rope type        = 2
0.00.613.944 I llm_load_print_meta: rope scaling     = linear
0.00.613.946 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.947 I llm_load_print_meta: freq_scale_train = 1
0.00.613.947 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.948 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.948 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.948 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.948 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.949 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.949 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.950 I llm_load_print_meta: model type       = 2B
0.00.613.951 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.952 I llm_load_print_meta: model params     = 2.51 B
0.00.613.953 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.970 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.970 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.971 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.971 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.972 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.973 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.973 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.980 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.982 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.982 I llm_load_print_meta: max token length = 93
0.00.713.660 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.719.488 I llama_new_context_with_model: n_ctx      = 8192
0.00.719.496 I llama_new_context_with_model: n_batch    = 2048
0.00.719.496 I llama_new_context_with_model: n_ubatch   = 512
0.00.719.497 I llama_new_context_with_model: flash_attn = 0
0.00.719.499 I llama_new_context_with_model: freq_base  = 10000.0
0.00.719.500 I llama_new_context_with_model: freq_scale = 1
0.00.748.755 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.748.797 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.908 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.752.083 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.752.088 I llama_new_context_with_model: graph nodes  = 601
0.00.752.088 I llama_new_context_with_model: graph splits = 1
0.00.752.104 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.807 I main: llama threadpool init, n_threads = 4
0.01.370.822 I 
0.01.370.931 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.370.935 I 
0.01.371.175 I sampler seed: 2333147341
0.01.371.187 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.194 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.371.194 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.195 I 
 increasities. [end of text]


0.03.081.759 I llama_perf_sampler_print:    sampling time =       6.07 ms /     5 runs   (    1.21 ms per token,   823.45 tokens per second)
0.03.081.762 I llama_perf_context_print:        load time =    1367.89 ms
0.03.081.763 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.081.765 I llama_perf_context_print:        eval time =    1697.48 ms /     4 runs   (  424.37 ms per token,     2.36 tokens per second)
0.03.081.780 I llama_perf_context_print:       total time =    1710.96 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3990 (c5b0f4b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.807 I main: load the model and apply lora adapter, if any
0.00.024.457 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.667 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.773 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.785 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.787 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.793 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.797 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.798 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.799 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.800 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.800 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.811 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.814 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.815 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.816 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.817 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.924 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.376 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.857 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.866 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.867 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.868 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.869 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.870 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.871 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.875 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.876 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.877 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.878 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.266.879 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.887 I llama_model_loader: - type  f32:   37 tensors
0.00.266.892 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.861 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.949 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.875 I llm_load_vocab: special tokens cache size = 5
0.00.605.583 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.652 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.654 I llm_load_print_meta: arch             = gemma
0.00.605.654 I llm_load_print_meta: vocab type       = SPM
0.00.605.655 I llm_load_print_meta: n_vocab          = 256000
0.00.605.657 I llm_load_print_meta: n_merges         = 0
0.00.605.658 I llm_load_print_meta: vocab_only       = 0
0.00.605.659 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.659 I llm_load_print_meta: n_embd           = 2048
0.00.605.659 I llm_load_print_meta: n_layer          = 18
0.00.605.720 I llm_load_print_meta: n_head           = 8
0.00.605.727 I llm_load_print_meta: n_head_kv        = 1
0.00.605.727 I llm_load_print_meta: n_rot            = 256
0.00.605.728 I llm_load_print_meta: n_swa            = 0
0.00.605.728 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.730 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.734 I llm_load_print_meta: n_gqa            = 8
0.00.605.740 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.745 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.746 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.747 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.748 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.749 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.750 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.755 I llm_load_print_meta: n_ff             = 16384
0.00.605.756 I llm_load_print_meta: n_expert         = 0
0.00.605.756 I llm_load_print_meta: n_expert_used    = 0
0.00.605.757 I llm_load_print_meta: causal attn      = 1
0.00.605.758 I llm_load_print_meta: pooling type     = 0
0.00.605.759 I llm_load_print_meta: rope type        = 2
0.00.605.763 I llm_load_print_meta: rope scaling     = linear
0.00.605.765 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.766 I llm_load_print_meta: freq_scale_train = 1
0.00.605.767 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.767 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.767 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.768 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.769 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.769 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.769 I llm_load_print_meta: model type       = 2B
0.00.605.770 I llm_load_print_meta: model ftype      = Q8_0
0.00.605.771 I llm_load_print_meta: model params     = 2.51 B
0.00.605.775 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.605.776 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.776 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.777 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.777 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.777 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.778 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.778 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.786 I llm_load_print_meta: max token length = 93
0.00.704.756 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.704.765 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.704.766 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.704.767 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.704.767 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.704.768 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.710.441 I llama_new_context_with_model: n_ctx      = 8192
0.00.710.448 I llama_new_context_with_model: n_batch    = 2048
0.00.710.448 I llama_new_context_with_model: n_ubatch   = 512
0.00.710.449 I llama_new_context_with_model: flash_attn = 0
0.00.710.451 I llama_new_context_with_model: freq_base  = 10000.0
0.00.710.452 I llama_new_context_with_model: freq_scale = 1
0.00.739.220 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.257 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.739.369 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.463 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.742.467 I llama_new_context_with_model: graph nodes  = 601
0.00.742.467 I llama_new_context_with_model: graph splits = 1
0.00.742.484 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.991 I main: llama threadpool init, n_threads = 4
0.01.354.003 I 
0.01.354.115 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.120 I 
0.01.354.349 I sampler seed: 1591407770
0.01.354.362 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.354.369 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.354.370 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.354.370 I 
 seconary to the first sentence in the text.

The text provided does not contain a definition for "seconary" or "secondary" so I am unable

0.14.903.043 I llama_perf_sampler_print:    sampling time =      48.19 ms /    33 runs   (    1.46 ms per token,   684.80 tokens per second)
0.14.903.058 I llama_perf_context_print:        load time =    1351.09 ms
0.14.903.060 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.903.061 I llama_perf_context_print:        eval time =   13454.92 ms /    32 runs   (  420.47 ms per token,     2.38 tokens per second)
0.14.903.062 I llama_perf_context_print:       total time =   13549.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.648 I build: 3990 (c5b0f4b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.024.840 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.043 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.131 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.142 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.144 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.148 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.149 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.151 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.152 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.153 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.154 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.163 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.167 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.168 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.169 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.170 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.404 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.787 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.269 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.280 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.281 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.282 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.283 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.284 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.285 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.289 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.304 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.307 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.278.308 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.278.310 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.278.318 I llama_model_loader: - type  f32:   37 tensors
0.00.278.322 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.586 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.518.800 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.519.728 I llm_load_vocab: special tokens cache size = 5
0.00.615.589 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.657 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.658 I llm_load_print_meta: arch             = gemma
0.00.615.659 I llm_load_print_meta: vocab type       = SPM
0.00.615.660 I llm_load_print_meta: n_vocab          = 256000
0.00.615.663 I llm_load_print_meta: n_merges         = 0
0.00.615.663 I llm_load_print_meta: vocab_only       = 0
0.00.615.664 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.664 I llm_load_print_meta: n_embd           = 2048
0.00.615.664 I llm_load_print_meta: n_layer          = 18
0.00.615.727 I llm_load_print_meta: n_head           = 8
0.00.615.734 I llm_load_print_meta: n_head_kv        = 1
0.00.615.735 I llm_load_print_meta: n_rot            = 256
0.00.615.735 I llm_load_print_meta: n_swa            = 0
0.00.615.736 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.736 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.743 I llm_load_print_meta: n_gqa            = 8
0.00.615.748 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.753 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.754 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.756 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.757 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.757 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.758 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.762 I llm_load_print_meta: n_ff             = 16384
0.00.615.763 I llm_load_print_meta: n_expert         = 0
0.00.615.764 I llm_load_print_meta: n_expert_used    = 0
0.00.615.765 I llm_load_print_meta: causal attn      = 1
0.00.615.765 I llm_load_print_meta: pooling type     = 0
0.00.615.774 I llm_load_print_meta: rope type        = 2
0.00.615.786 I llm_load_print_meta: rope scaling     = linear
0.00.615.789 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.789 I llm_load_print_meta: freq_scale_train = 1
0.00.615.797 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.798 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.799 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.799 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.799 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.800 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.800 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.801 I llm_load_print_meta: model type       = 2B
0.00.615.802 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.803 I llm_load_print_meta: model params     = 2.51 B
0.00.615.804 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.805 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.805 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.806 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.806 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.807 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.807 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.815 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.828 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.829 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.830 I llm_load_print_meta: max token length = 93
0.00.709.202 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.709.213 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.714.895 I llama_new_context_with_model: n_ctx      = 8192
0.00.714.902 I llama_new_context_with_model: n_batch    = 2048
0.00.714.902 I llama_new_context_with_model: n_ubatch   = 512
0.00.714.903 I llama_new_context_with_model: flash_attn = 0
0.00.714.905 I llama_new_context_with_model: freq_base  = 10000.0
0.00.714.906 I llama_new_context_with_model: freq_scale = 1
0.00.745.793 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.831 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.955 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.749.138 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.749.143 I llama_new_context_with_model: graph nodes  = 601
0.00.749.143 I llama_new_context_with_model: graph splits = 1
0.00.749.159 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.746 I main: llama threadpool init, n_threads = 4
0.01.359.760 I 
0.01.359.863 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.867 I 
0.01.360.091 I sampler seed: 1440553951
0.01.360.106 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.112 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.360.115 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.116 I 
 increasities can be a form of religious experience that leads to profound insight and spiritual growth.

**True or False?**

The provided text suggests that religious

0.14.911.699 I llama_perf_sampler_print:    sampling time =      47.82 ms /    33 runs   (    1.45 ms per token,   690.15 tokens per second)
0.14.911.703 I llama_perf_context_print:        load time =    1356.85 ms
0.14.911.705 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.911.707 I llama_perf_context_print:        eval time =   13459.37 ms /    32 runs   (  420.61 ms per token,     2.38 tokens per second)
0.14.911.708 I llama_perf_context_print:       total time =   13551.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m52.180s
user	2m39.943s
sys	0m9.634s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3990 (c5b0f4b5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199796.79 ms
main:    total time = 199796.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 3990 (c5b0f4b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.814 I main: load the model and apply lora adapter, if any
0.00.024.688 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.894 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.987 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.998 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.002 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.006 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.007 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.009 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.010 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.011 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.012 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.019 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.021 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.022 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.024 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.025 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.260.444 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.815 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.823 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.824 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.825 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.826 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.827 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.829 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.845 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.848 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.849 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.278.851 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.278.864 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.278.874 I llama_model_loader: - type  f32:   37 tensors
0.00.278.879 I llama_model_loader: - type q4_K:  108 tensors
0.00.278.880 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.499 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.661 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.543 I llm_load_vocab: special tokens cache size = 5
0.00.606.254 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.318 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.319 I llm_load_print_meta: arch             = gemma
0.00.606.320 I llm_load_print_meta: vocab type       = SPM
0.00.606.321 I llm_load_print_meta: n_vocab          = 256000
0.00.606.323 I llm_load_print_meta: n_merges         = 0
0.00.606.324 I llm_load_print_meta: vocab_only       = 0
0.00.606.324 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.324 I llm_load_print_meta: n_embd           = 2048
0.00.606.325 I llm_load_print_meta: n_layer          = 18
0.00.606.385 I llm_load_print_meta: n_head           = 8
0.00.606.392 I llm_load_print_meta: n_head_kv        = 1
0.00.606.396 I llm_load_print_meta: n_rot            = 256
0.00.606.396 I llm_load_print_meta: n_swa            = 0
0.00.606.396 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.397 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.401 I llm_load_print_meta: n_gqa            = 8
0.00.606.407 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.412 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.413 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.415 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.415 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.415 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.422 I llm_load_print_meta: n_ff             = 16384
0.00.606.430 I llm_load_print_meta: n_expert         = 0
0.00.606.431 I llm_load_print_meta: n_expert_used    = 0
0.00.606.431 I llm_load_print_meta: causal attn      = 1
0.00.606.431 I llm_load_print_meta: pooling type     = 0
0.00.606.432 I llm_load_print_meta: rope type        = 2
0.00.606.443 I llm_load_print_meta: rope scaling     = linear
0.00.606.445 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.446 I llm_load_print_meta: freq_scale_train = 1
0.00.606.446 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.446 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.447 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.447 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.447 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.448 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.456 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.463 I llm_load_print_meta: model type       = 2B
0.00.606.467 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.606.468 I llm_load_print_meta: model params     = 2.51 B
0.00.606.468 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.606.469 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.469 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.470 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.470 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.471 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.471 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.472 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.478 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.479 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.480 I llm_load_print_meta: max token length = 93
0.00.668.953 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.668.965 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.668.966 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.668.967 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.668.967 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.668.968 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.674.783 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.792 I llama_new_context_with_model: n_batch    = 2048
0.00.674.792 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.792 I llama_new_context_with_model: flash_attn = 0
0.00.674.795 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.796 I llama_new_context_with_model: freq_scale = 1
0.00.705.419 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.469 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.584 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.616 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.620 I llama_new_context_with_model: graph nodes  = 601
0.00.708.621 I llama_new_context_with_model: graph splits = 1
0.00.708.638 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.283.435 I main: llama threadpool init, n_threads = 4
0.01.283.448 I 
0.01.283.552 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.556 I 
0.01.283.783 I sampler seed: 3752242519
0.01.283.795 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.802 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.283.803 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.283.803 I 
 maneuvously. 

I am unable to generate a response due to the limitations of my current programming language. [end of text]


0.09.462.352 I llama_perf_sampler_print:    sampling time =      35.88 ms /    25 runs   (    1.44 ms per token,   696.75 tokens per second)
0.09.462.356 I llama_perf_context_print:        load time =    1280.53 ms
0.09.462.357 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.462.380 I llama_perf_context_print:        eval time =    8108.75 ms /    24 runs   (  337.86 ms per token,     2.96 tokens per second)
0.09.462.381 I llama_perf_context_print:       total time =    8178.93 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3990 (c5b0f4b5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199700.77 ms
main:    total time = 199700.78 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.693 I build: 3990 (c5b0f4b5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.002.863 I main: load the model and apply lora adapter, if any
0.00.024.792 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.890 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.905 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.907 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.911 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.915 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.916 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.918 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.918 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.920 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.929 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.930 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.932 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.933 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.935 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.341 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.686 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.094 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.101 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.102 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.104 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.105 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.106 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.107 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.111 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.112 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.120 I llama_model_loader: - type  f32:   37 tensors
0.00.266.124 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.124 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.408 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.421 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.326 I llm_load_vocab: special tokens cache size = 5
0.00.594.230 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.299 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.303 I llm_load_print_meta: arch             = gemma
0.00.594.304 I llm_load_print_meta: vocab type       = SPM
0.00.594.305 I llm_load_print_meta: n_vocab          = 256000
0.00.594.307 I llm_load_print_meta: n_merges         = 0
0.00.594.307 I llm_load_print_meta: vocab_only       = 0
0.00.594.308 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.308 I llm_load_print_meta: n_embd           = 2048
0.00.594.308 I llm_load_print_meta: n_layer          = 18
0.00.594.374 I llm_load_print_meta: n_head           = 8
0.00.594.384 I llm_load_print_meta: n_head_kv        = 1
0.00.594.384 I llm_load_print_meta: n_rot            = 256
0.00.594.385 I llm_load_print_meta: n_swa            = 0
0.00.594.385 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.386 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.391 I llm_load_print_meta: n_gqa            = 8
0.00.594.397 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.402 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.406 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.408 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.409 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.409 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.409 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.414 I llm_load_print_meta: n_ff             = 16384
0.00.594.415 I llm_load_print_meta: n_expert         = 0
0.00.594.416 I llm_load_print_meta: n_expert_used    = 0
0.00.594.416 I llm_load_print_meta: causal attn      = 1
0.00.594.416 I llm_load_print_meta: pooling type     = 0
0.00.594.417 I llm_load_print_meta: rope type        = 2
0.00.594.418 I llm_load_print_meta: rope scaling     = linear
0.00.594.420 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.420 I llm_load_print_meta: freq_scale_train = 1
0.00.594.429 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.430 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.441 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.450 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.451 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.451 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.459 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.460 I llm_load_print_meta: model type       = 2B
0.00.594.468 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.594.469 I llm_load_print_meta: model params     = 2.51 B
0.00.594.469 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.594.470 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.477 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.478 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.485 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.486 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.486 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.487 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.493 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.495 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.495 I llm_load_print_meta: max token length = 93
0.00.657.034 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
.............................................................
0.00.662.741 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.750 I llama_new_context_with_model: n_batch    = 2048
0.00.662.750 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.751 I llama_new_context_with_model: flash_attn = 0
0.00.662.754 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.755 I llama_new_context_with_model: freq_scale = 1
0.00.692.712 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.751 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.692.865 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.940 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.944 I llama_new_context_with_model: graph nodes  = 601
0.00.695.945 I llama_new_context_with_model: graph splits = 1
0.00.695.961 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.269.763 I main: llama threadpool init, n_threads = 4
0.01.269.776 I 
0.01.269.881 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.269.885 I 
0.01.270.130 I sampler seed: 245514487
0.01.270.142 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.270.151 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.270.151 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.270.152 I 
 encompassing the history of the species.

**Species Overview:**

The species Homo sapiens emerged approximately 200,000 years ago in Africa

0.12.205.061 I llama_perf_sampler_print:    sampling time =      47.63 ms /    33 runs   (    1.44 ms per token,   692.86 tokens per second)
0.12.205.065 I llama_perf_context_print:        load time =    1266.80 ms
0.12.205.067 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.205.070 I llama_perf_context_print:        eval time =   10842.45 ms /    32 runs   (  338.83 ms per token,     2.95 tokens per second)
0.12.205.071 I llama_perf_context_print:       total time =   10935.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.168s
user	50m2.761s
sys	0m6.515s
