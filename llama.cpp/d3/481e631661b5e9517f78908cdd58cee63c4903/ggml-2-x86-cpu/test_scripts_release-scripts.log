+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.572 I build: 4126 (d3481e63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.000.778 I main: load the model and apply lora adapter, if any
0.00.021.712 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.724 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.732 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.737 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.738 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.742 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.743 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.745 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.745 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.746 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.746 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.751 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.752 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.752 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.753 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.753 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.367 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.357 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.215 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.221 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.222 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.223 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.223 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.224 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.225 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.228 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.228 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.229 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.230 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.230 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.234 I llama_model_loader: - type  f32:   37 tensors
0.00.132.236 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.039 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.705 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.265 I llm_load_vocab: special tokens cache size = 5
0.00.269.070 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.086 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.087 I llm_load_print_meta: arch             = gemma
0.00.269.087 I llm_load_print_meta: vocab type       = SPM
0.00.269.088 I llm_load_print_meta: n_vocab          = 256000
0.00.269.088 I llm_load_print_meta: n_merges         = 0
0.00.269.089 I llm_load_print_meta: vocab_only       = 0
0.00.269.090 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.092 I llm_load_print_meta: n_embd           = 2048
0.00.269.092 I llm_load_print_meta: n_layer          = 18
0.00.269.104 I llm_load_print_meta: n_head           = 8
0.00.269.104 I llm_load_print_meta: n_head_kv        = 1
0.00.269.105 I llm_load_print_meta: n_rot            = 256
0.00.269.105 I llm_load_print_meta: n_swa            = 0
0.00.269.105 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.106 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.107 I llm_load_print_meta: n_gqa            = 8
0.00.269.108 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.109 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.110 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.111 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.111 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.112 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.112 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.113 I llm_load_print_meta: n_ff             = 16384
0.00.269.113 I llm_load_print_meta: n_expert         = 0
0.00.269.113 I llm_load_print_meta: n_expert_used    = 0
0.00.269.114 I llm_load_print_meta: causal attn      = 1
0.00.269.114 I llm_load_print_meta: pooling type     = 0
0.00.269.114 I llm_load_print_meta: rope type        = 2
0.00.269.115 I llm_load_print_meta: rope scaling     = linear
0.00.269.116 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.117 I llm_load_print_meta: freq_scale_train = 1
0.00.269.118 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.118 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.118 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.118 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.119 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.120 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.121 I llm_load_print_meta: model type       = 2B
0.00.269.122 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.123 I llm_load_print_meta: model params     = 2.51 B
0.00.269.124 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.124 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.125 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.125 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.125 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.126 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.126 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.126 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.127 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.127 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.127 I llm_load_print_meta: max token length = 93
0.00.370.331 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.338 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.339 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.340 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.340 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.341 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.660 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.666 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.666 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.667 I llama_new_context_with_model: n_batch       = 2048
0.00.375.667 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.668 I llama_new_context_with_model: flash_attn    = 0
0.00.375.670 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.671 I llama_new_context_with_model: freq_scale    = 1
0.00.375.672 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.389.959 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.389.972 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.065 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.325 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.332 I llama_new_context_with_model: graph nodes  = 601
0.00.391.332 I llama_new_context_with_model: graph splits = 1
0.00.391.334 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.960 I main: llama threadpool init, n_threads = 4
0.00.475.973 I 
0.00.476.048 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.476.051 I 
0.00.476.092 I sampler seed: 2144788917
0.00.476.102 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.107 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.108 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.108 I 
 increably.

I'm a newbie here, still trying to find my footing in this crazy world. But I'm determined to make the most of

0.02.728.841 I llama_perf_sampler_print:    sampling time =       4.80 ms /    33 runs   (    0.15 ms per token,  6870.71 tokens per second)
0.02.728.845 I llama_perf_context_print:        load time =     475.16 ms
0.02.728.846 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.849 I llama_perf_context_print:        eval time =    2233.92 ms /    32 runs   (   69.81 ms per token,    14.32 tokens per second)
0.02.728.850 I llama_perf_context_print:       total time =    2252.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.539 I build: 4126 (d3481e63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.215 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.228 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.235 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.236 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.239 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.240 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.241 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.242 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.243 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.243 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.248 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.248 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.250 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.711 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.736 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.619 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.625 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.626 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.627 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.627 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.628 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.629 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.631 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.631 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.632 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.633 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.634 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.637 I llama_model_loader: - type  f32:   37 tensors
0.00.131.639 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.031 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.465 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.010 I llm_load_vocab: special tokens cache size = 5
0.00.283.550 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.565 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.566 I llm_load_print_meta: arch             = gemma
0.00.283.566 I llm_load_print_meta: vocab type       = SPM
0.00.283.567 I llm_load_print_meta: n_vocab          = 256000
0.00.283.567 I llm_load_print_meta: n_merges         = 0
0.00.283.568 I llm_load_print_meta: vocab_only       = 0
0.00.283.569 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.570 I llm_load_print_meta: n_embd           = 2048
0.00.283.570 I llm_load_print_meta: n_layer          = 18
0.00.283.581 I llm_load_print_meta: n_head           = 8
0.00.283.582 I llm_load_print_meta: n_head_kv        = 1
0.00.283.583 I llm_load_print_meta: n_rot            = 256
0.00.283.583 I llm_load_print_meta: n_swa            = 0
0.00.283.583 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.584 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.585 I llm_load_print_meta: n_gqa            = 8
0.00.283.586 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.587 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.587 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.589 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.590 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.590 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.591 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.592 I llm_load_print_meta: n_ff             = 16384
0.00.283.592 I llm_load_print_meta: n_expert         = 0
0.00.283.592 I llm_load_print_meta: n_expert_used    = 0
0.00.283.593 I llm_load_print_meta: causal attn      = 1
0.00.283.593 I llm_load_print_meta: pooling type     = 0
0.00.283.594 I llm_load_print_meta: rope type        = 2
0.00.283.594 I llm_load_print_meta: rope scaling     = linear
0.00.283.595 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.596 I llm_load_print_meta: freq_scale_train = 1
0.00.283.596 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.597 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.597 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.598 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.598 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.598 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.598 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.599 I llm_load_print_meta: model type       = 2B
0.00.283.600 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.601 I llm_load_print_meta: model params     = 2.51 B
0.00.283.601 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.602 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.603 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.603 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.603 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.604 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.604 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.605 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.605 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.606 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.606 I llm_load_print_meta: max token length = 93
0.00.377.044 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.382.291 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.298 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.298 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.299 I llama_new_context_with_model: n_batch       = 2048
0.00.382.299 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.299 I llama_new_context_with_model: flash_attn    = 0
0.00.382.302 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.303 I llama_new_context_with_model: freq_scale    = 1
0.00.382.304 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.397.126 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.397.142 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.233 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.492 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.497 I llama_new_context_with_model: graph nodes  = 601
0.00.398.498 I llama_new_context_with_model: graph splits = 1
0.00.398.500 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.404 I main: llama threadpool init, n_threads = 4
0.00.480.420 I 
0.00.480.496 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.480.500 I 
0.00.480.542 I sampler seed: 2767670083
0.00.480.553 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.560 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.563 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.563 I 
 increasities and inconsistencies between the theoretical and empirical findings. [end of text]


0.01.294.101 I llama_perf_sampler_print:    sampling time =       1.84 ms /    13 runs   (    0.14 ms per token,  7072.91 tokens per second)
0.01.294.103 I llama_perf_context_print:        load time =     479.65 ms
0.01.294.105 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.294.107 I llama_perf_context_print:        eval time =     805.46 ms /    12 runs   (   67.12 ms per token,    14.90 tokens per second)
0.01.294.108 I llama_perf_context_print:       total time =     813.70 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.557 I build: 4126 (d3481e63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.261 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.270 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.278 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.283 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.284 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.288 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.289 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.290 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.290 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.290 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.291 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.296 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.296 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.297 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.297 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.298 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.869 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.847 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.701 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.708 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.708 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.710 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.710 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.711 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.712 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.714 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.715 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.716 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.717 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.718 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.721 I llama_model_loader: - type  f32:   37 tensors
0.00.131.722 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.656 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.209 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.811 I llm_load_vocab: special tokens cache size = 5
0.00.271.468 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.483 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.483 I llm_load_print_meta: arch             = gemma
0.00.271.484 I llm_load_print_meta: vocab type       = SPM
0.00.271.484 I llm_load_print_meta: n_vocab          = 256000
0.00.271.485 I llm_load_print_meta: n_merges         = 0
0.00.271.485 I llm_load_print_meta: vocab_only       = 0
0.00.271.485 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.485 I llm_load_print_meta: n_embd           = 2048
0.00.271.486 I llm_load_print_meta: n_layer          = 18
0.00.271.497 I llm_load_print_meta: n_head           = 8
0.00.271.498 I llm_load_print_meta: n_head_kv        = 1
0.00.271.498 I llm_load_print_meta: n_rot            = 256
0.00.271.498 I llm_load_print_meta: n_swa            = 0
0.00.271.499 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.499 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.500 I llm_load_print_meta: n_gqa            = 8
0.00.271.501 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.501 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.502 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.504 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.504 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.505 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.505 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.506 I llm_load_print_meta: n_ff             = 16384
0.00.271.506 I llm_load_print_meta: n_expert         = 0
0.00.271.506 I llm_load_print_meta: n_expert_used    = 0
0.00.271.507 I llm_load_print_meta: causal attn      = 1
0.00.271.507 I llm_load_print_meta: pooling type     = 0
0.00.271.507 I llm_load_print_meta: rope type        = 2
0.00.271.508 I llm_load_print_meta: rope scaling     = linear
0.00.271.510 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.511 I llm_load_print_meta: freq_scale_train = 1
0.00.271.511 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.511 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.511 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.512 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.512 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.512 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.512 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.513 I llm_load_print_meta: model type       = 2B
0.00.271.513 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.514 I llm_load_print_meta: model params     = 2.51 B
0.00.271.515 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.515 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.516 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.516 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.516 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.517 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.517 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.518 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.518 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.518 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.519 I llm_load_print_meta: max token length = 93
0.00.345.547 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.555 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.556 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.557 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.557 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.558 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.870 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.876 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.876 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.877 I llama_new_context_with_model: n_batch       = 2048
0.00.350.877 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.878 I llama_new_context_with_model: flash_attn    = 0
0.00.350.880 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.880 I llama_new_context_with_model: freq_scale    = 1
0.00.350.881 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.350 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.364 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.454 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.694 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.701 I llama_new_context_with_model: graph nodes  = 601
0.00.366.701 I llama_new_context_with_model: graph splits = 1
0.00.366.703 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.379 I main: llama threadpool init, n_threads = 4
0.00.451.391 I 
0.00.451.472 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.451.475 I 
0.00.451.519 I sampler seed: 726151619
0.00.451.530 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.534 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.535 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.535 I 
 increasities, the essence of a thing.

I think I have found the essence of the concept.

**Concept:** The essence of a thing is the

0.02.717.455 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6738.82 tokens per second)
0.02.717.458 I llama_perf_context_print:        load time =     450.59 ms
0.02.717.459 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.717.461 I llama_perf_context_print:        eval time =    2246.61 ms /    32 runs   (   70.21 ms per token,    14.24 tokens per second)
0.02.717.461 I llama_perf_context_print:       total time =    2266.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.545 I build: 4126 (d3481e63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.020.622 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.631 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.638 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.644 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.645 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.649 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.650 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.651 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.652 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.652 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.653 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.657 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.658 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.659 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.659 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.660 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.238 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.178 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.973 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.979 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.980 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.981 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.982 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.983 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.984 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.988 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.988 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.989 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.990 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.991 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.995 I llama_model_loader: - type  f32:   37 tensors
0.00.129.997 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.590 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.224 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.896 I llm_load_vocab: special tokens cache size = 5
0.00.268.594 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.613 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.613 I llm_load_print_meta: arch             = gemma
0.00.268.614 I llm_load_print_meta: vocab type       = SPM
0.00.268.615 I llm_load_print_meta: n_vocab          = 256000
0.00.268.616 I llm_load_print_meta: n_merges         = 0
0.00.268.616 I llm_load_print_meta: vocab_only       = 0
0.00.268.616 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.617 I llm_load_print_meta: n_embd           = 2048
0.00.268.617 I llm_load_print_meta: n_layer          = 18
0.00.268.629 I llm_load_print_meta: n_head           = 8
0.00.268.630 I llm_load_print_meta: n_head_kv        = 1
0.00.268.630 I llm_load_print_meta: n_rot            = 256
0.00.268.631 I llm_load_print_meta: n_swa            = 0
0.00.268.631 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.631 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.632 I llm_load_print_meta: n_gqa            = 8
0.00.268.633 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.634 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.635 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.636 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.638 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.638 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.638 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.639 I llm_load_print_meta: n_ff             = 16384
0.00.268.639 I llm_load_print_meta: n_expert         = 0
0.00.268.641 I llm_load_print_meta: n_expert_used    = 0
0.00.268.641 I llm_load_print_meta: causal attn      = 1
0.00.268.642 I llm_load_print_meta: pooling type     = 0
0.00.268.642 I llm_load_print_meta: rope type        = 2
0.00.268.642 I llm_load_print_meta: rope scaling     = linear
0.00.268.644 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.644 I llm_load_print_meta: freq_scale_train = 1
0.00.268.646 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.646 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.647 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.647 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.647 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.648 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.648 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.649 I llm_load_print_meta: model type       = 2B
0.00.268.650 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.651 I llm_load_print_meta: model params     = 2.51 B
0.00.268.651 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.652 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.653 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.653 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.654 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.654 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.655 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.655 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.655 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.656 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.656 I llm_load_print_meta: max token length = 93
0.00.339.878 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.885 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.876 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.883 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.883 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.884 I llama_new_context_with_model: n_batch       = 2048
0.00.344.884 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.885 I llama_new_context_with_model: flash_attn    = 0
0.00.344.887 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.888 I llama_new_context_with_model: freq_scale    = 1
0.00.344.889 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.985 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.997 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.465 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.471 I llama_new_context_with_model: graph nodes  = 601
0.00.360.472 I llama_new_context_with_model: graph splits = 1
0.00.360.473 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.164 I main: llama threadpool init, n_threads = 4
0.00.449.177 I 
0.00.449.248 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.251 I 
0.00.449.292 I sampler seed: 2311134541
0.00.449.302 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.305 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.305 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.306 I 
 increasities. [end of text]


0.00.752.445 I llama_perf_sampler_print:    sampling time =       0.62 ms /     5 runs   (    0.12 ms per token,  8090.61 tokens per second)
0.00.752.447 I llama_perf_context_print:        load time =     448.40 ms
0.00.752.448 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.752.450 I llama_perf_context_print:        eval time =     299.87 ms /     4 runs   (   74.97 ms per token,    13.34 tokens per second)
0.00.752.451 I llama_perf_context_print:       total time =     303.29 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.076s
user	0m25.462s
sys	0m9.303s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4126 (d3481e63)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40336.34 ms
main:    total time = 40336.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.589 I build: 4126 (d3481e63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.797 I main: llama backend init
0.00.000.804 I main: load the model and apply lora adapter, if any
0.00.021.259 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.271 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.280 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.287 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.291 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.292 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.293 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.294 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.295 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.296 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.301 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.301 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.302 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.302 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.302 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.212 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.029 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.036 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.037 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.038 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.039 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.040 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.042 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.043 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.044 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.044 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.045 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.049 I llama_model_loader: - type  f32:   37 tensors
0.00.131.050 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.051 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.449 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.386 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.924 I llm_load_vocab: special tokens cache size = 5
0.00.266.825 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.841 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.841 I llm_load_print_meta: arch             = gemma
0.00.266.842 I llm_load_print_meta: vocab type       = SPM
0.00.266.843 I llm_load_print_meta: n_vocab          = 256000
0.00.266.843 I llm_load_print_meta: n_merges         = 0
0.00.266.843 I llm_load_print_meta: vocab_only       = 0
0.00.266.844 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.844 I llm_load_print_meta: n_embd           = 2048
0.00.266.845 I llm_load_print_meta: n_layer          = 18
0.00.266.856 I llm_load_print_meta: n_head           = 8
0.00.266.857 I llm_load_print_meta: n_head_kv        = 1
0.00.266.858 I llm_load_print_meta: n_rot            = 256
0.00.266.858 I llm_load_print_meta: n_swa            = 0
0.00.266.858 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.859 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.860 I llm_load_print_meta: n_gqa            = 8
0.00.266.861 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.862 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.863 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.864 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.864 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.865 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.865 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.866 I llm_load_print_meta: n_ff             = 16384
0.00.266.866 I llm_load_print_meta: n_expert         = 0
0.00.266.866 I llm_load_print_meta: n_expert_used    = 0
0.00.266.867 I llm_load_print_meta: causal attn      = 1
0.00.266.867 I llm_load_print_meta: pooling type     = 0
0.00.266.867 I llm_load_print_meta: rope type        = 2
0.00.266.868 I llm_load_print_meta: rope scaling     = linear
0.00.266.869 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.870 I llm_load_print_meta: freq_scale_train = 1
0.00.266.870 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.871 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.871 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.871 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.871 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.871 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.872 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.872 I llm_load_print_meta: model type       = 2B
0.00.266.873 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.874 I llm_load_print_meta: model params     = 2.51 B
0.00.266.874 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.875 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.875 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.875 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.876 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.876 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.876 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.877 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.877 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.878 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.878 I llm_load_print_meta: max token length = 93
0.00.326.805 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.812 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.813 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.814 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.814 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.815 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.332.051 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.057 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.057 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.057 I llama_new_context_with_model: n_batch       = 2048
0.00.332.058 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.059 I llama_new_context_with_model: flash_attn    = 0
0.00.332.061 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.062 I llama_new_context_with_model: freq_scale    = 1
0.00.332.063 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.233 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.250 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.340 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.633 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.638 I llama_new_context_with_model: graph nodes  = 601
0.00.347.639 I llama_new_context_with_model: graph splits = 1
0.00.347.640 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.697 I main: llama threadpool init, n_threads = 4
0.00.422.711 I 
0.00.422.785 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.422.788 I 
0.00.422.830 I sampler seed: 2429459084
0.00.422.841 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.844 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.845 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.846 I 
 seconally to the main text.

**The Importance of Honesty and Integrity**

Honesty and integrity are fundamental principles that guide individuals and organizations alike. They

0.02.056.650 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6740.20 tokens per second)
0.02.056.652 I llama_perf_context_print:        load time =     421.87 ms
0.02.056.654 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.056.656 I llama_perf_context_print:        eval time =    1614.48 ms /    32 runs   (   50.45 ms per token,    19.82 tokens per second)
0.02.056.656 I llama_perf_context_print:       total time =    1633.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4126 (d3481e63)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40178.07 ms
main:    total time = 40178.07 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.545 I build: 4126 (d3481e63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.741 I main: load the model and apply lora adapter, if any
0.00.021.282 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.297 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.304 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.305 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.310 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.310 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.311 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.313 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.313 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.314 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.318 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.318 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.319 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.319 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.321 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.033 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.852 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.677 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.684 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.685 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.686 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.686 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.688 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.689 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.691 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.692 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.696 I llama_model_loader: - type  f32:   37 tensors
0.00.131.697 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.697 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.304 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.671 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.312 I llm_load_vocab: special tokens cache size = 5
0.00.272.082 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.101 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.101 I llm_load_print_meta: arch             = gemma
0.00.272.102 I llm_load_print_meta: vocab type       = SPM
0.00.272.103 I llm_load_print_meta: n_vocab          = 256000
0.00.272.123 I llm_load_print_meta: n_merges         = 0
0.00.272.124 I llm_load_print_meta: vocab_only       = 0
0.00.272.124 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.125 I llm_load_print_meta: n_embd           = 2048
0.00.272.125 I llm_load_print_meta: n_layer          = 18
0.00.272.138 I llm_load_print_meta: n_head           = 8
0.00.272.139 I llm_load_print_meta: n_head_kv        = 1
0.00.272.139 I llm_load_print_meta: n_rot            = 256
0.00.272.139 I llm_load_print_meta: n_swa            = 0
0.00.272.140 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.140 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.141 I llm_load_print_meta: n_gqa            = 8
0.00.272.142 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.144 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.145 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.150 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.151 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.151 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.152 I llm_load_print_meta: n_ff             = 16384
0.00.272.152 I llm_load_print_meta: n_expert         = 0
0.00.272.152 I llm_load_print_meta: n_expert_used    = 0
0.00.272.153 I llm_load_print_meta: causal attn      = 1
0.00.272.153 I llm_load_print_meta: pooling type     = 0
0.00.272.153 I llm_load_print_meta: rope type        = 2
0.00.272.154 I llm_load_print_meta: rope scaling     = linear
0.00.272.156 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.157 I llm_load_print_meta: freq_scale_train = 1
0.00.272.157 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.158 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.159 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.159 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.159 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.160 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.160 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.161 I llm_load_print_meta: model type       = 2B
0.00.272.161 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.162 I llm_load_print_meta: model params     = 2.51 B
0.00.272.163 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.163 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.165 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.165 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.165 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.166 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.167 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.167 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.168 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.169 I llm_load_print_meta: max token length = 93
0.00.327.399 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.332.534 I llama_new_context_with_model: n_seq_max     = 1
0.00.332.542 I llama_new_context_with_model: n_ctx         = 4096
0.00.332.543 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.332.543 I llama_new_context_with_model: n_batch       = 2048
0.00.332.543 I llama_new_context_with_model: n_ubatch      = 512
0.00.332.544 I llama_new_context_with_model: flash_attn    = 0
0.00.332.547 I llama_new_context_with_model: freq_base     = 10000.0
0.00.332.548 I llama_new_context_with_model: freq_scale    = 1
0.00.332.549 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.347.171 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.347.184 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.347.275 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.348.551 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.348.558 I llama_new_context_with_model: graph nodes  = 601
0.00.348.558 I llama_new_context_with_model: graph splits = 1
0.00.348.560 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.423.166 I main: llama threadpool init, n_threads = 4
0.00.423.181 I 
0.00.423.258 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.423.261 I 
0.00.423.304 I sampler seed: 2499464653
0.00.423.315 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.423.318 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.423.319 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.423.320 I 
 encompassing all the emotions and experiences a person might have in life.

**Answer:** Emotions [end of text]


0.01.409.568 I llama_perf_sampler_print:    sampling time =       3.07 ms /    21 runs   (    0.15 ms per token,  6844.85 tokens per second)
0.01.409.571 I llama_perf_context_print:        load time =     422.41 ms
0.01.409.573 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.409.574 I llama_perf_context_print:        eval time =     974.26 ms /    20 runs   (   48.71 ms per token,    20.53 tokens per second)
0.01.409.575 I llama_perf_context_print:       total time =     986.41 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.769s
user	10m21.964s
sys	0m6.877s
