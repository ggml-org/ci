+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.533 I build: 4177 (811872a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.021.600 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.609 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.616 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.621 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.622 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.626 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.629 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.629 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.630 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.630 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.631 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.634 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.635 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.636 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.636 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.636 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.269 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.361 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.192 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.198 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.199 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.200 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.200 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.201 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.202 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.204 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.205 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.206 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.206 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.207 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.210 I llama_model_loader: - type  f32:   37 tensors
0.00.132.210 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.586 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.665 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.309 I llm_load_vocab: special tokens cache size = 5
0.00.264.571 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.586 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.586 I llm_load_print_meta: arch             = gemma
0.00.264.587 I llm_load_print_meta: vocab type       = SPM
0.00.264.587 I llm_load_print_meta: n_vocab          = 256000
0.00.264.588 I llm_load_print_meta: n_merges         = 0
0.00.264.588 I llm_load_print_meta: vocab_only       = 0
0.00.264.589 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.589 I llm_load_print_meta: n_embd           = 2048
0.00.264.590 I llm_load_print_meta: n_layer          = 18
0.00.264.600 I llm_load_print_meta: n_head           = 8
0.00.264.601 I llm_load_print_meta: n_head_kv        = 1
0.00.264.601 I llm_load_print_meta: n_rot            = 256
0.00.264.602 I llm_load_print_meta: n_swa            = 0
0.00.264.602 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.603 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.604 I llm_load_print_meta: n_gqa            = 8
0.00.264.605 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.606 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.607 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.608 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.608 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.609 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.609 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.610 I llm_load_print_meta: n_ff             = 16384
0.00.264.610 I llm_load_print_meta: n_expert         = 0
0.00.264.611 I llm_load_print_meta: n_expert_used    = 0
0.00.264.611 I llm_load_print_meta: causal attn      = 1
0.00.264.611 I llm_load_print_meta: pooling type     = 0
0.00.264.611 I llm_load_print_meta: rope type        = 2
0.00.264.612 I llm_load_print_meta: rope scaling     = linear
0.00.264.614 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.614 I llm_load_print_meta: freq_scale_train = 1
0.00.264.615 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.615 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.615 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.616 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.616 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.616 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.617 I llm_load_print_meta: model type       = 2B
0.00.264.617 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.619 I llm_load_print_meta: model params     = 2.51 B
0.00.264.620 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.620 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.620 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.621 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.622 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.622 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.623 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.623 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.624 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.624 I llm_load_print_meta: max token length = 93
0.00.365.169 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.178 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.178 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.179 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.180 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.180 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.561 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.568 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.568 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.568 I llama_new_context_with_model: n_batch       = 2048
0.00.370.569 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.569 I llama_new_context_with_model: flash_attn    = 0
0.00.370.572 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.573 I llama_new_context_with_model: freq_scale    = 1
0.00.370.574 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.699 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.713 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.810 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.168 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.173 I llama_new_context_with_model: graph nodes  = 601
0.00.387.173 I llama_new_context_with_model: graph splits = 1
0.00.387.175 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.747 I main: llama threadpool init, n_threads = 4
0.00.474.763 I 
0.00.474.835 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.839 I 
0.00.474.881 I sampler seed: 63457901
0.00.474.892 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.900 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.903 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.903 I 
 increasities that have been circulating online for several years. 

**What is the purpose of these narratives?**

The purpose of these narratives is shrouded in

0.02.708.521 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6727.83 tokens per second)
0.02.708.524 I llama_perf_context_print:        load time =     473.99 ms
0.02.708.526 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.528 I llama_perf_context_print:        eval time =    2215.33 ms /    32 runs   (   69.23 ms per token,    14.44 tokens per second)
0.02.708.528 I llama_perf_context_print:       total time =    2233.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.534 I build: 4177 (811872a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.020.708 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.721 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.732 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.735 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.736 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.737 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.738 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.738 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.738 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.743 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.744 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.744 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.745 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.745 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.954 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.024 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.892 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.899 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.899 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.900 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.900 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.901 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.902 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.904 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.905 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.906 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.907 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.908 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.912 I llama_model_loader: - type  f32:   37 tensors
0.00.131.913 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.309 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.884 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.386 I llm_load_vocab: special tokens cache size = 5
0.00.261.195 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.210 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.211 I llm_load_print_meta: arch             = gemma
0.00.261.211 I llm_load_print_meta: vocab type       = SPM
0.00.261.212 I llm_load_print_meta: n_vocab          = 256000
0.00.261.212 I llm_load_print_meta: n_merges         = 0
0.00.261.213 I llm_load_print_meta: vocab_only       = 0
0.00.261.213 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.214 I llm_load_print_meta: n_embd           = 2048
0.00.261.214 I llm_load_print_meta: n_layer          = 18
0.00.261.225 I llm_load_print_meta: n_head           = 8
0.00.261.226 I llm_load_print_meta: n_head_kv        = 1
0.00.261.226 I llm_load_print_meta: n_rot            = 256
0.00.261.227 I llm_load_print_meta: n_swa            = 0
0.00.261.227 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.227 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.228 I llm_load_print_meta: n_gqa            = 8
0.00.261.229 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.230 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.231 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.232 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.233 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.233 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.233 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.234 I llm_load_print_meta: n_ff             = 16384
0.00.261.234 I llm_load_print_meta: n_expert         = 0
0.00.261.235 I llm_load_print_meta: n_expert_used    = 0
0.00.261.235 I llm_load_print_meta: causal attn      = 1
0.00.261.235 I llm_load_print_meta: pooling type     = 0
0.00.261.235 I llm_load_print_meta: rope type        = 2
0.00.261.236 I llm_load_print_meta: rope scaling     = linear
0.00.261.237 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.238 I llm_load_print_meta: freq_scale_train = 1
0.00.261.238 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.239 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.239 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.239 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.239 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.240 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.240 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.240 I llm_load_print_meta: model type       = 2B
0.00.261.241 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.242 I llm_load_print_meta: model params     = 2.51 B
0.00.261.242 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.243 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.243 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.244 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.244 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.244 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.245 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.245 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.246 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.246 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.247 I llm_load_print_meta: max token length = 93
0.00.356.312 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.445 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.452 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.452 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.453 I llama_new_context_with_model: n_batch       = 2048
0.00.361.453 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.454 I llama_new_context_with_model: flash_attn    = 0
0.00.361.456 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.457 I llama_new_context_with_model: freq_scale    = 1
0.00.361.458 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.063 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.078 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.162 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.421 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.427 I llama_new_context_with_model: graph nodes  = 601
0.00.377.427 I llama_new_context_with_model: graph splits = 1
0.00.377.429 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.760 I main: llama threadpool init, n_threads = 4
0.00.458.775 I 
0.00.458.845 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.848 I 
0.00.458.889 I sampler seed: 1128768027
0.00.458.899 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.902 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.903 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.903 I 
 increasities. [end of text]


0.00.733.512 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8305.65 tokens per second)
0.00.733.514 I llama_perf_context_print:        load time =     458.00 ms
0.00.733.515 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.733.517 I llama_perf_context_print:        eval time =     271.29 ms /     4 runs   (   67.82 ms per token,    14.74 tokens per second)
0.00.733.517 I llama_perf_context_print:       total time =     274.76 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.169 I build: 4177 (811872a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.373 I main: llama backend init
0.00.000.379 I main: load the model and apply lora adapter, if any
0.00.020.881 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.892 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.899 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.904 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.905 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.909 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.911 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.912 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.913 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.914 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.915 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.921 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.921 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.922 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.923 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.924 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.779 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.692 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.622 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.629 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.630 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.630 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.631 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.632 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.633 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.635 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.636 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.637 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.637 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.638 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.641 I llama_model_loader: - type  f32:   37 tensors
0.00.131.642 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.745 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.225 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.795 I llm_load_vocab: special tokens cache size = 5
0.00.267.829 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.849 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.850 I llm_load_print_meta: arch             = gemma
0.00.267.851 I llm_load_print_meta: vocab type       = SPM
0.00.267.851 I llm_load_print_meta: n_vocab          = 256000
0.00.267.852 I llm_load_print_meta: n_merges         = 0
0.00.267.852 I llm_load_print_meta: vocab_only       = 0
0.00.267.853 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.853 I llm_load_print_meta: n_embd           = 2048
0.00.267.853 I llm_load_print_meta: n_layer          = 18
0.00.267.864 I llm_load_print_meta: n_head           = 8
0.00.267.865 I llm_load_print_meta: n_head_kv        = 1
0.00.267.865 I llm_load_print_meta: n_rot            = 256
0.00.267.866 I llm_load_print_meta: n_swa            = 0
0.00.267.866 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.867 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.867 I llm_load_print_meta: n_gqa            = 8
0.00.267.868 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.869 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.870 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.871 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.872 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.872 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.873 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.873 I llm_load_print_meta: n_ff             = 16384
0.00.267.874 I llm_load_print_meta: n_expert         = 0
0.00.267.874 I llm_load_print_meta: n_expert_used    = 0
0.00.267.874 I llm_load_print_meta: causal attn      = 1
0.00.267.874 I llm_load_print_meta: pooling type     = 0
0.00.267.875 I llm_load_print_meta: rope type        = 2
0.00.267.875 I llm_load_print_meta: rope scaling     = linear
0.00.267.877 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.877 I llm_load_print_meta: freq_scale_train = 1
0.00.267.878 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.878 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.878 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.879 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.879 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.879 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.879 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.880 I llm_load_print_meta: model type       = 2B
0.00.267.880 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.881 I llm_load_print_meta: model params     = 2.51 B
0.00.267.882 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.883 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.884 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.884 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.884 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.885 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.885 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.885 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.886 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.886 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.886 I llm_load_print_meta: max token length = 93
0.00.341.791 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.341.798 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.799 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.341.800 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.341.800 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.341.801 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.346.958 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.966 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.966 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.967 I llama_new_context_with_model: n_batch       = 2048
0.00.346.967 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.968 I llama_new_context_with_model: flash_attn    = 0
0.00.346.970 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.971 I llama_new_context_with_model: freq_scale    = 1
0.00.346.972 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.168 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.184 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.273 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.510 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.517 I llama_new_context_with_model: graph nodes  = 601
0.00.363.518 I llama_new_context_with_model: graph splits = 1
0.00.363.520 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.895 I main: llama threadpool init, n_threads = 4
0.00.447.910 I 
0.00.447.997 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.000 I 
0.00.448.051 I sampler seed: 2065054587
0.00.448.062 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.072 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.076 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.076 I 
 increamental to a new level of complexity and introduce a new variable, z, which is related to both x and y.

$$z = x^2

0.02.722.080 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6899.44 tokens per second)
0.02.722.083 I llama_perf_context_print:        load time =     447.50 ms
0.02.722.084 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.722.086 I llama_perf_context_print:        eval time =    2254.58 ms /    32 runs   (   70.46 ms per token,    14.19 tokens per second)
0.02.722.087 I llama_perf_context_print:       total time =    2274.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.576 I build: 4177 (811872a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.779 I main: llama backend init
0.00.000.786 I main: load the model and apply lora adapter, if any
0.00.021.063 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.072 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.080 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.084 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.086 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.091 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.091 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.092 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.092 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.093 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.093 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.098 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.099 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.099 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.100 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.101 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.245 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.703 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.619 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.628 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.629 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.630 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.630 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.632 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.633 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.636 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.637 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.638 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.639 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.641 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.645 I llama_model_loader: - type  f32:   37 tensors
0.00.132.646 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.120 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.504 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.094 I llm_load_vocab: special tokens cache size = 5
0.00.276.251 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.269 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.270 I llm_load_print_meta: arch             = gemma
0.00.276.270 I llm_load_print_meta: vocab type       = SPM
0.00.276.271 I llm_load_print_meta: n_vocab          = 256000
0.00.276.271 I llm_load_print_meta: n_merges         = 0
0.00.276.271 I llm_load_print_meta: vocab_only       = 0
0.00.276.272 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.272 I llm_load_print_meta: n_embd           = 2048
0.00.276.272 I llm_load_print_meta: n_layer          = 18
0.00.276.283 I llm_load_print_meta: n_head           = 8
0.00.276.284 I llm_load_print_meta: n_head_kv        = 1
0.00.276.284 I llm_load_print_meta: n_rot            = 256
0.00.276.284 I llm_load_print_meta: n_swa            = 0
0.00.276.285 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.285 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.286 I llm_load_print_meta: n_gqa            = 8
0.00.276.287 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.288 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.289 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.290 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.291 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.291 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.291 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.292 I llm_load_print_meta: n_ff             = 16384
0.00.276.293 I llm_load_print_meta: n_expert         = 0
0.00.276.293 I llm_load_print_meta: n_expert_used    = 0
0.00.276.293 I llm_load_print_meta: causal attn      = 1
0.00.276.293 I llm_load_print_meta: pooling type     = 0
0.00.276.294 I llm_load_print_meta: rope type        = 2
0.00.276.294 I llm_load_print_meta: rope scaling     = linear
0.00.276.296 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.296 I llm_load_print_meta: freq_scale_train = 1
0.00.276.297 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.297 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.297 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.298 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.298 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.298 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.298 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.299 I llm_load_print_meta: model type       = 2B
0.00.276.299 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.300 I llm_load_print_meta: model params     = 2.51 B
0.00.276.301 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.301 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.302 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.302 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.303 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.303 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.303 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.304 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.304 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.305 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.305 I llm_load_print_meta: max token length = 93
0.00.348.485 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.348.491 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.353.497 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.503 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.504 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.504 I llama_new_context_with_model: n_batch       = 2048
0.00.353.505 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.505 I llama_new_context_with_model: flash_attn    = 0
0.00.353.508 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.508 I llama_new_context_with_model: freq_scale    = 1
0.00.353.509 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.798 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.813 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.904 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.187 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.193 I llama_new_context_with_model: graph nodes  = 601
0.00.369.194 I llama_new_context_with_model: graph splits = 1
0.00.369.196 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.266 I main: llama threadpool init, n_threads = 4
0.00.457.281 I 
0.00.457.354 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.457.357 I 
0.00.457.399 I sampler seed: 3187552034
0.00.457.411 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.457.423 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.457.426 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.457.427 I 
 increably.

I understand the importance of privacy and security, and I am committed to protecting your personal information. I have implemented a variety of security measures to

0.02.882.641 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6672.06 tokens per second)
0.02.882.644 I llama_perf_context_print:        load time =     456.46 ms
0.02.882.646 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.882.648 I llama_perf_context_print:        eval time =    2405.56 ms /    32 runs   (   75.17 ms per token,    13.30 tokens per second)
0.02.882.648 I llama_perf_context_print:       total time =    2425.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.510s
user	0m31.668s
sys	0m9.318s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4177 (811872a5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40314.91 ms
main:    total time = 40314.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.177 I build: 4177 (811872a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.362 I main: llama backend init
0.00.000.369 I main: load the model and apply lora adapter, if any
0.00.020.667 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.679 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.688 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.693 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.694 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.698 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.699 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.700 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.700 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.701 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.702 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.707 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.708 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.708 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.709 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.709 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.937 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.399 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.233 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.239 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.240 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.241 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.242 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.242 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.243 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.246 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.247 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.247 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.248 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.249 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.253 I llama_model_loader: - type  f32:   37 tensors
0.00.132.254 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.255 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.008 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.062 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.662 I llm_load_vocab: special tokens cache size = 5
0.00.266.016 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.035 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.035 I llm_load_print_meta: arch             = gemma
0.00.266.036 I llm_load_print_meta: vocab type       = SPM
0.00.266.037 I llm_load_print_meta: n_vocab          = 256000
0.00.266.037 I llm_load_print_meta: n_merges         = 0
0.00.266.038 I llm_load_print_meta: vocab_only       = 0
0.00.266.038 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.039 I llm_load_print_meta: n_embd           = 2048
0.00.266.039 I llm_load_print_meta: n_layer          = 18
0.00.266.050 I llm_load_print_meta: n_head           = 8
0.00.266.051 I llm_load_print_meta: n_head_kv        = 1
0.00.266.052 I llm_load_print_meta: n_rot            = 256
0.00.266.052 I llm_load_print_meta: n_swa            = 0
0.00.266.053 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.053 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.054 I llm_load_print_meta: n_gqa            = 8
0.00.266.055 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.056 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.057 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.059 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.060 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.060 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.060 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.061 I llm_load_print_meta: n_ff             = 16384
0.00.266.061 I llm_load_print_meta: n_expert         = 0
0.00.266.061 I llm_load_print_meta: n_expert_used    = 0
0.00.266.062 I llm_load_print_meta: causal attn      = 1
0.00.266.062 I llm_load_print_meta: pooling type     = 0
0.00.266.062 I llm_load_print_meta: rope type        = 2
0.00.266.063 I llm_load_print_meta: rope scaling     = linear
0.00.266.064 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.065 I llm_load_print_meta: freq_scale_train = 1
0.00.266.065 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.065 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.065 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.066 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.066 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.066 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.066 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.067 I llm_load_print_meta: model type       = 2B
0.00.266.067 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.266.068 I llm_load_print_meta: model params     = 2.51 B
0.00.266.069 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.266.069 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.070 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.070 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.070 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.071 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.071 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.071 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.072 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.072 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.072 I llm_load_print_meta: max token length = 93
0.00.326.238 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.326.245 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.326.246 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.326.246 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.326.247 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.326.247 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.331.444 I llama_new_context_with_model: n_seq_max     = 1
0.00.331.450 I llama_new_context_with_model: n_ctx         = 4096
0.00.331.450 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.331.450 I llama_new_context_with_model: n_batch       = 2048
0.00.331.451 I llama_new_context_with_model: n_ubatch      = 512
0.00.331.452 I llama_new_context_with_model: flash_attn    = 0
0.00.331.454 I llama_new_context_with_model: freq_base     = 10000.0
0.00.331.455 I llama_new_context_with_model: freq_scale    = 1
0.00.331.456 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.345 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.361 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.453 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.742 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.748 I llama_new_context_with_model: graph nodes  = 601
0.00.347.748 I llama_new_context_with_model: graph splits = 1
0.00.347.750 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.216 I main: llama threadpool init, n_threads = 4
0.00.422.232 I 
0.00.422.304 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.422.307 I 
0.00.422.355 I sampler seed: 1834888319
0.00.422.367 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.371 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.422.372 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.422.373 I 
 increamically.

I'm not sure if I should keep this up or stop.

The decision of whether or not to continue this practice is a complex

0.01.984.796 I llama_perf_sampler_print:    sampling time =       5.28 ms /    33 runs   (    0.16 ms per token,  6255.92 tokens per second)
0.01.984.799 I llama_perf_context_print:        load time =     421.83 ms
0.01.984.800 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.984.803 I llama_perf_context_print:        eval time =    1543.33 ms /    32 runs   (   48.23 ms per token,    20.73 tokens per second)
0.01.984.804 I llama_perf_context_print:       total time =    1562.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4177 (811872a5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40182.73 ms
main:    total time = 40182.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.551 I build: 4177 (811872a5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.788 I main: llama backend init
0.00.000.796 I main: load the model and apply lora adapter, if any
0.00.021.278 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.294 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.300 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.301 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.305 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.305 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.306 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.306 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.307 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.307 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.311 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.311 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.312 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.312 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.313 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.355 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.297 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.235 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.242 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.243 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.244 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.244 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.245 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.246 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.253 I llama_model_loader: - type  f32:   37 tensors
0.00.132.253 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.254 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.032 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.869 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.405 I llm_load_vocab: special tokens cache size = 5
0.00.281.766 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.781 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.782 I llm_load_print_meta: arch             = gemma
0.00.281.783 I llm_load_print_meta: vocab type       = SPM
0.00.281.783 I llm_load_print_meta: n_vocab          = 256000
0.00.281.784 I llm_load_print_meta: n_merges         = 0
0.00.281.784 I llm_load_print_meta: vocab_only       = 0
0.00.281.784 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.785 I llm_load_print_meta: n_embd           = 2048
0.00.281.785 I llm_load_print_meta: n_layer          = 18
0.00.281.796 I llm_load_print_meta: n_head           = 8
0.00.281.797 I llm_load_print_meta: n_head_kv        = 1
0.00.281.797 I llm_load_print_meta: n_rot            = 256
0.00.281.797 I llm_load_print_meta: n_swa            = 0
0.00.281.797 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.798 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.799 I llm_load_print_meta: n_gqa            = 8
0.00.281.800 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.801 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.802 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.804 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.804 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.804 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.805 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.805 I llm_load_print_meta: n_ff             = 16384
0.00.281.806 I llm_load_print_meta: n_expert         = 0
0.00.281.806 I llm_load_print_meta: n_expert_used    = 0
0.00.281.806 I llm_load_print_meta: causal attn      = 1
0.00.281.807 I llm_load_print_meta: pooling type     = 0
0.00.281.807 I llm_load_print_meta: rope type        = 2
0.00.281.807 I llm_load_print_meta: rope scaling     = linear
0.00.281.808 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.809 I llm_load_print_meta: freq_scale_train = 1
0.00.281.809 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.810 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.810 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.810 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.811 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.811 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.811 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.812 I llm_load_print_meta: model type       = 2B
0.00.281.812 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.813 I llm_load_print_meta: model params     = 2.51 B
0.00.281.814 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.814 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.814 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.815 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.815 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.815 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.816 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.816 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.817 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.817 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.817 I llm_load_print_meta: max token length = 93
0.00.337.836 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.343.071 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.078 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.078 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.079 I llama_new_context_with_model: n_batch       = 2048
0.00.343.079 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.080 I llama_new_context_with_model: flash_attn    = 0
0.00.343.082 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.083 I llama_new_context_with_model: freq_scale    = 1
0.00.343.084 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.893 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.905 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.993 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.210 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.216 I llama_new_context_with_model: graph nodes  = 601
0.00.359.217 I llama_new_context_with_model: graph splits = 1
0.00.359.219 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.203 I main: llama threadpool init, n_threads = 4
0.00.434.220 I 
0.00.434.294 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.434.297 I 
0.00.434.342 I sampler seed: 3325000679
0.00.434.353 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.361 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.364 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.364 I 
 maneuvously.

I'm not sure what you're trying to say. Please rephrase your question. [end of text]


0.01.644.726 I llama_perf_sampler_print:    sampling time =       3.82 ms /    26 runs   (    0.15 ms per token,  6808.06 tokens per second)
0.01.644.728 I llama_perf_context_print:        load time =     433.38 ms
0.01.644.729 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.644.731 I llama_perf_context_print:        eval time =    1196.12 ms /    25 runs   (   47.84 ms per token,    20.90 tokens per second)
0.01.644.732 I llama_perf_context_print:       total time =    1210.53 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.903s
user	10m22.476s
sys	0m6.902s
