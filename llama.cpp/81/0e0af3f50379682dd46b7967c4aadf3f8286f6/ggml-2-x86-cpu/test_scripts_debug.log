+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.703 I build: 4912 (810e0af3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.909 I main: llama backend init
0.00.000.917 I main: load the model and apply lora adapter, if any
0.00.086.184 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.086.200 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.086.303 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.323 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.325 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.331 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.333 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.335 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.337 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.339 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.340 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.347 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.349 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.350 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.352 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.354 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.295.872 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.397.663 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.420.675 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.420.690 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.420.691 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.420.693 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.420.695 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.420.697 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.420.699 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.420.704 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.420.706 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.420.708 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.420.710 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.420.712 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.420.722 I llama_model_loader: - type  f32:   37 tensors
0.00.420.723 I llama_model_loader: - type q8_0:  127 tensors
0.00.420.741 I print_info: file format = GGUF V3 (latest)
0.00.420.742 I print_info: file type   = Q8_0
0.00.420.744 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.709.868 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.838.039 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.839.071 I load: special tokens cache size = 5
0.01.094.756 I load: token to piece cache size = 1.6014 MB
0.01.094.846 I print_info: arch             = gemma
0.01.094.848 I print_info: vocab_only       = 0
0.01.094.848 I print_info: n_ctx_train      = 8192
0.01.094.849 I print_info: n_embd           = 2048
0.01.094.849 I print_info: n_layer          = 18
0.01.094.930 I print_info: n_head           = 8
0.01.094.937 I print_info: n_head_kv        = 1
0.01.094.937 I print_info: n_rot            = 256
0.01.094.938 I print_info: n_swa            = 0
0.01.094.938 I print_info: n_swa_pattern    = 1
0.01.094.938 I print_info: n_embd_head_k    = 256
0.01.094.939 I print_info: n_embd_head_v    = 256
0.01.094.945 I print_info: n_gqa            = 8
0.01.094.950 I print_info: n_embd_k_gqa     = 256
0.01.094.956 I print_info: n_embd_v_gqa     = 256
0.01.094.957 I print_info: f_norm_eps       = 0.0e+00
0.01.094.958 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.094.959 I print_info: f_clamp_kqv      = 0.0e+00
0.01.094.959 I print_info: f_max_alibi_bias = 0.0e+00
0.01.094.960 I print_info: f_logit_scale    = 0.0e+00
0.01.094.960 I print_info: f_attn_scale     = 0.0e+00
0.01.094.965 I print_info: n_ff             = 16384
0.01.094.966 I print_info: n_expert         = 0
0.01.094.966 I print_info: n_expert_used    = 0
0.01.094.966 I print_info: causal attn      = 1
0.01.094.966 I print_info: pooling type     = 0
0.01.094.967 I print_info: rope type        = 2
0.01.094.967 I print_info: rope scaling     = linear
0.01.094.969 I print_info: freq_base_train  = 10000.0
0.01.094.970 I print_info: freq_scale_train = 1
0.01.094.971 I print_info: n_ctx_orig_yarn  = 8192
0.01.094.972 I print_info: rope_finetuned   = unknown
0.01.094.972 I print_info: ssm_d_conv       = 0
0.01.094.972 I print_info: ssm_d_inner      = 0
0.01.094.973 I print_info: ssm_d_state      = 0
0.01.094.973 I print_info: ssm_dt_rank      = 0
0.01.094.974 I print_info: ssm_dt_b_c_rms   = 0
0.01.094.976 I print_info: model type       = 2B
0.01.094.977 I print_info: model params     = 2.51 B
0.01.094.977 I print_info: general.name     = gemma-1.1-2b-it
0.01.094.982 I print_info: vocab type       = SPM
0.01.094.984 I print_info: n_vocab          = 256000
0.01.094.986 I print_info: n_merges         = 0
0.01.094.987 I print_info: BOS token        = 2 '<bos>'
0.01.094.988 I print_info: EOS token        = 1 '<eos>'
0.01.094.988 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.094.989 I print_info: UNK token        = 3 '<unk>'
0.01.094.989 I print_info: PAD token        = 0 '<pad>'
0.01.094.990 I print_info: LF token         = 227 '<0x0A>'
0.01.094.997 I print_info: EOG token        = 1 '<eos>'
0.01.094.999 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.095.000 I print_info: max token length = 93
0.01.095.001 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.196.262 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.196.274 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.196.275 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.196.276 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.196.276 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.196.277 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.203.111 I llama_context: constructing llama_context
0.01.203.121 I llama_context: n_seq_max     = 1
0.01.203.122 I llama_context: n_ctx         = 4096
0.01.203.122 I llama_context: n_ctx_per_seq = 4096
0.01.203.123 I llama_context: n_batch       = 2048
0.01.203.123 I llama_context: n_ubatch      = 512
0.01.203.124 I llama_context: causal_attn   = 1
0.01.203.124 I llama_context: flash_attn    = 0
0.01.203.128 I llama_context: freq_base     = 10000.0
0.01.203.129 I llama_context: freq_scale    = 1
0.01.203.129 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.203.380 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.203.428 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.219.410 I init:        CPU KV buffer size =    72.00 MiB
0.01.219.453 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.229.176 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.229.182 I llama_context: graph nodes  = 601
0.01.229.183 I llama_context: graph splits = 1
0.01.229.197 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.229.197 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.862.504 I main: llama threadpool init, n_threads = 4
0.01.862.520 I 
0.01.862.616 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.862.616 I 
0.01.862.868 I sampler seed: 1572319579
0.01.862.883 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.862.892 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.862.893 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.862.909 I 
 seconally after the first sentence.

"The rising tide is washing away the last remnants of civilization, leaving behind a barren wasteland where once stood majestic cities and

0.15.311.984 I llama_perf_sampler_print:    sampling time =      50.04 ms /    33 runs   (    1.52 ms per token,   659.42 tokens per second)
0.15.311.989 I llama_perf_context_print:        load time =    1834.83 ms
0.15.312.005 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.312.007 I llama_perf_context_print:        eval time =   13363.34 ms /    32 runs   (  417.60 ms per token,     2.39 tokens per second)
0.15.312.008 I llama_perf_context_print:       total time =   13476.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.655 I build: 4912 (810e0af3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.874 I main: load the model and apply lora adapter, if any
0.00.086.128 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.235 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.260 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.286 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.290 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.292 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.293 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.295 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.297 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.305 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.307 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.309 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.310 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.312 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.316.090 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.417.766 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.440.871 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.440.890 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.440.892 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.440.894 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.440.896 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.440.898 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.440.900 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.440.905 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.440.907 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.440.909 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.440.912 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.440.913 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.440.923 I llama_model_loader: - type  f32:   37 tensors
0.00.440.926 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.945 I print_info: file format = GGUF V3 (latest)
0.00.440.945 I print_info: file type   = Q8_0
0.00.440.949 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.724.909 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.855.050 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.856.174 I load: special tokens cache size = 5
0.01.104.974 I load: token to piece cache size = 1.6014 MB
0.01.105.064 I print_info: arch             = gemma
0.01.105.066 I print_info: vocab_only       = 0
0.01.105.066 I print_info: n_ctx_train      = 8192
0.01.105.066 I print_info: n_embd           = 2048
0.01.105.067 I print_info: n_layer          = 18
0.01.105.144 I print_info: n_head           = 8
0.01.105.151 I print_info: n_head_kv        = 1
0.01.105.152 I print_info: n_rot            = 256
0.01.105.152 I print_info: n_swa            = 0
0.01.105.153 I print_info: n_swa_pattern    = 1
0.01.105.153 I print_info: n_embd_head_k    = 256
0.01.105.153 I print_info: n_embd_head_v    = 256
0.01.105.158 I print_info: n_gqa            = 8
0.01.105.163 I print_info: n_embd_k_gqa     = 256
0.01.105.168 I print_info: n_embd_v_gqa     = 256
0.01.105.169 I print_info: f_norm_eps       = 0.0e+00
0.01.105.170 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.105.172 I print_info: f_clamp_kqv      = 0.0e+00
0.01.105.172 I print_info: f_max_alibi_bias = 0.0e+00
0.01.105.172 I print_info: f_logit_scale    = 0.0e+00
0.01.105.173 I print_info: f_attn_scale     = 0.0e+00
0.01.105.177 I print_info: n_ff             = 16384
0.01.105.178 I print_info: n_expert         = 0
0.01.105.178 I print_info: n_expert_used    = 0
0.01.105.179 I print_info: causal attn      = 1
0.01.105.179 I print_info: pooling type     = 0
0.01.105.179 I print_info: rope type        = 2
0.01.105.180 I print_info: rope scaling     = linear
0.01.105.182 I print_info: freq_base_train  = 10000.0
0.01.105.182 I print_info: freq_scale_train = 1
0.01.105.184 I print_info: n_ctx_orig_yarn  = 8192
0.01.105.184 I print_info: rope_finetuned   = unknown
0.01.105.185 I print_info: ssm_d_conv       = 0
0.01.105.185 I print_info: ssm_d_inner      = 0
0.01.105.186 I print_info: ssm_d_state      = 0
0.01.105.186 I print_info: ssm_dt_rank      = 0
0.01.105.187 I print_info: ssm_dt_b_c_rms   = 0
0.01.105.188 I print_info: model type       = 2B
0.01.105.190 I print_info: model params     = 2.51 B
0.01.105.191 I print_info: general.name     = gemma-1.1-2b-it
0.01.105.196 I print_info: vocab type       = SPM
0.01.105.198 I print_info: n_vocab          = 256000
0.01.105.224 I print_info: n_merges         = 0
0.01.105.226 I print_info: BOS token        = 2 '<bos>'
0.01.105.227 I print_info: EOS token        = 1 '<eos>'
0.01.105.228 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.105.233 I print_info: UNK token        = 3 '<unk>'
0.01.105.234 I print_info: PAD token        = 0 '<pad>'
0.01.105.235 I print_info: LF token         = 227 '<0x0A>'
0.01.105.243 I print_info: EOG token        = 1 '<eos>'
0.01.105.246 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.105.247 I print_info: max token length = 93
0.01.105.250 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.191.264 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.198.197 I llama_context: constructing llama_context
0.01.198.205 I llama_context: n_seq_max     = 1
0.01.198.206 I llama_context: n_ctx         = 4096
0.01.198.206 I llama_context: n_ctx_per_seq = 4096
0.01.198.206 I llama_context: n_batch       = 2048
0.01.198.207 I llama_context: n_ubatch      = 512
0.01.198.207 I llama_context: causal_attn   = 1
0.01.198.208 I llama_context: flash_attn    = 0
0.01.198.210 I llama_context: freq_base     = 10000.0
0.01.198.211 I llama_context: freq_scale    = 1
0.01.198.221 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.198.446 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.198.492 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.213.529 I init:        CPU KV buffer size =    72.00 MiB
0.01.213.577 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.222.422 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.222.429 I llama_context: graph nodes  = 601
0.01.222.429 I llama_context: graph splits = 1
0.01.222.442 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.222.442 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.908.517 I main: llama threadpool init, n_threads = 4
0.01.908.534 I 
0.01.908.630 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.908.634 I 
0.01.908.898 I sampler seed: 2891577386
0.01.908.912 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.908.922 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.908.923 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.908.923 I 
 increasities. [end of text]


0.03.618.582 I llama_perf_sampler_print:    sampling time =       6.38 ms /     5 runs   (    1.28 ms per token,   784.19 tokens per second)
0.03.618.587 I llama_perf_context_print:        load time =    1880.81 ms
0.03.618.588 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.618.616 I llama_perf_context_print:        eval time =    1697.33 ms /     4 runs   (  424.33 ms per token,     2.36 tokens per second)
0.03.618.617 I llama_perf_context_print:       total time =    1736.78 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.683 I build: 4912 (810e0af3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.930 I main: llama backend init
0.00.000.939 I main: load the model and apply lora adapter, if any
0.00.086.319 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.086.336 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.433 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.454 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.456 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.462 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.464 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.466 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.470 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.473 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.476 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.485 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.488 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.491 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.495 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.498 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.305.180 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.423.972 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.447.116 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.447.133 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.447.135 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.447.136 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.447.138 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.447.140 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.447.142 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.447.147 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.447.148 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.447.151 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.447.153 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.447.154 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.447.163 I llama_model_loader: - type  f32:   37 tensors
0.00.447.165 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.184 I print_info: file format = GGUF V3 (latest)
0.00.447.185 I print_info: file type   = Q8_0
0.00.447.188 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.735.618 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.864.920 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.866.012 I load: special tokens cache size = 5
0.01.121.647 I load: token to piece cache size = 1.6014 MB
0.01.121.735 I print_info: arch             = gemma
0.01.121.739 I print_info: vocab_only       = 0
0.01.121.740 I print_info: n_ctx_train      = 8192
0.01.121.741 I print_info: n_embd           = 2048
0.01.121.741 I print_info: n_layer          = 18
0.01.121.829 I print_info: n_head           = 8
0.01.121.839 I print_info: n_head_kv        = 1
0.01.121.840 I print_info: n_rot            = 256
0.01.121.841 I print_info: n_swa            = 0
0.01.121.841 I print_info: n_swa_pattern    = 1
0.01.121.842 I print_info: n_embd_head_k    = 256
0.01.121.842 I print_info: n_embd_head_v    = 256
0.01.121.849 I print_info: n_gqa            = 8
0.01.121.857 I print_info: n_embd_k_gqa     = 256
0.01.121.871 I print_info: n_embd_v_gqa     = 256
0.01.121.876 I print_info: f_norm_eps       = 0.0e+00
0.01.121.878 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.121.878 I print_info: f_clamp_kqv      = 0.0e+00
0.01.121.879 I print_info: f_max_alibi_bias = 0.0e+00
0.01.121.880 I print_info: f_logit_scale    = 0.0e+00
0.01.121.881 I print_info: f_attn_scale     = 0.0e+00
0.01.121.890 I print_info: n_ff             = 16384
0.01.121.891 I print_info: n_expert         = 0
0.01.121.892 I print_info: n_expert_used    = 0
0.01.121.892 I print_info: causal attn      = 1
0.01.121.893 I print_info: pooling type     = 0
0.01.121.897 I print_info: rope type        = 2
0.01.121.897 I print_info: rope scaling     = linear
0.01.121.899 I print_info: freq_base_train  = 10000.0
0.01.121.900 I print_info: freq_scale_train = 1
0.01.121.901 I print_info: n_ctx_orig_yarn  = 8192
0.01.121.902 I print_info: rope_finetuned   = unknown
0.01.121.902 I print_info: ssm_d_conv       = 0
0.01.121.903 I print_info: ssm_d_inner      = 0
0.01.121.904 I print_info: ssm_d_state      = 0
0.01.121.905 I print_info: ssm_dt_rank      = 0
0.01.121.906 I print_info: ssm_dt_b_c_rms   = 0
0.01.121.922 I print_info: model type       = 2B
0.01.121.925 I print_info: model params     = 2.51 B
0.01.121.926 I print_info: general.name     = gemma-1.1-2b-it
0.01.121.932 I print_info: vocab type       = SPM
0.01.121.948 I print_info: n_vocab          = 256000
0.01.121.952 I print_info: n_merges         = 0
0.01.121.953 I print_info: BOS token        = 2 '<bos>'
0.01.121.954 I print_info: EOS token        = 1 '<eos>'
0.01.121.956 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.121.956 I print_info: UNK token        = 3 '<unk>'
0.01.121.958 I print_info: PAD token        = 0 '<pad>'
0.01.121.959 I print_info: LF token         = 227 '<0x0A>'
0.01.121.967 I print_info: EOG token        = 1 '<eos>'
0.01.121.970 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.121.971 I print_info: max token length = 93
0.01.121.974 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.197.037 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.197.049 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.197.050 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.197.051 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.197.052 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.197.052 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.204.275 I llama_context: constructing llama_context
0.01.204.285 I llama_context: n_seq_max     = 1
0.01.204.285 I llama_context: n_ctx         = 4096
0.01.204.286 I llama_context: n_ctx_per_seq = 4096
0.01.204.286 I llama_context: n_batch       = 2048
0.01.204.286 I llama_context: n_ubatch      = 512
0.01.204.287 I llama_context: causal_attn   = 1
0.01.204.287 I llama_context: flash_attn    = 0
0.01.204.290 I llama_context: freq_base     = 10000.0
0.01.204.300 I llama_context: freq_scale    = 1
0.01.204.301 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.204.535 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.204.582 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.220.075 I init:        CPU KV buffer size =    72.00 MiB
0.01.220.120 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.230.086 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.230.092 I llama_context: graph nodes  = 601
0.01.230.093 I llama_context: graph splits = 1
0.01.230.104 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.230.105 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.864.603 I main: llama threadpool init, n_threads = 4
0.01.864.620 I 
0.01.864.716 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.864.722 I 
0.01.864.991 I sampler seed: 1448862010
0.01.865.009 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.865.022 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.865.029 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.865.029 I 
 increasities. 
I cannot find any examples of this, so I am unable to provide an answer. [end of text]


0.11.560.736 I llama_perf_sampler_print:    sampling time =      35.70 ms /    24 runs   (    1.49 ms per token,   672.36 tokens per second)
0.11.560.742 I llama_perf_context_print:        load time =    1836.98 ms
0.11.560.754 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.560.756 I llama_perf_context_print:        eval time =    9633.15 ms /    23 runs   (  418.83 ms per token,     2.39 tokens per second)
0.11.560.757 I llama_perf_context_print:       total time =    9722.68 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.713 I build: 4912 (810e0af3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.975 I main: llama backend init
0.00.000.983 I main: load the model and apply lora adapter, if any
0.00.087.221 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.087.239 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.087.341 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.365 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.370 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.377 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.379 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.381 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.383 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.385 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.387 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.394 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.399 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.400 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.402 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.087.403 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.304.200 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.406.450 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.429.531 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.429.548 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.429.550 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.429.552 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.429.553 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.429.556 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.429.558 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.429.562 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.429.564 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.429.567 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.429.569 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.429.571 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.429.580 I llama_model_loader: - type  f32:   37 tensors
0.00.429.582 I llama_model_loader: - type q8_0:  127 tensors
0.00.429.601 I print_info: file format = GGUF V3 (latest)
0.00.429.602 I print_info: file type   = Q8_0
0.00.429.605 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.730.428 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.861.329 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.862.351 I load: special tokens cache size = 5
0.01.111.189 I load: token to piece cache size = 1.6014 MB
0.01.111.276 I print_info: arch             = gemma
0.01.111.277 I print_info: vocab_only       = 0
0.01.111.278 I print_info: n_ctx_train      = 8192
0.01.111.278 I print_info: n_embd           = 2048
0.01.111.278 I print_info: n_layer          = 18
0.01.111.361 I print_info: n_head           = 8
0.01.111.368 I print_info: n_head_kv        = 1
0.01.111.368 I print_info: n_rot            = 256
0.01.111.369 I print_info: n_swa            = 0
0.01.111.370 I print_info: n_swa_pattern    = 1
0.01.111.370 I print_info: n_embd_head_k    = 256
0.01.111.376 I print_info: n_embd_head_v    = 256
0.01.111.381 I print_info: n_gqa            = 8
0.01.111.386 I print_info: n_embd_k_gqa     = 256
0.01.111.391 I print_info: n_embd_v_gqa     = 256
0.01.111.392 I print_info: f_norm_eps       = 0.0e+00
0.01.111.394 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.111.395 I print_info: f_clamp_kqv      = 0.0e+00
0.01.111.395 I print_info: f_max_alibi_bias = 0.0e+00
0.01.111.396 I print_info: f_logit_scale    = 0.0e+00
0.01.111.397 I print_info: f_attn_scale     = 0.0e+00
0.01.111.402 I print_info: n_ff             = 16384
0.01.111.403 I print_info: n_expert         = 0
0.01.111.404 I print_info: n_expert_used    = 0
0.01.111.404 I print_info: causal attn      = 1
0.01.111.404 I print_info: pooling type     = 0
0.01.111.405 I print_info: rope type        = 2
0.01.111.406 I print_info: rope scaling     = linear
0.01.111.407 I print_info: freq_base_train  = 10000.0
0.01.111.408 I print_info: freq_scale_train = 1
0.01.111.420 I print_info: n_ctx_orig_yarn  = 8192
0.01.111.438 I print_info: rope_finetuned   = unknown
0.01.111.439 I print_info: ssm_d_conv       = 0
0.01.111.440 I print_info: ssm_d_inner      = 0
0.01.111.440 I print_info: ssm_d_state      = 0
0.01.111.440 I print_info: ssm_dt_rank      = 0
0.01.111.441 I print_info: ssm_dt_b_c_rms   = 0
0.01.111.442 I print_info: model type       = 2B
0.01.111.443 I print_info: model params     = 2.51 B
0.01.111.443 I print_info: general.name     = gemma-1.1-2b-it
0.01.111.448 I print_info: vocab type       = SPM
0.01.111.449 I print_info: n_vocab          = 256000
0.01.111.452 I print_info: n_merges         = 0
0.01.111.453 I print_info: BOS token        = 2 '<bos>'
0.01.111.454 I print_info: EOS token        = 1 '<eos>'
0.01.111.454 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.111.457 I print_info: UNK token        = 3 '<unk>'
0.01.111.458 I print_info: PAD token        = 0 '<pad>'
0.01.111.458 I print_info: LF token         = 227 '<0x0A>'
0.01.111.465 I print_info: EOG token        = 1 '<eos>'
0.01.111.467 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.111.467 I print_info: max token length = 93
0.01.111.470 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.185.554 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.185.566 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.192.565 I llama_context: constructing llama_context
0.01.192.573 I llama_context: n_seq_max     = 1
0.01.192.573 I llama_context: n_ctx         = 4096
0.01.192.574 I llama_context: n_ctx_per_seq = 4096
0.01.192.574 I llama_context: n_batch       = 2048
0.01.192.575 I llama_context: n_ubatch      = 512
0.01.192.575 I llama_context: causal_attn   = 1
0.01.192.576 I llama_context: flash_attn    = 0
0.01.192.578 I llama_context: freq_base     = 10000.0
0.01.192.579 I llama_context: freq_scale    = 1
0.01.192.588 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.192.802 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.192.846 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.208.138 I init:        CPU KV buffer size =    72.00 MiB
0.01.208.182 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.217.294 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.217.300 I llama_context: graph nodes  = 601
0.01.217.300 I llama_context: graph splits = 1
0.01.217.313 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.217.314 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.850.971 I main: llama threadpool init, n_threads = 4
0.01.850.991 I 
0.01.851.089 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.851.093 I 
0.01.851.332 I sampler seed: 3002274456
0.01.851.345 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.851.357 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.851.360 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.851.360 I 
 increasities.

This is a hilarious parody of a famous song lyric.

I cannot answer this question as it is sexually suggestive and inappropriate. [end of text]


0.14.578.780 I llama_perf_sampler_print:    sampling time =      46.80 ms /    31 runs   (    1.51 ms per token,   662.41 tokens per second)
0.14.578.785 I llama_perf_context_print:        load time =    1823.19 ms
0.14.578.786 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.578.800 I llama_perf_context_print:        eval time =   12644.60 ms /    30 runs   (  421.49 ms per token,     2.37 tokens per second)
0.14.578.801 I llama_perf_context_print:       total time =   12754.49 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.348s
user	2m46.810s
sys	0m9.529s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4912 (810e0af3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 188376.68 ms
main:    total time = 188376.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.690 I build: 4912 (810e0af3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.000.907 I main: load the model and apply lora adapter, if any
0.00.085.856 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.870 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.974 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.999 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.004 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.010 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.012 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.014 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.016 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.017 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.019 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.027 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.028 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.030 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.032 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.293.900 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.395.391 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.418.496 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.418.514 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.418.516 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.418.518 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.418.520 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.418.522 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.524 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.529 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.531 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.418.533 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.418.535 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.418.537 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.418.539 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.418.548 I llama_model_loader: - type  f32:   37 tensors
0.00.418.550 I llama_model_loader: - type q4_K:  108 tensors
0.00.418.551 I llama_model_loader: - type q6_K:   19 tensors
0.00.418.570 I print_info: file format = GGUF V3 (latest)
0.00.418.571 I print_info: file type   = Q4_K - Medium
0.00.418.575 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.711.973 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.839.935 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.840.963 I load: special tokens cache size = 5
0.01.088.859 I load: token to piece cache size = 1.6014 MB
0.01.088.947 I print_info: arch             = gemma
0.01.088.948 I print_info: vocab_only       = 0
0.01.088.949 I print_info: n_ctx_train      = 8192
0.01.088.949 I print_info: n_embd           = 2048
0.01.088.950 I print_info: n_layer          = 18
0.01.089.029 I print_info: n_head           = 8
0.01.089.036 I print_info: n_head_kv        = 1
0.01.089.037 I print_info: n_rot            = 256
0.01.089.037 I print_info: n_swa            = 0
0.01.089.037 I print_info: n_swa_pattern    = 1
0.01.089.038 I print_info: n_embd_head_k    = 256
0.01.089.038 I print_info: n_embd_head_v    = 256
0.01.089.043 I print_info: n_gqa            = 8
0.01.089.048 I print_info: n_embd_k_gqa     = 256
0.01.089.053 I print_info: n_embd_v_gqa     = 256
0.01.089.054 I print_info: f_norm_eps       = 0.0e+00
0.01.089.055 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.089.056 I print_info: f_clamp_kqv      = 0.0e+00
0.01.089.056 I print_info: f_max_alibi_bias = 0.0e+00
0.01.089.057 I print_info: f_logit_scale    = 0.0e+00
0.01.089.057 I print_info: f_attn_scale     = 0.0e+00
0.01.089.062 I print_info: n_ff             = 16384
0.01.089.062 I print_info: n_expert         = 0
0.01.089.063 I print_info: n_expert_used    = 0
0.01.089.063 I print_info: causal attn      = 1
0.01.089.063 I print_info: pooling type     = 0
0.01.089.064 I print_info: rope type        = 2
0.01.089.064 I print_info: rope scaling     = linear
0.01.089.066 I print_info: freq_base_train  = 10000.0
0.01.089.067 I print_info: freq_scale_train = 1
0.01.089.067 I print_info: n_ctx_orig_yarn  = 8192
0.01.089.068 I print_info: rope_finetuned   = unknown
0.01.089.069 I print_info: ssm_d_conv       = 0
0.01.089.069 I print_info: ssm_d_inner      = 0
0.01.089.070 I print_info: ssm_d_state      = 0
0.01.089.070 I print_info: ssm_dt_rank      = 0
0.01.089.070 I print_info: ssm_dt_b_c_rms   = 0
0.01.089.072 I print_info: model type       = 2B
0.01.089.072 I print_info: model params     = 2.51 B
0.01.089.073 I print_info: general.name     = gemma-1.1-2b-it
0.01.089.077 I print_info: vocab type       = SPM
0.01.089.078 I print_info: n_vocab          = 256000
0.01.089.081 I print_info: n_merges         = 0
0.01.089.082 I print_info: BOS token        = 2 '<bos>'
0.01.089.082 I print_info: EOS token        = 1 '<eos>'
0.01.089.083 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.089.083 I print_info: UNK token        = 3 '<unk>'
0.01.089.084 I print_info: PAD token        = 0 '<pad>'
0.01.089.084 I print_info: LF token         = 227 '<0x0A>'
0.01.089.108 I print_info: EOG token        = 1 '<eos>'
0.01.089.111 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.089.111 I print_info: max token length = 93
0.01.089.113 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.147.668 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.147.680 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.147.681 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.147.682 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.147.682 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.147.683 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.154.502 I llama_context: constructing llama_context
0.01.154.512 I llama_context: n_seq_max     = 1
0.01.154.512 I llama_context: n_ctx         = 4096
0.01.154.513 I llama_context: n_ctx_per_seq = 4096
0.01.154.513 I llama_context: n_batch       = 2048
0.01.154.514 I llama_context: n_ubatch      = 512
0.01.154.514 I llama_context: causal_attn   = 1
0.01.154.515 I llama_context: flash_attn    = 0
0.01.154.519 I llama_context: freq_base     = 10000.0
0.01.154.519 I llama_context: freq_scale    = 1
0.01.154.520 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.154.744 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.154.791 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.170.654 I init:        CPU KV buffer size =    72.00 MiB
0.01.170.700 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.180.880 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.180.886 I llama_context: graph nodes  = 601
0.01.180.886 I llama_context: graph splits = 1
0.01.180.900 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.180.900 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.787.489 I main: llama threadpool init, n_threads = 4
0.01.787.506 I 
0.01.787.605 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.787.609 I 
0.01.787.852 I sampler seed: 3473323827
0.01.787.865 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.787.877 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.787.878 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.787.879 I 
 maneuvled.

**Answer:** I am unable to provide an answer to this question as it contains inappropriate content. [end of text]


0.10.348.153 I llama_perf_sampler_print:    sampling time =      38.86 ms /    26 runs   (    1.49 ms per token,   669.12 tokens per second)
0.10.348.157 I llama_perf_context_print:        load time =    1759.79 ms
0.10.348.159 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.348.160 I llama_perf_context_print:        eval time =    8493.22 ms /    25 runs   (  339.73 ms per token,     2.94 tokens per second)
0.10.348.162 I llama_perf_context_print:       total time =    8587.33 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4912 (810e0af3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187129.69 ms
main:    total time = 187129.69 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.652 I build: 4912 (810e0af3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.000.873 I main: load the model and apply lora adapter, if any
0.00.084.799 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.084.924 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.084.948 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.084.950 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.084.956 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.084.958 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.084.960 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.084.961 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.084.963 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.084.987 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.084.998 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.000 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.002 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.004 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.299.955 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.401.452 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.424.537 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.424.551 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.424.553 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.424.554 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.424.556 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.424.558 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.424.560 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.424.565 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.424.567 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.424.569 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.424.577 I llama_model_loader: - type  f32:   37 tensors
0.00.424.580 I llama_model_loader: - type q4_K:  108 tensors
0.00.424.581 I llama_model_loader: - type q6_K:   19 tensors
0.00.424.600 I print_info: file format = GGUF V3 (latest)
0.00.424.600 I print_info: file type   = Q4_K - Medium
0.00.424.602 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.708.838 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.839.469 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.840.572 I load: special tokens cache size = 5
0.01.092.444 I load: token to piece cache size = 1.6014 MB
0.01.092.535 I print_info: arch             = gemma
0.01.092.536 I print_info: vocab_only       = 0
0.01.092.537 I print_info: n_ctx_train      = 8192
0.01.092.537 I print_info: n_embd           = 2048
0.01.092.538 I print_info: n_layer          = 18
0.01.092.618 I print_info: n_head           = 8
0.01.092.625 I print_info: n_head_kv        = 1
0.01.092.625 I print_info: n_rot            = 256
0.01.092.626 I print_info: n_swa            = 0
0.01.092.627 I print_info: n_swa_pattern    = 1
0.01.092.627 I print_info: n_embd_head_k    = 256
0.01.092.627 I print_info: n_embd_head_v    = 256
0.01.092.633 I print_info: n_gqa            = 8
0.01.092.638 I print_info: n_embd_k_gqa     = 256
0.01.092.644 I print_info: n_embd_v_gqa     = 256
0.01.092.645 I print_info: f_norm_eps       = 0.0e+00
0.01.092.647 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.092.648 I print_info: f_clamp_kqv      = 0.0e+00
0.01.092.648 I print_info: f_max_alibi_bias = 0.0e+00
0.01.092.649 I print_info: f_logit_scale    = 0.0e+00
0.01.092.649 I print_info: f_attn_scale     = 0.0e+00
0.01.092.655 I print_info: n_ff             = 16384
0.01.092.656 I print_info: n_expert         = 0
0.01.092.670 I print_info: n_expert_used    = 0
0.01.092.671 I print_info: causal attn      = 1
0.01.092.672 I print_info: pooling type     = 0
0.01.092.672 I print_info: rope type        = 2
0.01.092.673 I print_info: rope scaling     = linear
0.01.092.675 I print_info: freq_base_train  = 10000.0
0.01.092.676 I print_info: freq_scale_train = 1
0.01.092.677 I print_info: n_ctx_orig_yarn  = 8192
0.01.092.677 I print_info: rope_finetuned   = unknown
0.01.092.678 I print_info: ssm_d_conv       = 0
0.01.092.679 I print_info: ssm_d_inner      = 0
0.01.092.679 I print_info: ssm_d_state      = 0
0.01.092.680 I print_info: ssm_dt_rank      = 0
0.01.092.692 I print_info: ssm_dt_b_c_rms   = 0
0.01.092.694 I print_info: model type       = 2B
0.01.092.695 I print_info: model params     = 2.51 B
0.01.092.695 I print_info: general.name     = gemma-1.1-2b-it
0.01.092.700 I print_info: vocab type       = SPM
0.01.092.701 I print_info: n_vocab          = 256000
0.01.092.704 I print_info: n_merges         = 0
0.01.092.705 I print_info: BOS token        = 2 '<bos>'
0.01.092.714 I print_info: EOS token        = 1 '<eos>'
0.01.092.717 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.092.718 I print_info: UNK token        = 3 '<unk>'
0.01.092.719 I print_info: PAD token        = 0 '<pad>'
0.01.092.719 I print_info: LF token         = 227 '<0x0A>'
0.01.092.726 I print_info: EOG token        = 1 '<eos>'
0.01.092.728 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.092.729 I print_info: max token length = 93
0.01.092.731 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.141.052 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.147.666 I llama_context: constructing llama_context
0.01.147.675 I llama_context: n_seq_max     = 1
0.01.147.675 I llama_context: n_ctx         = 4096
0.01.147.676 I llama_context: n_ctx_per_seq = 4096
0.01.147.676 I llama_context: n_batch       = 2048
0.01.147.676 I llama_context: n_ubatch      = 512
0.01.147.677 I llama_context: causal_attn   = 1
0.01.147.677 I llama_context: flash_attn    = 0
0.01.147.680 I llama_context: freq_base     = 10000.0
0.01.147.681 I llama_context: freq_scale    = 1
0.01.147.681 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.147.905 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.147.946 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.163.482 I init:        CPU KV buffer size =    72.00 MiB
0.01.163.540 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.172.251 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.172.257 I llama_context: graph nodes  = 601
0.01.172.257 I llama_context: graph splits = 1
0.01.172.270 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.172.271 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.777.265 I main: llama threadpool init, n_threads = 4
0.01.777.283 I 
0.01.777.381 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.777.385 I 
0.01.777.631 I sampler seed: 1747528050
0.01.777.644 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.777.653 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.777.657 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.777.657 I 
 encompating the functionalities and considerations of the design process.

**Design Process**

**Definition:**

The design process is a structured methodology used to create products

0.12.704.765 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.46 tokens per second)
0.12.704.771 I llama_perf_context_print:        load time =    1749.70 ms
0.12.704.772 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.704.774 I llama_perf_context_print:        eval time =   10841.53 ms /    32 runs   (  338.80 ms per token,     2.95 tokens per second)
0.12.704.775 I llama_perf_context_print:       total time =   10954.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.838s
user	46m54.912s
sys	0m6.485s
