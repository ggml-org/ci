+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.665 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
0.00.024.802 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.020 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.116 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.128 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.129 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.133 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.135 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.136 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.138 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.139 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.140 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.148 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.151 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.152 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.154 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.155 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.735 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.228 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.839 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.847 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.848 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.849 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.850 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.852 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.853 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.857 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.858 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.859 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.860 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.861 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.870 I llama_model_loader: - type  f32:   37 tensors
0.00.267.874 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.937 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.647 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.680 I llm_load_vocab: special tokens cache size = 5
0.00.610.103 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.172 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.176 I llm_load_print_meta: arch             = gemma
0.00.610.178 I llm_load_print_meta: vocab type       = SPM
0.00.610.178 I llm_load_print_meta: n_vocab          = 256000
0.00.610.180 I llm_load_print_meta: n_merges         = 0
0.00.610.181 I llm_load_print_meta: vocab_only       = 0
0.00.610.181 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.182 I llm_load_print_meta: n_embd           = 2048
0.00.610.182 I llm_load_print_meta: n_layer          = 18
0.00.610.246 I llm_load_print_meta: n_head           = 8
0.00.610.256 I llm_load_print_meta: n_head_kv        = 1
0.00.610.256 I llm_load_print_meta: n_rot            = 256
0.00.610.258 I llm_load_print_meta: n_swa            = 0
0.00.610.258 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.258 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.263 I llm_load_print_meta: n_gqa            = 8
0.00.610.268 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.273 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.277 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.279 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.279 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.280 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.280 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.286 I llm_load_print_meta: n_ff             = 16384
0.00.610.286 I llm_load_print_meta: n_expert         = 0
0.00.610.286 I llm_load_print_meta: n_expert_used    = 0
0.00.610.287 I llm_load_print_meta: causal attn      = 1
0.00.610.287 I llm_load_print_meta: pooling type     = 0
0.00.610.287 I llm_load_print_meta: rope type        = 2
0.00.610.288 I llm_load_print_meta: rope scaling     = linear
0.00.610.289 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.290 I llm_load_print_meta: freq_scale_train = 1
0.00.610.290 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.290 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.291 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.291 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.301 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.302 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.303 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.303 I llm_load_print_meta: model type       = 2B
0.00.610.305 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.306 I llm_load_print_meta: model params     = 2.51 B
0.00.610.307 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.308 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.309 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.311 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.312 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.312 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.313 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.313 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.321 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.323 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.323 I llm_load_print_meta: max token length = 93
0.00.610.508 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.721.544 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.721.552 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.721.553 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.721.553 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.721.554 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.721.555 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.727.295 I llama_new_context_with_model: n_ctx      = 8192
0.00.727.302 I llama_new_context_with_model: n_batch    = 2048
0.00.727.303 I llama_new_context_with_model: n_ubatch   = 512
0.00.727.303 I llama_new_context_with_model: flash_attn = 0
0.00.727.306 I llama_new_context_with_model: freq_base  = 10000.0
0.00.727.307 I llama_new_context_with_model: freq_scale = 1
0.00.756.602 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.756.647 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.756.758 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.758.127 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.758.132 I llama_new_context_with_model: graph nodes  = 601
0.00.758.132 I llama_new_context_with_model: graph splits = 1
0.00.758.148 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.371.431 I main: llama threadpool init, n_threads = 4
0.01.371.451 I 
0.01.371.570 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.371.575 I 
0.01.371.815 I sampler seed: 1011433552
0.01.371.829 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.836 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.371.839 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.840 I 
 increasities:

1. **The Big Sleep:** A period of collective amnesia or unconsciousness that swept through the American West in the 1890

0.14.805.292 I llama_perf_sampler_print:    sampling time =      48.41 ms /    33 runs   (    1.47 ms per token,   681.73 tokens per second)
0.14.805.310 I llama_perf_context_print:        load time =    1368.52 ms
0.14.805.312 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.805.314 I llama_perf_context_print:        eval time =   13339.85 ms /    32 runs   (  416.87 ms per token,     2.40 tokens per second)
0.14.805.314 I llama_perf_context_print:       total time =   13433.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.773 I main: load the model and apply lora adapter, if any
0.00.024.820 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.917 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.932 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.939 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.945 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.947 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.949 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.951 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.958 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.960 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.962 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.963 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.965 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.024 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.646 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.656 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.657 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.658 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.659 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.661 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.662 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.665 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.666 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.668 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.669 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.274.670 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.678 I llama_model_loader: - type  f32:   37 tensors
0.00.274.683 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.963 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.470 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.511 I llm_load_vocab: special tokens cache size = 5
0.00.616.665 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.735 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.735 I llm_load_print_meta: arch             = gemma
0.00.616.736 I llm_load_print_meta: vocab type       = SPM
0.00.616.737 I llm_load_print_meta: n_vocab          = 256000
0.00.616.739 I llm_load_print_meta: n_merges         = 0
0.00.616.739 I llm_load_print_meta: vocab_only       = 0
0.00.616.740 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.740 I llm_load_print_meta: n_embd           = 2048
0.00.616.740 I llm_load_print_meta: n_layer          = 18
0.00.616.802 I llm_load_print_meta: n_head           = 8
0.00.616.809 I llm_load_print_meta: n_head_kv        = 1
0.00.616.810 I llm_load_print_meta: n_rot            = 256
0.00.616.810 I llm_load_print_meta: n_swa            = 0
0.00.616.810 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.811 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.815 I llm_load_print_meta: n_gqa            = 8
0.00.616.820 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.824 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.826 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.828 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.828 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.829 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.829 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.834 I llm_load_print_meta: n_ff             = 16384
0.00.616.834 I llm_load_print_meta: n_expert         = 0
0.00.616.835 I llm_load_print_meta: n_expert_used    = 0
0.00.616.835 I llm_load_print_meta: causal attn      = 1
0.00.616.836 I llm_load_print_meta: pooling type     = 0
0.00.616.836 I llm_load_print_meta: rope type        = 2
0.00.616.836 I llm_load_print_meta: rope scaling     = linear
0.00.616.838 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.838 I llm_load_print_meta: freq_scale_train = 1
0.00.616.839 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.841 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.841 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.842 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.842 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.861 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.862 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.863 I llm_load_print_meta: model type       = 2B
0.00.616.865 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.866 I llm_load_print_meta: model params     = 2.51 B
0.00.616.867 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.872 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.872 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.873 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.873 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.882 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.883 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.884 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.891 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.892 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.896 I llm_load_print_meta: max token length = 93
0.00.617.072 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.718.538 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.724.366 I llama_new_context_with_model: n_ctx      = 8192
0.00.724.373 I llama_new_context_with_model: n_batch    = 2048
0.00.724.373 I llama_new_context_with_model: n_ubatch   = 512
0.00.724.374 I llama_new_context_with_model: flash_attn = 0
0.00.724.376 I llama_new_context_with_model: freq_base  = 10000.0
0.00.724.377 I llama_new_context_with_model: freq_scale = 1
0.00.754.098 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.754.146 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.754.257 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.755.653 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.755.658 I llama_new_context_with_model: graph nodes  = 601
0.00.755.659 I llama_new_context_with_model: graph splits = 1
0.00.755.674 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.016 I main: llama threadpool init, n_threads = 4
0.01.370.028 I 
0.01.370.149 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.370.155 I 
0.01.370.389 I sampler seed: 320781944
0.01.370.402 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.370.411 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.370.412 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.370.413 I 
 increasities that have plagued the United States throughout history.

The term "crescendo fallacy" is used to describe the phenomenon of a sudden escalation of conflict or

0.14.839.875 I llama_perf_sampler_print:    sampling time =      48.48 ms /    33 runs   (    1.47 ms per token,   680.74 tokens per second)
0.14.839.887 I llama_perf_context_print:        load time =    1367.15 ms
0.14.839.889 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.839.892 I llama_perf_context_print:        eval time =   13375.83 ms /    32 runs   (  417.99 ms per token,     2.39 tokens per second)
0.14.839.894 I llama_perf_context_print:       total time =   13469.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.811 I main: load the model and apply lora adapter, if any
0.00.025.037 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.251 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.340 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.350 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.354 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.358 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.360 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.362 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.363 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.364 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.365 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.371 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.372 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.380 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.383 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.384 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.134 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.124 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.814 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.824 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.825 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.826 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.827 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.828 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.829 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.840 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.841 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.843 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.844 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.845 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.854 I llama_model_loader: - type  f32:   37 tensors
0.00.268.859 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.899 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.864 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.763 I llm_load_vocab: special tokens cache size = 5
0.00.625.193 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.261 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.262 I llm_load_print_meta: arch             = gemma
0.00.625.263 I llm_load_print_meta: vocab type       = SPM
0.00.625.264 I llm_load_print_meta: n_vocab          = 256000
0.00.625.266 I llm_load_print_meta: n_merges         = 0
0.00.625.266 I llm_load_print_meta: vocab_only       = 0
0.00.625.266 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.267 I llm_load_print_meta: n_embd           = 2048
0.00.625.268 I llm_load_print_meta: n_layer          = 18
0.00.625.333 I llm_load_print_meta: n_head           = 8
0.00.625.340 I llm_load_print_meta: n_head_kv        = 1
0.00.625.340 I llm_load_print_meta: n_rot            = 256
0.00.625.340 I llm_load_print_meta: n_swa            = 0
0.00.625.342 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.342 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.347 I llm_load_print_meta: n_gqa            = 8
0.00.625.351 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.357 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.358 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.359 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.360 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.360 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.360 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.370 I llm_load_print_meta: n_ff             = 16384
0.00.625.370 I llm_load_print_meta: n_expert         = 0
0.00.625.370 I llm_load_print_meta: n_expert_used    = 0
0.00.625.371 I llm_load_print_meta: causal attn      = 1
0.00.625.372 I llm_load_print_meta: pooling type     = 0
0.00.625.372 I llm_load_print_meta: rope type        = 2
0.00.625.373 I llm_load_print_meta: rope scaling     = linear
0.00.625.375 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.376 I llm_load_print_meta: freq_scale_train = 1
0.00.625.377 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.377 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.380 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.381 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.381 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.381 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.382 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.382 I llm_load_print_meta: model type       = 2B
0.00.625.383 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.384 I llm_load_print_meta: model params     = 2.51 B
0.00.625.385 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.385 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.386 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.386 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.386 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.387 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.389 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.390 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.396 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.397 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.397 I llm_load_print_meta: max token length = 93
0.00.625.567 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.723.533 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.723.545 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.723.546 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.723.547 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.723.547 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.723.548 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.729.308 I llama_new_context_with_model: n_ctx      = 8192
0.00.729.315 I llama_new_context_with_model: n_batch    = 2048
0.00.729.316 I llama_new_context_with_model: n_ubatch   = 512
0.00.729.316 I llama_new_context_with_model: flash_attn = 0
0.00.729.319 I llama_new_context_with_model: freq_base  = 10000.0
0.00.729.321 I llama_new_context_with_model: freq_scale = 1
0.00.758.310 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.758.358 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.758.467 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.759.871 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.759.875 I llama_new_context_with_model: graph nodes  = 601
0.00.759.876 I llama_new_context_with_model: graph splits = 1
0.00.759.892 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.373.971 I main: llama threadpool init, n_threads = 4
0.01.373.983 I 
0.01.374.093 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.374.097 I 
0.01.374.330 I sampler seed: 1412585825
0.01.374.342 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.374.349 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.374.350 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.374.350 I 
 seconded and incomplete sentence:

The government needs to address the issue of _____.

**Options:**

A) inequality
B) corruption
C)

0.14.892.962 I llama_perf_sampler_print:    sampling time =      48.32 ms /    33 runs   (    1.46 ms per token,   682.98 tokens per second)
0.14.892.977 I llama_perf_context_print:        load time =    1371.07 ms
0.14.892.978 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.892.980 I llama_perf_context_print:        eval time =   13425.50 ms /    32 runs   (  419.55 ms per token,     2.38 tokens per second)
0.14.892.981 I llama_perf_context_print:       total time =   13519.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.643 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.027.808 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.028.014 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.028.097 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.028.107 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.028.109 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.028.112 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.028.113 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.028.115 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.028.116 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.028.116 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.028.117 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.028.123 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.028.125 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.028.128 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.028.129 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.028.130 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.214 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.441 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.448 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.449 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.450 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.451 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.453 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.454 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.457 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.459 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.460 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.461 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.462 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.470 I llama_model_loader: - type  f32:   37 tensors
0.00.269.474 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.816 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.296 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.231 I llm_load_vocab: special tokens cache size = 5
0.00.598.366 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.432 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.433 I llm_load_print_meta: arch             = gemma
0.00.598.434 I llm_load_print_meta: vocab type       = SPM
0.00.598.435 I llm_load_print_meta: n_vocab          = 256000
0.00.598.437 I llm_load_print_meta: n_merges         = 0
0.00.598.437 I llm_load_print_meta: vocab_only       = 0
0.00.598.438 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.438 I llm_load_print_meta: n_embd           = 2048
0.00.598.438 I llm_load_print_meta: n_layer          = 18
0.00.598.503 I llm_load_print_meta: n_head           = 8
0.00.598.509 I llm_load_print_meta: n_head_kv        = 1
0.00.598.511 I llm_load_print_meta: n_rot            = 256
0.00.598.511 I llm_load_print_meta: n_swa            = 0
0.00.598.512 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.512 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.517 I llm_load_print_meta: n_gqa            = 8
0.00.598.522 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.527 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.533 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.535 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.535 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.535 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.536 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.541 I llm_load_print_meta: n_ff             = 16384
0.00.598.541 I llm_load_print_meta: n_expert         = 0
0.00.598.545 I llm_load_print_meta: n_expert_used    = 0
0.00.598.545 I llm_load_print_meta: causal attn      = 1
0.00.598.545 I llm_load_print_meta: pooling type     = 0
0.00.598.546 I llm_load_print_meta: rope type        = 2
0.00.598.546 I llm_load_print_meta: rope scaling     = linear
0.00.598.547 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.548 I llm_load_print_meta: freq_scale_train = 1
0.00.598.548 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.549 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.549 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.549 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.550 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.550 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.550 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.551 I llm_load_print_meta: model type       = 2B
0.00.598.552 I llm_load_print_meta: model ftype      = Q8_0
0.00.598.552 I llm_load_print_meta: model params     = 2.51 B
0.00.598.553 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.598.553 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.554 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.554 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.555 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.555 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.555 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.557 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.563 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.564 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.586 I llm_load_print_meta: max token length = 93
0.00.598.750 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.692.539 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.692.548 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.698.144 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.151 I llama_new_context_with_model: n_batch    = 2048
0.00.698.151 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.152 I llama_new_context_with_model: flash_attn = 0
0.00.698.154 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.155 I llama_new_context_with_model: freq_scale = 1
0.00.727.116 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.727.157 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.286 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.670 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.675 I llama_new_context_with_model: graph nodes  = 601
0.00.728.676 I llama_new_context_with_model: graph splits = 1
0.00.728.693 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.706 I main: llama threadpool init, n_threads = 4
0.01.340.718 I 
0.01.340.829 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.833 I 
0.01.341.066 I sampler seed: 2865793901
0.01.341.078 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.341.085 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.341.086 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.341.087 I 
 increasities from a large sample of patients.

The researchers wanted to determine the association between the use of opioid analgesics and the risk of major adverse events (

0.14.825.378 I llama_perf_sampler_print:    sampling time =      48.51 ms /    33 runs   (    1.47 ms per token,   680.27 tokens per second)
0.14.825.381 I llama_perf_context_print:        load time =    1337.82 ms
0.14.825.383 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.825.385 I llama_perf_context_print:        eval time =   13390.54 ms /    32 runs   (  418.45 ms per token,     2.39 tokens per second)
0.14.825.386 I llama_perf_context_print:       total time =   13484.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.806s
user	3m48.341s
sys	0m9.681s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (8125e6cb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198729.33 ms
main:    total time = 198729.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.794 I main: load the model and apply lora adapter, if any
0.00.024.647 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.862 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.951 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.963 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.965 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.970 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.973 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.974 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.975 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.977 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.983 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.984 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.986 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.987 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.988 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.829 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.117 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.697 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.704 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.705 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.706 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.707 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.709 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.710 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.713 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.714 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.715 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.716 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.265.717 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.725 I llama_model_loader: - type  f32:   37 tensors
0.00.265.728 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.729 I llama_model_loader: - type q6_K:   19 tensors
0.00.438.731 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.750 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.618 I llm_load_vocab: special tokens cache size = 5
0.00.592.749 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.816 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.817 I llm_load_print_meta: arch             = gemma
0.00.592.817 I llm_load_print_meta: vocab type       = SPM
0.00.592.818 I llm_load_print_meta: n_vocab          = 256000
0.00.592.820 I llm_load_print_meta: n_merges         = 0
0.00.592.821 I llm_load_print_meta: vocab_only       = 0
0.00.592.821 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.822 I llm_load_print_meta: n_embd           = 2048
0.00.592.822 I llm_load_print_meta: n_layer          = 18
0.00.592.883 I llm_load_print_meta: n_head           = 8
0.00.592.891 I llm_load_print_meta: n_head_kv        = 1
0.00.592.892 I llm_load_print_meta: n_rot            = 256
0.00.592.892 I llm_load_print_meta: n_swa            = 0
0.00.592.893 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.893 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.897 I llm_load_print_meta: n_gqa            = 8
0.00.592.902 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.906 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.907 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.909 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.909 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.909 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.914 I llm_load_print_meta: n_ff             = 16384
0.00.592.915 I llm_load_print_meta: n_expert         = 0
0.00.592.916 I llm_load_print_meta: n_expert_used    = 0
0.00.592.916 I llm_load_print_meta: causal attn      = 1
0.00.592.917 I llm_load_print_meta: pooling type     = 0
0.00.592.926 I llm_load_print_meta: rope type        = 2
0.00.592.927 I llm_load_print_meta: rope scaling     = linear
0.00.592.928 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.929 I llm_load_print_meta: freq_scale_train = 1
0.00.592.930 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.930 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.930 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.931 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.934 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.935 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.935 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.936 I llm_load_print_meta: model type       = 2B
0.00.592.937 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.592.937 I llm_load_print_meta: model params     = 2.51 B
0.00.592.938 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.592.938 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.939 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.940 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.940 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.941 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.942 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.942 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.948 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.950 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.950 I llm_load_print_meta: max token length = 93
0.00.593.112 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.657.210 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.657.219 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.657.220 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.657.220 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.657.221 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.657.221 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.662.767 I llama_new_context_with_model: n_ctx      = 8192
0.00.662.774 I llama_new_context_with_model: n_batch    = 2048
0.00.662.774 I llama_new_context_with_model: n_ubatch   = 512
0.00.662.775 I llama_new_context_with_model: flash_attn = 0
0.00.662.777 I llama_new_context_with_model: freq_base  = 10000.0
0.00.662.778 I llama_new_context_with_model: freq_scale = 1
0.00.693.742 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.785 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.898 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.301 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.306 I llama_new_context_with_model: graph nodes  = 601
0.00.695.307 I llama_new_context_with_model: graph splits = 1
0.00.695.322 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.448 I main: llama threadpool init, n_threads = 4
0.01.274.461 I 
0.01.274.567 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.571 I 
0.01.274.798 I sampler seed: 301533441
0.01.274.812 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.819 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.274.822 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.822 I 
 encompases on the 10-year anniversary of the tragic accident that claimed the lives of 27 young people in the town of Shostakovich

0.12.255.073 I llama_perf_sampler_print:    sampling time =      48.75 ms /    33 runs   (    1.48 ms per token,   676.92 tokens per second)
0.12.255.095 I llama_perf_context_print:        load time =    1271.57 ms
0.12.255.097 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.255.098 I llama_perf_context_print:        eval time =   10887.06 ms /    32 runs   (  340.22 ms per token,     2.94 tokens per second)
0.12.255.099 I llama_perf_context_print:       total time =   10980.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (8125e6cb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199719.36 ms
main:    total time = 199719.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.685 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.884 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.025.014 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.116 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.132 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.137 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.142 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.143 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.144 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.145 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.146 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.148 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.155 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.157 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.158 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.159 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.160 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.209 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.767 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.326 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.333 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.334 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.335 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.336 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.338 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.339 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.343 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.344 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.352 I llama_model_loader: - type  f32:   37 tensors
0.00.266.356 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.357 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.762 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.034 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.967 I llm_load_vocab: special tokens cache size = 5
0.00.618.153 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.224 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.225 I llm_load_print_meta: arch             = gemma
0.00.618.225 I llm_load_print_meta: vocab type       = SPM
0.00.618.226 I llm_load_print_meta: n_vocab          = 256000
0.00.618.228 I llm_load_print_meta: n_merges         = 0
0.00.618.228 I llm_load_print_meta: vocab_only       = 0
0.00.618.229 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.229 I llm_load_print_meta: n_embd           = 2048
0.00.618.229 I llm_load_print_meta: n_layer          = 18
0.00.618.295 I llm_load_print_meta: n_head           = 8
0.00.618.302 I llm_load_print_meta: n_head_kv        = 1
0.00.618.303 I llm_load_print_meta: n_rot            = 256
0.00.618.303 I llm_load_print_meta: n_swa            = 0
0.00.618.304 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.305 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.309 I llm_load_print_meta: n_gqa            = 8
0.00.618.314 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.318 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.319 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.321 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.329 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.329 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.330 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.335 I llm_load_print_meta: n_ff             = 16384
0.00.618.335 I llm_load_print_meta: n_expert         = 0
0.00.618.336 I llm_load_print_meta: n_expert_used    = 0
0.00.618.336 I llm_load_print_meta: causal attn      = 1
0.00.618.337 I llm_load_print_meta: pooling type     = 0
0.00.618.337 I llm_load_print_meta: rope type        = 2
0.00.618.337 I llm_load_print_meta: rope scaling     = linear
0.00.618.339 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.339 I llm_load_print_meta: freq_scale_train = 1
0.00.618.340 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.340 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.341 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.341 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.341 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.343 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.343 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.344 I llm_load_print_meta: model type       = 2B
0.00.618.345 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.346 I llm_load_print_meta: model params     = 2.51 B
0.00.618.346 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.347 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.350 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.350 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.350 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.351 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.351 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.352 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.357 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.360 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.362 I llm_load_print_meta: max token length = 93
0.00.618.531 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.662 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.686.364 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.372 I llama_new_context_with_model: n_batch    = 2048
0.00.686.373 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.373 I llama_new_context_with_model: flash_attn = 0
0.00.686.376 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.376 I llama_new_context_with_model: freq_scale = 1
0.00.716.354 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.716.398 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.716.523 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.968 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.974 I llama_new_context_with_model: graph nodes  = 601
0.00.717.974 I llama_new_context_with_model: graph splits = 1
0.00.717.992 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.295.990 I main: llama threadpool init, n_threads = 4
0.01.296.002 I 
0.01.296.107 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.296.111 I 
0.01.296.338 I sampler seed: 2946080408
0.01.296.350 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.296.357 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.296.358 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.296.358 I 
 fufilling me.

I am unable to generate the requested content due to safety restrictions. [end of text]


0.07.846.607 I llama_perf_sampler_print:    sampling time =      28.66 ms /    20 runs   (    1.43 ms per token,   697.79 tokens per second)
0.07.846.610 I llama_perf_context_print:        load time =    1293.05 ms
0.07.846.624 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.846.626 I llama_perf_context_print:        eval time =    6493.07 ms /    19 runs   (  341.74 ms per token,     2.93 tokens per second)
0.07.846.627 I llama_perf_context_print:       total time =    6550.63 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m1.530s
user	50m0.494s
sys	0m6.636s
