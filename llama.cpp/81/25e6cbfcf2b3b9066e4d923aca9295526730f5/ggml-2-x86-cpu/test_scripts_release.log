+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.581 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.782 I main: llama backend init
0.00.001.874 I main: load the model and apply lora adapter, if any
0.00.022.262 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.310 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.322 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.329 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.330 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.335 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.335 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.336 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.337 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.337 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.338 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.343 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.343 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.344 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.345 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.345 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.658 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.310 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.164 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.170 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.171 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.172 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.172 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.173 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.174 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.176 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.177 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.177 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.178 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.179 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.183 I llama_model_loader: - type  f32:   37 tensors
0.00.131.186 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.419 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.381 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.950 I llm_load_vocab: special tokens cache size = 5
0.00.261.695 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.711 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.711 I llm_load_print_meta: arch             = gemma
0.00.261.712 I llm_load_print_meta: vocab type       = SPM
0.00.261.713 I llm_load_print_meta: n_vocab          = 256000
0.00.261.713 I llm_load_print_meta: n_merges         = 0
0.00.261.714 I llm_load_print_meta: vocab_only       = 0
0.00.261.714 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.714 I llm_load_print_meta: n_embd           = 2048
0.00.261.714 I llm_load_print_meta: n_layer          = 18
0.00.261.726 I llm_load_print_meta: n_head           = 8
0.00.261.727 I llm_load_print_meta: n_head_kv        = 1
0.00.261.727 I llm_load_print_meta: n_rot            = 256
0.00.261.727 I llm_load_print_meta: n_swa            = 0
0.00.261.727 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.728 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.728 I llm_load_print_meta: n_gqa            = 8
0.00.261.729 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.730 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.731 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.733 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.734 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.734 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.734 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.735 I llm_load_print_meta: n_ff             = 16384
0.00.261.735 I llm_load_print_meta: n_expert         = 0
0.00.261.736 I llm_load_print_meta: n_expert_used    = 0
0.00.261.736 I llm_load_print_meta: causal attn      = 1
0.00.261.736 I llm_load_print_meta: pooling type     = 0
0.00.261.736 I llm_load_print_meta: rope type        = 2
0.00.261.737 I llm_load_print_meta: rope scaling     = linear
0.00.261.738 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.738 I llm_load_print_meta: freq_scale_train = 1
0.00.261.739 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.739 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.739 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.740 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.740 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.740 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.740 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.741 I llm_load_print_meta: model type       = 2B
0.00.261.741 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.742 I llm_load_print_meta: model params     = 2.51 B
0.00.261.743 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.744 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.744 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.744 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.745 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.745 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.745 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.746 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.746 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.747 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.747 I llm_load_print_meta: max token length = 93
0.00.261.766 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.371.598 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.371.608 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.371.609 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.371.609 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.371.610 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.371.610 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.376.861 I llama_new_context_with_model: n_ctx      = 8192
0.00.376.867 I llama_new_context_with_model: n_batch    = 2048
0.00.376.868 I llama_new_context_with_model: n_ubatch   = 512
0.00.376.869 I llama_new_context_with_model: flash_attn = 0
0.00.376.872 I llama_new_context_with_model: freq_base  = 10000.0
0.00.376.873 I llama_new_context_with_model: freq_scale = 1
0.00.407.573 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.407.588 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.407.681 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.408.568 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.408.574 I llama_new_context_with_model: graph nodes  = 601
0.00.408.574 I llama_new_context_with_model: graph splits = 1
0.00.408.576 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.502.570 I main: llama threadpool init, n_threads = 4
0.00.502.584 I 
0.00.502.659 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.502.663 I 
0.00.502.706 I sampler seed: 219912702
0.00.502.717 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.502.721 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.502.722 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.502.722 I 
 increasities! 🤪 [end of text]


0.00.934.573 I llama_perf_sampler_print:    sampling time =       0.90 ms /     7 runs   (    0.13 ms per token,  7751.94 tokens per second)
0.00.934.576 I llama_perf_context_print:        load time =     500.67 ms
0.00.934.577 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.934.579 I llama_perf_context_print:        eval time =     427.75 ms /     6 runs   (   71.29 ms per token,    14.03 tokens per second)
0.00.934.590 I llama_perf_context_print:       total time =     432.01 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.542 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.001.824 I main: load the model and apply lora adapter, if any
0.00.021.921 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.932 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.938 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.939 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.943 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.944 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.944 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.945 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.946 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.950 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.951 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.952 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.952 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.953 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.320 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.969 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.790 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.796 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.797 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.798 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.799 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.800 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.801 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.805 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.805 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.806 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.807 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.808 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.811 I llama_model_loader: - type  f32:   37 tensors
0.00.130.814 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.736 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.614 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.168 I llm_load_vocab: special tokens cache size = 5
0.00.268.878 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.896 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.896 I llm_load_print_meta: arch             = gemma
0.00.268.897 I llm_load_print_meta: vocab type       = SPM
0.00.268.897 I llm_load_print_meta: n_vocab          = 256000
0.00.268.898 I llm_load_print_meta: n_merges         = 0
0.00.268.898 I llm_load_print_meta: vocab_only       = 0
0.00.268.898 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.899 I llm_load_print_meta: n_embd           = 2048
0.00.268.899 I llm_load_print_meta: n_layer          = 18
0.00.268.910 I llm_load_print_meta: n_head           = 8
0.00.268.911 I llm_load_print_meta: n_head_kv        = 1
0.00.268.911 I llm_load_print_meta: n_rot            = 256
0.00.268.911 I llm_load_print_meta: n_swa            = 0
0.00.268.912 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.912 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.913 I llm_load_print_meta: n_gqa            = 8
0.00.268.914 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.915 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.916 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.917 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.917 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.918 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.918 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.919 I llm_load_print_meta: n_ff             = 16384
0.00.268.919 I llm_load_print_meta: n_expert         = 0
0.00.268.920 I llm_load_print_meta: n_expert_used    = 0
0.00.268.920 I llm_load_print_meta: causal attn      = 1
0.00.268.920 I llm_load_print_meta: pooling type     = 0
0.00.268.920 I llm_load_print_meta: rope type        = 2
0.00.268.920 I llm_load_print_meta: rope scaling     = linear
0.00.268.922 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.923 I llm_load_print_meta: freq_scale_train = 1
0.00.268.923 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.924 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.924 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.925 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.925 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.926 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.927 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.927 I llm_load_print_meta: model type       = 2B
0.00.268.928 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.930 I llm_load_print_meta: model params     = 2.51 B
0.00.268.931 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.931 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.942 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.943 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.944 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.944 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.945 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.945 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.946 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.947 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.947 I llm_load_print_meta: max token length = 93
0.00.268.978 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.368.157 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.373.277 I llama_new_context_with_model: n_ctx      = 8192
0.00.373.284 I llama_new_context_with_model: n_batch    = 2048
0.00.373.284 I llama_new_context_with_model: n_ubatch   = 512
0.00.373.285 I llama_new_context_with_model: flash_attn = 0
0.00.373.287 I llama_new_context_with_model: freq_base  = 10000.0
0.00.373.287 I llama_new_context_with_model: freq_scale = 1
0.00.402.175 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.402.191 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.402.284 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.403.173 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.403.180 I llama_new_context_with_model: graph nodes  = 601
0.00.403.181 I llama_new_context_with_model: graph splits = 1
0.00.403.182 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.390 I main: llama threadpool init, n_threads = 4
0.00.492.404 I 
0.00.492.485 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.488 I 
0.00.492.534 I sampler seed: 1059594733
0.00.492.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.548 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.549 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.549 I 
 increasities and provide a summary of the key points.

**Key Points:**

* The term "incredibility" is often misused and misinterpreted in the

0.02.753.184 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6609.25 tokens per second)
0.02.753.186 I llama_perf_context_print:        load time =     490.54 ms
0.02.753.187 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.753.189 I llama_perf_context_print:        eval time =    2241.01 ms /    32 runs   (   70.03 ms per token,    14.28 tokens per second)
0.02.753.189 I llama_perf_context_print:       total time =    2260.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.531 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.001.853 I main: load the model and apply lora adapter, if any
0.00.021.907 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.953 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.963 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.968 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.972 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.976 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.976 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.977 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.977 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.978 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.978 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.983 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.984 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.985 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.986 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.987 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.291 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.812 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.694 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.700 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.701 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.701 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.702 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.703 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.704 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.706 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.707 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.707 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.708 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.710 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.713 I llama_model_loader: - type  f32:   37 tensors
0.00.130.717 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.046 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.865 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.403 I llm_load_vocab: special tokens cache size = 5
0.00.268.165 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.183 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.183 I llm_load_print_meta: arch             = gemma
0.00.268.184 I llm_load_print_meta: vocab type       = SPM
0.00.268.185 I llm_load_print_meta: n_vocab          = 256000
0.00.268.185 I llm_load_print_meta: n_merges         = 0
0.00.268.185 I llm_load_print_meta: vocab_only       = 0
0.00.268.186 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.186 I llm_load_print_meta: n_embd           = 2048
0.00.268.186 I llm_load_print_meta: n_layer          = 18
0.00.268.198 I llm_load_print_meta: n_head           = 8
0.00.268.199 I llm_load_print_meta: n_head_kv        = 1
0.00.268.199 I llm_load_print_meta: n_rot            = 256
0.00.268.199 I llm_load_print_meta: n_swa            = 0
0.00.268.199 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.199 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.200 I llm_load_print_meta: n_gqa            = 8
0.00.268.201 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.202 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.203 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.204 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.205 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.205 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.206 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.206 I llm_load_print_meta: n_ff             = 16384
0.00.268.207 I llm_load_print_meta: n_expert         = 0
0.00.268.207 I llm_load_print_meta: n_expert_used    = 0
0.00.268.207 I llm_load_print_meta: causal attn      = 1
0.00.268.207 I llm_load_print_meta: pooling type     = 0
0.00.268.208 I llm_load_print_meta: rope type        = 2
0.00.268.208 I llm_load_print_meta: rope scaling     = linear
0.00.268.209 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.210 I llm_load_print_meta: freq_scale_train = 1
0.00.268.210 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.211 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.211 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.212 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.212 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.212 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.213 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.214 I llm_load_print_meta: model type       = 2B
0.00.268.215 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.216 I llm_load_print_meta: model params     = 2.51 B
0.00.268.217 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.218 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.218 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.218 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.219 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.220 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.220 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.220 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.221 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.222 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.222 I llm_load_print_meta: max token length = 93
0.00.268.245 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.364.245 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.364.253 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.364.254 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.364.254 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.364.255 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.364.255 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.369.278 I llama_new_context_with_model: n_ctx      = 8192
0.00.369.285 I llama_new_context_with_model: n_batch    = 2048
0.00.369.285 I llama_new_context_with_model: n_ubatch   = 512
0.00.369.286 I llama_new_context_with_model: flash_attn = 0
0.00.369.289 I llama_new_context_with_model: freq_base  = 10000.0
0.00.369.290 I llama_new_context_with_model: freq_scale = 1
0.00.398.585 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.398.600 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.398.692 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.555 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.399.563 I llama_new_context_with_model: graph nodes  = 601
0.00.399.563 I llama_new_context_with_model: graph splits = 1
0.00.399.565 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.222 I main: llama threadpool init, n_threads = 4
0.00.492.236 I 
0.00.492.317 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.492.320 I 
0.00.492.359 I sampler seed: 2680898116
0.00.492.369 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.377 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.377 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.378 I 
 increably.

I'm not sure if you're aware of my situation, but I'm facing a difficult time. I'm going through

0.02.710.909 I llama_perf_sampler_print:    sampling time =       5.51 ms /    33 runs   (    0.17 ms per token,  5983.68 tokens per second)
0.02.710.912 I llama_perf_context_print:        load time =     490.35 ms
0.02.710.913 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.710.914 I llama_perf_context_print:        eval time =    2198.58 ms /    32 runs   (   68.71 ms per token,    14.55 tokens per second)
0.02.710.915 I llama_perf_context_print:       total time =    2218.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.553 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.786 I main: llama backend init
0.00.001.952 I main: load the model and apply lora adapter, if any
0.00.022.223 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.272 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.287 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.289 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.294 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.298 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.299 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.300 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.301 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.307 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.308 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.309 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.310 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.311 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.361 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.272 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.101 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.107 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.108 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.108 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.109 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.110 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.111 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.113 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.114 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.115 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.115 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.117 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.121 I llama_model_loader: - type  f32:   37 tensors
0.00.131.123 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.977 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.230 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.828 I llm_load_vocab: special tokens cache size = 5
0.00.265.649 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.666 I llm_load_print_meta: arch             = gemma
0.00.265.666 I llm_load_print_meta: vocab type       = SPM
0.00.265.667 I llm_load_print_meta: n_vocab          = 256000
0.00.265.667 I llm_load_print_meta: n_merges         = 0
0.00.265.667 I llm_load_print_meta: vocab_only       = 0
0.00.265.668 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.668 I llm_load_print_meta: n_embd           = 2048
0.00.265.668 I llm_load_print_meta: n_layer          = 18
0.00.265.679 I llm_load_print_meta: n_head           = 8
0.00.265.680 I llm_load_print_meta: n_head_kv        = 1
0.00.265.681 I llm_load_print_meta: n_rot            = 256
0.00.265.681 I llm_load_print_meta: n_swa            = 0
0.00.265.681 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.681 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.682 I llm_load_print_meta: n_gqa            = 8
0.00.265.683 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.684 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.685 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.686 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.687 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.687 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.687 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.688 I llm_load_print_meta: n_ff             = 16384
0.00.265.688 I llm_load_print_meta: n_expert         = 0
0.00.265.689 I llm_load_print_meta: n_expert_used    = 0
0.00.265.689 I llm_load_print_meta: causal attn      = 1
0.00.265.689 I llm_load_print_meta: pooling type     = 0
0.00.265.689 I llm_load_print_meta: rope type        = 2
0.00.265.690 I llm_load_print_meta: rope scaling     = linear
0.00.265.691 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.692 I llm_load_print_meta: freq_scale_train = 1
0.00.265.692 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.692 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.693 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.693 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.693 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.693 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.694 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.694 I llm_load_print_meta: model type       = 2B
0.00.265.695 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.696 I llm_load_print_meta: model params     = 2.51 B
0.00.265.697 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.697 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.697 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.698 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.698 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.699 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.699 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.700 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.700 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.701 I llm_load_print_meta: max token length = 93
0.00.265.728 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.359.219 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.359.226 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.364.343 I llama_new_context_with_model: n_ctx      = 8192
0.00.364.351 I llama_new_context_with_model: n_batch    = 2048
0.00.364.352 I llama_new_context_with_model: n_ubatch   = 512
0.00.364.352 I llama_new_context_with_model: flash_attn = 0
0.00.364.356 I llama_new_context_with_model: freq_base  = 10000.0
0.00.364.356 I llama_new_context_with_model: freq_scale = 1
0.00.393.760 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.393.776 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.393.870 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.744 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.394.752 I llama_new_context_with_model: graph nodes  = 601
0.00.394.752 I llama_new_context_with_model: graph splits = 1
0.00.394.754 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.230 I main: llama threadpool init, n_threads = 4
0.00.489.244 I 
0.00.489.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.331 I 
0.00.489.385 I sampler seed: 1209738046
0.00.489.397 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.401 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.489.402 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.402 I 
 increasively. [end of text]


0.00.764.436 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8319.47 tokens per second)
0.00.764.439 I llama_perf_context_print:        load time =     487.25 ms
0.00.764.440 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.764.442 I llama_perf_context_print:        eval time =     272.00 ms /     4 runs   (   68.00 ms per token,    14.71 tokens per second)
0.00.764.442 I llama_perf_context_print:       total time =     275.21 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.382s
user	0m23.670s
sys	0m9.672s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3984 (8125e6cb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32126.31 ms
main:    total time = 32126.31 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.523 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.694 I main: llama backend init
0.00.001.782 I main: load the model and apply lora adapter, if any
0.00.022.074 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.121 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.133 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.138 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.139 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.143 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.143 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.144 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.144 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.145 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.145 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.149 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.149 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.150 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.153 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.154 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.501 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.209 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.054 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.060 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.060 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.061 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.061 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.063 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.063 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.066 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.066 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.067 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.068 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.069 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.072 I llama_model_loader: - type  f32:   37 tensors
0.00.131.074 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.075 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.159 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.751 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.295 I llm_load_vocab: special tokens cache size = 5
0.00.271.293 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.310 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.311 I llm_load_print_meta: arch             = gemma
0.00.271.311 I llm_load_print_meta: vocab type       = SPM
0.00.271.312 I llm_load_print_meta: n_vocab          = 256000
0.00.271.313 I llm_load_print_meta: n_merges         = 0
0.00.271.313 I llm_load_print_meta: vocab_only       = 0
0.00.271.313 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.314 I llm_load_print_meta: n_embd           = 2048
0.00.271.314 I llm_load_print_meta: n_layer          = 18
0.00.271.325 I llm_load_print_meta: n_head           = 8
0.00.271.326 I llm_load_print_meta: n_head_kv        = 1
0.00.271.327 I llm_load_print_meta: n_rot            = 256
0.00.271.327 I llm_load_print_meta: n_swa            = 0
0.00.271.327 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.327 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.328 I llm_load_print_meta: n_gqa            = 8
0.00.271.329 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.330 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.331 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.332 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.333 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.333 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.333 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.334 I llm_load_print_meta: n_ff             = 16384
0.00.271.334 I llm_load_print_meta: n_expert         = 0
0.00.271.335 I llm_load_print_meta: n_expert_used    = 0
0.00.271.335 I llm_load_print_meta: causal attn      = 1
0.00.271.335 I llm_load_print_meta: pooling type     = 0
0.00.271.335 I llm_load_print_meta: rope type        = 2
0.00.271.335 I llm_load_print_meta: rope scaling     = linear
0.00.271.337 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.337 I llm_load_print_meta: freq_scale_train = 1
0.00.271.338 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.338 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.339 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.339 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.339 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.340 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.340 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.340 I llm_load_print_meta: model type       = 2B
0.00.271.341 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.342 I llm_load_print_meta: model params     = 2.51 B
0.00.271.342 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.342 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.343 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.343 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.344 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.344 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.344 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.345 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.345 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.346 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.346 I llm_load_print_meta: max token length = 93
0.00.271.366 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.333.693 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.333.702 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.333.702 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.333.703 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.333.704 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.333.704 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.338.820 I llama_new_context_with_model: n_ctx      = 8192
0.00.338.825 I llama_new_context_with_model: n_batch    = 2048
0.00.338.825 I llama_new_context_with_model: n_ubatch   = 512
0.00.338.826 I llama_new_context_with_model: flash_attn = 0
0.00.338.829 I llama_new_context_with_model: freq_base  = 10000.0
0.00.338.830 I llama_new_context_with_model: freq_scale = 1
0.00.367.856 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.367.869 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.367.960 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.824 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.368.831 I llama_new_context_with_model: graph nodes  = 601
0.00.368.831 I llama_new_context_with_model: graph splits = 1
0.00.368.833 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.113 I main: llama threadpool init, n_threads = 4
0.00.452.127 I 
0.00.452.211 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.452.215 I 
0.00.452.258 I sampler seed: 3837340316
0.00.452.270 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.273 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.274 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.274 I 
 seconded from its sister, and the two siblings were now living together. 

What is the relationship between the two siblings?

They are siblings. [end of text]


0.02.133.622 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6840.80 tokens per second)
0.02.133.625 I llama_perf_context_print:        load time =     450.31 ms
0.02.133.626 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.133.628 I llama_perf_context_print:        eval time =    1661.40 ms /    32 runs   (   51.92 ms per token,    19.26 tokens per second)
0.02.133.629 I llama_perf_context_print:       total time =    1681.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3984 (8125e6cb)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32047.53 ms
main:    total time = 32047.53 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.528 I build: 3984 (8125e6cb) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.001.857 I main: load the model and apply lora adapter, if any
0.00.022.082 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.097 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.103 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.104 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.107 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.108 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.108 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.160 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.170 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.171 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.176 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.178 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.179 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.181 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.183 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.889 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.092 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.866 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.872 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.873 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.873 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.874 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.875 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.875 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.877 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.878 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.881 I llama_model_loader: - type  f32:   37 tensors
0.00.130.884 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.885 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.641 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.705 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.416 I llm_load_vocab: special tokens cache size = 5
0.00.273.466 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.489 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.489 I llm_load_print_meta: arch             = gemma
0.00.273.490 I llm_load_print_meta: vocab type       = SPM
0.00.273.490 I llm_load_print_meta: n_vocab          = 256000
0.00.273.491 I llm_load_print_meta: n_merges         = 0
0.00.273.491 I llm_load_print_meta: vocab_only       = 0
0.00.273.492 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.492 I llm_load_print_meta: n_embd           = 2048
0.00.273.492 I llm_load_print_meta: n_layer          = 18
0.00.273.506 I llm_load_print_meta: n_head           = 8
0.00.273.507 I llm_load_print_meta: n_head_kv        = 1
0.00.273.507 I llm_load_print_meta: n_rot            = 256
0.00.273.507 I llm_load_print_meta: n_swa            = 0
0.00.273.508 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.508 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.509 I llm_load_print_meta: n_gqa            = 8
0.00.273.510 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.511 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.512 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.513 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.513 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.514 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.514 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.515 I llm_load_print_meta: n_ff             = 16384
0.00.273.515 I llm_load_print_meta: n_expert         = 0
0.00.273.516 I llm_load_print_meta: n_expert_used    = 0
0.00.273.516 I llm_load_print_meta: causal attn      = 1
0.00.273.516 I llm_load_print_meta: pooling type     = 0
0.00.273.516 I llm_load_print_meta: rope type        = 2
0.00.273.517 I llm_load_print_meta: rope scaling     = linear
0.00.273.518 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.519 I llm_load_print_meta: freq_scale_train = 1
0.00.273.519 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.519 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.520 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.520 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.520 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.520 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.521 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.521 I llm_load_print_meta: model type       = 2B
0.00.273.522 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.522 I llm_load_print_meta: model params     = 2.51 B
0.00.273.523 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.523 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.524 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.524 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.525 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.525 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.525 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.525 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.526 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.526 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.527 I llm_load_print_meta: max token length = 93
0.00.273.548 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.333.384 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.338.503 I llama_new_context_with_model: n_ctx      = 8192
0.00.338.508 I llama_new_context_with_model: n_batch    = 2048
0.00.338.509 I llama_new_context_with_model: n_ubatch   = 512
0.00.338.509 I llama_new_context_with_model: flash_attn = 0
0.00.338.511 I llama_new_context_with_model: freq_base  = 10000.0
0.00.338.512 I llama_new_context_with_model: freq_scale = 1
0.00.367.456 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.367.472 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.367.569 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.438 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.368.446 I llama_new_context_with_model: graph nodes  = 601
0.00.368.446 I llama_new_context_with_model: graph splits = 1
0.00.368.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.477 I main: llama threadpool init, n_threads = 4
0.00.450.491 I 
0.00.450.589 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.450.592 I 
0.00.450.640 I sampler seed: 697827611
0.00.450.650 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.654 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.655 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.655 I 
 encompassing the features of the prompt:

**Prompt:** Write a short story about a young woman named Anya who is struggling financially and feels trapped in a cycle

0.02.115.260 I llama_perf_sampler_print:    sampling time =       4.68 ms /    33 runs   (    0.14 ms per token,  7046.76 tokens per second)
0.02.115.270 I llama_perf_context_print:        load time =     448.60 ms
0.02.115.272 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.115.274 I llama_perf_context_print:        eval time =    1645.01 ms /    32 runs   (   51.41 ms per token,    19.45 tokens per second)
0.02.115.275 I llama_perf_context_print:       total time =    1664.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.709s
user	8m14.959s
sys	0m7.008s
