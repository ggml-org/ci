+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4052 (29aee293) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.001.101 I main: load the model and apply lora adapter, if any
0.00.023.473 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.485 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.576 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.588 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.590 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.594 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.598 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.599 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.600 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.601 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.602 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.609 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.610 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.612 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.613 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.614 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.594 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.982 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.536 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.544 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.546 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.547 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.548 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.549 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.552 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.556 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.557 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.558 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.559 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.561 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.571 I llama_model_loader: - type  f32:   37 tensors
0.00.268.573 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.553 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.550 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.527 I llm_load_vocab: special tokens cache size = 5
0.00.619.858 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.929 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.930 I llm_load_print_meta: arch             = gemma
0.00.619.931 I llm_load_print_meta: vocab type       = SPM
0.00.619.932 I llm_load_print_meta: n_vocab          = 256000
0.00.619.935 I llm_load_print_meta: n_merges         = 0
0.00.619.935 I llm_load_print_meta: vocab_only       = 0
0.00.619.936 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.936 I llm_load_print_meta: n_embd           = 2048
0.00.619.936 I llm_load_print_meta: n_layer          = 18
0.00.620.002 I llm_load_print_meta: n_head           = 8
0.00.620.009 I llm_load_print_meta: n_head_kv        = 1
0.00.620.009 I llm_load_print_meta: n_rot            = 256
0.00.620.009 I llm_load_print_meta: n_swa            = 0
0.00.620.010 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.011 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.015 I llm_load_print_meta: n_gqa            = 8
0.00.620.020 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.025 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.026 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.027 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.029 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.030 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.031 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.036 I llm_load_print_meta: n_ff             = 16384
0.00.620.036 I llm_load_print_meta: n_expert         = 0
0.00.620.037 I llm_load_print_meta: n_expert_used    = 0
0.00.620.042 I llm_load_print_meta: causal attn      = 1
0.00.620.042 I llm_load_print_meta: pooling type     = 0
0.00.620.043 I llm_load_print_meta: rope type        = 2
0.00.620.043 I llm_load_print_meta: rope scaling     = linear
0.00.620.044 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.045 I llm_load_print_meta: freq_scale_train = 1
0.00.620.046 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.072 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.072 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.073 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.074 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.074 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.075 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.078 I llm_load_print_meta: model type       = 2B
0.00.620.080 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.080 I llm_load_print_meta: model params     = 2.51 B
0.00.620.089 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.090 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.091 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.091 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.093 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.094 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.094 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.095 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.102 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.106 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.106 I llm_load_print_meta: max token length = 93
0.00.720.345 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.720.355 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.720.356 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.720.357 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.720.358 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.720.358 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.726.236 I llama_new_context_with_model: n_seq_max     = 1
0.00.726.242 I llama_new_context_with_model: n_ctx         = 4096
0.00.726.242 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.726.243 I llama_new_context_with_model: n_batch       = 2048
0.00.726.243 I llama_new_context_with_model: n_ubatch      = 512
0.00.726.244 I llama_new_context_with_model: flash_attn    = 0
0.00.726.246 I llama_new_context_with_model: freq_base     = 10000.0
0.00.726.247 I llama_new_context_with_model: freq_scale    = 1
0.00.726.247 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.742.374 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.742.412 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.742.536 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.103 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.745.108 I llama_new_context_with_model: graph nodes  = 601
0.00.745.108 I llama_new_context_with_model: graph splits = 1
0.00.745.134 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.655 I main: llama threadpool init, n_threads = 4
0.01.350.667 I 
0.01.350.771 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.778 I 
0.01.351.005 I sampler seed: 1122075575
0.01.351.017 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.027 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.351.028 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.028 I 
 increamental of the sentence:

The quick brown fox jumps over the lazy dog.

a) The quick brown fox jumps over lazy dog.
b)

0.14.810.053 I llama_perf_sampler_print:    sampling time =      48.06 ms /    33 runs   (    1.46 ms per token,   686.60 tokens per second)
0.14.810.055 I llama_perf_context_print:        load time =    1349.46 ms
0.14.810.057 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.810.059 I llama_perf_context_print:        eval time =   13370.04 ms /    32 runs   (  417.81 ms per token,     2.39 tokens per second)
0.14.810.059 I llama_perf_context_print:       total time =   13459.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.646 I build: 4052 (29aee293) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.001.168 I main: load the model and apply lora adapter, if any
0.00.023.649 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.753 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.768 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.770 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.775 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.781 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.782 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.784 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.785 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.786 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.796 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.797 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.798 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.800 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.801 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.350 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.847 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.481 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.492 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.494 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.495 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.496 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.497 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.498 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.524 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.528 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.529 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.531 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.533 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.542 I llama_model_loader: - type  f32:   37 tensors
0.00.269.544 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.813 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.713 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.647 I llm_load_vocab: special tokens cache size = 5
0.00.619.338 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.413 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.414 I llm_load_print_meta: arch             = gemma
0.00.619.414 I llm_load_print_meta: vocab type       = SPM
0.00.619.415 I llm_load_print_meta: n_vocab          = 256000
0.00.619.418 I llm_load_print_meta: n_merges         = 0
0.00.619.418 I llm_load_print_meta: vocab_only       = 0
0.00.619.418 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.419 I llm_load_print_meta: n_embd           = 2048
0.00.619.419 I llm_load_print_meta: n_layer          = 18
0.00.619.486 I llm_load_print_meta: n_head           = 8
0.00.619.493 I llm_load_print_meta: n_head_kv        = 1
0.00.619.494 I llm_load_print_meta: n_rot            = 256
0.00.619.494 I llm_load_print_meta: n_swa            = 0
0.00.619.495 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.495 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.500 I llm_load_print_meta: n_gqa            = 8
0.00.619.505 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.511 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.512 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.513 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.514 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.514 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.515 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.519 I llm_load_print_meta: n_ff             = 16384
0.00.619.520 I llm_load_print_meta: n_expert         = 0
0.00.619.520 I llm_load_print_meta: n_expert_used    = 0
0.00.619.521 I llm_load_print_meta: causal attn      = 1
0.00.619.522 I llm_load_print_meta: pooling type     = 0
0.00.619.522 I llm_load_print_meta: rope type        = 2
0.00.619.522 I llm_load_print_meta: rope scaling     = linear
0.00.619.524 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.525 I llm_load_print_meta: freq_scale_train = 1
0.00.619.525 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.529 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.530 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.530 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.530 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.530 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.531 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.533 I llm_load_print_meta: model type       = 2B
0.00.619.543 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.544 I llm_load_print_meta: model params     = 2.51 B
0.00.619.552 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.553 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.553 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.557 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.557 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.558 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.558 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.559 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.565 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.567 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.568 I llm_load_print_meta: max token length = 93
0.00.716.896 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.722.786 I llama_new_context_with_model: n_seq_max     = 1
0.00.722.794 I llama_new_context_with_model: n_ctx         = 4096
0.00.722.794 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.722.795 I llama_new_context_with_model: n_batch       = 2048
0.00.722.795 I llama_new_context_with_model: n_ubatch      = 512
0.00.722.795 I llama_new_context_with_model: flash_attn    = 0
0.00.722.798 I llama_new_context_with_model: freq_base     = 10000.0
0.00.722.799 I llama_new_context_with_model: freq_scale    = 1
0.00.722.800 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.739.933 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.739.975 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.740.102 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.742.616 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.742.620 I llama_new_context_with_model: graph nodes  = 601
0.00.742.620 I llama_new_context_with_model: graph splits = 1
0.00.742.644 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.350.686 I main: llama threadpool init, n_threads = 4
0.01.350.698 I 
0.01.350.802 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.350.806 I 
0.01.351.039 I sampler seed: 2874468915
0.01.351.053 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.351.059 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.351.062 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.351.062 I 
 increadibly well! 🤩 [end of text]


0.03.898.950 I llama_perf_sampler_print:    sampling time =       9.06 ms /     7 runs   (    1.29 ms per token,   772.20 tokens per second)
0.03.898.952 I llama_perf_context_print:        load time =    1349.42 ms
0.03.898.954 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.898.955 I llama_perf_context_print:        eval time =    2530.14 ms /     6 runs   (  421.69 ms per token,     2.37 tokens per second)
0.03.898.956 I llama_perf_context_print:       total time =    2548.27 ms /     7 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.681 I build: 4052 (29aee293) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.877 I main: llama backend init
0.00.001.136 I main: load the model and apply lora adapter, if any
0.00.023.815 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.828 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.926 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.938 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.940 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.945 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.949 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.951 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.952 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.953 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.954 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.962 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.963 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.964 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.965 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.967 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.000 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.789 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.373 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.385 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.386 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.387 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.388 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.389 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.391 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.395 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.396 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.397 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.398 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.399 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.408 I llama_model_loader: - type  f32:   37 tensors
0.00.270.411 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.337 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.538.272 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.539.274 I llm_load_vocab: special tokens cache size = 5
0.00.637.405 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.477 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.478 I llm_load_print_meta: arch             = gemma
0.00.637.479 I llm_load_print_meta: vocab type       = SPM
0.00.637.480 I llm_load_print_meta: n_vocab          = 256000
0.00.637.482 I llm_load_print_meta: n_merges         = 0
0.00.637.483 I llm_load_print_meta: vocab_only       = 0
0.00.637.483 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.484 I llm_load_print_meta: n_embd           = 2048
0.00.637.484 I llm_load_print_meta: n_layer          = 18
0.00.637.551 I llm_load_print_meta: n_head           = 8
0.00.637.558 I llm_load_print_meta: n_head_kv        = 1
0.00.637.559 I llm_load_print_meta: n_rot            = 256
0.00.637.559 I llm_load_print_meta: n_swa            = 0
0.00.637.559 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.560 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.565 I llm_load_print_meta: n_gqa            = 8
0.00.637.571 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.576 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.577 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.578 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.579 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.579 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.579 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.584 I llm_load_print_meta: n_ff             = 16384
0.00.637.585 I llm_load_print_meta: n_expert         = 0
0.00.637.586 I llm_load_print_meta: n_expert_used    = 0
0.00.637.586 I llm_load_print_meta: causal attn      = 1
0.00.637.586 I llm_load_print_meta: pooling type     = 0
0.00.637.587 I llm_load_print_meta: rope type        = 2
0.00.637.588 I llm_load_print_meta: rope scaling     = linear
0.00.637.589 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.590 I llm_load_print_meta: freq_scale_train = 1
0.00.637.590 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.591 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.591 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.591 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.602 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.614 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.615 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.616 I llm_load_print_meta: model type       = 2B
0.00.637.617 I llm_load_print_meta: model ftype      = Q8_0
0.00.637.618 I llm_load_print_meta: model params     = 2.51 B
0.00.637.627 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.632 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.633 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.634 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.634 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.635 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.636 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.637 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.643 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.644 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.645 I llm_load_print_meta: max token length = 93
0.00.725.562 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.725.571 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.725.572 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.725.573 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.725.573 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.725.574 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.731.426 I llama_new_context_with_model: n_seq_max     = 1
0.00.731.434 I llama_new_context_with_model: n_ctx         = 4096
0.00.731.434 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.731.435 I llama_new_context_with_model: n_batch       = 2048
0.00.731.435 I llama_new_context_with_model: n_ubatch      = 512
0.00.731.436 I llama_new_context_with_model: flash_attn    = 0
0.00.731.439 I llama_new_context_with_model: freq_base     = 10000.0
0.00.731.439 I llama_new_context_with_model: freq_scale    = 1
0.00.731.440 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.748.537 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.748.578 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.748.710 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.751.344 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.751.349 I llama_new_context_with_model: graph nodes  = 601
0.00.751.349 I llama_new_context_with_model: graph splits = 1
0.00.751.375 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.557 I main: llama threadpool init, n_threads = 4
0.01.358.572 I 
0.01.358.677 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.681 I 
0.01.358.914 I sampler seed: 3463945927
0.01.358.926 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.934 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.358.935 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.935 I 
 increasities in a humorous and informative way.

**Disclaimer:** I am not responsible for any unintended laughter, spontaneous combustion, or existential crises that may occur as

0.14.883.824 I llama_perf_sampler_print:    sampling time =      48.49 ms /    33 runs   (    1.47 ms per token,   680.54 tokens per second)
0.14.883.838 I llama_perf_context_print:        load time =    1357.32 ms
0.14.883.840 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.883.841 I llama_perf_context_print:        eval time =   13435.81 ms /    32 runs   (  419.87 ms per token,     2.38 tokens per second)
0.14.883.843 I llama_perf_context_print:       total time =   13525.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4052 (29aee293) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.001.089 I main: load the model and apply lora adapter, if any
0.00.023.569 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.581 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.676 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.689 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.691 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.695 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.699 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.701 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.702 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.703 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.704 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.712 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.713 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.714 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.715 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.716 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.600 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.149 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.862 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.873 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.875 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.876 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.877 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.878 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.880 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.884 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.885 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.886 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.887 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.888 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.897 I llama_model_loader: - type  f32:   37 tensors
0.00.269.900 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.134 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.549.252 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.550.241 I llm_load_vocab: special tokens cache size = 5
0.00.647.778 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.647.847 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.647.849 I llm_load_print_meta: arch             = gemma
0.00.647.849 I llm_load_print_meta: vocab type       = SPM
0.00.647.850 I llm_load_print_meta: n_vocab          = 256000
0.00.647.853 I llm_load_print_meta: n_merges         = 0
0.00.647.853 I llm_load_print_meta: vocab_only       = 0
0.00.647.853 I llm_load_print_meta: n_ctx_train      = 8192
0.00.647.854 I llm_load_print_meta: n_embd           = 2048
0.00.647.854 I llm_load_print_meta: n_layer          = 18
0.00.647.920 I llm_load_print_meta: n_head           = 8
0.00.647.928 I llm_load_print_meta: n_head_kv        = 1
0.00.647.928 I llm_load_print_meta: n_rot            = 256
0.00.647.929 I llm_load_print_meta: n_swa            = 0
0.00.647.929 I llm_load_print_meta: n_embd_head_k    = 256
0.00.647.929 I llm_load_print_meta: n_embd_head_v    = 256
0.00.647.934 I llm_load_print_meta: n_gqa            = 8
0.00.647.939 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.647.945 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.647.946 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.647.947 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.647.948 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.647.948 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.647.948 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.647.954 I llm_load_print_meta: n_ff             = 16384
0.00.647.954 I llm_load_print_meta: n_expert         = 0
0.00.647.955 I llm_load_print_meta: n_expert_used    = 0
0.00.647.956 I llm_load_print_meta: causal attn      = 1
0.00.647.956 I llm_load_print_meta: pooling type     = 0
0.00.647.956 I llm_load_print_meta: rope type        = 2
0.00.647.957 I llm_load_print_meta: rope scaling     = linear
0.00.647.958 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.647.959 I llm_load_print_meta: freq_scale_train = 1
0.00.647.960 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.647.961 I llm_load_print_meta: rope_finetuned   = unknown
0.00.647.961 I llm_load_print_meta: ssm_d_conv       = 0
0.00.647.962 I llm_load_print_meta: ssm_d_inner      = 0
0.00.647.962 I llm_load_print_meta: ssm_d_state      = 0
0.00.647.963 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.647.963 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.647.963 I llm_load_print_meta: model type       = 2B
0.00.647.965 I llm_load_print_meta: model ftype      = Q8_0
0.00.647.965 I llm_load_print_meta: model params     = 2.51 B
0.00.647.974 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.647.975 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.647.980 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.647.980 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.647.981 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.647.981 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.647.982 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.647.985 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.647.991 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.647.993 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.647.993 I llm_load_print_meta: max token length = 93
0.00.720.424 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.720.436 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.726.303 I llama_new_context_with_model: n_seq_max     = 1
0.00.726.311 I llama_new_context_with_model: n_ctx         = 4096
0.00.726.311 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.726.312 I llama_new_context_with_model: n_batch       = 2048
0.00.726.312 I llama_new_context_with_model: n_ubatch      = 512
0.00.726.313 I llama_new_context_with_model: flash_attn    = 0
0.00.726.315 I llama_new_context_with_model: freq_base     = 10000.0
0.00.726.316 I llama_new_context_with_model: freq_scale    = 1
0.00.726.317 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.743.564 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.743.603 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.743.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.291 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.746.295 I llama_new_context_with_model: graph nodes  = 601
0.00.746.295 I llama_new_context_with_model: graph splits = 1
0.00.746.320 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.353.215 I main: llama threadpool init, n_threads = 4
0.01.353.227 I 
0.01.353.330 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.334 I 
0.01.353.564 I sampler seed: 3833018468
0.01.353.576 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.583 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.353.584 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.584 I 
 increasities from the ancient Greek philosopher Plato, including the theory of Forms and the allegory of the cave.

**Theory of Forms**

Plato believed that there

0.14.849.109 I llama_perf_sampler_print:    sampling time =      48.07 ms /    33 runs   (    1.46 ms per token,   686.44 tokens per second)
0.14.849.113 I llama_perf_context_print:        load time =    1352.03 ms
0.14.849.114 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.849.116 I llama_perf_context_print:        eval time =   13406.43 ms /    32 runs   (  418.95 ms per token,     2.39 tokens per second)
0.14.849.118 I llama_perf_context_print:       total time =   13495.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.123s
user	3m4.880s
sys	0m9.403s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4052 (29aee293)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198491.83 ms
main:    total time = 198491.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.678 I build: 4052 (29aee293) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.001.159 I main: load the model and apply lora adapter, if any
0.00.023.739 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.753 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.852 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.863 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.867 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.873 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.874 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.876 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.878 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.888 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.890 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.897 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.901 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.902 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.903 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.904 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.358 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.174 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.667 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.674 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.679 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.680 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.684 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.685 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.687 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.687 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.689 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.696 I llama_model_loader: - type  f32:   37 tensors
0.00.268.699 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.699 I llama_model_loader: - type q6_K:   19 tensors
0.00.455.504 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.730 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.697 I llm_load_vocab: special tokens cache size = 5
0.00.613.966 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.036 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.037 I llm_load_print_meta: arch             = gemma
0.00.614.038 I llm_load_print_meta: vocab type       = SPM
0.00.614.039 I llm_load_print_meta: n_vocab          = 256000
0.00.614.041 I llm_load_print_meta: n_merges         = 0
0.00.614.042 I llm_load_print_meta: vocab_only       = 0
0.00.614.042 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.043 I llm_load_print_meta: n_embd           = 2048
0.00.614.043 I llm_load_print_meta: n_layer          = 18
0.00.614.107 I llm_load_print_meta: n_head           = 8
0.00.614.113 I llm_load_print_meta: n_head_kv        = 1
0.00.614.114 I llm_load_print_meta: n_rot            = 256
0.00.614.114 I llm_load_print_meta: n_swa            = 0
0.00.614.115 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.115 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.120 I llm_load_print_meta: n_gqa            = 8
0.00.614.126 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.131 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.132 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.133 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.134 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.135 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.135 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.140 I llm_load_print_meta: n_ff             = 16384
0.00.614.141 I llm_load_print_meta: n_expert         = 0
0.00.614.141 I llm_load_print_meta: n_expert_used    = 0
0.00.614.142 I llm_load_print_meta: causal attn      = 1
0.00.614.143 I llm_load_print_meta: pooling type     = 0
0.00.614.143 I llm_load_print_meta: rope type        = 2
0.00.614.143 I llm_load_print_meta: rope scaling     = linear
0.00.614.149 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.150 I llm_load_print_meta: freq_scale_train = 1
0.00.614.151 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.151 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.152 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.152 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.152 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.153 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.162 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.163 I llm_load_print_meta: model type       = 2B
0.00.614.165 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.614.166 I llm_load_print_meta: model params     = 2.51 B
0.00.614.175 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.614.175 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.178 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.178 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.179 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.179 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.180 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.185 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.186 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.187 I llm_load_print_meta: max token length = 93
0.00.677.940 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.677.951 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.677.952 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.677.952 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.677.953 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.677.954 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.683.665 I llama_new_context_with_model: n_seq_max     = 1
0.00.683.671 I llama_new_context_with_model: n_ctx         = 4096
0.00.683.671 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.683.671 I llama_new_context_with_model: n_batch       = 2048
0.00.683.672 I llama_new_context_with_model: n_ubatch      = 512
0.00.683.672 I llama_new_context_with_model: flash_attn    = 0
0.00.683.674 I llama_new_context_with_model: freq_base     = 10000.0
0.00.683.675 I llama_new_context_with_model: freq_scale    = 1
0.00.683.676 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.699.794 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.699.833 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.699.948 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.523 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.702.527 I llama_new_context_with_model: graph nodes  = 601
0.00.702.528 I llama_new_context_with_model: graph splits = 1
0.00.702.554 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.273.368 I main: llama threadpool init, n_threads = 4
0.01.273.379 I 
0.01.273.484 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.273.488 I 
0.01.273.725 I sampler seed: 3409903055
0.01.273.738 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.273.744 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.273.747 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.273.747 I 
 seconally.

**Answer:** I am not able to provide an answer as I do not have access to personal or sensitive information. [end of text]


0.10.803.449 I llama_perf_sampler_print:    sampling time =      42.07 ms /    29 runs   (    1.45 ms per token,   689.28 tokens per second)
0.10.803.451 I llama_perf_context_print:        load time =    1272.10 ms
0.10.803.453 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.803.454 I llama_perf_context_print:        eval time =    9451.70 ms /    28 runs   (  337.56 ms per token,     2.96 tokens per second)
0.10.803.455 I llama_perf_context_print:       total time =    9530.09 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4052 (29aee293)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198854.38 ms
main:    total time = 198854.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4052 (29aee293) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.001.163 I main: load the model and apply lora adapter, if any
0.00.023.558 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.662 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.676 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.680 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.686 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.688 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.689 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.690 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.692 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.693 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.699 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.702 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.703 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.704 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.705 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.473 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.249 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.761 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.769 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.770 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.771 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.772 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.774 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.775 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.779 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.780 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.788 I llama_model_loader: - type  f32:   37 tensors
0.00.268.791 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.791 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.160 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.505.644 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.506.515 I llm_load_vocab: special tokens cache size = 5
0.00.604.108 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.181 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.182 I llm_load_print_meta: arch             = gemma
0.00.604.182 I llm_load_print_meta: vocab type       = SPM
0.00.604.183 I llm_load_print_meta: n_vocab          = 256000
0.00.604.185 I llm_load_print_meta: n_merges         = 0
0.00.604.186 I llm_load_print_meta: vocab_only       = 0
0.00.604.186 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.187 I llm_load_print_meta: n_embd           = 2048
0.00.604.187 I llm_load_print_meta: n_layer          = 18
0.00.604.250 I llm_load_print_meta: n_head           = 8
0.00.604.258 I llm_load_print_meta: n_head_kv        = 1
0.00.604.258 I llm_load_print_meta: n_rot            = 256
0.00.604.259 I llm_load_print_meta: n_swa            = 0
0.00.604.259 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.260 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.264 I llm_load_print_meta: n_gqa            = 8
0.00.604.269 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.274 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.276 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.301 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.302 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.303 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.303 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.318 I llm_load_print_meta: n_ff             = 16384
0.00.604.319 I llm_load_print_meta: n_expert         = 0
0.00.604.319 I llm_load_print_meta: n_expert_used    = 0
0.00.604.320 I llm_load_print_meta: causal attn      = 1
0.00.604.320 I llm_load_print_meta: pooling type     = 0
0.00.604.321 I llm_load_print_meta: rope type        = 2
0.00.604.322 I llm_load_print_meta: rope scaling     = linear
0.00.604.324 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.324 I llm_load_print_meta: freq_scale_train = 1
0.00.604.325 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.326 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.326 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.326 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.327 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.327 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.328 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.328 I llm_load_print_meta: model type       = 2B
0.00.604.330 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.604.331 I llm_load_print_meta: model params     = 2.51 B
0.00.604.339 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.604.340 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.341 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.341 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.342 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.342 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.343 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.344 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.350 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.353 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.353 I llm_load_print_meta: max token length = 93
0.00.663.992 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.669.955 I llama_new_context_with_model: n_seq_max     = 1
0.00.669.962 I llama_new_context_with_model: n_ctx         = 4096
0.00.669.963 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.669.963 I llama_new_context_with_model: n_batch       = 2048
0.00.669.964 I llama_new_context_with_model: n_ubatch      = 512
0.00.669.964 I llama_new_context_with_model: flash_attn    = 0
0.00.669.967 I llama_new_context_with_model: freq_base     = 10000.0
0.00.669.967 I llama_new_context_with_model: freq_scale    = 1
0.00.669.968 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.686.715 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.686.757 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.686.879 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.689.499 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.689.503 I llama_new_context_with_model: graph nodes  = 601
0.00.689.504 I llama_new_context_with_model: graph splits = 1
0.00.689.529 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.262.810 I main: llama threadpool init, n_threads = 4
0.01.262.822 I 
0.01.262.930 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.262.934 I 
0.01.263.164 I sampler seed: 3252456733
0.01.263.176 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.263.182 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.263.184 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.263.184 I 
 increasities of the form $$y=a+b\sin(kx)$$

The period of this function is $$T=\frac{2\pi

0.12.092.508 I llama_perf_sampler_print:    sampling time =      48.17 ms /    33 runs   (    1.46 ms per token,   685.02 tokens per second)
0.12.092.524 I llama_perf_context_print:        load time =    1261.55 ms
0.12.092.526 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.092.527 I llama_perf_context_print:        eval time =   10740.65 ms /    32 runs   (  335.65 ms per token,     2.98 tokens per second)
0.12.092.528 I llama_perf_context_print:       total time =   10829.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m3.109s
user	50m4.904s
sys	0m6.417s
