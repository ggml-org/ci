+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.199 I main: llama backend init
0.00.003.136 I main: load the model and apply lora adapter, if any
0.00.024.931 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.118 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.213 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.226 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.227 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.231 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.232 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.234 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.235 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.236 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.237 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.244 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.245 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.246 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.246 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.247 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.222 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.808 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.740 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.747 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.748 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.749 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.750 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.751 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.752 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.756 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.757 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.758 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.759 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.767 I llama_model_loader: - type  f32:   37 tensors
0.00.194.771 I llama_model_loader: - type q8_0:  127 tensors
0.00.495.212 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.496.244 I llm_load_vocab: special tokens cache size = 5
0.00.553.758 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.818 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.553.818 I llm_load_print_meta: arch             = gemma
0.00.553.819 I llm_load_print_meta: vocab type       = SPM
0.00.553.820 I llm_load_print_meta: n_vocab          = 256000
0.00.553.822 I llm_load_print_meta: n_merges         = 0
0.00.553.823 I llm_load_print_meta: vocab_only       = 0
0.00.553.824 I llm_load_print_meta: n_ctx_train      = 8192
0.00.553.824 I llm_load_print_meta: n_embd           = 2048
0.00.553.825 I llm_load_print_meta: n_layer          = 18
0.00.553.857 I llm_load_print_meta: n_head           = 8
0.00.553.864 I llm_load_print_meta: n_head_kv        = 1
0.00.553.864 I llm_load_print_meta: n_rot            = 256
0.00.553.865 I llm_load_print_meta: n_swa            = 0
0.00.553.865 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.865 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.871 I llm_load_print_meta: n_gqa            = 8
0.00.553.875 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.880 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.881 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.882 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.883 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.883 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.883 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.888 I llm_load_print_meta: n_ff             = 16384
0.00.553.889 I llm_load_print_meta: n_expert         = 0
0.00.553.889 I llm_load_print_meta: n_expert_used    = 0
0.00.553.889 I llm_load_print_meta: causal attn      = 1
0.00.553.890 I llm_load_print_meta: pooling type     = 0
0.00.553.890 I llm_load_print_meta: rope type        = 2
0.00.553.890 I llm_load_print_meta: rope scaling     = linear
0.00.553.892 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.892 I llm_load_print_meta: freq_scale_train = 1
0.00.553.893 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.893 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.894 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.894 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.895 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.895 I llm_load_print_meta: model type       = 2B
0.00.553.896 I llm_load_print_meta: model ftype      = Q8_0
0.00.553.897 I llm_load_print_meta: model params     = 2.51 B
0.00.553.898 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.553.898 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.899 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.899 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.899 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.900 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.900 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.901 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.901 I llm_load_print_meta: max token length = 93
0.00.554.083 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.652.395 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.652.408 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.652.409 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.652.410 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.652.410 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.652.411 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.658.092 I llama_new_context_with_model: n_ctx      = 8192
0.00.658.101 I llama_new_context_with_model: n_batch    = 2048
0.00.658.101 I llama_new_context_with_model: n_ubatch   = 512
0.00.658.102 I llama_new_context_with_model: flash_attn = 0
0.00.658.106 I llama_new_context_with_model: freq_base  = 10000.0
0.00.658.107 I llama_new_context_with_model: freq_scale = 1
0.00.688.151 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.688.191 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.688.300 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.689.682 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.688 I llama_new_context_with_model: graph nodes  = 601
0.00.689.689 I llama_new_context_with_model: graph splits = 1
0.00.689.704 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.305.584 I main: llama threadpool init, n_threads = 4
0.01.305.595 I 
0.01.305.688 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.305.691 I 
0.01.305.840 I sampler seed: 2890356925
0.01.305.851 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.855 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.305.856 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably, but alas, it is only a fleeting moment in time. How bittersweet is the realization that life is fleeting, but that we can make the most

0.14.794.817 I llama_perf_sampler_print:    sampling time =      49.20 ms /    33 runs   (    1.49 ms per token,   670.77 tokens per second)
0.14.794.820 I llama_perf_context_print:        load time =    1302.37 ms
0.14.794.821 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.794.823 I llama_perf_context_print:        eval time =   13407.59 ms /    32 runs   (  418.99 ms per token,     2.39 tokens per second)
0.14.794.824 I llama_perf_context_print:       total time =   13489.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.222 I main: llama backend init
0.00.003.152 I main: load the model and apply lora adapter, if any
0.00.024.849 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.937 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.950 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.965 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.971 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.972 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.973 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.974 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.976 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.983 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.984 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.985 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.986 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.987 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.064 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.019 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.967 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.975 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.976 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.977 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.978 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.979 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.980 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.983 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.984 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.984 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.985 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.194.986 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.994 I llama_model_loader: - type  f32:   37 tensors
0.00.194.998 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.871 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.937 I llm_load_vocab: special tokens cache size = 5
0.00.543.577 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.543.639 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.543.640 I llm_load_print_meta: arch             = gemma
0.00.543.641 I llm_load_print_meta: vocab type       = SPM
0.00.543.642 I llm_load_print_meta: n_vocab          = 256000
0.00.543.645 I llm_load_print_meta: n_merges         = 0
0.00.543.645 I llm_load_print_meta: vocab_only       = 0
0.00.543.645 I llm_load_print_meta: n_ctx_train      = 8192
0.00.543.646 I llm_load_print_meta: n_embd           = 2048
0.00.543.646 I llm_load_print_meta: n_layer          = 18
0.00.543.681 I llm_load_print_meta: n_head           = 8
0.00.543.688 I llm_load_print_meta: n_head_kv        = 1
0.00.543.688 I llm_load_print_meta: n_rot            = 256
0.00.543.689 I llm_load_print_meta: n_swa            = 0
0.00.543.689 I llm_load_print_meta: n_embd_head_k    = 256
0.00.543.689 I llm_load_print_meta: n_embd_head_v    = 256
0.00.543.694 I llm_load_print_meta: n_gqa            = 8
0.00.543.700 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.543.705 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.543.706 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.543.708 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.543.709 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.543.709 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.543.709 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.543.714 I llm_load_print_meta: n_ff             = 16384
0.00.543.715 I llm_load_print_meta: n_expert         = 0
0.00.543.715 I llm_load_print_meta: n_expert_used    = 0
0.00.543.715 I llm_load_print_meta: causal attn      = 1
0.00.543.716 I llm_load_print_meta: pooling type     = 0
0.00.543.716 I llm_load_print_meta: rope type        = 2
0.00.543.716 I llm_load_print_meta: rope scaling     = linear
0.00.543.718 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.543.718 I llm_load_print_meta: freq_scale_train = 1
0.00.543.718 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.543.719 I llm_load_print_meta: rope_finetuned   = unknown
0.00.543.719 I llm_load_print_meta: ssm_d_conv       = 0
0.00.543.719 I llm_load_print_meta: ssm_d_inner      = 0
0.00.543.720 I llm_load_print_meta: ssm_d_state      = 0
0.00.543.720 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.543.720 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.543.721 I llm_load_print_meta: model type       = 2B
0.00.543.722 I llm_load_print_meta: model ftype      = Q8_0
0.00.543.723 I llm_load_print_meta: model params     = 2.51 B
0.00.543.724 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.543.724 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.543.725 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.543.725 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.543.725 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.543.726 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.543.726 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.543.728 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.543.728 I llm_load_print_meta: max token length = 93
0.00.543.903 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.637.486 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.642.975 I llama_new_context_with_model: n_ctx      = 8192
0.00.642.982 I llama_new_context_with_model: n_batch    = 2048
0.00.642.983 I llama_new_context_with_model: n_ubatch   = 512
0.00.642.983 I llama_new_context_with_model: flash_attn = 0
0.00.642.986 I llama_new_context_with_model: freq_base  = 10000.0
0.00.642.986 I llama_new_context_with_model: freq_scale = 1
0.00.672.290 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.672.335 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.672.447 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.673.827 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.673.833 I llama_new_context_with_model: graph nodes  = 601
0.00.673.834 I llama_new_context_with_model: graph splits = 1
0.00.673.849 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.608 I main: llama threadpool init, n_threads = 4
0.01.286.619 I 
0.01.286.711 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.714 I 
0.01.286.868 I sampler seed: 2695714400
0.01.286.879 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.884 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.286.884 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.02.969.439 I llama_perf_sampler_print:    sampling time =       6.25 ms /     5 runs   (    1.25 ms per token,   800.51 tokens per second)
0.02.969.443 I llama_perf_context_print:        load time =    1283.38 ms
0.02.969.444 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.969.446 I llama_perf_context_print:        eval time =    1671.22 ms /     4 runs   (  417.81 ms per token,     2.39 tokens per second)
0.02.969.448 I llama_perf_context_print:       total time =    1682.84 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.226 I main: llama backend init
0.00.003.221 I main: load the model and apply lora adapter, if any
0.00.024.986 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.186 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.282 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.293 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.294 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.298 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.299 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.300 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.301 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.302 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.304 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.313 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.318 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.320 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.322 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.222 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.138 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.146 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.147 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.148 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.148 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.149 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.150 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.154 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.155 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.156 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.156 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.157 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.166 I llama_model_loader: - type  f32:   37 tensors
0.00.195.170 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.448 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.480.570 I llm_load_vocab: special tokens cache size = 5
0.00.542.829 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.542.890 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.542.891 I llm_load_print_meta: arch             = gemma
0.00.542.892 I llm_load_print_meta: vocab type       = SPM
0.00.542.893 I llm_load_print_meta: n_vocab          = 256000
0.00.542.895 I llm_load_print_meta: n_merges         = 0
0.00.542.895 I llm_load_print_meta: vocab_only       = 0
0.00.542.896 I llm_load_print_meta: n_ctx_train      = 8192
0.00.542.896 I llm_load_print_meta: n_embd           = 2048
0.00.542.897 I llm_load_print_meta: n_layer          = 18
0.00.542.930 I llm_load_print_meta: n_head           = 8
0.00.542.936 I llm_load_print_meta: n_head_kv        = 1
0.00.542.937 I llm_load_print_meta: n_rot            = 256
0.00.542.937 I llm_load_print_meta: n_swa            = 0
0.00.542.938 I llm_load_print_meta: n_embd_head_k    = 256
0.00.542.938 I llm_load_print_meta: n_embd_head_v    = 256
0.00.542.943 I llm_load_print_meta: n_gqa            = 8
0.00.542.948 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.542.952 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.542.953 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.542.955 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.542.955 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.542.956 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.542.956 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.542.961 I llm_load_print_meta: n_ff             = 16384
0.00.542.961 I llm_load_print_meta: n_expert         = 0
0.00.542.962 I llm_load_print_meta: n_expert_used    = 0
0.00.542.962 I llm_load_print_meta: causal attn      = 1
0.00.542.962 I llm_load_print_meta: pooling type     = 0
0.00.542.963 I llm_load_print_meta: rope type        = 2
0.00.542.963 I llm_load_print_meta: rope scaling     = linear
0.00.542.964 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.542.965 I llm_load_print_meta: freq_scale_train = 1
0.00.542.965 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.542.966 I llm_load_print_meta: rope_finetuned   = unknown
0.00.542.966 I llm_load_print_meta: ssm_d_conv       = 0
0.00.542.967 I llm_load_print_meta: ssm_d_inner      = 0
0.00.542.967 I llm_load_print_meta: ssm_d_state      = 0
0.00.542.967 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.542.968 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.542.968 I llm_load_print_meta: model type       = 2B
0.00.542.969 I llm_load_print_meta: model ftype      = Q8_0
0.00.542.985 I llm_load_print_meta: model params     = 2.51 B
0.00.542.986 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.542.987 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.542.988 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.542.988 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.542.988 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.542.989 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.542.990 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.542.990 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.542.991 I llm_load_print_meta: max token length = 93
0.00.543.167 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.347 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.619.357 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.619.358 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.619.359 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.619.359 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.619.360 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.624.924 I llama_new_context_with_model: n_ctx      = 8192
0.00.624.931 I llama_new_context_with_model: n_batch    = 2048
0.00.624.931 I llama_new_context_with_model: n_ubatch   = 512
0.00.624.932 I llama_new_context_with_model: flash_attn = 0
0.00.624.934 I llama_new_context_with_model: freq_base  = 10000.0
0.00.624.935 I llama_new_context_with_model: freq_scale = 1
0.00.654.899 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.654.945 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.655.065 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.656.510 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.656.519 I llama_new_context_with_model: graph nodes  = 601
0.00.656.519 I llama_new_context_with_model: graph splits = 1
0.00.656.540 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.269.188 I main: llama threadpool init, n_threads = 4
0.01.269.199 I 
0.01.269.289 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.269.290 I 
0.01.269.448 I sampler seed: 3083933593
0.01.269.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.269.474 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.269.478 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.
I am unable to generate the requested content due to the policy against generating sexually suggestive or inappropriate responses. [end of text]


0.11.909.758 I llama_perf_sampler_print:    sampling time =      38.46 ms /    26 runs   (    1.48 ms per token,   676.03 tokens per second)
0.11.909.762 I llama_perf_context_print:        load time =    1265.88 ms
0.11.909.773 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.909.776 I llama_perf_context_print:        eval time =   10575.71 ms /    25 runs   (  423.03 ms per token,     2.36 tokens per second)
0.11.909.777 I llama_perf_context_print:       total time =   10640.58 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.221 I main: llama backend init
0.00.003.175 I main: load the model and apply lora adapter, if any
0.00.024.774 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.978 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.071 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.082 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.084 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.089 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.094 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.095 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.096 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.101 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.103 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.117 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.121 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.123 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.124 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.125 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.893 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.107 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.002 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.010 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.011 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.012 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.013 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.014 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.015 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.019 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.019 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.020 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.021 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.022 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.031 I llama_model_loader: - type  f32:   37 tensors
0.00.196.035 I llama_model_loader: - type q8_0:  127 tensors
0.00.497.137 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.236 I llm_load_vocab: special tokens cache size = 5
0.00.557.289 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.557.353 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.557.354 I llm_load_print_meta: arch             = gemma
0.00.557.355 I llm_load_print_meta: vocab type       = SPM
0.00.557.355 I llm_load_print_meta: n_vocab          = 256000
0.00.557.358 I llm_load_print_meta: n_merges         = 0
0.00.557.359 I llm_load_print_meta: vocab_only       = 0
0.00.557.359 I llm_load_print_meta: n_ctx_train      = 8192
0.00.557.359 I llm_load_print_meta: n_embd           = 2048
0.00.557.360 I llm_load_print_meta: n_layer          = 18
0.00.557.394 I llm_load_print_meta: n_head           = 8
0.00.557.401 I llm_load_print_meta: n_head_kv        = 1
0.00.557.402 I llm_load_print_meta: n_rot            = 256
0.00.557.402 I llm_load_print_meta: n_swa            = 0
0.00.557.402 I llm_load_print_meta: n_embd_head_k    = 256
0.00.557.403 I llm_load_print_meta: n_embd_head_v    = 256
0.00.557.407 I llm_load_print_meta: n_gqa            = 8
0.00.557.412 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.557.417 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.557.418 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.557.421 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.557.421 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.557.421 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.557.422 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.557.427 I llm_load_print_meta: n_ff             = 16384
0.00.557.427 I llm_load_print_meta: n_expert         = 0
0.00.557.427 I llm_load_print_meta: n_expert_used    = 0
0.00.557.428 I llm_load_print_meta: causal attn      = 1
0.00.557.428 I llm_load_print_meta: pooling type     = 0
0.00.557.428 I llm_load_print_meta: rope type        = 2
0.00.557.429 I llm_load_print_meta: rope scaling     = linear
0.00.557.430 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.557.431 I llm_load_print_meta: freq_scale_train = 1
0.00.557.431 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.557.431 I llm_load_print_meta: rope_finetuned   = unknown
0.00.557.432 I llm_load_print_meta: ssm_d_conv       = 0
0.00.557.432 I llm_load_print_meta: ssm_d_inner      = 0
0.00.557.432 I llm_load_print_meta: ssm_d_state      = 0
0.00.557.433 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.557.433 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.557.434 I llm_load_print_meta: model type       = 2B
0.00.557.435 I llm_load_print_meta: model ftype      = Q8_0
0.00.557.435 I llm_load_print_meta: model params     = 2.51 B
0.00.557.436 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.557.436 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.557.437 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.557.437 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.557.437 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.557.438 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.557.438 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.557.439 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.557.439 I llm_load_print_meta: max token length = 93
0.00.557.634 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.629.098 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.629.110 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.634.744 I llama_new_context_with_model: n_ctx      = 8192
0.00.634.752 I llama_new_context_with_model: n_batch    = 2048
0.00.634.752 I llama_new_context_with_model: n_ubatch   = 512
0.00.634.753 I llama_new_context_with_model: flash_attn = 0
0.00.634.755 I llama_new_context_with_model: freq_base  = 10000.0
0.00.634.756 I llama_new_context_with_model: freq_scale = 1
0.00.664.246 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.664.289 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.664.400 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.665.825 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.665.833 I llama_new_context_with_model: graph nodes  = 601
0.00.665.834 I llama_new_context_with_model: graph splits = 1
0.00.665.852 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.841 I main: llama threadpool init, n_threads = 4
0.01.279.853 I 
0.01.279.956 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.960 I 
0.01.280.118 I sampler seed: 3201187737
0.01.280.128 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.133 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.280.134 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities!

I am unable to generate the requested response as it contains sexually suggestive and inappropriate content. [end of text]


0.10.609.961 I llama_perf_sampler_print:    sampling time =      33.87 ms /    23 runs   (    1.47 ms per token,   679.05 tokens per second)
0.10.609.964 I llama_perf_context_print:        load time =    1276.59 ms
0.10.609.965 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.609.967 I llama_perf_context_print:        eval time =    9272.93 ms /    22 runs   (  421.50 ms per token,     2.37 tokens per second)
0.10.609.968 I llama_perf_context_print:       total time =    9330.13 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m49.959s
user	2m32.973s
sys	0m9.510s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3751 (2948768e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199853.76 ms
main:    total time = 199853.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.217 I main: llama backend init
0.00.003.166 I main: load the model and apply lora adapter, if any
0.00.024.702 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.881 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.964 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.975 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.977 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.980 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.981 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.983 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.984 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.987 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.988 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.994 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.995 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.996 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.996 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.997 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.346 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.968 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.869 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.876 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.877 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.878 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.878 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.879 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.880 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.883 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.884 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.885 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.885 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.886 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.894 I llama_model_loader: - type  f32:   37 tensors
0.00.194.898 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.898 I llama_model_loader: - type q6_K:   19 tensors
0.00.471.810 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.472.801 I llm_load_vocab: special tokens cache size = 5
0.00.530.097 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.530.154 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.530.158 I llm_load_print_meta: arch             = gemma
0.00.530.159 I llm_load_print_meta: vocab type       = SPM
0.00.530.159 I llm_load_print_meta: n_vocab          = 256000
0.00.530.162 I llm_load_print_meta: n_merges         = 0
0.00.530.162 I llm_load_print_meta: vocab_only       = 0
0.00.530.163 I llm_load_print_meta: n_ctx_train      = 8192
0.00.530.163 I llm_load_print_meta: n_embd           = 2048
0.00.530.164 I llm_load_print_meta: n_layer          = 18
0.00.530.194 I llm_load_print_meta: n_head           = 8
0.00.530.213 I llm_load_print_meta: n_head_kv        = 1
0.00.530.213 I llm_load_print_meta: n_rot            = 256
0.00.530.213 I llm_load_print_meta: n_swa            = 0
0.00.530.214 I llm_load_print_meta: n_embd_head_k    = 256
0.00.530.214 I llm_load_print_meta: n_embd_head_v    = 256
0.00.530.219 I llm_load_print_meta: n_gqa            = 8
0.00.530.223 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.530.228 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.530.229 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.530.231 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.530.232 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.530.233 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.530.234 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.530.239 I llm_load_print_meta: n_ff             = 16384
0.00.530.240 I llm_load_print_meta: n_expert         = 0
0.00.530.240 I llm_load_print_meta: n_expert_used    = 0
0.00.530.240 I llm_load_print_meta: causal attn      = 1
0.00.530.241 I llm_load_print_meta: pooling type     = 0
0.00.530.241 I llm_load_print_meta: rope type        = 2
0.00.530.241 I llm_load_print_meta: rope scaling     = linear
0.00.530.243 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.530.243 I llm_load_print_meta: freq_scale_train = 1
0.00.530.244 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.530.244 I llm_load_print_meta: rope_finetuned   = unknown
0.00.530.252 I llm_load_print_meta: ssm_d_conv       = 0
0.00.530.263 I llm_load_print_meta: ssm_d_inner      = 0
0.00.530.264 I llm_load_print_meta: ssm_d_state      = 0
0.00.530.264 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.530.265 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.530.266 I llm_load_print_meta: model type       = 2B
0.00.530.267 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.530.268 I llm_load_print_meta: model params     = 2.51 B
0.00.530.269 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.530.269 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.530.270 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.530.270 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.530.271 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.530.272 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.530.273 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.530.273 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.530.274 I llm_load_print_meta: max token length = 93
0.00.530.445 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.590.656 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.590.665 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.590.665 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.590.666 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.590.667 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.590.667 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.596.171 I llama_new_context_with_model: n_ctx      = 8192
0.00.596.179 I llama_new_context_with_model: n_batch    = 2048
0.00.596.179 I llama_new_context_with_model: n_ubatch   = 512
0.00.596.180 I llama_new_context_with_model: flash_attn = 0
0.00.596.182 I llama_new_context_with_model: freq_base  = 10000.0
0.00.596.183 I llama_new_context_with_model: freq_scale = 1
0.00.625.550 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.625.591 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.625.711 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.627.144 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.627.150 I llama_new_context_with_model: graph nodes  = 601
0.00.627.151 I llama_new_context_with_model: graph splits = 1
0.00.627.166 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.204.821 I main: llama threadpool init, n_threads = 4
0.01.204.832 I 
0.01.204.921 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.204.925 I 
0.01.205.076 I sampler seed: 3538791553
0.01.205.086 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.205.090 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.205.091 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconary effects can occur in the presence of strong selective pressures. These effects include changes in developmental plasticity, reproductive behavior, and physiological traits.

**a)

0.12.184.411 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.49 tokens per second)
0.12.184.416 I llama_perf_context_print:        load time =    1201.58 ms
0.12.184.417 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.184.419 I llama_perf_context_print:        eval time =   10897.63 ms /    32 runs   (  340.55 ms per token,     2.94 tokens per second)
0.12.184.420 I llama_perf_context_print:       total time =   10979.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3751 (2948768e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199723.79 ms
main:    total time = 199723.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.001.212 I main: llama backend init
0.00.003.165 I main: load the model and apply lora adapter, if any
0.00.024.828 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.914 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.928 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.929 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.932 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.936 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.937 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.938 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.938 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.939 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.948 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.949 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.949 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.950 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.951 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.462 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.616 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.542 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.549 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.550 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.551 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.552 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.553 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.554 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.557 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.559 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.567 I llama_model_loader: - type  f32:   37 tensors
0.00.193.571 I llama_model_loader: - type q4_K:  108 tensors
0.00.193.572 I llama_model_loader: - type q6_K:   19 tensors
0.00.485.175 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.486.173 I llm_load_vocab: special tokens cache size = 5
0.00.543.588 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.543.646 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.543.647 I llm_load_print_meta: arch             = gemma
0.00.543.647 I llm_load_print_meta: vocab type       = SPM
0.00.543.648 I llm_load_print_meta: n_vocab          = 256000
0.00.543.651 I llm_load_print_meta: n_merges         = 0
0.00.543.651 I llm_load_print_meta: vocab_only       = 0
0.00.543.652 I llm_load_print_meta: n_ctx_train      = 8192
0.00.543.652 I llm_load_print_meta: n_embd           = 2048
0.00.543.652 I llm_load_print_meta: n_layer          = 18
0.00.543.685 I llm_load_print_meta: n_head           = 8
0.00.543.692 I llm_load_print_meta: n_head_kv        = 1
0.00.543.693 I llm_load_print_meta: n_rot            = 256
0.00.543.693 I llm_load_print_meta: n_swa            = 0
0.00.543.693 I llm_load_print_meta: n_embd_head_k    = 256
0.00.543.694 I llm_load_print_meta: n_embd_head_v    = 256
0.00.543.698 I llm_load_print_meta: n_gqa            = 8
0.00.543.702 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.543.709 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.543.711 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.543.712 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.543.713 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.543.713 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.543.714 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.543.718 I llm_load_print_meta: n_ff             = 16384
0.00.543.719 I llm_load_print_meta: n_expert         = 0
0.00.543.719 I llm_load_print_meta: n_expert_used    = 0
0.00.543.720 I llm_load_print_meta: causal attn      = 1
0.00.543.720 I llm_load_print_meta: pooling type     = 0
0.00.543.720 I llm_load_print_meta: rope type        = 2
0.00.543.721 I llm_load_print_meta: rope scaling     = linear
0.00.543.722 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.543.723 I llm_load_print_meta: freq_scale_train = 1
0.00.543.723 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.543.723 I llm_load_print_meta: rope_finetuned   = unknown
0.00.543.724 I llm_load_print_meta: ssm_d_conv       = 0
0.00.543.724 I llm_load_print_meta: ssm_d_inner      = 0
0.00.543.724 I llm_load_print_meta: ssm_d_state      = 0
0.00.543.725 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.543.725 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.543.726 I llm_load_print_meta: model type       = 2B
0.00.543.727 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.543.727 I llm_load_print_meta: model params     = 2.51 B
0.00.543.728 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.543.736 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.543.738 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.543.739 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.543.739 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.543.740 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.543.741 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.543.742 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.543.742 I llm_load_print_meta: max token length = 93
0.00.543.913 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.601.172 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.606.559 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.566 I llama_new_context_with_model: n_batch    = 2048
0.00.606.566 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.567 I llama_new_context_with_model: flash_attn = 0
0.00.606.569 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.570 I llama_new_context_with_model: freq_scale = 1
0.00.635.459 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.635.503 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.635.614 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.637.017 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.637.023 I llama_new_context_with_model: graph nodes  = 601
0.00.637.024 I llama_new_context_with_model: graph splits = 1
0.00.637.040 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.211.494 I main: llama threadpool init, n_threads = 4
0.01.211.505 I 
0.01.211.595 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.211.599 I 
0.01.211.749 I sampler seed: 1553961117
0.01.211.759 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.211.764 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.211.764 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvative. The context is related to a conversation about the ethics of artificial intelligence.

I am unable to find information on this specific context, so I

0.12.030.092 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.77 tokens per second)
0.12.030.095 I llama_perf_context_print:        load time =    1208.25 ms
0.12.030.096 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.030.098 I llama_perf_context_print:        eval time =   10737.15 ms /    32 runs   (  335.54 ms per token,     2.98 tokens per second)
0.12.030.123 I llama_perf_context_print:       total time =   10818.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.558s
user	50m18.438s
sys	0m6.433s
