+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.891 I main: llama backend init
0.00.002.015 I main: load the model and apply lora adapter, if any
0.00.022.135 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.191 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.196 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.197 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.201 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.204 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.205 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.205 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.206 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.206 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.210 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.211 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.211 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.212 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.212 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.434 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.331 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.338 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.338 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.339 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.339 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.340 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.341 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.343 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.344 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.344 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.345 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.346 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.349 I llama_model_loader: - type  f32:   37 tensors
0.00.133.353 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.847 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.482 I llm_load_vocab: special tokens cache size = 5
0.00.219.757 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.769 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.770 I llm_load_print_meta: arch             = gemma
0.00.219.771 I llm_load_print_meta: vocab type       = SPM
0.00.219.771 I llm_load_print_meta: n_vocab          = 256000
0.00.219.772 I llm_load_print_meta: n_merges         = 0
0.00.219.772 I llm_load_print_meta: vocab_only       = 0
0.00.219.772 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.773 I llm_load_print_meta: n_embd           = 2048
0.00.219.774 I llm_load_print_meta: n_layer          = 18
0.00.219.785 I llm_load_print_meta: n_head           = 8
0.00.219.786 I llm_load_print_meta: n_head_kv        = 1
0.00.219.786 I llm_load_print_meta: n_rot            = 256
0.00.219.786 I llm_load_print_meta: n_swa            = 0
0.00.219.786 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.787 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.788 I llm_load_print_meta: n_gqa            = 8
0.00.219.789 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.789 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.790 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.792 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.792 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.792 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.793 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.794 I llm_load_print_meta: n_ff             = 16384
0.00.219.794 I llm_load_print_meta: n_expert         = 0
0.00.219.794 I llm_load_print_meta: n_expert_used    = 0
0.00.219.795 I llm_load_print_meta: causal attn      = 1
0.00.219.795 I llm_load_print_meta: pooling type     = 0
0.00.219.795 I llm_load_print_meta: rope type        = 2
0.00.219.795 I llm_load_print_meta: rope scaling     = linear
0.00.219.797 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.797 I llm_load_print_meta: freq_scale_train = 1
0.00.219.798 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.798 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.799 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.799 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.799 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.799 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.800 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.800 I llm_load_print_meta: model type       = 2B
0.00.219.801 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.801 I llm_load_print_meta: model params     = 2.51 B
0.00.219.802 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.803 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.803 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.803 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.803 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.804 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.804 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.804 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.805 I llm_load_print_meta: max token length = 93
0.00.219.822 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.318.750 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.318.757 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.318.758 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.318.759 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.318.760 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.318.760 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.323.833 I llama_new_context_with_model: n_ctx      = 8192
0.00.323.839 I llama_new_context_with_model: n_batch    = 2048
0.00.323.839 I llama_new_context_with_model: n_ubatch   = 512
0.00.323.840 I llama_new_context_with_model: flash_attn = 0
0.00.323.842 I llama_new_context_with_model: freq_base  = 10000.0
0.00.323.843 I llama_new_context_with_model: freq_scale = 1
0.00.353.198 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.353.212 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.353.302 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.170 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.354.179 I llama_new_context_with_model: graph nodes  = 601
0.00.354.179 I llama_new_context_with_model: graph splits = 1
0.00.354.180 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.567 I main: llama threadpool init, n_threads = 4
0.00.444.580 I 
0.00.444.654 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.658 I 
0.00.444.694 I sampler seed: 597145075
0.00.444.703 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.706 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.444.706 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities
I am unable to access the requested content. As an AI language model, I am restricted from accessing or providing personally identifiable information, including personally identifiable

0.02.654.613 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6633.17 tokens per second)
0.02.654.617 I llama_perf_context_print:        load time =     442.53 ms
0.02.654.619 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.654.621 I llama_perf_context_print:        eval time =    2191.77 ms /    32 runs   (   68.49 ms per token,    14.60 tokens per second)
0.02.654.622 I llama_perf_context_print:       total time =    2210.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.933 I main: llama backend init
0.00.002.073 I main: load the model and apply lora adapter, if any
0.00.022.272 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.288 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.296 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.297 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.301 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.301 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.302 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.303 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.303 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.304 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.310 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.310 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.311 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.312 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.313 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.858 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.112 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.933 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.940 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.941 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.941 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.942 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.943 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.943 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.947 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.947 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.948 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.949 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.949 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.953 I llama_model_loader: - type  f32:   37 tensors
0.00.132.956 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.679 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.339 I llm_load_vocab: special tokens cache size = 5
0.00.219.769 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.219.782 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.219.782 I llm_load_print_meta: arch             = gemma
0.00.219.783 I llm_load_print_meta: vocab type       = SPM
0.00.219.784 I llm_load_print_meta: n_vocab          = 256000
0.00.219.784 I llm_load_print_meta: n_merges         = 0
0.00.219.784 I llm_load_print_meta: vocab_only       = 0
0.00.219.785 I llm_load_print_meta: n_ctx_train      = 8192
0.00.219.785 I llm_load_print_meta: n_embd           = 2048
0.00.219.786 I llm_load_print_meta: n_layer          = 18
0.00.219.797 I llm_load_print_meta: n_head           = 8
0.00.219.798 I llm_load_print_meta: n_head_kv        = 1
0.00.219.799 I llm_load_print_meta: n_rot            = 256
0.00.219.799 I llm_load_print_meta: n_swa            = 0
0.00.219.799 I llm_load_print_meta: n_embd_head_k    = 256
0.00.219.800 I llm_load_print_meta: n_embd_head_v    = 256
0.00.219.800 I llm_load_print_meta: n_gqa            = 8
0.00.219.801 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.219.803 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.219.803 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.219.805 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.219.806 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.219.807 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.219.807 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.219.808 I llm_load_print_meta: n_ff             = 16384
0.00.219.808 I llm_load_print_meta: n_expert         = 0
0.00.219.808 I llm_load_print_meta: n_expert_used    = 0
0.00.219.809 I llm_load_print_meta: causal attn      = 1
0.00.219.809 I llm_load_print_meta: pooling type     = 0
0.00.219.809 I llm_load_print_meta: rope type        = 2
0.00.219.809 I llm_load_print_meta: rope scaling     = linear
0.00.219.810 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.219.811 I llm_load_print_meta: freq_scale_train = 1
0.00.219.811 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.219.812 I llm_load_print_meta: rope_finetuned   = unknown
0.00.219.812 I llm_load_print_meta: ssm_d_conv       = 0
0.00.219.812 I llm_load_print_meta: ssm_d_inner      = 0
0.00.219.813 I llm_load_print_meta: ssm_d_state      = 0
0.00.219.813 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.219.813 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.219.814 I llm_load_print_meta: model type       = 2B
0.00.219.815 I llm_load_print_meta: model ftype      = Q8_0
0.00.219.815 I llm_load_print_meta: model params     = 2.51 B
0.00.219.816 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.219.817 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.219.817 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.219.817 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.219.818 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.219.818 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.219.818 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.219.819 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.219.819 I llm_load_print_meta: max token length = 93
0.00.219.840 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.313.488 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.318.534 I llama_new_context_with_model: n_ctx      = 8192
0.00.318.542 I llama_new_context_with_model: n_batch    = 2048
0.00.318.542 I llama_new_context_with_model: n_ubatch   = 512
0.00.318.543 I llama_new_context_with_model: flash_attn = 0
0.00.318.545 I llama_new_context_with_model: freq_base  = 10000.0
0.00.318.545 I llama_new_context_with_model: freq_scale = 1
0.00.348.392 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.348.409 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.348.501 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.400 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.349.407 I llama_new_context_with_model: graph nodes  = 601
0.00.349.408 I llama_new_context_with_model: graph splits = 1
0.00.349.409 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.415 I main: llama threadpool init, n_threads = 4
0.00.436.427 I 
0.00.436.506 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.436.511 I 
0.00.436.546 I sampler seed: 1326217254
0.00.436.558 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.561 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.436.561 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.00.709.281 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8305.65 tokens per second)
0.00.709.284 I llama_perf_context_print:        load time =     434.32 ms
0.00.709.285 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.709.286 I llama_perf_context_print:        eval time =     269.79 ms /     4 runs   (   67.45 ms per token,    14.83 tokens per second)
0.00.709.286 I llama_perf_context_print:       total time =     272.87 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.982 I main: llama backend init
0.00.002.135 I main: load the model and apply lora adapter, if any
0.00.022.201 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.250 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.262 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.270 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.273 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.278 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.278 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.279 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.280 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.281 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.281 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.286 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.286 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.287 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.287 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.288 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.055.919 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.615 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.143.528 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.143.538 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.143.539 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.143.540 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.143.541 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.143.543 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.143.544 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.143.547 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.143.548 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.143.549 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.143.549 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.143.551 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.143.555 I llama_model_loader: - type  f32:   37 tensors
0.00.143.559 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.514 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.214.279 I llm_load_vocab: special tokens cache size = 5
0.00.236.398 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.236.417 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.236.418 I llm_load_print_meta: arch             = gemma
0.00.236.418 I llm_load_print_meta: vocab type       = SPM
0.00.236.419 I llm_load_print_meta: n_vocab          = 256000
0.00.236.420 I llm_load_print_meta: n_merges         = 0
0.00.236.421 I llm_load_print_meta: vocab_only       = 0
0.00.236.421 I llm_load_print_meta: n_ctx_train      = 8192
0.00.236.422 I llm_load_print_meta: n_embd           = 2048
0.00.236.423 I llm_load_print_meta: n_layer          = 18
0.00.236.440 I llm_load_print_meta: n_head           = 8
0.00.236.441 I llm_load_print_meta: n_head_kv        = 1
0.00.236.442 I llm_load_print_meta: n_rot            = 256
0.00.236.442 I llm_load_print_meta: n_swa            = 0
0.00.236.443 I llm_load_print_meta: n_embd_head_k    = 256
0.00.236.443 I llm_load_print_meta: n_embd_head_v    = 256
0.00.236.445 I llm_load_print_meta: n_gqa            = 8
0.00.236.447 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.236.449 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.236.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.236.453 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.236.457 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.236.457 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.236.458 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.236.463 I llm_load_print_meta: n_ff             = 16384
0.00.236.463 I llm_load_print_meta: n_expert         = 0
0.00.236.464 I llm_load_print_meta: n_expert_used    = 0
0.00.236.464 I llm_load_print_meta: causal attn      = 1
0.00.236.464 I llm_load_print_meta: pooling type     = 0
0.00.236.465 I llm_load_print_meta: rope type        = 2
0.00.236.466 I llm_load_print_meta: rope scaling     = linear
0.00.236.467 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.236.469 I llm_load_print_meta: freq_scale_train = 1
0.00.236.470 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.236.470 I llm_load_print_meta: rope_finetuned   = unknown
0.00.236.471 I llm_load_print_meta: ssm_d_conv       = 0
0.00.236.472 I llm_load_print_meta: ssm_d_inner      = 0
0.00.236.472 I llm_load_print_meta: ssm_d_state      = 0
0.00.236.473 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.236.473 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.236.476 I llm_load_print_meta: model type       = 2B
0.00.236.477 I llm_load_print_meta: model ftype      = Q8_0
0.00.236.478 I llm_load_print_meta: model params     = 2.51 B
0.00.236.479 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.236.479 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.236.480 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.236.481 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.236.481 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.236.482 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.236.486 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.236.486 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.236.487 I llm_load_print_meta: max token length = 93
0.00.236.509 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.312.040 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.312.048 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.312.048 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.312.049 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.312.050 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.312.050 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.316.975 I llama_new_context_with_model: n_ctx      = 8192
0.00.316.981 I llama_new_context_with_model: n_batch    = 2048
0.00.316.981 I llama_new_context_with_model: n_ubatch   = 512
0.00.316.982 I llama_new_context_with_model: flash_attn = 0
0.00.316.984 I llama_new_context_with_model: freq_base  = 10000.0
0.00.316.985 I llama_new_context_with_model: freq_scale = 1
0.00.346.644 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.346.660 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.346.754 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.617 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.347.624 I llama_new_context_with_model: graph nodes  = 601
0.00.347.624 I llama_new_context_with_model: graph splits = 1
0.00.347.626 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.586 I main: llama threadpool init, n_threads = 4
0.00.438.598 I 
0.00.438.673 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.438.676 I 
0.00.438.713 I sampler seed: 3922559464
0.00.438.723 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.438.725 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.438.726 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.
I am unable to generate a response that contains sexually suggestive or explicit content. [end of text]


0.01.853.035 I llama_perf_sampler_print:    sampling time =       3.20 ms /    21 runs   (    0.15 ms per token,  6568.66 tokens per second)
0.01.853.037 I llama_perf_context_print:        load time =     436.43 ms
0.01.853.038 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.853.039 I llama_perf_context_print:        eval time =    1401.91 ms /    20 runs   (   70.10 ms per token,    14.27 tokens per second)
0.01.853.040 I llama_perf_context_print:       total time =    1414.46 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.898 I main: llama backend init
0.00.001.973 I main: load the model and apply lora adapter, if any
0.00.021.878 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.923 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.933 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.938 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.942 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.945 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.946 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.947 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.948 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.949 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.949 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.953 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.953 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.954 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.955 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.955 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.976 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.493 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.415 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.421 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.422 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.423 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.424 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.425 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.427 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.428 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.430 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.430 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.431 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.435 I llama_model_loader: - type  f32:   37 tensors
0.00.132.437 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.280 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.946 I llm_load_vocab: special tokens cache size = 5
0.00.220.513 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.526 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.527 I llm_load_print_meta: arch             = gemma
0.00.220.528 I llm_load_print_meta: vocab type       = SPM
0.00.220.529 I llm_load_print_meta: n_vocab          = 256000
0.00.220.530 I llm_load_print_meta: n_merges         = 0
0.00.220.530 I llm_load_print_meta: vocab_only       = 0
0.00.220.530 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.531 I llm_load_print_meta: n_embd           = 2048
0.00.220.531 I llm_load_print_meta: n_layer          = 18
0.00.220.549 I llm_load_print_meta: n_head           = 8
0.00.220.550 I llm_load_print_meta: n_head_kv        = 1
0.00.220.551 I llm_load_print_meta: n_rot            = 256
0.00.220.551 I llm_load_print_meta: n_swa            = 0
0.00.220.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.553 I llm_load_print_meta: n_gqa            = 8
0.00.220.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.555 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.556 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.557 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.559 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.560 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.560 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.561 I llm_load_print_meta: n_ff             = 16384
0.00.220.562 I llm_load_print_meta: n_expert         = 0
0.00.220.562 I llm_load_print_meta: n_expert_used    = 0
0.00.220.562 I llm_load_print_meta: causal attn      = 1
0.00.220.562 I llm_load_print_meta: pooling type     = 0
0.00.220.563 I llm_load_print_meta: rope type        = 2
0.00.220.563 I llm_load_print_meta: rope scaling     = linear
0.00.220.565 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.566 I llm_load_print_meta: freq_scale_train = 1
0.00.220.566 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.567 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.567 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.568 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.569 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.569 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.570 I llm_load_print_meta: model type       = 2B
0.00.220.570 I llm_load_print_meta: model ftype      = Q8_0
0.00.220.571 I llm_load_print_meta: model params     = 2.51 B
0.00.220.572 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.220.572 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.573 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.573 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.574 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.574 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.575 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.575 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.576 I llm_load_print_meta: max token length = 93
0.00.220.595 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.007 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.292.014 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.296.882 I llama_new_context_with_model: n_ctx      = 8192
0.00.296.888 I llama_new_context_with_model: n_batch    = 2048
0.00.296.889 I llama_new_context_with_model: n_ubatch   = 512
0.00.296.889 I llama_new_context_with_model: flash_attn = 0
0.00.296.891 I llama_new_context_with_model: freq_base  = 10000.0
0.00.296.892 I llama_new_context_with_model: freq_scale = 1
0.00.325.799 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.325.813 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.325.904 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.326.749 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.326.756 I llama_new_context_with_model: graph nodes  = 601
0.00.326.757 I llama_new_context_with_model: graph splits = 1
0.00.326.759 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.008 I main: llama threadpool init, n_threads = 4
0.00.421.020 I 
0.00.421.117 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.118 I 
0.00.421.166 I sampler seed: 255890682
0.00.421.173 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.176 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.421.177 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities for the most part, but there are a few exceptions. [end of text]


0.01.551.791 I llama_perf_sampler_print:    sampling time =       2.40 ms /    16 runs   (    0.15 ms per token,  6669.45 tokens per second)
0.01.551.793 I llama_perf_context_print:        load time =     419.02 ms
0.01.551.794 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.551.796 I llama_perf_context_print:        eval time =    1121.22 ms /    15 runs   (   74.75 ms per token,    13.38 tokens per second)
0.01.551.796 I llama_perf_context_print:       total time =    1130.79 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m16.135s
user	0m22.819s
sys	0m9.317s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3751 (2948768e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31954.42 ms
main:    total time = 31954.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.884 I main: llama backend init
0.00.001.983 I main: load the model and apply lora adapter, if any
0.00.022.213 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.260 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.268 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.273 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.274 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.278 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.279 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.279 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.280 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.281 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.281 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.286 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.286 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.287 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.288 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.289 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.484 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.579 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.372 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.378 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.378 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.379 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.380 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.381 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.382 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.384 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.385 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.388 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.389 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.389 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.392 I llama_model_loader: - type  f32:   37 tensors
0.00.132.394 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.395 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.733 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.541 I llm_load_vocab: special tokens cache size = 5
0.00.220.704 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.719 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.719 I llm_load_print_meta: arch             = gemma
0.00.220.720 I llm_load_print_meta: vocab type       = SPM
0.00.220.721 I llm_load_print_meta: n_vocab          = 256000
0.00.220.721 I llm_load_print_meta: n_merges         = 0
0.00.220.722 I llm_load_print_meta: vocab_only       = 0
0.00.220.722 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.722 I llm_load_print_meta: n_embd           = 2048
0.00.220.723 I llm_load_print_meta: n_layer          = 18
0.00.220.735 I llm_load_print_meta: n_head           = 8
0.00.220.736 I llm_load_print_meta: n_head_kv        = 1
0.00.220.736 I llm_load_print_meta: n_rot            = 256
0.00.220.736 I llm_load_print_meta: n_swa            = 0
0.00.220.737 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.737 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.738 I llm_load_print_meta: n_gqa            = 8
0.00.220.739 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.740 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.741 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.742 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.743 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.744 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.744 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.745 I llm_load_print_meta: n_ff             = 16384
0.00.220.746 I llm_load_print_meta: n_expert         = 0
0.00.220.746 I llm_load_print_meta: n_expert_used    = 0
0.00.220.749 I llm_load_print_meta: causal attn      = 1
0.00.220.749 I llm_load_print_meta: pooling type     = 0
0.00.220.750 I llm_load_print_meta: rope type        = 2
0.00.220.750 I llm_load_print_meta: rope scaling     = linear
0.00.220.751 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.752 I llm_load_print_meta: freq_scale_train = 1
0.00.220.752 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.752 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.753 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.753 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.753 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.754 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.755 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.756 I llm_load_print_meta: model type       = 2B
0.00.220.757 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.220.758 I llm_load_print_meta: model params     = 2.51 B
0.00.220.758 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.220.759 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.759 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.759 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.760 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.760 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.761 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.761 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.762 I llm_load_print_meta: max token length = 93
0.00.220.781 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.282.114 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.282.120 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.282.121 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.282.121 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.282.122 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.282.122 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.286.937 I llama_new_context_with_model: n_ctx      = 8192
0.00.286.943 I llama_new_context_with_model: n_batch    = 2048
0.00.286.944 I llama_new_context_with_model: n_ubatch   = 512
0.00.286.944 I llama_new_context_with_model: flash_attn = 0
0.00.286.946 I llama_new_context_with_model: freq_base  = 10000.0
0.00.286.947 I llama_new_context_with_model: freq_scale = 1
0.00.315.767 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.315.783 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.315.881 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.316.777 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.316.785 I llama_new_context_with_model: graph nodes  = 601
0.00.316.786 I llama_new_context_with_model: graph splits = 1
0.00.316.787 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.398.654 I main: llama threadpool init, n_threads = 4
0.00.398.667 I 
0.00.398.741 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.398.744 I 
0.00.398.782 I sampler seed: 1252783987
0.00.398.792 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.398.795 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.398.795 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvously.

The question contains a typo. The correct spelling is "unhappily".

**Unhappily, he felt frustrated and unhappily he couldn

0.01.994.369 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7076.99 tokens per second)
0.01.994.371 I llama_perf_context_print:        load time =     396.65 ms
0.01.994.372 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.994.373 I llama_perf_context_print:        eval time =    1578.50 ms /    32 runs   (   49.33 ms per token,    20.27 tokens per second)
0.01.994.374 I llama_perf_context_print:       total time =    1595.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3751 (2948768e)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32008.06 ms
main:    total time = 32008.06 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
I build: 3751 (2948768e) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.946 I main: llama backend init
0.00.002.062 I main: load the model and apply lora adapter, if any
0.00.021.903 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.919 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.925 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.929 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.932 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.934 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.934 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.935 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.935 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.936 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.940 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.940 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.941 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.941 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.942 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.053 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.237 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.095 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.101 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.102 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.102 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.103 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.104 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.105 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.107 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.108 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.111 I llama_model_loader: - type  f32:   37 tensors
0.00.132.114 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.114 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.602 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.210 I llm_load_vocab: special tokens cache size = 5
0.00.217.756 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.769 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.770 I llm_load_print_meta: arch             = gemma
0.00.217.771 I llm_load_print_meta: vocab type       = SPM
0.00.217.771 I llm_load_print_meta: n_vocab          = 256000
0.00.217.772 I llm_load_print_meta: n_merges         = 0
0.00.217.772 I llm_load_print_meta: vocab_only       = 0
0.00.217.772 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.773 I llm_load_print_meta: n_embd           = 2048
0.00.217.773 I llm_load_print_meta: n_layer          = 18
0.00.217.784 I llm_load_print_meta: n_head           = 8
0.00.217.785 I llm_load_print_meta: n_head_kv        = 1
0.00.217.785 I llm_load_print_meta: n_rot            = 256
0.00.217.785 I llm_load_print_meta: n_swa            = 0
0.00.217.786 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.786 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.787 I llm_load_print_meta: n_gqa            = 8
0.00.217.788 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.789 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.789 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.792 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.792 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.793 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.793 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.794 I llm_load_print_meta: n_ff             = 16384
0.00.217.794 I llm_load_print_meta: n_expert         = 0
0.00.217.795 I llm_load_print_meta: n_expert_used    = 0
0.00.217.795 I llm_load_print_meta: causal attn      = 1
0.00.217.795 I llm_load_print_meta: pooling type     = 0
0.00.217.795 I llm_load_print_meta: rope type        = 2
0.00.217.796 I llm_load_print_meta: rope scaling     = linear
0.00.217.797 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.798 I llm_load_print_meta: freq_scale_train = 1
0.00.217.798 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.798 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.799 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.799 I llm_load_print_meta: ssm_d_inner      = 0
0.00.217.799 I llm_load_print_meta: ssm_d_state      = 0
0.00.217.800 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.217.800 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.217.801 I llm_load_print_meta: model type       = 2B
0.00.217.802 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.217.802 I llm_load_print_meta: model params     = 2.51 B
0.00.217.803 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.217.803 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.217.804 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.217.804 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.217.804 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.217.804 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.217.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.217.805 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.217.806 I llm_load_print_meta: max token length = 93
0.00.217.820 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.274.903 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.279.730 I llama_new_context_with_model: n_ctx      = 8192
0.00.279.736 I llama_new_context_with_model: n_batch    = 2048
0.00.279.736 I llama_new_context_with_model: n_ubatch   = 512
0.00.279.737 I llama_new_context_with_model: flash_attn = 0
0.00.279.739 I llama_new_context_with_model: freq_base  = 10000.0
0.00.279.740 I llama_new_context_with_model: freq_scale = 1
0.00.308.738 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.308.753 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.308.845 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.696 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.704 I llama_new_context_with_model: graph nodes  = 601
0.00.309.704 I llama_new_context_with_model: graph splits = 1
0.00.309.706 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.389.497 I main: llama threadpool init, n_threads = 4
0.00.389.509 I 
0.00.389.582 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.389.585 I 
0.00.389.612 I sampler seed: 838474969
0.00.389.623 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.389.627 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.389.627 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally to the prompt, providing an example of how the prompt and response could be improved.

**Prompt:**

Explain the process of using the Kruskal

0.02.000.283 I llama_perf_sampler_print:    sampling time =       5.75 ms /    33 runs   (    0.17 ms per token,  5739.13 tokens per second)
0.02.000.286 I llama_perf_context_print:        load time =     387.42 ms
0.02.000.287 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.000.289 I llama_perf_context_print:        eval time =    1590.95 ms /    32 runs   (   49.72 ms per token,    20.11 tokens per second)
0.02.000.289 I llama_perf_context_print:       total time =    1610.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.738s
user	8m14.345s
sys	0m6.709s
