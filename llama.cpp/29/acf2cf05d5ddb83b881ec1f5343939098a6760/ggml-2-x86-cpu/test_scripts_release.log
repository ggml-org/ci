+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.573 I build: 4912 (29acf2cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.030.497 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.509 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.517 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.523 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.524 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.527 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.527 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.528 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.529 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.529 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.530 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.541 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.543 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.544 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.544 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.545 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.856 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.748 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.068 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.078 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.080 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.081 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.083 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.084 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.087 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.088 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.089 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.090 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.139.091 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.139.096 I llama_model_loader: - type  f32:   37 tensors
0.00.139.098 I llama_model_loader: - type q8_0:  127 tensors
0.00.139.100 I print_info: file format = GGUF V3 (latest)
0.00.139.101 I print_info: file type   = Q8_0
0.00.139.103 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.221.732 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.276.379 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.107 I load: special tokens cache size = 5
0.00.298.872 I load: token to piece cache size = 1.6014 MB
0.00.298.895 I print_info: arch             = gemma
0.00.298.896 I print_info: vocab_only       = 0
0.00.298.896 I print_info: n_ctx_train      = 8192
0.00.298.897 I print_info: n_embd           = 2048
0.00.298.897 I print_info: n_layer          = 18
0.00.298.918 I print_info: n_head           = 8
0.00.298.919 I print_info: n_head_kv        = 1
0.00.298.920 I print_info: n_rot            = 256
0.00.298.920 I print_info: n_swa            = 0
0.00.298.921 I print_info: n_swa_pattern    = 1
0.00.298.921 I print_info: n_embd_head_k    = 256
0.00.298.921 I print_info: n_embd_head_v    = 256
0.00.298.923 I print_info: n_gqa            = 8
0.00.298.925 I print_info: n_embd_k_gqa     = 256
0.00.298.926 I print_info: n_embd_v_gqa     = 256
0.00.298.928 I print_info: f_norm_eps       = 0.0e+00
0.00.298.930 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.298.930 I print_info: f_clamp_kqv      = 0.0e+00
0.00.298.930 I print_info: f_max_alibi_bias = 0.0e+00
0.00.298.931 I print_info: f_logit_scale    = 0.0e+00
0.00.298.931 I print_info: f_attn_scale     = 0.0e+00
0.00.298.933 I print_info: n_ff             = 16384
0.00.298.933 I print_info: n_expert         = 0
0.00.298.933 I print_info: n_expert_used    = 0
0.00.298.933 I print_info: causal attn      = 1
0.00.298.934 I print_info: pooling type     = 0
0.00.298.934 I print_info: rope type        = 2
0.00.298.935 I print_info: rope scaling     = linear
0.00.298.936 I print_info: freq_base_train  = 10000.0
0.00.298.937 I print_info: freq_scale_train = 1
0.00.298.938 I print_info: n_ctx_orig_yarn  = 8192
0.00.298.938 I print_info: rope_finetuned   = unknown
0.00.298.938 I print_info: ssm_d_conv       = 0
0.00.298.939 I print_info: ssm_d_inner      = 0
0.00.298.939 I print_info: ssm_d_state      = 0
0.00.298.939 I print_info: ssm_dt_rank      = 0
0.00.298.939 I print_info: ssm_dt_b_c_rms   = 0
0.00.298.940 I print_info: model type       = 2B
0.00.298.941 I print_info: model params     = 2.51 B
0.00.298.941 I print_info: general.name     = gemma-1.1-2b-it
0.00.298.944 I print_info: vocab type       = SPM
0.00.298.945 I print_info: n_vocab          = 256000
0.00.298.945 I print_info: n_merges         = 0
0.00.298.946 I print_info: BOS token        = 2 '<bos>'
0.00.298.946 I print_info: EOS token        = 1 '<eos>'
0.00.298.947 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.298.947 I print_info: UNK token        = 3 '<unk>'
0.00.298.948 I print_info: PAD token        = 0 '<pad>'
0.00.298.948 I print_info: LF token         = 227 '<0x0A>'
0.00.298.949 I print_info: EOG token        = 1 '<eos>'
0.00.298.949 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.298.950 I print_info: max token length = 93
0.00.298.951 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.398.125 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.398.134 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.398.135 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.398.136 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.398.136 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.398.137 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.399.573 I llama_context: constructing llama_context
0.00.399.577 I llama_context: n_seq_max     = 1
0.00.399.578 I llama_context: n_ctx         = 4096
0.00.399.578 I llama_context: n_ctx_per_seq = 4096
0.00.399.579 I llama_context: n_batch       = 2048
0.00.399.579 I llama_context: n_ubatch      = 512
0.00.399.580 I llama_context: causal_attn   = 1
0.00.399.580 I llama_context: flash_attn    = 0
0.00.399.582 I llama_context: freq_base     = 10000.0
0.00.399.583 I llama_context: freq_scale    = 1
0.00.399.584 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.700 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.399.711 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.414.375 I init:        CPU KV buffer size =    72.00 MiB
0.00.414.392 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.421.593 I llama_context:        CPU compute buffer size =   509.01 MiB
0.00.421.598 I llama_context: graph nodes  = 601
0.00.421.599 I llama_context: graph splits = 1
0.00.421.605 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.421.605 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.512.187 I main: llama threadpool init, n_threads = 4
0.00.512.199 I 
0.00.512.260 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.512.263 I 
0.00.512.300 I sampler seed: 526853507
0.00.512.310 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.512.314 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.512.315 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.512.315 I 
 increadibly in complexity and utility, but with potentially unpredictable behavior.

**Complexity and utility:**

* **Increased functionality:** The ability to handle a wider range

0.02.810.699 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6700.51 tokens per second)
0.02.810.703 I llama_perf_context_print:        load time =     508.72 ms
0.02.810.704 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.810.706 I llama_perf_context_print:        eval time =    2279.32 ms /    32 runs   (   71.23 ms per token,    14.04 tokens per second)
0.02.810.706 I llama_perf_context_print:       total time =    2301.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.175 I build: 4912 (29acf2cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.029.582 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.029.598 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.029.607 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.029.608 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.029.611 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.029.612 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.029.612 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.029.613 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.029.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.029.614 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.029.624 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.029.625 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.029.626 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.029.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.029.627 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.056.044 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.132.044 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.138.640 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.138.647 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.138.648 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.138.648 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.138.649 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.138.650 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.138.651 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.138.653 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.138.654 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.138.655 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.138.656 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.138.657 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.138.661 I llama_model_loader: - type  f32:   37 tensors
0.00.138.662 I llama_model_loader: - type q8_0:  127 tensors
0.00.138.665 I print_info: file format = GGUF V3 (latest)
0.00.138.666 I print_info: file type   = Q8_0
0.00.138.668 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.212.229 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.562 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.200 I load: special tokens cache size = 5
0.00.287.029 I load: token to piece cache size = 1.6014 MB
0.00.287.051 I print_info: arch             = gemma
0.00.287.052 I print_info: vocab_only       = 0
0.00.287.053 I print_info: n_ctx_train      = 8192
0.00.287.053 I print_info: n_embd           = 2048
0.00.287.054 I print_info: n_layer          = 18
0.00.287.074 I print_info: n_head           = 8
0.00.287.076 I print_info: n_head_kv        = 1
0.00.287.076 I print_info: n_rot            = 256
0.00.287.077 I print_info: n_swa            = 0
0.00.287.077 I print_info: n_swa_pattern    = 1
0.00.287.077 I print_info: n_embd_head_k    = 256
0.00.287.078 I print_info: n_embd_head_v    = 256
0.00.287.080 I print_info: n_gqa            = 8
0.00.287.082 I print_info: n_embd_k_gqa     = 256
0.00.287.083 I print_info: n_embd_v_gqa     = 256
0.00.287.085 I print_info: f_norm_eps       = 0.0e+00
0.00.287.088 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.287.088 I print_info: f_clamp_kqv      = 0.0e+00
0.00.287.089 I print_info: f_max_alibi_bias = 0.0e+00
0.00.287.090 I print_info: f_logit_scale    = 0.0e+00
0.00.287.090 I print_info: f_attn_scale     = 0.0e+00
0.00.287.092 I print_info: n_ff             = 16384
0.00.287.093 I print_info: n_expert         = 0
0.00.287.093 I print_info: n_expert_used    = 0
0.00.287.093 I print_info: causal attn      = 1
0.00.287.094 I print_info: pooling type     = 0
0.00.287.094 I print_info: rope type        = 2
0.00.287.095 I print_info: rope scaling     = linear
0.00.287.096 I print_info: freq_base_train  = 10000.0
0.00.287.097 I print_info: freq_scale_train = 1
0.00.287.097 I print_info: n_ctx_orig_yarn  = 8192
0.00.287.097 I print_info: rope_finetuned   = unknown
0.00.287.098 I print_info: ssm_d_conv       = 0
0.00.287.098 I print_info: ssm_d_inner      = 0
0.00.287.099 I print_info: ssm_d_state      = 0
0.00.287.099 I print_info: ssm_dt_rank      = 0
0.00.287.100 I print_info: ssm_dt_b_c_rms   = 0
0.00.287.101 I print_info: model type       = 2B
0.00.287.102 I print_info: model params     = 2.51 B
0.00.287.102 I print_info: general.name     = gemma-1.1-2b-it
0.00.287.105 I print_info: vocab type       = SPM
0.00.287.106 I print_info: n_vocab          = 256000
0.00.287.107 I print_info: n_merges         = 0
0.00.287.107 I print_info: BOS token        = 2 '<bos>'
0.00.287.108 I print_info: EOS token        = 1 '<eos>'
0.00.287.108 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.287.109 I print_info: UNK token        = 3 '<unk>'
0.00.287.109 I print_info: PAD token        = 0 '<pad>'
0.00.287.110 I print_info: LF token         = 227 '<0x0A>'
0.00.287.110 I print_info: EOG token        = 1 '<eos>'
0.00.287.111 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.287.111 I print_info: max token length = 93
0.00.287.113 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.371.150 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.396 I llama_context: constructing llama_context
0.00.372.400 I llama_context: n_seq_max     = 1
0.00.372.401 I llama_context: n_ctx         = 4096
0.00.372.401 I llama_context: n_ctx_per_seq = 4096
0.00.372.401 I llama_context: n_batch       = 2048
0.00.372.402 I llama_context: n_ubatch      = 512
0.00.372.402 I llama_context: causal_attn   = 1
0.00.372.403 I llama_context: flash_attn    = 0
0.00.372.405 I llama_context: freq_base     = 10000.0
0.00.372.406 I llama_context: freq_scale    = 1
0.00.372.406 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.511 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.372.523 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.387.571 I init:        CPU KV buffer size =    72.00 MiB
0.00.387.586 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.394.688 I llama_context:        CPU compute buffer size =   509.01 MiB
0.00.394.694 I llama_context: graph nodes  = 601
0.00.394.695 I llama_context: graph splits = 1
0.00.394.701 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.394.701 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.480.017 I main: llama threadpool init, n_threads = 4
0.00.480.028 I 
0.00.480.093 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.480.096 I 
0.00.480.132 I sampler seed: 2754187190
0.00.480.142 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.480.145 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.480.146 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.480.146 I 
 increasities in a lively, immersive environment. [end of text]


0.01.165.219 I llama_perf_sampler_print:    sampling time =       1.47 ms /    11 runs   (    0.13 ms per token,  7467.75 tokens per second)
0.01.165.223 I llama_perf_context_print:        load time =     476.95 ms
0.01.165.224 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.165.226 I llama_perf_context_print:        eval time =     678.63 ms /    10 runs   (   67.86 ms per token,    14.74 tokens per second)
0.01.165.227 I llama_perf_context_print:       total time =     687.88 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.610 I build: 4912 (29acf2cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.814 I main: llama backend init
0.00.000.821 I main: load the model and apply lora adapter, if any
0.00.030.887 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.030.901 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.030.910 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.916 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.917 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.921 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.922 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.923 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.924 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.925 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.926 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.937 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.938 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.939 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.939 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.030.940 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.813 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.974 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.140.330 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.140.338 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.140.339 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.140.340 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.140.341 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.140.342 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.140.343 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.140.345 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.140.346 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.140.347 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.140.348 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.140.348 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.140.351 I llama_model_loader: - type  f32:   37 tensors
0.00.140.352 I llama_model_loader: - type q8_0:  127 tensors
0.00.140.356 I print_info: file format = GGUF V3 (latest)
0.00.140.356 I print_info: file type   = Q8_0
0.00.140.359 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.216.299 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.270.190 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.863 I load: special tokens cache size = 5
0.00.293.017 I load: token to piece cache size = 1.6014 MB
0.00.293.048 I print_info: arch             = gemma
0.00.293.049 I print_info: vocab_only       = 0
0.00.293.049 I print_info: n_ctx_train      = 8192
0.00.293.050 I print_info: n_embd           = 2048
0.00.293.050 I print_info: n_layer          = 18
0.00.293.066 I print_info: n_head           = 8
0.00.293.068 I print_info: n_head_kv        = 1
0.00.293.069 I print_info: n_rot            = 256
0.00.293.069 I print_info: n_swa            = 0
0.00.293.069 I print_info: n_swa_pattern    = 1
0.00.293.070 I print_info: n_embd_head_k    = 256
0.00.293.070 I print_info: n_embd_head_v    = 256
0.00.293.072 I print_info: n_gqa            = 8
0.00.293.073 I print_info: n_embd_k_gqa     = 256
0.00.293.075 I print_info: n_embd_v_gqa     = 256
0.00.293.076 I print_info: f_norm_eps       = 0.0e+00
0.00.293.077 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.293.078 I print_info: f_clamp_kqv      = 0.0e+00
0.00.293.078 I print_info: f_max_alibi_bias = 0.0e+00
0.00.293.078 I print_info: f_logit_scale    = 0.0e+00
0.00.293.079 I print_info: f_attn_scale     = 0.0e+00
0.00.293.081 I print_info: n_ff             = 16384
0.00.293.081 I print_info: n_expert         = 0
0.00.293.081 I print_info: n_expert_used    = 0
0.00.293.081 I print_info: causal attn      = 1
0.00.293.082 I print_info: pooling type     = 0
0.00.293.082 I print_info: rope type        = 2
0.00.293.082 I print_info: rope scaling     = linear
0.00.293.084 I print_info: freq_base_train  = 10000.0
0.00.293.084 I print_info: freq_scale_train = 1
0.00.293.085 I print_info: n_ctx_orig_yarn  = 8192
0.00.293.085 I print_info: rope_finetuned   = unknown
0.00.293.085 I print_info: ssm_d_conv       = 0
0.00.293.086 I print_info: ssm_d_inner      = 0
0.00.293.086 I print_info: ssm_d_state      = 0
0.00.293.086 I print_info: ssm_dt_rank      = 0
0.00.293.086 I print_info: ssm_dt_b_c_rms   = 0
0.00.293.087 I print_info: model type       = 2B
0.00.293.088 I print_info: model params     = 2.51 B
0.00.293.088 I print_info: general.name     = gemma-1.1-2b-it
0.00.293.092 I print_info: vocab type       = SPM
0.00.293.093 I print_info: n_vocab          = 256000
0.00.293.093 I print_info: n_merges         = 0
0.00.293.094 I print_info: BOS token        = 2 '<bos>'
0.00.293.094 I print_info: EOS token        = 1 '<eos>'
0.00.293.095 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.293.095 I print_info: UNK token        = 3 '<unk>'
0.00.293.095 I print_info: PAD token        = 0 '<pad>'
0.00.293.096 I print_info: LF token         = 227 '<0x0A>'
0.00.293.096 I print_info: EOG token        = 1 '<eos>'
0.00.293.097 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.293.097 I print_info: max token length = 93
0.00.293.098 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.365.244 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.365.251 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.365.252 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.365.252 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.365.253 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.365.253 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.366.552 I llama_context: constructing llama_context
0.00.366.557 I llama_context: n_seq_max     = 1
0.00.366.558 I llama_context: n_ctx         = 4096
0.00.366.558 I llama_context: n_ctx_per_seq = 4096
0.00.366.559 I llama_context: n_batch       = 2048
0.00.366.560 I llama_context: n_ubatch      = 512
0.00.366.560 I llama_context: causal_attn   = 1
0.00.366.561 I llama_context: flash_attn    = 0
0.00.366.563 I llama_context: freq_base     = 10000.0
0.00.366.564 I llama_context: freq_scale    = 1
0.00.366.564 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.366.677 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.366.690 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.382.278 I init:        CPU KV buffer size =    72.00 MiB
0.00.382.297 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.622 I llama_context:        CPU compute buffer size =   509.01 MiB
0.00.389.627 I llama_context: graph nodes  = 601
0.00.389.628 I llama_context: graph splits = 1
0.00.389.633 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.634 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.481.362 I main: llama threadpool init, n_threads = 4
0.00.481.374 I 
0.00.481.435 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.481.438 I 
0.00.481.479 I sampler seed: 3269377393
0.00.481.490 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.481.493 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.481.494 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.481.494 I 
 maneuvously.

**Answer:** I understand. I will be careful not to make any sarcastic or disrespectful remarks. [end of text]


0.02.333.744 I llama_perf_sampler_print:    sampling time =       3.93 ms /    26 runs   (    0.15 ms per token,  6622.52 tokens per second)
0.02.333.748 I llama_perf_context_print:        load time =     477.83 ms
0.02.333.749 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.333.750 I llama_perf_context_print:        eval time =    1837.12 ms /    25 runs   (   73.48 ms per token,    13.61 tokens per second)
0.02.333.751 I llama_perf_context_print:       total time =    1855.07 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.184 I build: 4912 (29acf2cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.388 I main: llama backend init
0.00.000.395 I main: load the model and apply lora adapter, if any
0.00.322.940 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.322.954 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.322.971 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.322.979 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.322.981 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.322.985 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.322.986 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.322.986 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.322.987 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.322.988 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.322.988 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.323.004 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.323.005 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.323.006 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.323.006 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.323.007 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.350.150 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.426.236 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.432.684 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.432.692 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.432.693 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.432.693 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.432.694 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.432.695 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.432.696 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.432.698 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.432.699 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.432.700 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.432.701 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.432.701 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.432.704 I llama_model_loader: - type  f32:   37 tensors
0.00.432.705 I llama_model_loader: - type q8_0:  127 tensors
0.00.432.709 I print_info: file format = GGUF V3 (latest)
0.00.432.709 I print_info: file type   = Q8_0
0.00.432.712 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.508.751 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.563.164 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.563.958 I load: special tokens cache size = 5
0.00.585.892 I load: token to piece cache size = 1.6014 MB
0.00.585.916 I print_info: arch             = gemma
0.00.585.916 I print_info: vocab_only       = 0
0.00.585.917 I print_info: n_ctx_train      = 8192
0.00.585.917 I print_info: n_embd           = 2048
0.00.585.918 I print_info: n_layer          = 18
0.00.585.929 I print_info: n_head           = 8
0.00.585.932 I print_info: n_head_kv        = 1
0.00.585.932 I print_info: n_rot            = 256
0.00.585.933 I print_info: n_swa            = 0
0.00.585.933 I print_info: n_swa_pattern    = 1
0.00.585.933 I print_info: n_embd_head_k    = 256
0.00.585.933 I print_info: n_embd_head_v    = 256
0.00.585.936 I print_info: n_gqa            = 8
0.00.585.938 I print_info: n_embd_k_gqa     = 256
0.00.585.940 I print_info: n_embd_v_gqa     = 256
0.00.585.941 I print_info: f_norm_eps       = 0.0e+00
0.00.585.942 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.585.942 I print_info: f_clamp_kqv      = 0.0e+00
0.00.585.943 I print_info: f_max_alibi_bias = 0.0e+00
0.00.585.943 I print_info: f_logit_scale    = 0.0e+00
0.00.585.943 I print_info: f_attn_scale     = 0.0e+00
0.00.585.945 I print_info: n_ff             = 16384
0.00.585.946 I print_info: n_expert         = 0
0.00.585.946 I print_info: n_expert_used    = 0
0.00.585.946 I print_info: causal attn      = 1
0.00.585.947 I print_info: pooling type     = 0
0.00.585.947 I print_info: rope type        = 2
0.00.585.947 I print_info: rope scaling     = linear
0.00.585.949 I print_info: freq_base_train  = 10000.0
0.00.585.949 I print_info: freq_scale_train = 1
0.00.585.950 I print_info: n_ctx_orig_yarn  = 8192
0.00.585.950 I print_info: rope_finetuned   = unknown
0.00.585.950 I print_info: ssm_d_conv       = 0
0.00.585.951 I print_info: ssm_d_inner      = 0
0.00.585.951 I print_info: ssm_d_state      = 0
0.00.585.951 I print_info: ssm_dt_rank      = 0
0.00.585.952 I print_info: ssm_dt_b_c_rms   = 0
0.00.585.953 I print_info: model type       = 2B
0.00.585.954 I print_info: model params     = 2.51 B
0.00.585.954 I print_info: general.name     = gemma-1.1-2b-it
0.00.585.957 I print_info: vocab type       = SPM
0.00.585.957 I print_info: n_vocab          = 256000
0.00.585.958 I print_info: n_merges         = 0
0.00.585.958 I print_info: BOS token        = 2 '<bos>'
0.00.585.959 I print_info: EOS token        = 1 '<eos>'
0.00.585.959 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.585.960 I print_info: UNK token        = 3 '<unk>'
0.00.585.960 I print_info: PAD token        = 0 '<pad>'
0.00.585.960 I print_info: LF token         = 227 '<0x0A>'
0.00.585.961 I print_info: EOG token        = 1 '<eos>'
0.00.585.961 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.585.962 I print_info: max token length = 93
0.00.585.963 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.657.643 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.657.653 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.658.944 I llama_context: constructing llama_context
0.00.658.950 I llama_context: n_seq_max     = 1
0.00.658.950 I llama_context: n_ctx         = 4096
0.00.658.951 I llama_context: n_ctx_per_seq = 4096
0.00.658.951 I llama_context: n_batch       = 2048
0.00.658.951 I llama_context: n_ubatch      = 512
0.00.658.952 I llama_context: causal_attn   = 1
0.00.658.953 I llama_context: flash_attn    = 0
0.00.658.955 I llama_context: freq_base     = 10000.0
0.00.658.956 I llama_context: freq_scale    = 1
0.00.658.957 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.659.080 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.659.092 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.675.153 I init:        CPU KV buffer size =    72.00 MiB
0.00.675.168 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.682.690 I llama_context:        CPU compute buffer size =   509.01 MiB
0.00.682.695 I llama_context: graph nodes  = 601
0.00.682.696 I llama_context: graph splits = 1
0.00.682.702 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.682.702 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.776.936 I main: llama threadpool init, n_threads = 4
0.00.776.947 I 
0.00.777.007 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.777.010 I 
0.00.777.050 I sampler seed: 3725670763
0.00.777.060 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.777.064 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.777.065 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.777.066 I 
 increamically, eager to know what the next step is. [end of text]


0.01.780.233 I llama_perf_sampler_print:    sampling time =       1.99 ms /    14 runs   (    0.14 ms per token,  7035.18 tokens per second)
0.01.780.236 I llama_perf_context_print:        load time =     773.85 ms
0.01.780.237 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.780.239 I llama_perf_context_print:        eval time =     994.63 ms /    13 runs   (   76.51 ms per token,    13.07 tokens per second)
0.01.780.239 I llama_perf_context_print:       total time =    1005.97 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.532s
user	0m26.523s
sys	0m9.541s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4912 (29acf2cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40295.30 ms
main:    total time = 40295.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4912 (29acf2cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.359 I main: llama backend init
0.00.000.365 I main: load the model and apply lora adapter, if any
0.00.030.316 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.030.435 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.030.445 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.456 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.459 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.462 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.463 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.464 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.464 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.465 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.466 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.472 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.473 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.473 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.475 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.056.885 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.123 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.643 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.652 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.653 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.654 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.655 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.656 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.657 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.660 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.660 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.139.663 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.139.664 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.664 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.139.665 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.139.670 I llama_model_loader: - type  f32:   37 tensors
0.00.139.671 I llama_model_loader: - type q4_K:  108 tensors
0.00.139.672 I llama_model_loader: - type q6_K:   19 tensors
0.00.139.675 I print_info: file format = GGUF V3 (latest)
0.00.139.684 I print_info: file type   = Q4_K - Medium
0.00.139.687 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.229.827 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.286.648 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.287.425 I load: special tokens cache size = 5
0.00.309.704 I load: token to piece cache size = 1.6014 MB
0.00.309.726 I print_info: arch             = gemma
0.00.309.727 I print_info: vocab_only       = 0
0.00.309.727 I print_info: n_ctx_train      = 8192
0.00.309.728 I print_info: n_embd           = 2048
0.00.309.728 I print_info: n_layer          = 18
0.00.309.748 I print_info: n_head           = 8
0.00.309.751 I print_info: n_head_kv        = 1
0.00.309.751 I print_info: n_rot            = 256
0.00.309.752 I print_info: n_swa            = 0
0.00.309.752 I print_info: n_swa_pattern    = 1
0.00.309.752 I print_info: n_embd_head_k    = 256
0.00.309.753 I print_info: n_embd_head_v    = 256
0.00.309.755 I print_info: n_gqa            = 8
0.00.309.757 I print_info: n_embd_k_gqa     = 256
0.00.309.759 I print_info: n_embd_v_gqa     = 256
0.00.309.759 I print_info: f_norm_eps       = 0.0e+00
0.00.309.761 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.309.761 I print_info: f_clamp_kqv      = 0.0e+00
0.00.309.762 I print_info: f_max_alibi_bias = 0.0e+00
0.00.309.762 I print_info: f_logit_scale    = 0.0e+00
0.00.309.762 I print_info: f_attn_scale     = 0.0e+00
0.00.309.764 I print_info: n_ff             = 16384
0.00.309.764 I print_info: n_expert         = 0
0.00.309.765 I print_info: n_expert_used    = 0
0.00.309.765 I print_info: causal attn      = 1
0.00.309.765 I print_info: pooling type     = 0
0.00.309.766 I print_info: rope type        = 2
0.00.309.766 I print_info: rope scaling     = linear
0.00.309.768 I print_info: freq_base_train  = 10000.0
0.00.309.768 I print_info: freq_scale_train = 1
0.00.309.769 I print_info: n_ctx_orig_yarn  = 8192
0.00.309.769 I print_info: rope_finetuned   = unknown
0.00.309.769 I print_info: ssm_d_conv       = 0
0.00.309.770 I print_info: ssm_d_inner      = 0
0.00.309.770 I print_info: ssm_d_state      = 0
0.00.309.770 I print_info: ssm_dt_rank      = 0
0.00.309.770 I print_info: ssm_dt_b_c_rms   = 0
0.00.309.772 I print_info: model type       = 2B
0.00.309.772 I print_info: model params     = 2.51 B
0.00.309.773 I print_info: general.name     = gemma-1.1-2b-it
0.00.309.776 I print_info: vocab type       = SPM
0.00.309.777 I print_info: n_vocab          = 256000
0.00.309.777 I print_info: n_merges         = 0
0.00.309.778 I print_info: BOS token        = 2 '<bos>'
0.00.309.778 I print_info: EOS token        = 1 '<eos>'
0.00.309.779 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.309.779 I print_info: UNK token        = 3 '<unk>'
0.00.309.780 I print_info: PAD token        = 0 '<pad>'
0.00.309.780 I print_info: LF token         = 227 '<0x0A>'
0.00.309.781 I print_info: EOG token        = 1 '<eos>'
0.00.309.781 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.309.781 I print_info: max token length = 93
0.00.309.788 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.366.728 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.366.736 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.366.737 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.366.737 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.366.738 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.366.739 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.368.032 I llama_context: constructing llama_context
0.00.368.037 I llama_context: n_seq_max     = 1
0.00.368.038 I llama_context: n_ctx         = 4096
0.00.368.038 I llama_context: n_ctx_per_seq = 4096
0.00.368.038 I llama_context: n_batch       = 2048
0.00.368.039 I llama_context: n_ubatch      = 512
0.00.368.040 I llama_context: causal_attn   = 1
0.00.368.040 I llama_context: flash_attn    = 0
0.00.368.042 I llama_context: freq_base     = 10000.0
0.00.368.043 I llama_context: freq_scale    = 1
0.00.368.044 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.159 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.368.172 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.383.006 I init:        CPU KV buffer size =    72.00 MiB
0.00.383.020 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.389.963 I llama_context:        CPU compute buffer size =   509.01 MiB
0.00.389.969 I llama_context: graph nodes  = 601
0.00.389.969 I llama_context: graph splits = 1
0.00.389.976 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.976 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.469 I main: llama threadpool init, n_threads = 4
0.00.467.480 I 
0.00.467.538 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.467.541 I 
0.00.467.581 I sampler seed: 1234977085
0.00.467.591 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.594 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.594 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.595 I 
 seconally.

I understand. I will make sure to communicate effectively and respectfully in all future interactions. [end of text]


0.01.598.633 I llama_perf_sampler_print:    sampling time =       3.71 ms /    23 runs   (    0.16 ms per token,  6197.79 tokens per second)
0.01.598.637 I llama_perf_context_print:        load time =     464.39 ms
0.01.598.639 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.598.640 I llama_perf_context_print:        eval time =    1117.11 ms /    22 runs   (   50.78 ms per token,    19.69 tokens per second)
0.01.598.641 I llama_perf_context_print:       total time =    1133.86 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4912 (29acf2cf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 40296.36 ms
main:    total time = 40296.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.605 I build: 4912 (29acf2cf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.795 I main: llama backend init
0.00.000.801 I main: load the model and apply lora adapter, if any
0.00.030.683 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.030.701 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.030.711 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.030.712 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.030.715 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.030.717 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.030.718 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.030.719 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.030.720 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.030.721 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.030.726 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.030.727 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.030.727 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.030.732 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.057.654 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.133.520 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.843 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.852 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.853 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.854 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.855 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.856 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.856 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.859 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.860 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.139.861 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.139.865 I llama_model_loader: - type  f32:   37 tensors
0.00.139.866 I llama_model_loader: - type q4_K:  108 tensors
0.00.139.867 I llama_model_loader: - type q6_K:   19 tensors
0.00.139.869 I print_info: file format = GGUF V3 (latest)
0.00.139.870 I print_info: file type   = Q4_K - Medium
0.00.139.872 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.221.991 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.277.215 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.277.931 I load: special tokens cache size = 5
0.00.300.101 I load: token to piece cache size = 1.6014 MB
0.00.300.124 I print_info: arch             = gemma
0.00.300.125 I print_info: vocab_only       = 0
0.00.300.126 I print_info: n_ctx_train      = 8192
0.00.300.126 I print_info: n_embd           = 2048
0.00.300.126 I print_info: n_layer          = 18
0.00.300.138 I print_info: n_head           = 8
0.00.300.140 I print_info: n_head_kv        = 1
0.00.300.140 I print_info: n_rot            = 256
0.00.300.141 I print_info: n_swa            = 0
0.00.300.141 I print_info: n_swa_pattern    = 1
0.00.300.141 I print_info: n_embd_head_k    = 256
0.00.300.142 I print_info: n_embd_head_v    = 256
0.00.300.144 I print_info: n_gqa            = 8
0.00.300.146 I print_info: n_embd_k_gqa     = 256
0.00.300.147 I print_info: n_embd_v_gqa     = 256
0.00.300.148 I print_info: f_norm_eps       = 0.0e+00
0.00.300.150 I print_info: f_norm_rms_eps   = 1.0e-06
0.00.300.150 I print_info: f_clamp_kqv      = 0.0e+00
0.00.300.151 I print_info: f_max_alibi_bias = 0.0e+00
0.00.300.151 I print_info: f_logit_scale    = 0.0e+00
0.00.300.151 I print_info: f_attn_scale     = 0.0e+00
0.00.300.153 I print_info: n_ff             = 16384
0.00.300.154 I print_info: n_expert         = 0
0.00.300.154 I print_info: n_expert_used    = 0
0.00.300.154 I print_info: causal attn      = 1
0.00.300.154 I print_info: pooling type     = 0
0.00.300.155 I print_info: rope type        = 2
0.00.300.155 I print_info: rope scaling     = linear
0.00.300.156 I print_info: freq_base_train  = 10000.0
0.00.300.157 I print_info: freq_scale_train = 1
0.00.300.157 I print_info: n_ctx_orig_yarn  = 8192
0.00.300.158 I print_info: rope_finetuned   = unknown
0.00.300.158 I print_info: ssm_d_conv       = 0
0.00.300.158 I print_info: ssm_d_inner      = 0
0.00.300.159 I print_info: ssm_d_state      = 0
0.00.300.159 I print_info: ssm_dt_rank      = 0
0.00.300.159 I print_info: ssm_dt_b_c_rms   = 0
0.00.300.160 I print_info: model type       = 2B
0.00.300.161 I print_info: model params     = 2.51 B
0.00.300.161 I print_info: general.name     = gemma-1.1-2b-it
0.00.300.165 I print_info: vocab type       = SPM
0.00.300.166 I print_info: n_vocab          = 256000
0.00.300.166 I print_info: n_merges         = 0
0.00.300.167 I print_info: BOS token        = 2 '<bos>'
0.00.300.167 I print_info: EOS token        = 1 '<eos>'
0.00.300.168 I print_info: EOT token        = 107 '<end_of_turn>'
0.00.300.168 I print_info: UNK token        = 3 '<unk>'
0.00.300.168 I print_info: PAD token        = 0 '<pad>'
0.00.300.169 I print_info: LF token         = 227 '<0x0A>'
0.00.300.169 I print_info: EOG token        = 1 '<eos>'
0.00.300.170 I print_info: EOG token        = 107 '<end_of_turn>'
0.00.300.170 I print_info: max token length = 93
0.00.300.172 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.00.347.048 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.348.338 I llama_context: constructing llama_context
0.00.348.342 I llama_context: n_seq_max     = 1
0.00.348.343 I llama_context: n_ctx         = 4096
0.00.348.343 I llama_context: n_ctx_per_seq = 4096
0.00.348.343 I llama_context: n_batch       = 2048
0.00.348.344 I llama_context: n_ubatch      = 512
0.00.348.344 I llama_context: causal_attn   = 1
0.00.348.345 I llama_context: flash_attn    = 0
0.00.348.347 I llama_context: freq_base     = 10000.0
0.00.348.347 I llama_context: freq_scale    = 1
0.00.348.348 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.478 I llama_context:        CPU  output buffer size =     0.98 MiB
0.00.348.489 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.00.364.181 I init:        CPU KV buffer size =    72.00 MiB
0.00.364.200 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.371.203 I llama_context:        CPU compute buffer size =   509.01 MiB
0.00.371.209 I llama_context: graph nodes  = 601
0.00.371.209 I llama_context: graph splits = 1
0.00.371.215 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.216 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.368 I main: llama threadpool init, n_threads = 4
0.00.450.380 I 
0.00.450.440 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.450.444 I 
0.00.450.485 I sampler seed: 3262387926
0.00.450.495 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.499 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.499 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.500 I 
 squaRE!

I am a big fan of the show and I am eager to know more about the future of the series.

**Possible future storylines:**

0.02.078.668 I llama_perf_sampler_print:    sampling time =       5.13 ms /    33 runs   (    0.16 ms per token,  6430.24 tokens per second)
0.02.078.672 I llama_perf_context_print:        load time =     446.86 ms
0.02.078.674 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.078.675 I llama_perf_context_print:        eval time =    1608.73 ms /    32 runs   (   50.27 ms per token,    19.89 tokens per second)
0.02.078.676 I llama_perf_context_print:       total time =    1631.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.133s
user	10m23.033s
sys	0m7.381s
