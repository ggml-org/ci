+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.666 I build: 3966 (20011f15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.024.851 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.061 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.148 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.160 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.161 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.166 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.167 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.180 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.182 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.183 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.184 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.191 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.192 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.193 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.194 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.195 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.223 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.300 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.651 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.659 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.660 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.662 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.662 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.664 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.665 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.669 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.670 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.671 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.672 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.673 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.681 I llama_model_loader: - type  f32:   37 tensors
0.00.275.685 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.884 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.833 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.711 I llm_load_vocab: special tokens cache size = 5
0.00.624.966 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.036 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.037 I llm_load_print_meta: arch             = gemma
0.00.625.038 I llm_load_print_meta: vocab type       = SPM
0.00.625.039 I llm_load_print_meta: n_vocab          = 256000
0.00.625.041 I llm_load_print_meta: n_merges         = 0
0.00.625.042 I llm_load_print_meta: vocab_only       = 0
0.00.625.042 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.042 I llm_load_print_meta: n_embd           = 2048
0.00.625.043 I llm_load_print_meta: n_layer          = 18
0.00.625.107 I llm_load_print_meta: n_head           = 8
0.00.625.115 I llm_load_print_meta: n_head_kv        = 1
0.00.625.115 I llm_load_print_meta: n_rot            = 256
0.00.625.116 I llm_load_print_meta: n_swa            = 0
0.00.625.116 I llm_load_print_meta: n_embd_head_k    = 256
0.00.625.116 I llm_load_print_meta: n_embd_head_v    = 256
0.00.625.121 I llm_load_print_meta: n_gqa            = 8
0.00.625.125 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.625.130 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.625.131 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.625.132 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.625.133 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.625.133 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.625.134 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.625.140 I llm_load_print_meta: n_ff             = 16384
0.00.625.140 I llm_load_print_meta: n_expert         = 0
0.00.625.140 I llm_load_print_meta: n_expert_used    = 0
0.00.625.141 I llm_load_print_meta: causal attn      = 1
0.00.625.145 I llm_load_print_meta: pooling type     = 0
0.00.625.146 I llm_load_print_meta: rope type        = 2
0.00.625.146 I llm_load_print_meta: rope scaling     = linear
0.00.625.148 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.625.148 I llm_load_print_meta: freq_scale_train = 1
0.00.625.149 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.625.149 I llm_load_print_meta: rope_finetuned   = unknown
0.00.625.149 I llm_load_print_meta: ssm_d_conv       = 0
0.00.625.149 I llm_load_print_meta: ssm_d_inner      = 0
0.00.625.151 I llm_load_print_meta: ssm_d_state      = 0
0.00.625.151 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.625.151 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.625.152 I llm_load_print_meta: model type       = 2B
0.00.625.153 I llm_load_print_meta: model ftype      = Q8_0
0.00.625.154 I llm_load_print_meta: model params     = 2.51 B
0.00.625.155 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.625.155 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.625.156 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.625.157 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.625.158 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.625.158 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.625.159 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.625.159 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.625.166 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.625.167 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.625.168 I llm_load_print_meta: max token length = 93
0.00.625.338 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.726.070 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.726.081 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.726.082 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.726.082 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.726.083 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.726.084 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.731.674 I llama_new_context_with_model: n_ctx      = 8192
0.00.731.680 I llama_new_context_with_model: n_batch    = 2048
0.00.731.681 I llama_new_context_with_model: n_ubatch   = 512
0.00.731.681 I llama_new_context_with_model: flash_attn = 0
0.00.731.684 I llama_new_context_with_model: freq_base  = 10000.0
0.00.731.685 I llama_new_context_with_model: freq_scale = 1
0.00.760.019 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.760.060 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.760.178 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.761.612 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.761.617 I llama_new_context_with_model: graph nodes  = 601
0.00.761.617 I llama_new_context_with_model: graph splits = 1
0.00.761.635 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.371.540 I main: llama threadpool init, n_threads = 4
0.01.371.552 I 
0.01.371.654 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.371.658 I 
0.01.371.839 I sampler seed: 773273757
0.01.371.851 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.371.857 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.371.858 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.371.858 I 
 increasities.

I cannot answer this question as it contains sexually suggestive and inappropriate language. [end of text]


0.09.329.095 I llama_perf_sampler_print:    sampling time =      29.30 ms /    20 runs   (    1.47 ms per token,   682.52 tokens per second)
0.09.329.099 I llama_perf_context_print:        load time =    1368.64 ms
0.09.329.101 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.329.103 I llama_perf_context_print:        eval time =    7900.45 ms /    19 runs   (  415.81 ms per token,     2.40 tokens per second)
0.09.329.103 I llama_perf_context_print:       total time =    7957.56 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3966 (20011f15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.850 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.931 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.021 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.035 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.039 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.043 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.044 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.045 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.046 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.047 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.048 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.055 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.056 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.058 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.059 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.060 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.337 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.777 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.424 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.432 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.433 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.434 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.435 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.436 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.437 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.441 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.442 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.443 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.444 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.276.445 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.452 I llama_model_loader: - type  f32:   37 tensors
0.00.276.456 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.055 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.914 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.914 I llm_load_vocab: special tokens cache size = 5
0.00.611.134 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.205 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.206 I llm_load_print_meta: arch             = gemma
0.00.611.206 I llm_load_print_meta: vocab type       = SPM
0.00.611.208 I llm_load_print_meta: n_vocab          = 256000
0.00.611.210 I llm_load_print_meta: n_merges         = 0
0.00.611.211 I llm_load_print_meta: vocab_only       = 0
0.00.611.211 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.212 I llm_load_print_meta: n_embd           = 2048
0.00.611.212 I llm_load_print_meta: n_layer          = 18
0.00.611.275 I llm_load_print_meta: n_head           = 8
0.00.611.283 I llm_load_print_meta: n_head_kv        = 1
0.00.611.284 I llm_load_print_meta: n_rot            = 256
0.00.611.285 I llm_load_print_meta: n_swa            = 0
0.00.611.285 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.287 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.292 I llm_load_print_meta: n_gqa            = 8
0.00.611.296 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.302 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.303 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.305 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.306 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.306 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.306 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.311 I llm_load_print_meta: n_ff             = 16384
0.00.611.312 I llm_load_print_meta: n_expert         = 0
0.00.611.312 I llm_load_print_meta: n_expert_used    = 0
0.00.611.313 I llm_load_print_meta: causal attn      = 1
0.00.611.313 I llm_load_print_meta: pooling type     = 0
0.00.611.314 I llm_load_print_meta: rope type        = 2
0.00.611.314 I llm_load_print_meta: rope scaling     = linear
0.00.611.316 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.316 I llm_load_print_meta: freq_scale_train = 1
0.00.611.329 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.329 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.330 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.331 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.331 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.331 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.332 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.332 I llm_load_print_meta: model type       = 2B
0.00.611.333 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.334 I llm_load_print_meta: model params     = 2.51 B
0.00.611.335 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.336 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.342 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.342 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.343 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.343 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.343 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.343 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.350 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.351 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.351 I llm_load_print_meta: max token length = 93
0.00.611.519 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.709.487 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.715.192 I llama_new_context_with_model: n_ctx      = 8192
0.00.715.198 I llama_new_context_with_model: n_batch    = 2048
0.00.715.199 I llama_new_context_with_model: n_ubatch   = 512
0.00.715.199 I llama_new_context_with_model: flash_attn = 0
0.00.715.203 I llama_new_context_with_model: freq_base  = 10000.0
0.00.715.204 I llama_new_context_with_model: freq_scale = 1
0.00.745.509 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.555 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.668 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.126 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.747.131 I llama_new_context_with_model: graph nodes  = 601
0.00.747.132 I llama_new_context_with_model: graph splits = 1
0.00.747.147 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.357.979 I main: llama threadpool init, n_threads = 4
0.01.357.992 I 
0.01.358.098 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.102 I 
0.01.358.284 I sampler seed: 2000095732
0.01.358.296 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.303 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.358.305 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.305 I 
 increasities that provide evidence supporting or opposing a hypothesis.

**Hypothesis:** The increase in social media use is associated with a decline in mental health.

**

0.14.824.329 I llama_perf_sampler_print:    sampling time =      49.33 ms /    33 runs   (    1.49 ms per token,   668.95 tokens per second)
0.14.824.333 I llama_perf_context_print:        load time =    1355.12 ms
0.14.824.334 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.824.336 I llama_perf_context_print:        eval time =   13371.43 ms /    32 runs   (  417.86 ms per token,     2.39 tokens per second)
0.14.824.338 I llama_perf_context_print:       total time =   13466.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 3966 (20011f15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.002.854 I main: load the model and apply lora adapter, if any
0.00.025.171 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.383 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.483 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.496 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.497 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.502 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.506 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.508 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.509 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.511 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.513 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.523 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.528 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.530 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.532 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.534 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.399 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.042 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.476 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.486 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.487 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.488 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.489 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.490 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.491 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.495 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.496 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.497 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.498 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.277.499 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.508 I llama_model_loader: - type  f32:   37 tensors
0.00.277.513 I llama_model_loader: - type q8_0:  127 tensors
0.00.474.902 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.534.473 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.535.370 I llm_load_vocab: special tokens cache size = 5
0.00.634.218 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.634.289 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.634.290 I llm_load_print_meta: arch             = gemma
0.00.634.291 I llm_load_print_meta: vocab type       = SPM
0.00.634.292 I llm_load_print_meta: n_vocab          = 256000
0.00.634.294 I llm_load_print_meta: n_merges         = 0
0.00.634.295 I llm_load_print_meta: vocab_only       = 0
0.00.634.295 I llm_load_print_meta: n_ctx_train      = 8192
0.00.634.296 I llm_load_print_meta: n_embd           = 2048
0.00.634.296 I llm_load_print_meta: n_layer          = 18
0.00.634.359 I llm_load_print_meta: n_head           = 8
0.00.634.365 I llm_load_print_meta: n_head_kv        = 1
0.00.634.366 I llm_load_print_meta: n_rot            = 256
0.00.634.372 I llm_load_print_meta: n_swa            = 0
0.00.634.373 I llm_load_print_meta: n_embd_head_k    = 256
0.00.634.373 I llm_load_print_meta: n_embd_head_v    = 256
0.00.634.378 I llm_load_print_meta: n_gqa            = 8
0.00.634.383 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.634.390 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.634.391 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.634.392 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.634.393 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.634.393 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.634.394 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.634.399 I llm_load_print_meta: n_ff             = 16384
0.00.634.400 I llm_load_print_meta: n_expert         = 0
0.00.634.400 I llm_load_print_meta: n_expert_used    = 0
0.00.634.401 I llm_load_print_meta: causal attn      = 1
0.00.634.402 I llm_load_print_meta: pooling type     = 0
0.00.634.402 I llm_load_print_meta: rope type        = 2
0.00.634.403 I llm_load_print_meta: rope scaling     = linear
0.00.634.406 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.634.407 I llm_load_print_meta: freq_scale_train = 1
0.00.634.407 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.634.407 I llm_load_print_meta: rope_finetuned   = unknown
0.00.634.408 I llm_load_print_meta: ssm_d_conv       = 0
0.00.634.408 I llm_load_print_meta: ssm_d_inner      = 0
0.00.634.408 I llm_load_print_meta: ssm_d_state      = 0
0.00.634.408 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.634.409 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.634.409 I llm_load_print_meta: model type       = 2B
0.00.634.410 I llm_load_print_meta: model ftype      = Q8_0
0.00.634.412 I llm_load_print_meta: model params     = 2.51 B
0.00.634.413 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.634.415 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.634.416 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.634.416 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.634.417 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.634.417 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.634.418 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.634.418 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.634.424 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.634.426 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.634.426 I llm_load_print_meta: max token length = 93
0.00.634.603 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.712.372 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.712.381 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.712.382 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.712.383 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.712.383 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.712.384 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.718.312 I llama_new_context_with_model: n_ctx      = 8192
0.00.718.318 I llama_new_context_with_model: n_batch    = 2048
0.00.718.319 I llama_new_context_with_model: n_ubatch   = 512
0.00.718.319 I llama_new_context_with_model: flash_attn = 0
0.00.718.321 I llama_new_context_with_model: freq_base  = 10000.0
0.00.718.322 I llama_new_context_with_model: freq_scale = 1
0.00.746.970 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.747.015 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.134 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.588 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.593 I llama_new_context_with_model: graph nodes  = 601
0.00.748.593 I llama_new_context_with_model: graph splits = 1
0.00.748.609 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.379.191 I main: llama threadpool init, n_threads = 4
0.01.379.203 I 
0.01.379.323 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.379.329 I 
0.01.379.513 I sampler seed: 1369372893
0.01.379.526 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.379.534 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.379.534 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.379.535 I 
 increadibly. [end of text]


0.03.063.844 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.85 tokens per second)
0.03.063.847 I llama_perf_context_print:        load time =    1376.24 ms
0.03.063.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.063.850 I llama_perf_context_print:        eval time =    1671.13 ms /     4 runs   (  417.78 ms per token,     2.39 tokens per second)
0.03.063.850 I llama_perf_context_print:       total time =    1684.66 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.671 I build: 3966 (20011f15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.024.689 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.915 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.002 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.013 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.015 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.019 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.020 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.021 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.023 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.025 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.032 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.035 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.036 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.037 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.038 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.146 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.111 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.119 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.120 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.121 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.122 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.123 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.124 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.127 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.128 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.130 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.130 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.275.133 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.141 I llama_model_loader: - type  f32:   37 tensors
0.00.275.145 I llama_model_loader: - type q8_0:  127 tensors
0.00.454.315 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.560 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.454 I llm_load_vocab: special tokens cache size = 5
0.00.609.867 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.939 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.944 I llm_load_print_meta: arch             = gemma
0.00.609.945 I llm_load_print_meta: vocab type       = SPM
0.00.609.946 I llm_load_print_meta: n_vocab          = 256000
0.00.609.949 I llm_load_print_meta: n_merges         = 0
0.00.609.949 I llm_load_print_meta: vocab_only       = 0
0.00.609.950 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.952 I llm_load_print_meta: n_embd           = 2048
0.00.609.952 I llm_load_print_meta: n_layer          = 18
0.00.610.020 I llm_load_print_meta: n_head           = 8
0.00.610.030 I llm_load_print_meta: n_head_kv        = 1
0.00.610.031 I llm_load_print_meta: n_rot            = 256
0.00.610.032 I llm_load_print_meta: n_swa            = 0
0.00.610.032 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.032 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.037 I llm_load_print_meta: n_gqa            = 8
0.00.610.041 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.047 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.050 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.053 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.062 I llm_load_print_meta: n_ff             = 16384
0.00.610.063 I llm_load_print_meta: n_expert         = 0
0.00.610.064 I llm_load_print_meta: n_expert_used    = 0
0.00.610.075 I llm_load_print_meta: causal attn      = 1
0.00.610.079 I llm_load_print_meta: pooling type     = 0
0.00.610.080 I llm_load_print_meta: rope type        = 2
0.00.610.080 I llm_load_print_meta: rope scaling     = linear
0.00.610.082 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.083 I llm_load_print_meta: freq_scale_train = 1
0.00.610.083 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.084 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.084 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.085 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.085 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.087 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.087 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.088 I llm_load_print_meta: model type       = 2B
0.00.610.090 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.091 I llm_load_print_meta: model params     = 2.51 B
0.00.610.092 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.092 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.094 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.094 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.095 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.096 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.098 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.098 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.105 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.107 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.108 I llm_load_print_meta: max token length = 93
0.00.610.285 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.062 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.681.072 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.686.778 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.786 I llama_new_context_with_model: n_batch    = 2048
0.00.686.786 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.787 I llama_new_context_with_model: flash_attn = 0
0.00.686.789 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.790 I llama_new_context_with_model: freq_scale = 1
0.00.715.780 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.824 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.943 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.717.335 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.339 I llama_new_context_with_model: graph nodes  = 601
0.00.717.340 I llama_new_context_with_model: graph splits = 1
0.00.717.358 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.655 I main: llama threadpool init, n_threads = 4
0.01.330.669 I 
0.01.330.791 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.797 I 
0.01.330.981 I sampler seed: 2785461492
0.01.330.994 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.002 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.331.003 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.004 I 
 increasities, a group of talented individuals who collaborate on creative projects. They possess diverse skills and expertise in various fields, allowing them to tackle complex challenges and produce

0.14.760.126 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.61 tokens per second)
0.14.760.130 I llama_perf_context_print:        load time =    1327.74 ms
0.14.760.132 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.760.133 I llama_perf_context_print:        eval time =   13334.18 ms /    32 runs   (  416.69 ms per token,     2.40 tokens per second)
0.14.760.134 I llama_perf_context_print:       total time =   13429.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m51.518s
user	2m38.834s
sys	0m9.433s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3966 (20011f15)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198930.24 ms
main:    total time = 198930.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3966 (20011f15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.772 I main: load the model and apply lora adapter, if any
0.00.024.725 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.933 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.020 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.031 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.033 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.037 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.038 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.039 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.040 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.041 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.042 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.048 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.052 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.053 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.054 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.055 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.156.755 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.414 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.632 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.639 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.640 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.641 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.642 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.643 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.644 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.647 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.648 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.649 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.650 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.651 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.660 I llama_model_loader: - type  f32:   37 tensors
0.00.275.665 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.665 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.769 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.549 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.394 I llm_load_vocab: special tokens cache size = 5
0.00.628.505 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.628.577 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.628.578 I llm_load_print_meta: arch             = gemma
0.00.628.579 I llm_load_print_meta: vocab type       = SPM
0.00.628.580 I llm_load_print_meta: n_vocab          = 256000
0.00.628.583 I llm_load_print_meta: n_merges         = 0
0.00.628.583 I llm_load_print_meta: vocab_only       = 0
0.00.628.583 I llm_load_print_meta: n_ctx_train      = 8192
0.00.628.584 I llm_load_print_meta: n_embd           = 2048
0.00.628.584 I llm_load_print_meta: n_layer          = 18
0.00.628.650 I llm_load_print_meta: n_head           = 8
0.00.628.657 I llm_load_print_meta: n_head_kv        = 1
0.00.628.657 I llm_load_print_meta: n_rot            = 256
0.00.628.658 I llm_load_print_meta: n_swa            = 0
0.00.628.658 I llm_load_print_meta: n_embd_head_k    = 256
0.00.628.658 I llm_load_print_meta: n_embd_head_v    = 256
0.00.628.663 I llm_load_print_meta: n_gqa            = 8
0.00.628.668 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.628.672 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.628.673 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.628.675 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.628.675 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.628.676 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.628.676 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.628.681 I llm_load_print_meta: n_ff             = 16384
0.00.628.681 I llm_load_print_meta: n_expert         = 0
0.00.628.682 I llm_load_print_meta: n_expert_used    = 0
0.00.628.682 I llm_load_print_meta: causal attn      = 1
0.00.628.682 I llm_load_print_meta: pooling type     = 0
0.00.628.683 I llm_load_print_meta: rope type        = 2
0.00.628.683 I llm_load_print_meta: rope scaling     = linear
0.00.628.684 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.628.685 I llm_load_print_meta: freq_scale_train = 1
0.00.628.685 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.628.686 I llm_load_print_meta: rope_finetuned   = unknown
0.00.628.686 I llm_load_print_meta: ssm_d_conv       = 0
0.00.628.686 I llm_load_print_meta: ssm_d_inner      = 0
0.00.628.687 I llm_load_print_meta: ssm_d_state      = 0
0.00.628.687 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.628.687 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.628.688 I llm_load_print_meta: model type       = 2B
0.00.628.689 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.628.690 I llm_load_print_meta: model params     = 2.51 B
0.00.628.691 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.628.691 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.628.692 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.628.692 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.628.692 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.628.693 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.628.693 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.628.694 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.628.699 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.628.701 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.628.701 I llm_load_print_meta: max token length = 93
0.00.628.869 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.689.238 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.689.245 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.689.245 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.689.246 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.689.247 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.689.247 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.694.791 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.799 I llama_new_context_with_model: n_batch    = 2048
0.00.694.799 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.800 I llama_new_context_with_model: flash_attn = 0
0.00.694.802 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.803 I llama_new_context_with_model: freq_scale = 1
0.00.723.153 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.723.194 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.312 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.740 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.745 I llama_new_context_with_model: graph nodes  = 601
0.00.724.745 I llama_new_context_with_model: graph splits = 1
0.00.724.761 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.814 I main: llama threadpool init, n_threads = 4
0.01.303.827 I 
0.01.303.936 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.940 I 
0.01.304.123 I sampler seed: 1632006542
0.01.304.134 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.304.142 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.304.143 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.304.143 I 
 encompornment and semantic integration are two key mechanisms for understanding how languages organize meaning.

**a) Explain the difference between encompornment and semantic integration.**

0.12.256.574 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.12 tokens per second)
0.12.256.577 I llama_perf_context_print:        load time =    1300.96 ms
0.12.256.578 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.256.603 I llama_perf_context_print:        eval time =   10857.94 ms /    32 runs   (  339.31 ms per token,     2.95 tokens per second)
0.12.256.605 I llama_perf_context_print:       total time =   10952.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3966 (20011f15)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198918.29 ms
main:    total time = 198918.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 3966 (20011f15) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.024.709 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.800 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.812 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.814 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.818 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.822 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.823 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.824 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.825 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.826 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.832 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.833 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.835 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.836 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.837 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.863 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.850 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.202 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.210 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.211 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.212 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.213 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.214 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.215 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.219 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.220 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.227 I llama_model_loader: - type  f32:   37 tensors
0.00.275.231 I llama_model_loader: - type q4_K:  108 tensors
0.00.275.232 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.281 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.255 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.226 I llm_load_vocab: special tokens cache size = 5
0.00.602.755 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.826 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.827 I llm_load_print_meta: arch             = gemma
0.00.602.828 I llm_load_print_meta: vocab type       = SPM
0.00.602.829 I llm_load_print_meta: n_vocab          = 256000
0.00.602.831 I llm_load_print_meta: n_merges         = 0
0.00.602.831 I llm_load_print_meta: vocab_only       = 0
0.00.602.832 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.832 I llm_load_print_meta: n_embd           = 2048
0.00.602.832 I llm_load_print_meta: n_layer          = 18
0.00.602.898 I llm_load_print_meta: n_head           = 8
0.00.602.904 I llm_load_print_meta: n_head_kv        = 1
0.00.602.905 I llm_load_print_meta: n_rot            = 256
0.00.602.906 I llm_load_print_meta: n_swa            = 0
0.00.602.906 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.906 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.911 I llm_load_print_meta: n_gqa            = 8
0.00.602.916 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.921 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.922 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.924 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.924 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.924 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.925 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.930 I llm_load_print_meta: n_ff             = 16384
0.00.602.930 I llm_load_print_meta: n_expert         = 0
0.00.602.931 I llm_load_print_meta: n_expert_used    = 0
0.00.602.932 I llm_load_print_meta: causal attn      = 1
0.00.602.932 I llm_load_print_meta: pooling type     = 0
0.00.602.933 I llm_load_print_meta: rope type        = 2
0.00.602.934 I llm_load_print_meta: rope scaling     = linear
0.00.602.936 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.936 I llm_load_print_meta: freq_scale_train = 1
0.00.602.937 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.938 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.938 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.938 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.939 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.949 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.950 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.951 I llm_load_print_meta: model type       = 2B
0.00.602.952 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.602.953 I llm_load_print_meta: model params     = 2.51 B
0.00.602.957 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.602.958 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.958 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.959 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.972 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.973 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.977 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.977 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.983 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.984 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.985 I llm_load_print_meta: max token length = 93
0.00.603.163 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.661.083 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.666.741 I llama_new_context_with_model: n_ctx      = 8192
0.00.666.750 I llama_new_context_with_model: n_batch    = 2048
0.00.666.750 I llama_new_context_with_model: n_ubatch   = 512
0.00.666.751 I llama_new_context_with_model: flash_attn = 0
0.00.666.754 I llama_new_context_with_model: freq_base  = 10000.0
0.00.666.755 I llama_new_context_with_model: freq_scale = 1
0.00.696.877 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.924 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.697.045 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.458 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.463 I llama_new_context_with_model: graph nodes  = 601
0.00.698.464 I llama_new_context_with_model: graph splits = 1
0.00.698.481 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.924 I main: llama threadpool init, n_threads = 4
0.01.280.936 I 
0.01.281.041 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.281.045 I 
0.01.281.224 I sampler seed: 2019396694
0.01.281.236 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.243 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.281.244 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.244 I 
 seconal.
This phrase means something that is incomplete, lacking in detail, or underdeveloped.

**Example:**
"The report was full of **ins

0.12.248.048 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.67 tokens per second)
0.12.248.063 I llama_perf_context_print:        load time =    1278.07 ms
0.12.248.065 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.248.068 I llama_perf_context_print:        eval time =   10872.41 ms /    32 runs   (  339.76 ms per token,     2.94 tokens per second)
0.12.248.069 I llama_perf_context_print:       total time =   10967.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.206s
user	50m12.566s
sys	0m6.549s
