+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.565 I build: 4206 (2025fa67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.000.761 I main: load the model and apply lora adapter, if any
0.00.021.233 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.242 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.250 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.258 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.259 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.259 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.260 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.260 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.265 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.266 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.266 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.267 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.268 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.303 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.461 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.269 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.275 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.276 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.277 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.277 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.278 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.279 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.281 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.282 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.283 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.284 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.285 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.289 I llama_model_loader: - type  f32:   37 tensors
0.00.132.289 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.802 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.666 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.210 I llm_load_vocab: special tokens cache size = 5
0.00.264.792 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.816 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.816 I llm_load_print_meta: arch             = gemma
0.00.264.817 I llm_load_print_meta: vocab type       = SPM
0.00.264.818 I llm_load_print_meta: n_vocab          = 256000
0.00.264.818 I llm_load_print_meta: n_merges         = 0
0.00.264.819 I llm_load_print_meta: vocab_only       = 0
0.00.264.819 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.819 I llm_load_print_meta: n_embd           = 2048
0.00.264.820 I llm_load_print_meta: n_layer          = 18
0.00.264.831 I llm_load_print_meta: n_head           = 8
0.00.264.832 I llm_load_print_meta: n_head_kv        = 1
0.00.264.832 I llm_load_print_meta: n_rot            = 256
0.00.264.832 I llm_load_print_meta: n_swa            = 0
0.00.264.833 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.833 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.834 I llm_load_print_meta: n_gqa            = 8
0.00.264.835 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.836 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.837 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.838 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.839 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.839 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.839 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.840 I llm_load_print_meta: n_ff             = 16384
0.00.264.841 I llm_load_print_meta: n_expert         = 0
0.00.264.841 I llm_load_print_meta: n_expert_used    = 0
0.00.264.842 I llm_load_print_meta: causal attn      = 1
0.00.264.842 I llm_load_print_meta: pooling type     = 0
0.00.264.842 I llm_load_print_meta: rope type        = 2
0.00.264.843 I llm_load_print_meta: rope scaling     = linear
0.00.264.844 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.844 I llm_load_print_meta: freq_scale_train = 1
0.00.264.845 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.845 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.845 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.846 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.846 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.846 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.846 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.847 I llm_load_print_meta: model type       = 2B
0.00.264.847 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.849 I llm_load_print_meta: model params     = 2.51 B
0.00.264.849 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.850 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.850 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.851 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.851 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.852 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.852 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.852 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.853 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.853 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.853 I llm_load_print_meta: max token length = 93
0.00.365.625 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.634 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.634 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.635 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.636 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.636 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.960 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.968 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.968 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.969 I llama_new_context_with_model: n_batch       = 2048
0.00.370.969 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.970 I llama_new_context_with_model: flash_attn    = 0
0.00.370.973 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.974 I llama_new_context_with_model: freq_scale    = 1
0.00.370.975 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.211 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.226 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.320 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.387.671 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.387.677 I llama_new_context_with_model: graph nodes  = 601
0.00.387.677 I llama_new_context_with_model: graph splits = 1
0.00.387.679 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.279 I main: llama threadpool init, n_threads = 4
0.00.473.294 I 
0.00.473.367 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.473.370 I 
0.00.473.413 I sampler seed: 3373435403
0.00.473.424 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.427 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.428 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.428 I 
 increasities in a way that is both respectful and informative. [end of text]


0.01.384.348 I llama_perf_sampler_print:    sampling time =       2.01 ms /    14 runs   (    0.14 ms per token,  6961.71 tokens per second)
0.01.384.351 I llama_perf_context_print:        load time =     472.50 ms
0.01.384.352 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.384.354 I llama_perf_context_print:        eval time =     902.86 ms /    13 runs   (   69.45 ms per token,    14.40 tokens per second)
0.01.384.355 I llama_perf_context_print:       total time =     911.08 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.185 I build: 4206 (2025fa67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.372 I main: llama backend init
0.00.000.379 I main: load the model and apply lora adapter, if any
0.00.021.035 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.052 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.058 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.059 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.063 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.064 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.065 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.065 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.066 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.066 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.070 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.070 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.071 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.071 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.073 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.821 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.630 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.452 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.458 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.458 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.459 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.459 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.460 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.461 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.463 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.464 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.465 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.465 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.466 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.468 I llama_model_loader: - type  f32:   37 tensors
0.00.131.469 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.683 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.240 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.708 I llm_load_vocab: special tokens cache size = 5
0.00.258.701 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.258.716 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.258.717 I llm_load_print_meta: arch             = gemma
0.00.258.718 I llm_load_print_meta: vocab type       = SPM
0.00.258.718 I llm_load_print_meta: n_vocab          = 256000
0.00.258.719 I llm_load_print_meta: n_merges         = 0
0.00.258.719 I llm_load_print_meta: vocab_only       = 0
0.00.258.719 I llm_load_print_meta: n_ctx_train      = 8192
0.00.258.720 I llm_load_print_meta: n_embd           = 2048
0.00.258.720 I llm_load_print_meta: n_layer          = 18
0.00.258.731 I llm_load_print_meta: n_head           = 8
0.00.258.732 I llm_load_print_meta: n_head_kv        = 1
0.00.258.732 I llm_load_print_meta: n_rot            = 256
0.00.258.733 I llm_load_print_meta: n_swa            = 0
0.00.258.733 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.733 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.734 I llm_load_print_meta: n_gqa            = 8
0.00.258.735 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.736 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.737 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.738 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.739 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.739 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.739 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.740 I llm_load_print_meta: n_ff             = 16384
0.00.258.740 I llm_load_print_meta: n_expert         = 0
0.00.258.741 I llm_load_print_meta: n_expert_used    = 0
0.00.258.741 I llm_load_print_meta: causal attn      = 1
0.00.258.741 I llm_load_print_meta: pooling type     = 0
0.00.258.741 I llm_load_print_meta: rope type        = 2
0.00.258.742 I llm_load_print_meta: rope scaling     = linear
0.00.258.744 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.744 I llm_load_print_meta: freq_scale_train = 1
0.00.258.745 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.745 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.745 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.746 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.746 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.746 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.746 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.747 I llm_load_print_meta: model type       = 2B
0.00.258.747 I llm_load_print_meta: model ftype      = Q8_0
0.00.258.748 I llm_load_print_meta: model params     = 2.51 B
0.00.258.749 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.258.750 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.750 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.750 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.751 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.751 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.752 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.752 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.752 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.753 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.753 I llm_load_print_meta: max token length = 93
0.00.354.843 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.360.072 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.078 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.078 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.079 I llama_new_context_with_model: n_batch       = 2048
0.00.360.079 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.080 I llama_new_context_with_model: flash_attn    = 0
0.00.360.082 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.083 I llama_new_context_with_model: freq_scale    = 1
0.00.360.084 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.618 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.632 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.726 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.375.991 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.375.997 I llama_new_context_with_model: graph nodes  = 601
0.00.375.997 I llama_new_context_with_model: graph splits = 1
0.00.375.999 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.824 I main: llama threadpool init, n_threads = 4
0.00.456.839 I 
0.00.456.914 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.456.917 I 
0.00.456.960 I sampler seed: 2452451169
0.00.456.971 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.983 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.986 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.986 I 
 increasities

The word "incredibilities" is misspelled. It should be "incredibility".

I apologize for any inconvenience.

**Explanation:**



0.02.631.212 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6909.55 tokens per second)
0.02.631.214 I llama_perf_context_print:        load time =     456.43 ms
0.02.631.215 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.631.217 I llama_perf_context_print:        eval time =    2155.46 ms /    32 runs   (   67.36 ms per token,    14.85 tokens per second)
0.02.631.218 I llama_perf_context_print:       total time =    2174.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.552 I build: 4206 (2025fa67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.055 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.065 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.073 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.078 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.079 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.082 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.083 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.084 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.084 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.084 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.085 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.089 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.090 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.090 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.091 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.091 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.266 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.738 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.663 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.671 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.672 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.673 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.673 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.674 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.675 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.678 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.678 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.680 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.681 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.682 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.685 I llama_model_loader: - type  f32:   37 tensors
0.00.132.686 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.281 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.637 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.220 I llm_load_vocab: special tokens cache size = 5
0.00.287.346 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.363 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.364 I llm_load_print_meta: arch             = gemma
0.00.287.364 I llm_load_print_meta: vocab type       = SPM
0.00.287.365 I llm_load_print_meta: n_vocab          = 256000
0.00.287.365 I llm_load_print_meta: n_merges         = 0
0.00.287.365 I llm_load_print_meta: vocab_only       = 0
0.00.287.366 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.366 I llm_load_print_meta: n_embd           = 2048
0.00.287.366 I llm_load_print_meta: n_layer          = 18
0.00.287.378 I llm_load_print_meta: n_head           = 8
0.00.287.379 I llm_load_print_meta: n_head_kv        = 1
0.00.287.379 I llm_load_print_meta: n_rot            = 256
0.00.287.379 I llm_load_print_meta: n_swa            = 0
0.00.287.380 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.380 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.381 I llm_load_print_meta: n_gqa            = 8
0.00.287.382 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.383 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.384 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.385 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.385 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.386 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.386 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.387 I llm_load_print_meta: n_ff             = 16384
0.00.287.388 I llm_load_print_meta: n_expert         = 0
0.00.287.388 I llm_load_print_meta: n_expert_used    = 0
0.00.287.388 I llm_load_print_meta: causal attn      = 1
0.00.287.388 I llm_load_print_meta: pooling type     = 0
0.00.287.389 I llm_load_print_meta: rope type        = 2
0.00.287.389 I llm_load_print_meta: rope scaling     = linear
0.00.287.390 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.391 I llm_load_print_meta: freq_scale_train = 1
0.00.287.391 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.392 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.392 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.392 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.393 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.393 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.393 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.393 I llm_load_print_meta: model type       = 2B
0.00.287.394 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.395 I llm_load_print_meta: model params     = 2.51 B
0.00.287.396 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.396 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.396 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.397 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.397 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.397 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.398 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.398 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.398 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.399 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.399 I llm_load_print_meta: max token length = 93
0.00.364.512 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.364.519 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.364.520 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.364.520 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.364.521 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.364.522 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.369.490 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.497 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.498 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.498 I llama_new_context_with_model: n_batch       = 2048
0.00.369.499 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.499 I llama_new_context_with_model: flash_attn    = 0
0.00.369.502 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.502 I llama_new_context_with_model: freq_scale    = 1
0.00.369.503 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.997 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.009 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.319 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.325 I llama_new_context_with_model: graph nodes  = 601
0.00.385.325 I llama_new_context_with_model: graph splits = 1
0.00.385.328 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.324 I main: llama threadpool init, n_threads = 4
0.00.471.339 I 
0.00.471.411 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.471.415 I 
0.00.471.460 I sampler seed: 924535970
0.00.471.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.483 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.487 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.487 I 
 increamically. [end of text]


0.00.755.578 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7923.93 tokens per second)
0.00.755.581 I llama_perf_context_print:        load time =     470.55 ms
0.00.755.583 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.755.584 I llama_perf_context_print:        eval time =     280.78 ms /     4 runs   (   70.19 ms per token,    14.25 tokens per second)
0.00.755.585 I llama_perf_context_print:       total time =     284.26 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.181 I build: 4206 (2025fa67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.373 I main: llama backend init
0.00.000.380 I main: load the model and apply lora adapter, if any
0.00.020.501 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.511 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.519 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.523 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.524 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.528 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.529 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.529 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.530 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.531 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.531 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.536 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.537 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.537 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.537 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.538 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.302 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.439 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.313 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.319 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.320 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.321 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.322 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.323 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.324 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.328 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.328 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.329 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.330 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.331 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.335 I llama_model_loader: - type  f32:   37 tensors
0.00.131.337 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.507 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.949 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.474 I llm_load_vocab: special tokens cache size = 5
0.00.262.575 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.589 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.589 I llm_load_print_meta: arch             = gemma
0.00.262.590 I llm_load_print_meta: vocab type       = SPM
0.00.262.591 I llm_load_print_meta: n_vocab          = 256000
0.00.262.591 I llm_load_print_meta: n_merges         = 0
0.00.262.591 I llm_load_print_meta: vocab_only       = 0
0.00.262.592 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.592 I llm_load_print_meta: n_embd           = 2048
0.00.262.592 I llm_load_print_meta: n_layer          = 18
0.00.262.603 I llm_load_print_meta: n_head           = 8
0.00.262.604 I llm_load_print_meta: n_head_kv        = 1
0.00.262.604 I llm_load_print_meta: n_rot            = 256
0.00.262.604 I llm_load_print_meta: n_swa            = 0
0.00.262.605 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.605 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.606 I llm_load_print_meta: n_gqa            = 8
0.00.262.607 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.608 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.609 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.611 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.611 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.612 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.612 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.613 I llm_load_print_meta: n_ff             = 16384
0.00.262.613 I llm_load_print_meta: n_expert         = 0
0.00.262.614 I llm_load_print_meta: n_expert_used    = 0
0.00.262.614 I llm_load_print_meta: causal attn      = 1
0.00.262.614 I llm_load_print_meta: pooling type     = 0
0.00.262.615 I llm_load_print_meta: rope type        = 2
0.00.262.615 I llm_load_print_meta: rope scaling     = linear
0.00.262.616 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.617 I llm_load_print_meta: freq_scale_train = 1
0.00.262.617 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.618 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.618 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.618 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.618 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.619 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.619 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.619 I llm_load_print_meta: model type       = 2B
0.00.262.620 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.621 I llm_load_print_meta: model params     = 2.51 B
0.00.262.622 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.622 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.623 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.623 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.624 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.624 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.624 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.625 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.625 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.626 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.626 I llm_load_print_meta: max token length = 93
0.00.333.415 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.333.423 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.338.452 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.458 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.458 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.459 I llama_new_context_with_model: n_batch       = 2048
0.00.338.459 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.460 I llama_new_context_with_model: flash_attn    = 0
0.00.338.462 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.475 I llama_new_context_with_model: freq_scale    = 1
0.00.338.476 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.652 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.666 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.762 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.038 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.044 I llama_new_context_with_model: graph nodes  = 601
0.00.354.045 I llama_new_context_with_model: graph splits = 1
0.00.354.047 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.829 I main: llama threadpool init, n_threads = 4
0.00.444.845 I 
0.00.444.920 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.444.923 I 
0.00.444.965 I sampler seed: 4142452854
0.00.444.976 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.979 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.982 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.982 I 
 increabling tone and a sneer.

"What good is a goddamn king without a queen?"

The speaker is a knight, standing tall in his armor,

0.02.840.689 I llama_perf_sampler_print:    sampling time =       4.88 ms /    33 runs   (    0.15 ms per token,  6759.52 tokens per second)
0.02.840.692 I llama_perf_context_print:        load time =     444.43 ms
0.02.840.693 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.840.695 I llama_perf_context_print:        eval time =    2377.28 ms /    32 runs   (   74.29 ms per token,    13.46 tokens per second)
0.02.840.696 I llama_perf_context_print:       total time =    2395.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.159s
user	0m25.885s
sys	0m9.430s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4206 (2025fa67)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40409.67 ms
main:    total time = 40409.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4206 (2025fa67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.480 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.488 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.497 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.502 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.504 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.508 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.511 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.512 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.513 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.513 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.514 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.518 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.518 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.519 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.519 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.519 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.109 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.747 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.654 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.661 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.662 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.662 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.663 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.663 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.664 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.667 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.668 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.669 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.669 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.670 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.674 I llama_model_loader: - type  f32:   37 tensors
0.00.131.675 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.675 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.955 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.267.679 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.456 I llm_load_vocab: special tokens cache size = 5
0.00.289.737 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.755 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.755 I llm_load_print_meta: arch             = gemma
0.00.289.756 I llm_load_print_meta: vocab type       = SPM
0.00.289.757 I llm_load_print_meta: n_vocab          = 256000
0.00.289.758 I llm_load_print_meta: n_merges         = 0
0.00.289.758 I llm_load_print_meta: vocab_only       = 0
0.00.289.759 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.759 I llm_load_print_meta: n_embd           = 2048
0.00.289.759 I llm_load_print_meta: n_layer          = 18
0.00.289.771 I llm_load_print_meta: n_head           = 8
0.00.289.772 I llm_load_print_meta: n_head_kv        = 1
0.00.289.772 I llm_load_print_meta: n_rot            = 256
0.00.289.772 I llm_load_print_meta: n_swa            = 0
0.00.289.773 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.773 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.775 I llm_load_print_meta: n_gqa            = 8
0.00.289.776 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.776 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.777 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.778 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.779 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.779 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.779 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.780 I llm_load_print_meta: n_ff             = 16384
0.00.289.780 I llm_load_print_meta: n_expert         = 0
0.00.289.781 I llm_load_print_meta: n_expert_used    = 0
0.00.289.781 I llm_load_print_meta: causal attn      = 1
0.00.289.781 I llm_load_print_meta: pooling type     = 0
0.00.289.782 I llm_load_print_meta: rope type        = 2
0.00.289.782 I llm_load_print_meta: rope scaling     = linear
0.00.289.784 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.784 I llm_load_print_meta: freq_scale_train = 1
0.00.289.785 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.785 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.785 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.785 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.786 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.786 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.786 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.787 I llm_load_print_meta: model type       = 2B
0.00.289.787 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.289.788 I llm_load_print_meta: model params     = 2.51 B
0.00.289.789 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.289.789 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.790 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.790 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.791 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.791 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.792 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.792 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.792 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.793 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.793 I llm_load_print_meta: max token length = 93
0.00.349.611 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.349.618 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.349.619 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.349.620 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.349.620 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.349.621 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.354.840 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.848 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.848 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.848 I llama_new_context_with_model: n_batch       = 2048
0.00.354.849 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.849 I llama_new_context_with_model: flash_attn    = 0
0.00.354.852 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.853 I llama_new_context_with_model: freq_scale    = 1
0.00.354.854 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.439 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.453 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.853 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.859 I llama_new_context_with_model: graph nodes  = 601
0.00.370.860 I llama_new_context_with_model: graph splits = 1
0.00.370.861 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.767 I main: llama threadpool init, n_threads = 4
0.00.446.785 I 
0.00.446.861 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.446.864 I 
0.00.446.912 I sampler seed: 4052245148
0.00.446.924 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.935 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.937 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.938 I 
 fufilling sounds and the feeling of a warm embrace.

**Sensory Details:**

* Warm, soft blankets
* Gentle rustling of leaves
* Birdsong

0.02.027.134 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6568.47 tokens per second)
0.02.027.138 I llama_perf_context_print:        load time =     445.99 ms
0.02.027.139 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.027.141 I llama_perf_context_print:        eval time =    1561.15 ms /    32 runs   (   48.79 ms per token,    20.50 tokens per second)
0.02.027.142 I llama_perf_context_print:       total time =    1580.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4206 (2025fa67)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40197.67 ms
main:    total time = 40197.67 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.178 I build: 4206 (2025fa67) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.382 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.020.771 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.784 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.791 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.792 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.798 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.799 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.800 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.800 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.801 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.801 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.806 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.806 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.806 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.807 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.808 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.389 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.530 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.404 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.411 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.412 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.412 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.413 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.413 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.414 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.417 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.418 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.421 I llama_model_loader: - type  f32:   37 tensors
0.00.131.422 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.423 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.947 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.012 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.737 I llm_load_vocab: special tokens cache size = 5
0.00.274.075 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.094 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.094 I llm_load_print_meta: arch             = gemma
0.00.274.095 I llm_load_print_meta: vocab type       = SPM
0.00.274.096 I llm_load_print_meta: n_vocab          = 256000
0.00.274.097 I llm_load_print_meta: n_merges         = 0
0.00.274.097 I llm_load_print_meta: vocab_only       = 0
0.00.274.097 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.098 I llm_load_print_meta: n_embd           = 2048
0.00.274.098 I llm_load_print_meta: n_layer          = 18
0.00.274.126 I llm_load_print_meta: n_head           = 8
0.00.274.129 I llm_load_print_meta: n_head_kv        = 1
0.00.274.129 I llm_load_print_meta: n_rot            = 256
0.00.274.129 I llm_load_print_meta: n_swa            = 0
0.00.274.130 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.130 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.131 I llm_load_print_meta: n_gqa            = 8
0.00.274.132 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.133 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.134 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.136 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.136 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.136 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.137 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.137 I llm_load_print_meta: n_ff             = 16384
0.00.274.138 I llm_load_print_meta: n_expert         = 0
0.00.274.138 I llm_load_print_meta: n_expert_used    = 0
0.00.274.138 I llm_load_print_meta: causal attn      = 1
0.00.274.138 I llm_load_print_meta: pooling type     = 0
0.00.274.138 I llm_load_print_meta: rope type        = 2
0.00.274.139 I llm_load_print_meta: rope scaling     = linear
0.00.274.140 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.141 I llm_load_print_meta: freq_scale_train = 1
0.00.274.142 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.143 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.143 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.143 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.143 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.144 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.144 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.144 I llm_load_print_meta: model type       = 2B
0.00.274.145 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.146 I llm_load_print_meta: model params     = 2.51 B
0.00.274.147 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.148 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.148 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.149 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.149 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.150 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.150 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.150 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.151 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.152 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.152 I llm_load_print_meta: max token length = 93
0.00.330.926 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.998 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.005 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.006 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.006 I llama_new_context_with_model: n_batch       = 2048
0.00.336.006 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.007 I llama_new_context_with_model: flash_attn    = 0
0.00.336.009 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.010 I llama_new_context_with_model: freq_scale    = 1
0.00.336.011 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.756 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.771 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.863 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.092 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.099 I llama_new_context_with_model: graph nodes  = 601
0.00.352.099 I llama_new_context_with_model: graph splits = 1
0.00.352.102 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.594 I main: llama threadpool init, n_threads = 4
0.00.426.609 I 
0.00.426.685 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.426.688 I 
0.00.426.733 I sampler seed: 1126628300
0.00.426.744 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.755 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.759 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.759 I 
 encompasses the concept of the metaverse and the potential risks and benefits associated with it.

**Metaverse Concept:**

The metaverse is a persistent virtual world that

0.02.007.704 I llama_perf_sampler_print:    sampling time =       5.21 ms /    33 runs   (    0.16 ms per token,  6330.33 tokens per second)
0.02.007.706 I llama_perf_context_print:        load time =     426.19 ms
0.02.007.708 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.007.709 I llama_perf_context_print:        eval time =    1561.94 ms /    32 runs   (   48.81 ms per token,    20.49 tokens per second)
0.02.007.710 I llama_perf_context_print:       total time =    1581.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.441s
user	10m24.320s
sys	0m6.866s
