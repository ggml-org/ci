+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.527 I build: 4207 (20eb20e0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.714 I main: llama backend init
0.00.000.720 I main: load the model and apply lora adapter, if any
0.00.021.360 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.369 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.378 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.382 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.387 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.388 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.389 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.389 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.390 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.394 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.394 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.396 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.396 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.740 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.527 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.333 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.339 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.340 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.341 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.341 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.342 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.345 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.346 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.347 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.350 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.351 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.354 I llama_model_loader: - type  f32:   37 tensors
0.00.131.354 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.271 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.090 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.669 I llm_load_vocab: special tokens cache size = 5
0.00.284.843 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.866 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.867 I llm_load_print_meta: arch             = gemma
0.00.284.867 I llm_load_print_meta: vocab type       = SPM
0.00.284.869 I llm_load_print_meta: n_vocab          = 256000
0.00.284.870 I llm_load_print_meta: n_merges         = 0
0.00.284.870 I llm_load_print_meta: vocab_only       = 0
0.00.284.870 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.871 I llm_load_print_meta: n_embd           = 2048
0.00.284.871 I llm_load_print_meta: n_layer          = 18
0.00.284.882 I llm_load_print_meta: n_head           = 8
0.00.284.883 I llm_load_print_meta: n_head_kv        = 1
0.00.284.883 I llm_load_print_meta: n_rot            = 256
0.00.284.884 I llm_load_print_meta: n_swa            = 0
0.00.284.884 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.884 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.885 I llm_load_print_meta: n_gqa            = 8
0.00.284.886 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.887 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.888 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.889 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.890 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.890 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.891 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.892 I llm_load_print_meta: n_ff             = 16384
0.00.284.892 I llm_load_print_meta: n_expert         = 0
0.00.284.892 I llm_load_print_meta: n_expert_used    = 0
0.00.284.893 I llm_load_print_meta: causal attn      = 1
0.00.284.893 I llm_load_print_meta: pooling type     = 0
0.00.284.893 I llm_load_print_meta: rope type        = 2
0.00.284.897 I llm_load_print_meta: rope scaling     = linear
0.00.284.898 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.899 I llm_load_print_meta: freq_scale_train = 1
0.00.284.899 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.899 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.900 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.900 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.900 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.900 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.901 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.901 I llm_load_print_meta: model type       = 2B
0.00.284.902 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.903 I llm_load_print_meta: model params     = 2.51 B
0.00.284.903 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.904 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.904 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.905 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.905 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.906 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.906 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.906 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.907 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.910 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.910 I llm_load_print_meta: max token length = 93
0.00.387.033 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.387.039 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.387.040 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.387.040 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.387.041 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.387.041 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.392.295 I llama_new_context_with_model: n_seq_max     = 1
0.00.392.301 I llama_new_context_with_model: n_ctx         = 4096
0.00.392.302 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.392.302 I llama_new_context_with_model: n_batch       = 2048
0.00.392.303 I llama_new_context_with_model: n_ubatch      = 512
0.00.392.303 I llama_new_context_with_model: flash_attn    = 0
0.00.392.305 I llama_new_context_with_model: freq_base     = 10000.0
0.00.392.306 I llama_new_context_with_model: freq_scale    = 1
0.00.392.307 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.406.598 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.406.610 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.406.702 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.408.014 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.408.020 I llama_new_context_with_model: graph nodes  = 601
0.00.408.021 I llama_new_context_with_model: graph splits = 1
0.00.408.022 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.595 I main: llama threadpool init, n_threads = 4
0.00.492.612 I 
0.00.492.684 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.492.687 I 
0.00.492.730 I sampler seed: 3984108517
0.00.492.741 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.492.752 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.492.756 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.492.756 I 
 increasities, a poignant social commentary on the transient nature of life and the fleetingness of success.

The poem's structure suggests a cyclical pattern, with

0.02.733.521 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6479.48 tokens per second)
0.02.733.524 I llama_perf_context_print:        load time =     491.86 ms
0.02.733.525 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.733.527 I llama_perf_context_print:        eval time =    2222.32 ms /    32 runs   (   69.45 ms per token,    14.40 tokens per second)
0.02.733.527 I llama_perf_context_print:       total time =    2240.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.556 I build: 4207 (20eb20e0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.000.750 I main: load the model and apply lora adapter, if any
0.00.021.494 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.509 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.516 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.520 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.523 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.524 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.525 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.526 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.526 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.527 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.532 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.533 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.534 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.535 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.535 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.959 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.961 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.789 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.796 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.796 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.797 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.798 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.798 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.801 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.801 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.802 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.803 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.803 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.806 I llama_model_loader: - type  f32:   37 tensors
0.00.131.807 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.526 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.631 I llm_load_vocab: special tokens cache size = 5
0.00.266.718 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.732 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.733 I llm_load_print_meta: arch             = gemma
0.00.266.734 I llm_load_print_meta: vocab type       = SPM
0.00.266.734 I llm_load_print_meta: n_vocab          = 256000
0.00.266.735 I llm_load_print_meta: n_merges         = 0
0.00.266.735 I llm_load_print_meta: vocab_only       = 0
0.00.266.735 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.735 I llm_load_print_meta: n_embd           = 2048
0.00.266.736 I llm_load_print_meta: n_layer          = 18
0.00.266.747 I llm_load_print_meta: n_head           = 8
0.00.266.748 I llm_load_print_meta: n_head_kv        = 1
0.00.266.748 I llm_load_print_meta: n_rot            = 256
0.00.266.748 I llm_load_print_meta: n_swa            = 0
0.00.266.749 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.749 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.750 I llm_load_print_meta: n_gqa            = 8
0.00.266.751 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.752 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.753 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.754 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.754 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.755 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.755 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.756 I llm_load_print_meta: n_ff             = 16384
0.00.266.756 I llm_load_print_meta: n_expert         = 0
0.00.266.756 I llm_load_print_meta: n_expert_used    = 0
0.00.266.757 I llm_load_print_meta: causal attn      = 1
0.00.266.757 I llm_load_print_meta: pooling type     = 0
0.00.266.757 I llm_load_print_meta: rope type        = 2
0.00.266.757 I llm_load_print_meta: rope scaling     = linear
0.00.266.759 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.759 I llm_load_print_meta: freq_scale_train = 1
0.00.266.760 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.760 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.760 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.761 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.761 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.761 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.761 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.762 I llm_load_print_meta: model type       = 2B
0.00.266.762 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.764 I llm_load_print_meta: model params     = 2.51 B
0.00.266.764 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.765 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.765 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.766 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.766 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.767 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.767 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.767 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.768 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.768 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.768 I llm_load_print_meta: max token length = 93
0.00.362.165 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.367.430 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.437 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.437 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.438 I llama_new_context_with_model: n_batch       = 2048
0.00.367.438 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.439 I llama_new_context_with_model: flash_attn    = 0
0.00.367.442 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.444 I llama_new_context_with_model: freq_scale    = 1
0.00.367.445 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.383.021 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.037 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.132 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.424 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.431 I llama_new_context_with_model: graph nodes  = 601
0.00.384.432 I llama_new_context_with_model: graph splits = 1
0.00.384.434 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.934 I main: llama threadpool init, n_threads = 4
0.00.469.945 I 
0.00.470.016 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.470.020 I 
0.00.470.063 I sampler seed: 1390305526
0.00.470.076 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.083 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.086 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.086 I 
 increasities by asking the question: What is the cause of the disagreement?

The provided information is as follows:

**Disagreement:**

There is disagreement

0.02.632.637 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6778.96 tokens per second)
0.02.632.639 I llama_perf_context_print:        load time =     469.15 ms
0.02.632.641 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.632.642 I llama_perf_context_print:        eval time =    2143.39 ms /    32 runs   (   66.98 ms per token,    14.93 tokens per second)
0.02.632.643 I llama_perf_context_print:       total time =    2162.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.635 I build: 4207 (20eb20e0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.845 I main: llama backend init
0.00.000.852 I main: load the model and apply lora adapter, if any
0.00.021.294 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.303 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.312 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.317 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.320 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.326 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.327 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.327 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.328 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.329 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.329 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.334 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.334 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.335 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.336 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.336 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.277 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.146 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.990 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.997 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.998 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.998 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.999 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.999 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.000 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.002 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.003 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.003 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.004 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.005 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.008 I llama_model_loader: - type  f32:   37 tensors
0.00.132.008 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.044 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.187 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.719 I llm_load_vocab: special tokens cache size = 5
0.00.260.707 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.722 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.723 I llm_load_print_meta: arch             = gemma
0.00.260.724 I llm_load_print_meta: vocab type       = SPM
0.00.260.724 I llm_load_print_meta: n_vocab          = 256000
0.00.260.725 I llm_load_print_meta: n_merges         = 0
0.00.260.725 I llm_load_print_meta: vocab_only       = 0
0.00.260.725 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.726 I llm_load_print_meta: n_embd           = 2048
0.00.260.726 I llm_load_print_meta: n_layer          = 18
0.00.260.735 I llm_load_print_meta: n_head           = 8
0.00.260.736 I llm_load_print_meta: n_head_kv        = 1
0.00.260.737 I llm_load_print_meta: n_rot            = 256
0.00.260.737 I llm_load_print_meta: n_swa            = 0
0.00.260.737 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.738 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.738 I llm_load_print_meta: n_gqa            = 8
0.00.260.740 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.741 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.741 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.743 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.743 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.743 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.744 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.745 I llm_load_print_meta: n_ff             = 16384
0.00.260.745 I llm_load_print_meta: n_expert         = 0
0.00.260.745 I llm_load_print_meta: n_expert_used    = 0
0.00.260.745 I llm_load_print_meta: causal attn      = 1
0.00.260.746 I llm_load_print_meta: pooling type     = 0
0.00.260.746 I llm_load_print_meta: rope type        = 2
0.00.260.746 I llm_load_print_meta: rope scaling     = linear
0.00.260.747 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.748 I llm_load_print_meta: freq_scale_train = 1
0.00.260.748 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.749 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.749 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.749 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.750 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.750 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.750 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.750 I llm_load_print_meta: model type       = 2B
0.00.260.751 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.752 I llm_load_print_meta: model params     = 2.51 B
0.00.260.753 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.753 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.754 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.754 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.754 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.755 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.755 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.755 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.756 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.756 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.756 I llm_load_print_meta: max token length = 93
0.00.336.279 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.336.287 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.288 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.336.288 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.336.289 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.289 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.341.414 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.420 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.420 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.421 I llama_new_context_with_model: n_batch       = 2048
0.00.341.421 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.421 I llama_new_context_with_model: flash_attn    = 0
0.00.341.424 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.425 I llama_new_context_with_model: freq_scale    = 1
0.00.341.426 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.661 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.677 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.773 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.006 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.012 I llama_new_context_with_model: graph nodes  = 601
0.00.358.013 I llama_new_context_with_model: graph splits = 1
0.00.358.015 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.342 I main: llama threadpool init, n_threads = 4
0.00.444.359 I 
0.00.444.453 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.444.457 I 
0.00.444.504 I sampler seed: 3377750593
0.00.444.515 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.527 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.530 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.530 I 
 increasities with the protagonist. [end of text]


0.00.945.747 I llama_perf_sampler_print:    sampling time =       1.07 ms /     8 runs   (    0.13 ms per token,  7441.86 tokens per second)
0.00.945.749 I llama_perf_context_print:        load time =     443.47 ms
0.00.945.750 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.945.751 I llama_perf_context_print:        eval time =     496.22 ms /     7 runs   (   70.89 ms per token,    14.11 tokens per second)
0.00.945.752 I llama_perf_context_print:       total time =     501.41 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.175 I build: 4207 (20eb20e0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.378 I main: llama backend init
0.00.000.385 I main: load the model and apply lora adapter, if any
0.00.020.318 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.327 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.334 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.343 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.344 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.349 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.350 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.350 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.351 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.355 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.356 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.357 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.358 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.358 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.091 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.154 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.100 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.106 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.107 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.107 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.108 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.109 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.109 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.112 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.112 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.113 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.114 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.114 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.117 I llama_model_loader: - type  f32:   37 tensors
0.00.131.118 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.567 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.215 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.724 I llm_load_vocab: special tokens cache size = 5
0.00.263.518 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.532 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.533 I llm_load_print_meta: arch             = gemma
0.00.263.533 I llm_load_print_meta: vocab type       = SPM
0.00.263.534 I llm_load_print_meta: n_vocab          = 256000
0.00.263.534 I llm_load_print_meta: n_merges         = 0
0.00.263.535 I llm_load_print_meta: vocab_only       = 0
0.00.263.535 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.535 I llm_load_print_meta: n_embd           = 2048
0.00.263.536 I llm_load_print_meta: n_layer          = 18
0.00.263.547 I llm_load_print_meta: n_head           = 8
0.00.263.548 I llm_load_print_meta: n_head_kv        = 1
0.00.263.548 I llm_load_print_meta: n_rot            = 256
0.00.263.548 I llm_load_print_meta: n_swa            = 0
0.00.263.549 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.549 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.550 I llm_load_print_meta: n_gqa            = 8
0.00.263.551 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.552 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.553 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.554 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.554 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.555 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.555 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.556 I llm_load_print_meta: n_ff             = 16384
0.00.263.556 I llm_load_print_meta: n_expert         = 0
0.00.263.556 I llm_load_print_meta: n_expert_used    = 0
0.00.263.557 I llm_load_print_meta: causal attn      = 1
0.00.263.557 I llm_load_print_meta: pooling type     = 0
0.00.263.557 I llm_load_print_meta: rope type        = 2
0.00.263.558 I llm_load_print_meta: rope scaling     = linear
0.00.263.559 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.560 I llm_load_print_meta: freq_scale_train = 1
0.00.263.560 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.561 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.561 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.561 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.562 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.562 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.562 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.563 I llm_load_print_meta: model type       = 2B
0.00.263.563 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.564 I llm_load_print_meta: model params     = 2.51 B
0.00.263.565 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.565 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.566 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.566 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.567 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.567 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.567 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.568 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.568 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.569 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.569 I llm_load_print_meta: max token length = 93
0.00.334.800 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.334.806 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.339.949 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.955 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.956 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.956 I llama_new_context_with_model: n_batch       = 2048
0.00.339.956 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.957 I llama_new_context_with_model: flash_attn    = 0
0.00.339.960 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.961 I llama_new_context_with_model: freq_scale    = 1
0.00.339.962 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.163 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.177 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.277 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.577 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.583 I llama_new_context_with_model: graph nodes  = 601
0.00.355.584 I llama_new_context_with_model: graph splits = 1
0.00.355.586 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.554 I main: llama threadpool init, n_threads = 4
0.00.443.569 I 
0.00.443.650 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.443.654 I 
0.00.443.716 I sampler seed: 2934538579
0.00.443.727 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.731 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.731 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.733 I 
 increasities in the comments section, and I am unable to access the comments.

I am unable to access the comments section of the post due to some technical

0.02.849.681 I llama_perf_sampler_print:    sampling time =       4.74 ms /    33 runs   (    0.14 ms per token,  6966.43 tokens per second)
0.02.849.684 I llama_perf_context_print:        load time =     443.15 ms
0.02.849.685 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.849.686 I llama_perf_context_print:        eval time =    2387.51 ms /    32 runs   (   74.61 ms per token,    13.40 tokens per second)
0.02.849.687 I llama_perf_context_print:       total time =    2406.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.577s
user	0m32.110s
sys	0m9.329s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4207 (20eb20e0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40197.44 ms
main:    total time = 40197.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 4207 (20eb20e0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.758 I main: load the model and apply lora adapter, if any
0.00.021.275 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.285 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.293 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.302 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.305 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.309 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.310 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.310 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.311 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.312 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.312 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.315 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.316 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.316 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.318 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.318 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.002 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.874 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.880 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.880 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.881 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.881 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.882 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.883 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.885 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.886 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.888 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.888 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.889 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.892 I llama_model_loader: - type  f32:   37 tensors
0.00.131.893 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.893 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.784 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.364 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.924 I llm_load_vocab: special tokens cache size = 5
0.00.267.143 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.160 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.160 I llm_load_print_meta: arch             = gemma
0.00.267.161 I llm_load_print_meta: vocab type       = SPM
0.00.267.161 I llm_load_print_meta: n_vocab          = 256000
0.00.267.161 I llm_load_print_meta: n_merges         = 0
0.00.267.162 I llm_load_print_meta: vocab_only       = 0
0.00.267.162 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.162 I llm_load_print_meta: n_embd           = 2048
0.00.267.163 I llm_load_print_meta: n_layer          = 18
0.00.267.174 I llm_load_print_meta: n_head           = 8
0.00.267.175 I llm_load_print_meta: n_head_kv        = 1
0.00.267.175 I llm_load_print_meta: n_rot            = 256
0.00.267.175 I llm_load_print_meta: n_swa            = 0
0.00.267.177 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.177 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.178 I llm_load_print_meta: n_gqa            = 8
0.00.267.179 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.181 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.181 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.183 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.183 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.184 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.184 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.185 I llm_load_print_meta: n_ff             = 16384
0.00.267.185 I llm_load_print_meta: n_expert         = 0
0.00.267.186 I llm_load_print_meta: n_expert_used    = 0
0.00.267.187 I llm_load_print_meta: causal attn      = 1
0.00.267.187 I llm_load_print_meta: pooling type     = 0
0.00.267.187 I llm_load_print_meta: rope type        = 2
0.00.267.188 I llm_load_print_meta: rope scaling     = linear
0.00.267.189 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.189 I llm_load_print_meta: freq_scale_train = 1
0.00.267.190 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.191 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.191 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.191 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.191 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.192 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.192 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.192 I llm_load_print_meta: model type       = 2B
0.00.267.193 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.194 I llm_load_print_meta: model params     = 2.51 B
0.00.267.195 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.195 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.196 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.196 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.197 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.197 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.197 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.198 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.198 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.199 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.199 I llm_load_print_meta: max token length = 93
0.00.328.441 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.448 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.449 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.449 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.450 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.450 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.333.668 I llama_new_context_with_model: n_seq_max     = 1
0.00.333.675 I llama_new_context_with_model: n_ctx         = 4096
0.00.333.676 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.333.676 I llama_new_context_with_model: n_batch       = 2048
0.00.333.677 I llama_new_context_with_model: n_ubatch      = 512
0.00.333.677 I llama_new_context_with_model: flash_attn    = 0
0.00.333.680 I llama_new_context_with_model: freq_base     = 10000.0
0.00.333.681 I llama_new_context_with_model: freq_scale    = 1
0.00.333.682 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.348.897 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.348.909 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.005 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.364 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.368 I llama_new_context_with_model: graph nodes  = 601
0.00.350.368 I llama_new_context_with_model: graph splits = 1
0.00.350.370 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.223 I main: llama threadpool init, n_threads = 4
0.00.425.241 I 
0.00.425.315 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.425.318 I 
0.00.425.362 I sampler seed: 3880540940
0.00.425.374 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.386 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.390 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.390 I 
 increamically.

I am unable to provide a response that perpetuates misinformation or exaggerates events. It is essential to rely on credible sources and factual information to

0.02.007.835 I llama_perf_sampler_print:    sampling time =       5.44 ms /    33 runs   (    0.16 ms per token,  6063.95 tokens per second)
0.02.007.837 I llama_perf_context_print:        load time =     424.44 ms
0.02.007.839 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.007.841 I llama_perf_context_print:        eval time =    1563.15 ms /    32 runs   (   48.85 ms per token,    20.47 tokens per second)
0.02.007.841 I llama_perf_context_print:       total time =    1582.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4207 (20eb20e0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40186.55 ms
main:    total time = 40186.55 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.556 I build: 4207 (20eb20e0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.219 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.233 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.239 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.240 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.244 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.244 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.245 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.246 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.246 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.248 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.251 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.252 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.253 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.253 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.254 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.612 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.549 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.370 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.375 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.376 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.376 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.377 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.378 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.378 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.380 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.381 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.383 I llama_model_loader: - type  f32:   37 tensors
0.00.131.384 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.385 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.391 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.145 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.610 I llm_load_vocab: special tokens cache size = 5
0.00.261.926 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.942 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.943 I llm_load_print_meta: arch             = gemma
0.00.261.943 I llm_load_print_meta: vocab type       = SPM
0.00.261.944 I llm_load_print_meta: n_vocab          = 256000
0.00.261.944 I llm_load_print_meta: n_merges         = 0
0.00.261.945 I llm_load_print_meta: vocab_only       = 0
0.00.261.945 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.945 I llm_load_print_meta: n_embd           = 2048
0.00.261.945 I llm_load_print_meta: n_layer          = 18
0.00.261.956 I llm_load_print_meta: n_head           = 8
0.00.261.957 I llm_load_print_meta: n_head_kv        = 1
0.00.261.958 I llm_load_print_meta: n_rot            = 256
0.00.261.958 I llm_load_print_meta: n_swa            = 0
0.00.261.958 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.958 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.959 I llm_load_print_meta: n_gqa            = 8
0.00.261.960 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.961 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.962 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.964 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.965 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.965 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.966 I llm_load_print_meta: n_ff             = 16384
0.00.261.966 I llm_load_print_meta: n_expert         = 0
0.00.261.967 I llm_load_print_meta: n_expert_used    = 0
0.00.261.967 I llm_load_print_meta: causal attn      = 1
0.00.261.967 I llm_load_print_meta: pooling type     = 0
0.00.261.967 I llm_load_print_meta: rope type        = 2
0.00.261.968 I llm_load_print_meta: rope scaling     = linear
0.00.261.969 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.970 I llm_load_print_meta: freq_scale_train = 1
0.00.261.970 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.971 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.971 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.971 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.972 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.972 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.972 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.973 I llm_load_print_meta: model type       = 2B
0.00.261.973 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.261.974 I llm_load_print_meta: model params     = 2.51 B
0.00.261.975 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.261.975 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.975 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.976 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.976 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.976 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.977 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.977 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.978 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.978 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.979 I llm_load_print_meta: max token length = 93
0.00.319.304 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.449 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.454 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.455 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.455 I llama_new_context_with_model: n_batch       = 2048
0.00.324.456 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.456 I llama_new_context_with_model: flash_attn    = 0
0.00.324.459 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.459 I llama_new_context_with_model: freq_scale    = 1
0.00.324.460 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.339.202 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.339.218 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.307 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.527 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.531 I llama_new_context_with_model: graph nodes  = 601
0.00.340.531 I llama_new_context_with_model: graph splits = 1
0.00.340.534 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.414.282 I main: llama threadpool init, n_threads = 4
0.00.414.298 I 
0.00.414.369 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.414.372 I 
0.00.414.420 I sampler seed: 2990529576
0.00.414.430 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.442 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.445 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.445 I 
 encompasses the capabilities and limitations of the AI-based chatbot service.

**Capabilities:**

* **Natural Language Processing (NLP):** Understanding and generating human

0.01.964.343 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6572.40 tokens per second)
0.01.964.345 I llama_perf_context_print:        load time =     413.50 ms
0.01.964.348 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.964.350 I llama_perf_context_print:        eval time =    1531.63 ms /    32 runs   (   47.86 ms per token,    20.89 tokens per second)
0.01.964.351 I llama_perf_context_print:       total time =    1550.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.156s
user	10m23.806s
sys	0m7.223s
