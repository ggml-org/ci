+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.578 I build: 4283 (ada8855f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.774 I main: llama backend init
0.00.000.780 I main: load the model and apply lora adapter, if any
0.00.022.596 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.606 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.620 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.621 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.625 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.626 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.627 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.628 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.628 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.629 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.634 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.635 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.635 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.636 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.636 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.420 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.566 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.353 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.359 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.359 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.360 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.360 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.361 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.362 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.365 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.365 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.366 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.367 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.368 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.371 I llama_model_loader: - type  f32:   37 tensors
0.00.132.372 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.134 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.728 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.241 I llm_load_vocab: special tokens cache size = 5
0.00.275.925 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.943 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.943 I llm_load_print_meta: arch             = gemma
0.00.275.944 I llm_load_print_meta: vocab type       = SPM
0.00.275.945 I llm_load_print_meta: n_vocab          = 256000
0.00.275.945 I llm_load_print_meta: n_merges         = 0
0.00.275.946 I llm_load_print_meta: vocab_only       = 0
0.00.275.946 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.946 I llm_load_print_meta: n_embd           = 2048
0.00.275.947 I llm_load_print_meta: n_layer          = 18
0.00.275.957 I llm_load_print_meta: n_head           = 8
0.00.275.958 I llm_load_print_meta: n_head_kv        = 1
0.00.275.959 I llm_load_print_meta: n_rot            = 256
0.00.275.959 I llm_load_print_meta: n_swa            = 0
0.00.275.959 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.960 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.961 I llm_load_print_meta: n_gqa            = 8
0.00.275.962 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.963 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.964 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.964 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.965 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.965 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.966 I llm_load_print_meta: n_ff             = 16384
0.00.275.967 I llm_load_print_meta: n_expert         = 0
0.00.275.967 I llm_load_print_meta: n_expert_used    = 0
0.00.275.967 I llm_load_print_meta: causal attn      = 1
0.00.275.968 I llm_load_print_meta: pooling type     = 0
0.00.275.968 I llm_load_print_meta: rope type        = 2
0.00.275.968 I llm_load_print_meta: rope scaling     = linear
0.00.275.969 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.970 I llm_load_print_meta: freq_scale_train = 1
0.00.275.970 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.971 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.971 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.971 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.972 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.972 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.972 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.972 I llm_load_print_meta: model type       = 2B
0.00.275.973 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.974 I llm_load_print_meta: model params     = 2.51 B
0.00.275.974 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.975 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.975 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.976 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.976 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.976 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.977 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.977 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.977 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.978 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.978 I llm_load_print_meta: max token length = 93
0.00.378.101 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.378.107 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.378.108 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.378.109 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.378.109 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.378.110 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.383.478 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.484 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.485 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.485 I llama_new_context_with_model: n_batch       = 2048
0.00.383.485 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.486 I llama_new_context_with_model: flash_attn    = 0
0.00.383.488 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.489 I llama_new_context_with_model: freq_scale    = 1
0.00.383.490 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.398.130 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.145 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.398.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.462 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.468 I llama_new_context_with_model: graph nodes  = 601
0.00.399.469 I llama_new_context_with_model: graph splits = 1
0.00.399.471 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.914 I main: llama threadpool init, n_threads = 4
0.00.483.930 I 
0.00.484.002 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.005 I 
0.00.484.052 I sampler seed: 949415700
0.00.484.063 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.077 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.080 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.081 I 
 increasively, as the narrator becomes increasingly engrossed in the story.

The old woman sat perched on the weathered stone steps, her gnarled hands clutching a tattered

0.02.734.908 I llama_perf_sampler_print:    sampling time =       5.56 ms /    33 runs   (    0.17 ms per token,  5934.18 tokens per second)
0.02.734.910 I llama_perf_context_print:        load time =     483.12 ms
0.02.734.912 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.734.913 I llama_perf_context_print:        eval time =    2231.56 ms /    32 runs   (   69.74 ms per token,    14.34 tokens per second)
0.02.734.913 I llama_perf_context_print:       total time =    2251.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.186 I build: 4283 (ada8855f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.374 I main: llama backend init
0.00.000.380 I main: load the model and apply lora adapter, if any
0.00.020.661 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.674 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.680 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.681 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.686 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.689 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.690 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.691 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.692 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.693 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.696 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.697 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.697 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.698 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.699 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.577 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.608 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.437 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.442 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.443 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.443 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.444 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.445 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.445 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.448 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.449 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.451 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.451 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.452 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.455 I llama_model_loader: - type  f32:   37 tensors
0.00.130.456 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.316 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.716 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.246 I llm_load_vocab: special tokens cache size = 5
0.00.265.022 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.039 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.040 I llm_load_print_meta: arch             = gemma
0.00.265.040 I llm_load_print_meta: vocab type       = SPM
0.00.265.041 I llm_load_print_meta: n_vocab          = 256000
0.00.265.041 I llm_load_print_meta: n_merges         = 0
0.00.265.042 I llm_load_print_meta: vocab_only       = 0
0.00.265.042 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.042 I llm_load_print_meta: n_embd           = 2048
0.00.265.042 I llm_load_print_meta: n_layer          = 18
0.00.265.054 I llm_load_print_meta: n_head           = 8
0.00.265.055 I llm_load_print_meta: n_head_kv        = 1
0.00.265.056 I llm_load_print_meta: n_rot            = 256
0.00.265.056 I llm_load_print_meta: n_swa            = 0
0.00.265.056 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.057 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.057 I llm_load_print_meta: n_gqa            = 8
0.00.265.059 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.060 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.060 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.062 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.062 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.063 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.063 I llm_load_print_meta: n_ff             = 16384
0.00.265.064 I llm_load_print_meta: n_expert         = 0
0.00.265.064 I llm_load_print_meta: n_expert_used    = 0
0.00.265.064 I llm_load_print_meta: causal attn      = 1
0.00.265.065 I llm_load_print_meta: pooling type     = 0
0.00.265.065 I llm_load_print_meta: rope type        = 2
0.00.265.065 I llm_load_print_meta: rope scaling     = linear
0.00.265.067 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.067 I llm_load_print_meta: freq_scale_train = 1
0.00.265.068 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.068 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.069 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.069 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.069 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.069 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.070 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.070 I llm_load_print_meta: model type       = 2B
0.00.265.070 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.071 I llm_load_print_meta: model params     = 2.51 B
0.00.265.072 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.072 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.073 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.073 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.074 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.074 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.074 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.075 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.075 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.075 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.076 I llm_load_print_meta: max token length = 93
0.00.361.472 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.689 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.696 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.697 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.697 I llama_new_context_with_model: n_batch       = 2048
0.00.366.697 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.698 I llama_new_context_with_model: flash_attn    = 0
0.00.366.700 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.701 I llama_new_context_with_model: freq_scale    = 1
0.00.366.702 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.727 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.743 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.839 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.069 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.075 I llama_new_context_with_model: graph nodes  = 601
0.00.383.075 I llama_new_context_with_model: graph splits = 1
0.00.383.078 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.018 I main: llama threadpool init, n_threads = 4
0.00.464.033 I 
0.00.464.107 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.464.110 I 
0.00.464.153 I sampler seed: 1394745282
0.00.464.165 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.173 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.176 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.177 I 
 increasities with the utmost respect and sensitivity.

I am unable to provide specific examples or opinions on this topic as it would violate my safety principles. [end of text]


0.02.573.644 I llama_perf_sampler_print:    sampling time =       5.33 ms /    32 runs   (    0.17 ms per token,  5999.25 tokens per second)
0.02.573.646 I llama_perf_context_print:        load time =     463.62 ms
0.02.573.648 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.573.649 I llama_perf_context_print:        eval time =    2090.59 ms /    31 runs   (   67.44 ms per token,    14.83 tokens per second)
0.02.573.650 I llama_perf_context_print:       total time =    2109.63 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.533 I build: 4283 (ada8855f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.757 I main: load the model and apply lora adapter, if any
0.00.020.957 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.967 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.974 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.978 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.979 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.985 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.985 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.986 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.987 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.987 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.988 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.992 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.993 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.993 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.994 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.995 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.371 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.157 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.163 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.164 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.165 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.165 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.166 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.167 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.169 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.170 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.171 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.171 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.172 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.176 I llama_model_loader: - type  f32:   37 tensors
0.00.130.177 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.880 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.450 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.177 I llm_load_vocab: special tokens cache size = 5
0.00.276.136 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.155 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.156 I llm_load_print_meta: arch             = gemma
0.00.276.157 I llm_load_print_meta: vocab type       = SPM
0.00.276.157 I llm_load_print_meta: n_vocab          = 256000
0.00.276.157 I llm_load_print_meta: n_merges         = 0
0.00.276.158 I llm_load_print_meta: vocab_only       = 0
0.00.276.158 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.158 I llm_load_print_meta: n_embd           = 2048
0.00.276.158 I llm_load_print_meta: n_layer          = 18
0.00.276.170 I llm_load_print_meta: n_head           = 8
0.00.276.171 I llm_load_print_meta: n_head_kv        = 1
0.00.276.171 I llm_load_print_meta: n_rot            = 256
0.00.276.171 I llm_load_print_meta: n_swa            = 0
0.00.276.172 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.172 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.173 I llm_load_print_meta: n_gqa            = 8
0.00.276.174 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.175 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.175 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.177 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.177 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.177 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.178 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.179 I llm_load_print_meta: n_ff             = 16384
0.00.276.179 I llm_load_print_meta: n_expert         = 0
0.00.276.179 I llm_load_print_meta: n_expert_used    = 0
0.00.276.179 I llm_load_print_meta: causal attn      = 1
0.00.276.180 I llm_load_print_meta: pooling type     = 0
0.00.276.180 I llm_load_print_meta: rope type        = 2
0.00.276.180 I llm_load_print_meta: rope scaling     = linear
0.00.276.182 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.182 I llm_load_print_meta: freq_scale_train = 1
0.00.276.182 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.183 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.183 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.183 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.184 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.184 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.184 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.184 I llm_load_print_meta: model type       = 2B
0.00.276.185 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.186 I llm_load_print_meta: model params     = 2.51 B
0.00.276.187 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.187 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.187 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.188 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.188 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.188 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.189 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.189 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.189 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.190 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.190 I llm_load_print_meta: max token length = 93
0.00.352.387 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.352.394 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.394 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.352.395 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.352.395 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.352.396 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.357.858 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.864 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.864 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.865 I llama_new_context_with_model: n_batch       = 2048
0.00.357.865 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.865 I llama_new_context_with_model: flash_attn    = 0
0.00.357.868 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.868 I llama_new_context_with_model: freq_scale    = 1
0.00.357.869 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.123 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.137 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.227 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.558 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.564 I llama_new_context_with_model: graph nodes  = 601
0.00.373.565 I llama_new_context_with_model: graph splits = 1
0.00.373.567 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.154 I main: llama threadpool init, n_threads = 4
0.00.460.170 I 
0.00.460.251 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.460.256 I 
0.00.460.307 I sampler seed: 928818473
0.00.460.318 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.329 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.333 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.334 I 
 seconally.

I have attached a text file containing a list of words. I need to create a document that summarizes the main points of the text.



0.02.720.783 I llama_perf_sampler_print:    sampling time =       5.50 ms /    33 runs   (    0.17 ms per token,  5995.64 tokens per second)
0.02.720.785 I llama_perf_context_print:        load time =     459.38 ms
0.02.720.787 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.720.788 I llama_perf_context_print:        eval time =    2240.62 ms /    32 runs   (   70.02 ms per token,    14.28 tokens per second)
0.02.720.789 I llama_perf_context_print:       total time =    2260.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.542 I build: 4283 (ada8855f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.067 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.078 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.086 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.092 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.097 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.101 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.102 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.103 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.105 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.106 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.107 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.113 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.114 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.115 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.116 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.117 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.054.071 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.304 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.142.162 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.142.169 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.142.170 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.142.170 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.142.171 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.142.172 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.142.173 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.142.175 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.142.176 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.142.176 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.142.177 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.142.178 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.142.181 I llama_model_loader: - type  f32:   37 tensors
0.00.142.182 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.510 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.664 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.253 I llm_load_vocab: special tokens cache size = 5
0.00.281.034 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.071 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.072 I llm_load_print_meta: arch             = gemma
0.00.281.073 I llm_load_print_meta: vocab type       = SPM
0.00.281.074 I llm_load_print_meta: n_vocab          = 256000
0.00.281.074 I llm_load_print_meta: n_merges         = 0
0.00.281.075 I llm_load_print_meta: vocab_only       = 0
0.00.281.075 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.076 I llm_load_print_meta: n_embd           = 2048
0.00.281.076 I llm_load_print_meta: n_layer          = 18
0.00.281.092 I llm_load_print_meta: n_head           = 8
0.00.281.093 I llm_load_print_meta: n_head_kv        = 1
0.00.281.094 I llm_load_print_meta: n_rot            = 256
0.00.281.094 I llm_load_print_meta: n_swa            = 0
0.00.281.095 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.095 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.097 I llm_load_print_meta: n_gqa            = 8
0.00.281.099 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.100 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.101 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.103 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.104 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.104 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.105 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.107 I llm_load_print_meta: n_ff             = 16384
0.00.281.107 I llm_load_print_meta: n_expert         = 0
0.00.281.108 I llm_load_print_meta: n_expert_used    = 0
0.00.281.108 I llm_load_print_meta: causal attn      = 1
0.00.281.109 I llm_load_print_meta: pooling type     = 0
0.00.281.110 I llm_load_print_meta: rope type        = 2
0.00.281.111 I llm_load_print_meta: rope scaling     = linear
0.00.281.113 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.114 I llm_load_print_meta: freq_scale_train = 1
0.00.281.114 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.115 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.115 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.116 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.116 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.116 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.117 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.117 I llm_load_print_meta: model type       = 2B
0.00.281.118 I llm_load_print_meta: model ftype      = Q8_0
0.00.281.119 I llm_load_print_meta: model params     = 2.51 B
0.00.281.121 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.281.122 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.122 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.123 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.124 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.124 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.125 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.125 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.126 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.126 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.127 I llm_load_print_meta: max token length = 93
0.00.352.554 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.352.560 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.357.765 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.772 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.772 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.773 I llama_new_context_with_model: n_batch       = 2048
0.00.357.773 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.773 I llama_new_context_with_model: flash_attn    = 0
0.00.357.777 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.777 I llama_new_context_with_model: freq_scale    = 1
0.00.357.778 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.253 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.269 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.656 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.663 I llama_new_context_with_model: graph nodes  = 601
0.00.373.663 I llama_new_context_with_model: graph splits = 1
0.00.373.665 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.959 I main: llama threadpool init, n_threads = 4
0.00.465.976 I 
0.00.466.066 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.466.069 I 
0.00.466.119 I sampler seed: 1930001501
0.00.466.130 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.141 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.145 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.145 I 
 increasities.

I believe that the following statement is incorrect because it relies on subjective interpretations of facts.

"The increasing number of social media users is a

0.02.890.213 I llama_perf_sampler_print:    sampling time =       5.76 ms /    33 runs   (    0.17 ms per token,  5726.18 tokens per second)
0.02.890.216 I llama_perf_context_print:        load time =     465.18 ms
0.02.890.217 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.890.219 I llama_perf_context_print:        eval time =    2403.49 ms /    32 runs   (   75.11 ms per token,    13.31 tokens per second)
0.02.890.219 I llama_perf_context_print:       total time =    2424.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.403s
user	0m39.046s
sys	0m9.293s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4283 (ada8855f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40203.57 ms
main:    total time = 40203.57 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.526 I build: 4283 (ada8855f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.717 I main: llama backend init
0.00.000.723 I main: load the model and apply lora adapter, if any
0.00.020.668 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.677 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.685 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.693 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.697 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.700 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.700 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.701 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.702 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.703 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.704 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.707 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.708 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.709 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.709 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.710 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.461 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.652 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.605 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.612 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.613 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.614 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.614 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.616 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.617 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.620 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.621 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.622 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.623 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.624 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.627 I llama_model_loader: - type  f32:   37 tensors
0.00.130.628 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.629 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.980 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.438 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.235.899 I llm_load_vocab: special tokens cache size = 5
0.00.256.323 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.256.339 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.256.340 I llm_load_print_meta: arch             = gemma
0.00.256.340 I llm_load_print_meta: vocab type       = SPM
0.00.256.341 I llm_load_print_meta: n_vocab          = 256000
0.00.256.341 I llm_load_print_meta: n_merges         = 0
0.00.256.342 I llm_load_print_meta: vocab_only       = 0
0.00.256.342 I llm_load_print_meta: n_ctx_train      = 8192
0.00.256.342 I llm_load_print_meta: n_embd           = 2048
0.00.256.343 I llm_load_print_meta: n_layer          = 18
0.00.256.353 I llm_load_print_meta: n_head           = 8
0.00.256.354 I llm_load_print_meta: n_head_kv        = 1
0.00.256.354 I llm_load_print_meta: n_rot            = 256
0.00.256.354 I llm_load_print_meta: n_swa            = 0
0.00.256.355 I llm_load_print_meta: n_embd_head_k    = 256
0.00.256.355 I llm_load_print_meta: n_embd_head_v    = 256
0.00.256.356 I llm_load_print_meta: n_gqa            = 8
0.00.256.357 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.256.358 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.256.358 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.256.360 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.256.361 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.256.361 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.256.361 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.256.362 I llm_load_print_meta: n_ff             = 16384
0.00.256.362 I llm_load_print_meta: n_expert         = 0
0.00.256.363 I llm_load_print_meta: n_expert_used    = 0
0.00.256.363 I llm_load_print_meta: causal attn      = 1
0.00.256.364 I llm_load_print_meta: pooling type     = 0
0.00.256.364 I llm_load_print_meta: rope type        = 2
0.00.256.365 I llm_load_print_meta: rope scaling     = linear
0.00.256.366 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.256.367 I llm_load_print_meta: freq_scale_train = 1
0.00.256.367 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.256.367 I llm_load_print_meta: rope_finetuned   = unknown
0.00.256.367 I llm_load_print_meta: ssm_d_conv       = 0
0.00.256.368 I llm_load_print_meta: ssm_d_inner      = 0
0.00.256.368 I llm_load_print_meta: ssm_d_state      = 0
0.00.256.368 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.256.368 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.256.369 I llm_load_print_meta: model type       = 2B
0.00.256.369 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.256.371 I llm_load_print_meta: model params     = 2.51 B
0.00.256.371 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.256.372 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.256.373 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.256.373 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.256.373 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.256.373 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.256.374 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.256.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.256.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.256.375 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.256.375 I llm_load_print_meta: max token length = 93
0.00.316.889 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.316.896 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.316.897 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.316.897 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.316.898 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.316.898 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.321.920 I llama_new_context_with_model: n_seq_max     = 1
0.00.321.926 I llama_new_context_with_model: n_ctx         = 4096
0.00.321.927 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.321.927 I llama_new_context_with_model: n_batch       = 2048
0.00.321.927 I llama_new_context_with_model: n_ubatch      = 512
0.00.321.928 I llama_new_context_with_model: flash_attn    = 0
0.00.321.930 I llama_new_context_with_model: freq_base     = 10000.0
0.00.321.931 I llama_new_context_with_model: freq_scale    = 1
0.00.321.932 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.336.110 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.336.125 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.336.217 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.337.440 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.337.445 I llama_new_context_with_model: graph nodes  = 601
0.00.337.446 I llama_new_context_with_model: graph splits = 1
0.00.337.448 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.411.551 I main: llama threadpool init, n_threads = 4
0.00.411.566 I 
0.00.411.638 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.411.641 I 
0.00.411.682 I sampler seed: 2714570743
0.00.411.692 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.411.698 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.411.698 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.411.698 I 
 susceptible.

**Answer:**
I am not qualified to provide medical advice. Please consult a medical professional for any questions or concerns you may have. [end of text]


0.01.999.681 I llama_perf_sampler_print:    sampling time =       5.64 ms /    33 runs   (    0.17 ms per token,  5855.22 tokens per second)
0.01.999.684 I llama_perf_context_print:        load time =     410.81 ms
0.01.999.686 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.999.688 I llama_perf_context_print:        eval time =    1568.73 ms /    32 runs   (   49.02 ms per token,    20.40 tokens per second)
0.01.999.689 I llama_perf_context_print:       total time =    1588.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4283 (ada8855f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40164.77 ms
main:    total time = 40164.77 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.519 I build: 4283 (ada8855f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.718 I main: llama backend init
0.00.000.724 I main: load the model and apply lora adapter, if any
0.00.021.466 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.480 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.486 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.490 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.494 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.495 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.496 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.498 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.503 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.503 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.504 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.959 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.887 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.654 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.660 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.661 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.661 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.661 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.662 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.663 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.666 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.666 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.669 I llama_model_loader: - type  f32:   37 tensors
0.00.130.669 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.670 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.419 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.104 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.593 I llm_load_vocab: special tokens cache size = 5
0.00.257.971 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.257.988 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.257.989 I llm_load_print_meta: arch             = gemma
0.00.257.989 I llm_load_print_meta: vocab type       = SPM
0.00.257.990 I llm_load_print_meta: n_vocab          = 256000
0.00.257.990 I llm_load_print_meta: n_merges         = 0
0.00.257.990 I llm_load_print_meta: vocab_only       = 0
0.00.257.991 I llm_load_print_meta: n_ctx_train      = 8192
0.00.257.991 I llm_load_print_meta: n_embd           = 2048
0.00.257.991 I llm_load_print_meta: n_layer          = 18
0.00.258.003 I llm_load_print_meta: n_head           = 8
0.00.258.005 I llm_load_print_meta: n_head_kv        = 1
0.00.258.005 I llm_load_print_meta: n_rot            = 256
0.00.258.005 I llm_load_print_meta: n_swa            = 0
0.00.258.005 I llm_load_print_meta: n_embd_head_k    = 256
0.00.258.006 I llm_load_print_meta: n_embd_head_v    = 256
0.00.258.007 I llm_load_print_meta: n_gqa            = 8
0.00.258.008 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.258.008 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.258.009 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.258.011 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.258.011 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.258.012 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.258.012 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.258.013 I llm_load_print_meta: n_ff             = 16384
0.00.258.013 I llm_load_print_meta: n_expert         = 0
0.00.258.013 I llm_load_print_meta: n_expert_used    = 0
0.00.258.014 I llm_load_print_meta: causal attn      = 1
0.00.258.014 I llm_load_print_meta: pooling type     = 0
0.00.258.014 I llm_load_print_meta: rope type        = 2
0.00.258.015 I llm_load_print_meta: rope scaling     = linear
0.00.258.016 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.258.016 I llm_load_print_meta: freq_scale_train = 1
0.00.258.017 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.258.017 I llm_load_print_meta: rope_finetuned   = unknown
0.00.258.018 I llm_load_print_meta: ssm_d_conv       = 0
0.00.258.018 I llm_load_print_meta: ssm_d_inner      = 0
0.00.258.018 I llm_load_print_meta: ssm_d_state      = 0
0.00.258.018 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.258.019 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.258.019 I llm_load_print_meta: model type       = 2B
0.00.258.019 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.258.020 I llm_load_print_meta: model params     = 2.51 B
0.00.258.021 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.258.021 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.258.022 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.258.022 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.258.022 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.258.023 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.258.023 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.258.023 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.258.024 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.258.024 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.258.024 I llm_load_print_meta: max token length = 93
0.00.316.226 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.321.321 I llama_new_context_with_model: n_seq_max     = 1
0.00.321.327 I llama_new_context_with_model: n_ctx         = 4096
0.00.321.327 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.321.328 I llama_new_context_with_model: n_batch       = 2048
0.00.321.328 I llama_new_context_with_model: n_ubatch      = 512
0.00.321.329 I llama_new_context_with_model: flash_attn    = 0
0.00.321.331 I llama_new_context_with_model: freq_base     = 10000.0
0.00.321.332 I llama_new_context_with_model: freq_scale    = 1
0.00.321.333 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.960 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.335.974 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.336.061 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.337.315 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.337.322 I llama_new_context_with_model: graph nodes  = 601
0.00.337.322 I llama_new_context_with_model: graph splits = 1
0.00.337.324 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.411.826 I main: llama threadpool init, n_threads = 4
0.00.411.841 I 
0.00.411.924 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.411.928 I 
0.00.411.990 I sampler seed: 2464590977
0.00.412.001 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.412.011 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.412.013 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.412.014 I 
 increasities and other related phenomena are a common occurrence in the lives of many people. While some people may experience these phenomena as a sign of spiritual growth, others

0.01.979.659 I llama_perf_sampler_print:    sampling time =       5.48 ms /    33 runs   (    0.17 ms per token,  6027.40 tokens per second)
0.01.979.661 I llama_perf_context_print:        load time =     411.09 ms
0.01.979.662 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.979.663 I llama_perf_context_print:        eval time =    1548.51 ms /    32 runs   (   48.39 ms per token,    20.67 tokens per second)
0.01.979.664 I llama_perf_context_print:       total time =    1567.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.113s
user	10m24.021s
sys	0m7.004s
