+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4140 (ad21c9e1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.000.747 I main: load the model and apply lora adapter, if any
0.00.021.471 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.482 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.489 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.499 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.502 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.507 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.508 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.509 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.509 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.510 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.510 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.515 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.515 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.516 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.516 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.517 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.598 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.397 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.251 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.257 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.258 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.259 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.260 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.261 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.262 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.265 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.266 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.267 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.268 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.269 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.272 I llama_model_loader: - type  f32:   37 tensors
0.00.130.273 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.619 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.424 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.949 I llm_load_vocab: special tokens cache size = 5
0.00.259.845 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.861 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.862 I llm_load_print_meta: arch             = gemma
0.00.259.863 I llm_load_print_meta: vocab type       = SPM
0.00.259.863 I llm_load_print_meta: n_vocab          = 256000
0.00.259.864 I llm_load_print_meta: n_merges         = 0
0.00.259.864 I llm_load_print_meta: vocab_only       = 0
0.00.259.864 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.865 I llm_load_print_meta: n_embd           = 2048
0.00.259.865 I llm_load_print_meta: n_layer          = 18
0.00.259.877 I llm_load_print_meta: n_head           = 8
0.00.259.878 I llm_load_print_meta: n_head_kv        = 1
0.00.259.878 I llm_load_print_meta: n_rot            = 256
0.00.259.878 I llm_load_print_meta: n_swa            = 0
0.00.259.879 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.879 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.880 I llm_load_print_meta: n_gqa            = 8
0.00.259.881 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.882 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.883 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.884 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.884 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.884 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.885 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.886 I llm_load_print_meta: n_ff             = 16384
0.00.259.886 I llm_load_print_meta: n_expert         = 0
0.00.259.886 I llm_load_print_meta: n_expert_used    = 0
0.00.259.887 I llm_load_print_meta: causal attn      = 1
0.00.259.887 I llm_load_print_meta: pooling type     = 0
0.00.259.888 I llm_load_print_meta: rope type        = 2
0.00.259.888 I llm_load_print_meta: rope scaling     = linear
0.00.259.890 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.890 I llm_load_print_meta: freq_scale_train = 1
0.00.259.890 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.891 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.891 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.891 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.892 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.892 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.892 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.893 I llm_load_print_meta: model type       = 2B
0.00.259.894 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.894 I llm_load_print_meta: model params     = 2.51 B
0.00.259.895 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.896 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.896 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.896 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.897 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.897 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.897 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.897 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.898 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.898 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.899 I llm_load_print_meta: max token length = 93
0.00.360.349 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.360.357 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.360.357 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.360.358 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.360.359 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.360.359 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.365.614 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.620 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.621 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.621 I llama_new_context_with_model: n_batch       = 2048
0.00.365.622 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.622 I llama_new_context_with_model: flash_attn    = 0
0.00.365.624 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.625 I llama_new_context_with_model: freq_scale    = 1
0.00.365.626 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.718 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.730 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.820 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.088 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.094 I llama_new_context_with_model: graph nodes  = 601
0.00.381.095 I llama_new_context_with_model: graph splits = 1
0.00.381.097 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.465.852 I main: llama threadpool init, n_threads = 4
0.00.465.865 I 
0.00.465.941 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.465.944 I 
0.00.465.986 I sampler seed: 2348210667
0.00.465.997 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.466.000 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.466.000 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.466.002 I 
 increasities, it is crucial to prioritize the safety and well-being of all individuals involved.

**Safety Procedures:**

- Implement strict safety protocols and guidelines

0.02.708.371 I llama_perf_sampler_print:    sampling time =       4.74 ms /    33 runs   (    0.14 ms per token,  6957.62 tokens per second)
0.02.708.373 I llama_perf_context_print:        load time =     465.09 ms
0.02.708.375 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.376 I llama_perf_context_print:        eval time =    2223.14 ms /    32 runs   (   69.47 ms per token,    14.39 tokens per second)
0.02.708.377 I llama_perf_context_print:       total time =    2242.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.571 I build: 4140 (ad21c9e1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.021.237 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.251 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.258 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.262 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.262 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.263 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.264 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.264 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.264 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.268 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.268 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.269 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.269 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.270 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.748 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.423 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.267 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.273 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.274 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.275 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.275 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.276 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.278 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.280 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.281 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.282 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.282 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.283 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.287 I llama_model_loader: - type  f32:   37 tensors
0.00.130.288 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.125 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.268 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.794 I llm_load_vocab: special tokens cache size = 5
0.00.264.481 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.495 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.496 I llm_load_print_meta: arch             = gemma
0.00.264.496 I llm_load_print_meta: vocab type       = SPM
0.00.264.497 I llm_load_print_meta: n_vocab          = 256000
0.00.264.497 I llm_load_print_meta: n_merges         = 0
0.00.264.498 I llm_load_print_meta: vocab_only       = 0
0.00.264.498 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.498 I llm_load_print_meta: n_embd           = 2048
0.00.264.499 I llm_load_print_meta: n_layer          = 18
0.00.264.508 I llm_load_print_meta: n_head           = 8
0.00.264.509 I llm_load_print_meta: n_head_kv        = 1
0.00.264.510 I llm_load_print_meta: n_rot            = 256
0.00.264.510 I llm_load_print_meta: n_swa            = 0
0.00.264.510 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.511 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.512 I llm_load_print_meta: n_gqa            = 8
0.00.264.513 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.514 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.515 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.517 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.517 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.517 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.518 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.519 I llm_load_print_meta: n_ff             = 16384
0.00.264.519 I llm_load_print_meta: n_expert         = 0
0.00.264.519 I llm_load_print_meta: n_expert_used    = 0
0.00.264.520 I llm_load_print_meta: causal attn      = 1
0.00.264.520 I llm_load_print_meta: pooling type     = 0
0.00.264.520 I llm_load_print_meta: rope type        = 2
0.00.264.521 I llm_load_print_meta: rope scaling     = linear
0.00.264.522 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.523 I llm_load_print_meta: freq_scale_train = 1
0.00.264.523 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.524 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.524 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.524 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.524 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.525 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.525 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.525 I llm_load_print_meta: model type       = 2B
0.00.264.526 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.527 I llm_load_print_meta: model params     = 2.51 B
0.00.264.528 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.528 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.528 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.529 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.529 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.529 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.530 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.530 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.530 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.531 I llm_load_print_meta: max token length = 93
0.00.359.218 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.364.542 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.548 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.548 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.549 I llama_new_context_with_model: n_batch       = 2048
0.00.364.549 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.550 I llama_new_context_with_model: flash_attn    = 0
0.00.364.552 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.553 I llama_new_context_with_model: freq_scale    = 1
0.00.364.553 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.920 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.935 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.033 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.306 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.380.310 I llama_new_context_with_model: graph nodes  = 601
0.00.380.311 I llama_new_context_with_model: graph splits = 1
0.00.380.313 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.134 I main: llama threadpool init, n_threads = 4
0.00.460.147 I 
0.00.460.233 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.236 I 
0.00.460.277 I sampler seed: 1426754651
0.00.460.288 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.290 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.291 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.291 I 
 increasities in the workplace.

**Answer:**

**1. Understanding the Causes of Workplace Disagreement**

- Identify factors such as communication gaps, personality

0.02.609.176 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7121.28 tokens per second)
0.02.609.179 I llama_perf_context_print:        load time =     459.34 ms
0.02.609.180 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.609.182 I llama_perf_context_print:        eval time =    2130.47 ms /    32 runs   (   66.58 ms per token,    15.02 tokens per second)
0.02.609.184 I llama_perf_context_print:       total time =    2149.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.528 I build: 4140 (ad21c9e1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.731 I main: load the model and apply lora adapter, if any
0.00.021.288 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.299 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.306 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.315 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.316 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.319 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.320 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.321 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.321 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.322 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.323 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.327 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.328 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.328 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.329 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.329 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.882 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.364 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.256 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.263 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.263 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.264 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.264 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.265 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.266 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.268 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.269 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.269 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.270 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.271 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.274 I llama_model_loader: - type  f32:   37 tensors
0.00.131.275 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.118 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.461 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.063 I llm_load_vocab: special tokens cache size = 5
0.00.267.834 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.850 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.851 I llm_load_print_meta: arch             = gemma
0.00.267.851 I llm_load_print_meta: vocab type       = SPM
0.00.267.852 I llm_load_print_meta: n_vocab          = 256000
0.00.267.852 I llm_load_print_meta: n_merges         = 0
0.00.267.853 I llm_load_print_meta: vocab_only       = 0
0.00.267.853 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.854 I llm_load_print_meta: n_embd           = 2048
0.00.267.854 I llm_load_print_meta: n_layer          = 18
0.00.267.864 I llm_load_print_meta: n_head           = 8
0.00.267.865 I llm_load_print_meta: n_head_kv        = 1
0.00.267.866 I llm_load_print_meta: n_rot            = 256
0.00.267.867 I llm_load_print_meta: n_swa            = 0
0.00.267.867 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.867 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.868 I llm_load_print_meta: n_gqa            = 8
0.00.267.869 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.870 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.871 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.872 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.873 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.873 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.873 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.874 I llm_load_print_meta: n_ff             = 16384
0.00.267.875 I llm_load_print_meta: n_expert         = 0
0.00.267.875 I llm_load_print_meta: n_expert_used    = 0
0.00.267.875 I llm_load_print_meta: causal attn      = 1
0.00.267.876 I llm_load_print_meta: pooling type     = 0
0.00.267.876 I llm_load_print_meta: rope type        = 2
0.00.267.876 I llm_load_print_meta: rope scaling     = linear
0.00.267.878 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.878 I llm_load_print_meta: freq_scale_train = 1
0.00.267.878 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.879 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.879 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.879 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.880 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.880 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.880 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.881 I llm_load_print_meta: model type       = 2B
0.00.267.881 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.882 I llm_load_print_meta: model params     = 2.51 B
0.00.267.883 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.883 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.884 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.884 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.885 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.885 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.885 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.885 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.886 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.886 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.887 I llm_load_print_meta: max token length = 93
0.00.340.987 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.991 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.992 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.992 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.993 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.994 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.346.172 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.178 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.179 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.179 I llama_new_context_with_model: n_batch       = 2048
0.00.346.180 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.180 I llama_new_context_with_model: flash_attn    = 0
0.00.346.182 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.183 I llama_new_context_with_model: freq_scale    = 1
0.00.346.184 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.475 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.487 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.581 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.792 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.798 I llama_new_context_with_model: graph nodes  = 601
0.00.361.799 I llama_new_context_with_model: graph splits = 1
0.00.361.801 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.949 I main: llama threadpool init, n_threads = 4
0.00.448.962 I 
0.00.449.035 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.038 I 
0.00.449.080 I sampler seed: 709906227
0.00.449.090 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.093 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.094 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.095 I 
 maneuvignon.

The sentence is from a marketing campaign for a new wine.

I understand that the sentence is trying to create a sense of excitement and intrigue

0.02.728.916 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6596.04 tokens per second)
0.02.728.919 I llama_perf_context_print:        load time =     448.20 ms
0.02.728.920 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.728.922 I llama_perf_context_print:        eval time =    2260.97 ms /    32 runs   (   70.66 ms per token,    14.15 tokens per second)
0.02.728.922 I llama_perf_context_print:       total time =    2279.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.519 I build: 4140 (ad21c9e1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.715 I main: llama backend init
0.00.000.722 I main: load the model and apply lora adapter, if any
0.00.020.864 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.873 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.880 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.885 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.886 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.889 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.890 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.890 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.891 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.891 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.892 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.896 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.897 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.898 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.898 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.898 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.859 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.430 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.240 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.246 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.247 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.248 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.248 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.249 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.250 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.252 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.253 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.254 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.254 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.255 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.259 I llama_model_loader: - type  f32:   37 tensors
0.00.129.260 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.845 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.296 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.818 I llm_load_vocab: special tokens cache size = 5
0.00.260.754 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.771 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.771 I llm_load_print_meta: arch             = gemma
0.00.260.772 I llm_load_print_meta: vocab type       = SPM
0.00.260.772 I llm_load_print_meta: n_vocab          = 256000
0.00.260.773 I llm_load_print_meta: n_merges         = 0
0.00.260.773 I llm_load_print_meta: vocab_only       = 0
0.00.260.774 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.774 I llm_load_print_meta: n_embd           = 2048
0.00.260.774 I llm_load_print_meta: n_layer          = 18
0.00.260.786 I llm_load_print_meta: n_head           = 8
0.00.260.787 I llm_load_print_meta: n_head_kv        = 1
0.00.260.788 I llm_load_print_meta: n_rot            = 256
0.00.260.788 I llm_load_print_meta: n_swa            = 0
0.00.260.788 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.789 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.790 I llm_load_print_meta: n_gqa            = 8
0.00.260.791 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.792 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.793 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.794 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.794 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.795 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.795 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.796 I llm_load_print_meta: n_ff             = 16384
0.00.260.796 I llm_load_print_meta: n_expert         = 0
0.00.260.797 I llm_load_print_meta: n_expert_used    = 0
0.00.260.797 I llm_load_print_meta: causal attn      = 1
0.00.260.798 I llm_load_print_meta: pooling type     = 0
0.00.260.798 I llm_load_print_meta: rope type        = 2
0.00.260.798 I llm_load_print_meta: rope scaling     = linear
0.00.260.800 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.801 I llm_load_print_meta: freq_scale_train = 1
0.00.260.801 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.802 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.802 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.802 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.803 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.804 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.805 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.805 I llm_load_print_meta: model type       = 2B
0.00.260.806 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.807 I llm_load_print_meta: model params     = 2.51 B
0.00.260.808 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.808 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.808 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.809 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.810 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.810 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.811 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.812 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.812 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.813 I llm_load_print_meta: max token length = 93
0.00.331.595 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.331.601 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.336.785 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.791 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.791 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.792 I llama_new_context_with_model: n_batch       = 2048
0.00.336.792 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.793 I llama_new_context_with_model: flash_attn    = 0
0.00.336.796 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.796 I llama_new_context_with_model: freq_scale    = 1
0.00.336.797 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.811 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.825 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.923 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.166 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.172 I llama_new_context_with_model: graph nodes  = 601
0.00.353.173 I llama_new_context_with_model: graph splits = 1
0.00.353.175 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.422 I main: llama threadpool init, n_threads = 4
0.00.443.435 I 
0.00.443.510 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.443.513 I 
0.00.443.558 I sampler seed: 1689942134
0.00.443.569 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.572 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.573 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.574 I 
 increasively, blurring the lines between her personal and professional life. 

This article explores the blurred lines between personal and professional life that emerge in the contemporary workplace

0.02.861.015 I llama_perf_sampler_print:    sampling time =       5.10 ms /    33 runs   (    0.15 ms per token,  6469.32 tokens per second)
0.02.861.017 I llama_perf_context_print:        load time =     442.68 ms
0.02.861.019 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.861.021 I llama_perf_context_print:        eval time =    2397.73 ms /    32 runs   (   74.93 ms per token,    13.35 tokens per second)
0.02.861.022 I llama_perf_context_print:       total time =    2417.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.317s
user	0m39.129s
sys	0m9.331s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4140 (ad21c9e1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40202.19 ms
main:    total time = 40202.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 4140 (ad21c9e1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.021.110 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.119 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.127 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.132 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.133 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.137 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.137 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.138 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.138 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.139 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.139 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.143 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.144 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.145 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.145 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.146 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.877 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.367 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.318 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.324 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.325 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.325 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.326 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.327 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.327 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.329 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.330 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.331 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.331 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.332 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.336 I llama_model_loader: - type  f32:   37 tensors
0.00.129.337 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.338 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.908 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.440 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.235.888 I llm_load_vocab: special tokens cache size = 5
0.00.256.620 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.256.636 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.256.636 I llm_load_print_meta: arch             = gemma
0.00.256.637 I llm_load_print_meta: vocab type       = SPM
0.00.256.638 I llm_load_print_meta: n_vocab          = 256000
0.00.256.638 I llm_load_print_meta: n_merges         = 0
0.00.256.638 I llm_load_print_meta: vocab_only       = 0
0.00.256.639 I llm_load_print_meta: n_ctx_train      = 8192
0.00.256.639 I llm_load_print_meta: n_embd           = 2048
0.00.256.639 I llm_load_print_meta: n_layer          = 18
0.00.256.650 I llm_load_print_meta: n_head           = 8
0.00.256.651 I llm_load_print_meta: n_head_kv        = 1
0.00.256.652 I llm_load_print_meta: n_rot            = 256
0.00.256.652 I llm_load_print_meta: n_swa            = 0
0.00.256.652 I llm_load_print_meta: n_embd_head_k    = 256
0.00.256.653 I llm_load_print_meta: n_embd_head_v    = 256
0.00.256.653 I llm_load_print_meta: n_gqa            = 8
0.00.256.654 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.256.655 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.256.656 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.256.657 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.256.658 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.256.658 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.256.658 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.256.659 I llm_load_print_meta: n_ff             = 16384
0.00.256.660 I llm_load_print_meta: n_expert         = 0
0.00.256.660 I llm_load_print_meta: n_expert_used    = 0
0.00.256.660 I llm_load_print_meta: causal attn      = 1
0.00.256.660 I llm_load_print_meta: pooling type     = 0
0.00.256.661 I llm_load_print_meta: rope type        = 2
0.00.256.661 I llm_load_print_meta: rope scaling     = linear
0.00.256.662 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.256.663 I llm_load_print_meta: freq_scale_train = 1
0.00.256.663 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.256.664 I llm_load_print_meta: rope_finetuned   = unknown
0.00.256.664 I llm_load_print_meta: ssm_d_conv       = 0
0.00.256.664 I llm_load_print_meta: ssm_d_inner      = 0
0.00.256.664 I llm_load_print_meta: ssm_d_state      = 0
0.00.256.665 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.256.665 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.256.666 I llm_load_print_meta: model type       = 2B
0.00.256.666 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.256.667 I llm_load_print_meta: model params     = 2.51 B
0.00.256.668 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.256.668 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.256.668 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.256.669 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.256.669 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.256.669 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.256.669 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.256.670 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.256.670 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.256.670 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.256.671 I llm_load_print_meta: max token length = 93
0.00.316.025 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.316.031 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.316.032 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.316.032 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.316.033 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.316.033 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.321.137 I llama_new_context_with_model: n_seq_max     = 1
0.00.321.142 I llama_new_context_with_model: n_ctx         = 4096
0.00.321.142 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.321.143 I llama_new_context_with_model: n_batch       = 2048
0.00.321.143 I llama_new_context_with_model: n_ubatch      = 512
0.00.321.144 I llama_new_context_with_model: flash_attn    = 0
0.00.321.146 I llama_new_context_with_model: freq_base     = 10000.0
0.00.321.147 I llama_new_context_with_model: freq_scale    = 1
0.00.321.148 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.192 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.335.205 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.335.294 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.336.554 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.336.558 I llama_new_context_with_model: graph nodes  = 601
0.00.336.559 I llama_new_context_with_model: graph splits = 1
0.00.336.561 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.411.628 I main: llama threadpool init, n_threads = 4
0.00.411.642 I 
0.00.411.724 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.411.728 I 
0.00.411.775 I sampler seed: 3548299272
0.00.411.786 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.411.790 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.411.791 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.411.792 I 
 squaRE, a technology company specializing in providing AI-based solutions for businesses, has experienced rapid growth in recent years. However, they are concerned about the scalability

0.01.976.049 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6700.51 tokens per second)
0.01.976.052 I llama_perf_context_print:        load time =     410.86 ms
0.01.976.053 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.976.054 I llama_perf_context_print:        eval time =    1545.87 ms /    32 runs   (   48.31 ms per token,    20.70 tokens per second)
0.01.976.055 I llama_perf_context_print:       total time =    1564.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4140 (ad21c9e1)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40155.12 ms
main:    total time = 40155.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.504 I build: 4140 (ad21c9e1) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.698 I main: llama backend init
0.00.000.704 I main: load the model and apply lora adapter, if any
0.00.021.412 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.425 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.431 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.432 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.435 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.439 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.439 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.440 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.440 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.441 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.444 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.444 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.445 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.445 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.446 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.165 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.726 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.524 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.529 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.530 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.531 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.531 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.532 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.533 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.535 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.535 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.538 I llama_model_loader: - type  f32:   37 tensors
0.00.129.539 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.539 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.337 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.830 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.345 I llm_load_vocab: special tokens cache size = 5
0.00.259.990 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.009 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.009 I llm_load_print_meta: arch             = gemma
0.00.260.010 I llm_load_print_meta: vocab type       = SPM
0.00.260.011 I llm_load_print_meta: n_vocab          = 256000
0.00.260.012 I llm_load_print_meta: n_merges         = 0
0.00.260.012 I llm_load_print_meta: vocab_only       = 0
0.00.260.013 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.013 I llm_load_print_meta: n_embd           = 2048
0.00.260.013 I llm_load_print_meta: n_layer          = 18
0.00.260.025 I llm_load_print_meta: n_head           = 8
0.00.260.026 I llm_load_print_meta: n_head_kv        = 1
0.00.260.026 I llm_load_print_meta: n_rot            = 256
0.00.260.026 I llm_load_print_meta: n_swa            = 0
0.00.260.027 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.027 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.028 I llm_load_print_meta: n_gqa            = 8
0.00.260.029 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.031 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.032 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.035 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.036 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.036 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.037 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.038 I llm_load_print_meta: n_ff             = 16384
0.00.260.038 I llm_load_print_meta: n_expert         = 0
0.00.260.038 I llm_load_print_meta: n_expert_used    = 0
0.00.260.039 I llm_load_print_meta: causal attn      = 1
0.00.260.039 I llm_load_print_meta: pooling type     = 0
0.00.260.039 I llm_load_print_meta: rope type        = 2
0.00.260.039 I llm_load_print_meta: rope scaling     = linear
0.00.260.041 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.042 I llm_load_print_meta: freq_scale_train = 1
0.00.260.042 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.043 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.043 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.044 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.044 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.045 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.045 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.046 I llm_load_print_meta: model type       = 2B
0.00.260.046 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.260.048 I llm_load_print_meta: model params     = 2.51 B
0.00.260.049 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.260.050 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.051 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.051 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.054 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.054 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.054 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.055 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.055 I llm_load_print_meta: max token length = 93
0.00.315.151 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.320.189 I llama_new_context_with_model: n_seq_max     = 1
0.00.320.195 I llama_new_context_with_model: n_ctx         = 4096
0.00.320.196 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.320.196 I llama_new_context_with_model: n_batch       = 2048
0.00.320.196 I llama_new_context_with_model: n_ubatch      = 512
0.00.320.197 I llama_new_context_with_model: flash_attn    = 0
0.00.320.200 I llama_new_context_with_model: freq_base     = 10000.0
0.00.320.200 I llama_new_context_with_model: freq_scale    = 1
0.00.320.201 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.334.598 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.334.614 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.334.699 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.335.932 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.335.938 I llama_new_context_with_model: graph nodes  = 601
0.00.335.938 I llama_new_context_with_model: graph splits = 1
0.00.335.940 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.409.332 I main: llama threadpool init, n_threads = 4
0.00.409.346 I 
0.00.409.422 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.409.425 I 
0.00.409.469 I sampler seed: 1455391217
0.00.409.480 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.409.483 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.409.484 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.409.486 I 
 fufing of the heavens with light, and the earth beneath it groaning with a seismic tremor.

This is the kind of imagery that would fill my dreams,

0.01.959.222 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6618.53 tokens per second)
0.01.959.224 I llama_perf_context_print:        load time =     408.61 ms
0.01.959.226 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.959.227 I llama_perf_context_print:        eval time =    1531.50 ms /    32 runs   (   47.86 ms per token,    20.89 tokens per second)
0.01.959.228 I llama_perf_context_print:       total time =    1549.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.031s
user	10m23.575s
sys	0m6.840s
