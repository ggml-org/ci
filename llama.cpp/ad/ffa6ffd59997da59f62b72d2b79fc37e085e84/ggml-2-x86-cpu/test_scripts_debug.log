+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.000.869 I main: load the model and apply lora adapter, if any
0.00.023.465 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.478 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.572 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.585 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.587 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.593 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.597 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.599 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.600 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.601 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.602 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.609 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.610 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.612 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.613 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.614 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.375 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.871 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.626 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.635 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.637 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.638 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.639 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.641 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.642 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.647 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.648 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.649 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.651 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.652 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.661 I llama_model_loader: - type  f32:   37 tensors
0.00.358.664 I llama_model_loader: - type q8_0:  127 tensors
0.00.603.276 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.664.817 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.665.717 I llm_load_vocab: special tokens cache size = 5
0.00.861.860 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.861.933 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.861.938 I llm_load_print_meta: arch             = gemma
0.00.861.939 I llm_load_print_meta: vocab type       = SPM
0.00.861.940 I llm_load_print_meta: n_vocab          = 256000
0.00.861.942 I llm_load_print_meta: n_merges         = 0
0.00.861.943 I llm_load_print_meta: vocab_only       = 0
0.00.861.943 I llm_load_print_meta: n_ctx_train      = 8192
0.00.861.944 I llm_load_print_meta: n_embd           = 2048
0.00.861.944 I llm_load_print_meta: n_layer          = 18
0.00.862.011 I llm_load_print_meta: n_head           = 8
0.00.862.021 I llm_load_print_meta: n_head_kv        = 1
0.00.862.022 I llm_load_print_meta: n_rot            = 256
0.00.862.023 I llm_load_print_meta: n_swa            = 0
0.00.862.023 I llm_load_print_meta: n_embd_head_k    = 256
0.00.862.024 I llm_load_print_meta: n_embd_head_v    = 256
0.00.862.028 I llm_load_print_meta: n_gqa            = 8
0.00.862.033 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.862.038 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.862.040 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.862.042 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.862.042 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.862.043 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.862.043 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.862.048 I llm_load_print_meta: n_ff             = 16384
0.00.862.049 I llm_load_print_meta: n_expert         = 0
0.00.862.049 I llm_load_print_meta: n_expert_used    = 0
0.00.862.049 I llm_load_print_meta: causal attn      = 1
0.00.862.050 I llm_load_print_meta: pooling type     = 0
0.00.862.050 I llm_load_print_meta: rope type        = 2
0.00.862.051 I llm_load_print_meta: rope scaling     = linear
0.00.862.053 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.862.054 I llm_load_print_meta: freq_scale_train = 1
0.00.862.054 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.862.055 I llm_load_print_meta: rope_finetuned   = unknown
0.00.862.055 I llm_load_print_meta: ssm_d_conv       = 0
0.00.862.055 I llm_load_print_meta: ssm_d_inner      = 0
0.00.862.057 I llm_load_print_meta: ssm_d_state      = 0
0.00.862.057 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.862.057 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.862.058 I llm_load_print_meta: model type       = 2B
0.00.862.059 I llm_load_print_meta: model ftype      = Q8_0
0.00.862.061 I llm_load_print_meta: model params     = 2.51 B
0.00.862.062 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.862.062 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.862.063 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.862.064 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.862.064 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.862.065 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.862.065 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.862.066 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.862.073 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.862.075 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.862.075 I llm_load_print_meta: max token length = 93
0.00.964.641 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.964.650 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.964.651 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.964.651 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.964.652 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.964.653 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.970.653 I llama_new_context_with_model: n_seq_max     = 1
0.00.970.661 I llama_new_context_with_model: n_ctx         = 4096
0.00.970.662 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.970.662 I llama_new_context_with_model: n_batch       = 2048
0.00.970.662 I llama_new_context_with_model: n_ubatch      = 512
0.00.970.663 I llama_new_context_with_model: flash_attn    = 0
0.00.970.666 I llama_new_context_with_model: freq_base     = 10000.0
0.00.970.666 I llama_new_context_with_model: freq_scale    = 1
0.00.970.667 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.985.474 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.985.513 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.985.628 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.988.216 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.988.221 I llama_new_context_with_model: graph nodes  = 601
0.00.988.222 I llama_new_context_with_model: graph splits = 1
0.00.988.244 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.598.213 I main: llama threadpool init, n_threads = 4
0.01.598.228 I 
0.01.598.349 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.598.354 I 
0.01.598.600 I sampler seed: 356180269
0.01.598.613 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.598.625 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.598.627 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.598.627 I 
 increadibly.

I am unable to answer this question because it contains inappropriate language and promotes harmful stereotypes. [end of text]


0.10.900.461 I llama_perf_sampler_print:    sampling time =      33.94 ms /    23 runs   (    1.48 ms per token,   677.67 tokens per second)
0.10.900.482 I llama_perf_context_print:        load time =    1597.24 ms
0.10.900.484 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.900.486 I llama_perf_context_print:        eval time =    9239.00 ms /    22 runs   (  419.95 ms per token,     2.38 tokens per second)
0.10.900.487 I llama_perf_context_print:       total time =    9302.26 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.620 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.832 I main: load the model and apply lora adapter, if any
0.00.023.339 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.438 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.452 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.454 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.459 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.464 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.465 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.466 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.469 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.470 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.477 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.479 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.480 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.482 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.483 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.665 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.910 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.645 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.653 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.655 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.656 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.658 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.659 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.660 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.665 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.666 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.668 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.669 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.361.671 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.680 I llama_model_loader: - type  f32:   37 tensors
0.00.361.682 I llama_model_loader: - type q8_0:  127 tensors
0.00.602.926 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.663.745 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.664.641 I llm_load_vocab: special tokens cache size = 5
0.00.877.240 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.877.316 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.877.317 I llm_load_print_meta: arch             = gemma
0.00.877.318 I llm_load_print_meta: vocab type       = SPM
0.00.877.319 I llm_load_print_meta: n_vocab          = 256000
0.00.877.321 I llm_load_print_meta: n_merges         = 0
0.00.877.322 I llm_load_print_meta: vocab_only       = 0
0.00.877.322 I llm_load_print_meta: n_ctx_train      = 8192
0.00.877.323 I llm_load_print_meta: n_embd           = 2048
0.00.877.323 I llm_load_print_meta: n_layer          = 18
0.00.877.389 I llm_load_print_meta: n_head           = 8
0.00.877.397 I llm_load_print_meta: n_head_kv        = 1
0.00.877.398 I llm_load_print_meta: n_rot            = 256
0.00.877.399 I llm_load_print_meta: n_swa            = 0
0.00.877.400 I llm_load_print_meta: n_embd_head_k    = 256
0.00.877.401 I llm_load_print_meta: n_embd_head_v    = 256
0.00.877.406 I llm_load_print_meta: n_gqa            = 8
0.00.877.420 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.877.426 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.877.427 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.877.429 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.877.430 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.877.431 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.877.443 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.877.452 I llm_load_print_meta: n_ff             = 16384
0.00.877.452 I llm_load_print_meta: n_expert         = 0
0.00.877.453 I llm_load_print_meta: n_expert_used    = 0
0.00.877.453 I llm_load_print_meta: causal attn      = 1
0.00.877.462 I llm_load_print_meta: pooling type     = 0
0.00.877.463 I llm_load_print_meta: rope type        = 2
0.00.877.463 I llm_load_print_meta: rope scaling     = linear
0.00.877.465 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.877.465 I llm_load_print_meta: freq_scale_train = 1
0.00.877.466 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.877.467 I llm_load_print_meta: rope_finetuned   = unknown
0.00.877.467 I llm_load_print_meta: ssm_d_conv       = 0
0.00.877.467 I llm_load_print_meta: ssm_d_inner      = 0
0.00.877.468 I llm_load_print_meta: ssm_d_state      = 0
0.00.877.469 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.877.469 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.877.470 I llm_load_print_meta: model type       = 2B
0.00.877.473 I llm_load_print_meta: model ftype      = Q8_0
0.00.877.474 I llm_load_print_meta: model params     = 2.51 B
0.00.877.475 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.877.475 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.877.476 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.877.477 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.877.477 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.877.477 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.877.478 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.877.478 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.877.485 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.877.486 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.877.486 I llm_load_print_meta: max token length = 93
0.00.974.175 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.980.239 I llama_new_context_with_model: n_seq_max     = 1
0.00.980.248 I llama_new_context_with_model: n_ctx         = 4096
0.00.980.248 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.980.248 I llama_new_context_with_model: n_batch       = 2048
0.00.980.249 I llama_new_context_with_model: n_ubatch      = 512
0.00.980.249 I llama_new_context_with_model: flash_attn    = 0
0.00.980.252 I llama_new_context_with_model: freq_base     = 10000.0
0.00.980.253 I llama_new_context_with_model: freq_scale    = 1
0.00.980.253 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.995.305 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.995.352 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.995.469 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.998.129 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.998.133 I llama_new_context_with_model: graph nodes  = 601
0.00.998.133 I llama_new_context_with_model: graph splits = 1
0.00.998.157 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.606.800 I main: llama threadpool init, n_threads = 4
0.01.606.818 I 
0.01.606.941 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.606.945 I 
0.01.607.188 I sampler seed: 1084409470
0.01.607.201 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.607.213 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.607.213 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.607.214 I 
 seconally:

**The Importance of Quality Education**

**1. Personal and Professional Development:**
- Equips students with knowledge and skills that enhance their

0.15.253.048 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.94 tokens per second)
0.15.253.063 I llama_perf_context_print:        load time =    1605.87 ms
0.15.253.065 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.253.068 I llama_perf_context_print:        eval time =   13556.97 ms /    32 runs   (  423.66 ms per token,     2.36 tokens per second)
0.15.253.069 I llama_perf_context_print:       total time =   13646.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.619 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.023.269 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.281 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.367 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.378 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.380 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.386 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.390 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.391 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.392 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.394 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.395 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.402 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.403 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.405 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.406 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.238.998 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.340.905 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.853 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.863 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.865 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.866 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.867 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.869 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.870 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.874 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.875 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.876 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.364.878 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.364.880 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.364.889 I llama_model_loader: - type  f32:   37 tensors
0.00.364.892 I llama_model_loader: - type q8_0:  127 tensors
0.00.593.339 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.660.197 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.661.211 I llm_load_vocab: special tokens cache size = 5
0.00.855.421 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.855.493 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.855.494 I llm_load_print_meta: arch             = gemma
0.00.855.495 I llm_load_print_meta: vocab type       = SPM
0.00.855.496 I llm_load_print_meta: n_vocab          = 256000
0.00.855.498 I llm_load_print_meta: n_merges         = 0
0.00.855.499 I llm_load_print_meta: vocab_only       = 0
0.00.855.499 I llm_load_print_meta: n_ctx_train      = 8192
0.00.855.499 I llm_load_print_meta: n_embd           = 2048
0.00.855.500 I llm_load_print_meta: n_layer          = 18
0.00.855.564 I llm_load_print_meta: n_head           = 8
0.00.855.571 I llm_load_print_meta: n_head_kv        = 1
0.00.855.572 I llm_load_print_meta: n_rot            = 256
0.00.855.572 I llm_load_print_meta: n_swa            = 0
0.00.855.573 I llm_load_print_meta: n_embd_head_k    = 256
0.00.855.573 I llm_load_print_meta: n_embd_head_v    = 256
0.00.855.578 I llm_load_print_meta: n_gqa            = 8
0.00.855.582 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.855.587 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.855.588 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.855.591 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.855.591 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.855.592 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.855.592 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.855.599 I llm_load_print_meta: n_ff             = 16384
0.00.855.600 I llm_load_print_meta: n_expert         = 0
0.00.855.600 I llm_load_print_meta: n_expert_used    = 0
0.00.855.600 I llm_load_print_meta: causal attn      = 1
0.00.855.601 I llm_load_print_meta: pooling type     = 0
0.00.855.601 I llm_load_print_meta: rope type        = 2
0.00.855.601 I llm_load_print_meta: rope scaling     = linear
0.00.855.603 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.855.603 I llm_load_print_meta: freq_scale_train = 1
0.00.855.604 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.855.604 I llm_load_print_meta: rope_finetuned   = unknown
0.00.855.604 I llm_load_print_meta: ssm_d_conv       = 0
0.00.855.605 I llm_load_print_meta: ssm_d_inner      = 0
0.00.855.605 I llm_load_print_meta: ssm_d_state      = 0
0.00.855.605 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.855.605 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.855.606 I llm_load_print_meta: model type       = 2B
0.00.855.607 I llm_load_print_meta: model ftype      = Q8_0
0.00.855.607 I llm_load_print_meta: model params     = 2.51 B
0.00.855.608 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.855.608 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.855.609 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.855.610 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.855.610 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.855.611 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.855.611 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.855.611 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.855.617 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.855.619 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.855.619 I llm_load_print_meta: max token length = 93
0.00.935.893 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.935.906 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.935.907 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.935.907 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.935.908 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.935.909 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.942.199 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.207 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.208 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.208 I llama_new_context_with_model: n_batch       = 2048
0.00.942.209 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.209 I llama_new_context_with_model: flash_attn    = 0
0.00.942.212 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.213 I llama_new_context_with_model: freq_scale    = 1
0.00.942.214 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.957.579 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.621 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.957.745 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.960.386 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.960.390 I llama_new_context_with_model: graph nodes  = 601
0.00.960.391 I llama_new_context_with_model: graph splits = 1
0.00.960.415 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.574.631 I main: llama threadpool init, n_threads = 4
0.01.574.647 I 
0.01.574.773 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.574.777 I 
0.01.575.024 I sampler seed: 3082738565
0.01.575.038 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.575.048 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.575.051 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.575.051 I 
 increasities are a common trope in fantasy fiction, but what are some ways to reimagine them for a modern setting?

**Contemporary Reimagining Ideas:**



0.15.148.004 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.59 tokens per second)
0.15.148.007 I llama_perf_context_print:        load time =    1573.71 ms
0.15.148.009 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.148.011 I llama_perf_context_print:        eval time =   13483.67 ms /    32 runs   (  421.36 ms per token,     2.37 tokens per second)
0.15.148.012 I llama_perf_context_print:       total time =   13573.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.684 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.918 I main: llama backend init
0.00.000.926 I main: load the model and apply lora adapter, if any
0.00.023.542 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.553 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.653 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.666 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.668 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.674 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.679 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.681 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.683 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.685 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.687 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.696 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.702 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.708 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.710 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.712 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.233.499 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.475 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.199 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.208 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.210 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.211 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.212 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.214 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.215 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.219 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.220 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.222 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.223 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.361.225 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.233 I llama_model_loader: - type  f32:   37 tensors
0.00.361.236 I llama_model_loader: - type q8_0:  127 tensors
0.00.582.609 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.436 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.395 I llm_load_vocab: special tokens cache size = 5
0.00.838.007 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.838.083 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.838.084 I llm_load_print_meta: arch             = gemma
0.00.838.085 I llm_load_print_meta: vocab type       = SPM
0.00.838.085 I llm_load_print_meta: n_vocab          = 256000
0.00.838.088 I llm_load_print_meta: n_merges         = 0
0.00.838.088 I llm_load_print_meta: vocab_only       = 0
0.00.838.089 I llm_load_print_meta: n_ctx_train      = 8192
0.00.838.089 I llm_load_print_meta: n_embd           = 2048
0.00.838.089 I llm_load_print_meta: n_layer          = 18
0.00.838.157 I llm_load_print_meta: n_head           = 8
0.00.838.165 I llm_load_print_meta: n_head_kv        = 1
0.00.838.166 I llm_load_print_meta: n_rot            = 256
0.00.838.166 I llm_load_print_meta: n_swa            = 0
0.00.838.166 I llm_load_print_meta: n_embd_head_k    = 256
0.00.838.167 I llm_load_print_meta: n_embd_head_v    = 256
0.00.838.172 I llm_load_print_meta: n_gqa            = 8
0.00.838.177 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.838.182 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.838.184 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.838.185 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.838.186 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.838.186 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.838.186 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.838.191 I llm_load_print_meta: n_ff             = 16384
0.00.838.192 I llm_load_print_meta: n_expert         = 0
0.00.838.192 I llm_load_print_meta: n_expert_used    = 0
0.00.838.193 I llm_load_print_meta: causal attn      = 1
0.00.838.193 I llm_load_print_meta: pooling type     = 0
0.00.838.193 I llm_load_print_meta: rope type        = 2
0.00.838.194 I llm_load_print_meta: rope scaling     = linear
0.00.838.196 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.838.196 I llm_load_print_meta: freq_scale_train = 1
0.00.838.197 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.838.201 I llm_load_print_meta: rope_finetuned   = unknown
0.00.838.201 I llm_load_print_meta: ssm_d_conv       = 0
0.00.838.202 I llm_load_print_meta: ssm_d_inner      = 0
0.00.838.202 I llm_load_print_meta: ssm_d_state      = 0
0.00.838.202 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.838.202 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.838.204 I llm_load_print_meta: model type       = 2B
0.00.838.205 I llm_load_print_meta: model ftype      = Q8_0
0.00.838.206 I llm_load_print_meta: model params     = 2.51 B
0.00.838.207 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.838.208 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.838.209 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.838.209 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.838.212 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.838.213 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.838.213 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.838.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.838.219 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.838.221 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.838.222 I llm_load_print_meta: max token length = 93
0.00.910.633 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.910.643 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.916.859 I llama_new_context_with_model: n_seq_max     = 1
0.00.916.866 I llama_new_context_with_model: n_ctx         = 4096
0.00.916.866 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.916.866 I llama_new_context_with_model: n_batch       = 2048
0.00.916.867 I llama_new_context_with_model: n_ubatch      = 512
0.00.916.867 I llama_new_context_with_model: flash_attn    = 0
0.00.916.870 I llama_new_context_with_model: freq_base     = 10000.0
0.00.916.870 I llama_new_context_with_model: freq_scale    = 1
0.00.916.871 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.931.202 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.931.244 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.931.364 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.934.076 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.934.081 I llama_new_context_with_model: graph nodes  = 601
0.00.934.081 I llama_new_context_with_model: graph splits = 1
0.00.934.105 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.545.289 I main: llama threadpool init, n_threads = 4
0.01.545.307 I 
0.01.545.447 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.545.451 I 
0.01.545.703 I sampler seed: 3711427884
0.01.545.717 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.545.729 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.545.737 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.545.737 I 
 increasities of 2014 and 2015. [end of text]


0.08.334.372 I llama_perf_sampler_print:    sampling time =      24.56 ms /    17 runs   (    1.44 ms per token,   692.15 tokens per second)
0.08.334.377 I llama_perf_context_print:        load time =    1544.26 ms
0.08.334.378 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.334.380 I llama_perf_context_print:        eval time =    6743.37 ms /    16 runs   (  421.46 ms per token,     2.37 tokens per second)
0.08.334.381 I llama_perf_context_print:       total time =    6789.09 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m59.534s
user	3m6.962s
sys	0m9.455s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4317 (adffa6ff)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186177.02 ms
main:    total time = 186177.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.000.836 I main: load the model and apply lora adapter, if any
0.00.023.159 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.169 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.265 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.277 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.278 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.284 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.288 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.290 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.291 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.292 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.293 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.300 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.301 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.303 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.304 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.305 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.231.785 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.904 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.735 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.744 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.746 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.747 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.748 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.750 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.751 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.755 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.756 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.758 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.358.759 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.358.761 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.358.769 I llama_model_loader: - type  f32:   37 tensors
0.00.358.771 I llama_model_loader: - type q4_K:  108 tensors
0.00.358.772 I llama_model_loader: - type q6_K:   19 tensors
0.00.596.544 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.667.653 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.668.674 I llm_load_vocab: special tokens cache size = 5
0.00.865.000 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.865.075 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.865.076 I llm_load_print_meta: arch             = gemma
0.00.865.076 I llm_load_print_meta: vocab type       = SPM
0.00.865.078 I llm_load_print_meta: n_vocab          = 256000
0.00.865.080 I llm_load_print_meta: n_merges         = 0
0.00.865.081 I llm_load_print_meta: vocab_only       = 0
0.00.865.081 I llm_load_print_meta: n_ctx_train      = 8192
0.00.865.081 I llm_load_print_meta: n_embd           = 2048
0.00.865.082 I llm_load_print_meta: n_layer          = 18
0.00.865.146 I llm_load_print_meta: n_head           = 8
0.00.865.153 I llm_load_print_meta: n_head_kv        = 1
0.00.865.153 I llm_load_print_meta: n_rot            = 256
0.00.865.154 I llm_load_print_meta: n_swa            = 0
0.00.865.154 I llm_load_print_meta: n_embd_head_k    = 256
0.00.865.155 I llm_load_print_meta: n_embd_head_v    = 256
0.00.865.159 I llm_load_print_meta: n_gqa            = 8
0.00.865.164 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.865.168 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.865.170 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.865.171 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.865.171 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.865.172 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.865.172 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.865.177 I llm_load_print_meta: n_ff             = 16384
0.00.865.178 I llm_load_print_meta: n_expert         = 0
0.00.865.178 I llm_load_print_meta: n_expert_used    = 0
0.00.865.178 I llm_load_print_meta: causal attn      = 1
0.00.865.179 I llm_load_print_meta: pooling type     = 0
0.00.865.179 I llm_load_print_meta: rope type        = 2
0.00.865.180 I llm_load_print_meta: rope scaling     = linear
0.00.865.181 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.865.182 I llm_load_print_meta: freq_scale_train = 1
0.00.865.182 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.865.182 I llm_load_print_meta: rope_finetuned   = unknown
0.00.865.183 I llm_load_print_meta: ssm_d_conv       = 0
0.00.865.183 I llm_load_print_meta: ssm_d_inner      = 0
0.00.865.183 I llm_load_print_meta: ssm_d_state      = 0
0.00.865.183 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.865.184 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.865.185 I llm_load_print_meta: model type       = 2B
0.00.865.186 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.865.187 I llm_load_print_meta: model params     = 2.51 B
0.00.865.187 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.865.188 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.865.188 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.865.189 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.865.189 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.865.189 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.865.190 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.865.190 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.865.196 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.865.198 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.865.198 I llm_load_print_meta: max token length = 93
0.00.928.846 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.928.857 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.928.858 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.928.859 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.928.860 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.928.861 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.934.717 I llama_new_context_with_model: n_seq_max     = 1
0.00.934.724 I llama_new_context_with_model: n_ctx         = 4096
0.00.934.725 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.934.725 I llama_new_context_with_model: n_batch       = 2048
0.00.934.725 I llama_new_context_with_model: n_ubatch      = 512
0.00.934.726 I llama_new_context_with_model: flash_attn    = 0
0.00.934.729 I llama_new_context_with_model: freq_base     = 10000.0
0.00.934.730 I llama_new_context_with_model: freq_scale    = 1
0.00.934.731 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.949.668 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.949.709 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.949.823 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.952.386 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.952.390 I llama_new_context_with_model: graph nodes  = 601
0.00.952.391 I llama_new_context_with_model: graph splits = 1
0.00.952.413 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.533.084 I main: llama threadpool init, n_threads = 4
0.01.533.103 I 
0.01.533.231 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.533.235 I 
0.01.533.484 I sampler seed: 4100965803
0.01.533.498 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.533.507 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.533.510 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.533.511 I 
 increasities, but I am unable to decipher their meaning.

Could you please provide some guidance on deciphering these cryptic messages?

**1. Context

0.12.617.915 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.41 tokens per second)
0.12.617.919 I llama_perf_context_print:        load time =    1532.15 ms
0.12.617.932 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.617.934 I llama_perf_context_print:        eval time =   10995.87 ms /    32 runs   (  343.62 ms per token,     2.91 tokens per second)
0.12.617.936 I llama_perf_context_print:       total time =   11084.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4317 (adffa6ff)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185781.00 ms
main:    total time = 185781.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.632 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.000.850 I main: load the model and apply lora adapter, if any
0.00.023.145 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.247 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.260 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.268 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.272 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.273 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.274 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.277 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.278 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.284 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.285 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.287 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.288 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.289 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.239.192 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.341.872 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.365.656 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.365.669 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.365.670 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.365.672 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.365.673 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.365.674 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.365.676 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.365.680 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.365.681 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.365.691 I llama_model_loader: - type  f32:   37 tensors
0.00.365.694 I llama_model_loader: - type q4_K:  108 tensors
0.00.365.694 I llama_model_loader: - type q6_K:   19 tensors
0.00.613.284 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.680.249 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.681.182 I llm_load_vocab: special tokens cache size = 5
0.00.885.908 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.885.984 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.885.988 I llm_load_print_meta: arch             = gemma
0.00.885.989 I llm_load_print_meta: vocab type       = SPM
0.00.885.990 I llm_load_print_meta: n_vocab          = 256000
0.00.885.993 I llm_load_print_meta: n_merges         = 0
0.00.885.994 I llm_load_print_meta: vocab_only       = 0
0.00.885.994 I llm_load_print_meta: n_ctx_train      = 8192
0.00.885.996 I llm_load_print_meta: n_embd           = 2048
0.00.885.997 I llm_load_print_meta: n_layer          = 18
0.00.886.061 I llm_load_print_meta: n_head           = 8
0.00.886.081 I llm_load_print_meta: n_head_kv        = 1
0.00.886.085 I llm_load_print_meta: n_rot            = 256
0.00.886.085 I llm_load_print_meta: n_swa            = 0
0.00.886.086 I llm_load_print_meta: n_embd_head_k    = 256
0.00.886.086 I llm_load_print_meta: n_embd_head_v    = 256
0.00.886.093 I llm_load_print_meta: n_gqa            = 8
0.00.886.097 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.886.103 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.886.104 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.886.105 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.886.107 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.886.107 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.886.108 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.886.113 I llm_load_print_meta: n_ff             = 16384
0.00.886.114 I llm_load_print_meta: n_expert         = 0
0.00.886.114 I llm_load_print_meta: n_expert_used    = 0
0.00.886.115 I llm_load_print_meta: causal attn      = 1
0.00.886.126 I llm_load_print_meta: pooling type     = 0
0.00.886.129 I llm_load_print_meta: rope type        = 2
0.00.886.129 I llm_load_print_meta: rope scaling     = linear
0.00.886.131 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.886.131 I llm_load_print_meta: freq_scale_train = 1
0.00.886.132 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.886.132 I llm_load_print_meta: rope_finetuned   = unknown
0.00.886.132 I llm_load_print_meta: ssm_d_conv       = 0
0.00.886.133 I llm_load_print_meta: ssm_d_inner      = 0
0.00.886.133 I llm_load_print_meta: ssm_d_state      = 0
0.00.886.133 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.886.134 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.886.135 I llm_load_print_meta: model type       = 2B
0.00.886.136 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.886.137 I llm_load_print_meta: model params     = 2.51 B
0.00.886.138 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.886.138 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.886.140 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.886.140 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.886.142 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.886.143 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.886.143 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.886.144 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.886.150 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.886.152 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.886.152 I llm_load_print_meta: max token length = 93
0.00.946.432 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.952.278 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.286 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.286 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.286 I llama_new_context_with_model: n_batch       = 2048
0.00.952.287 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.287 I llama_new_context_with_model: flash_attn    = 0
0.00.952.291 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.292 I llama_new_context_with_model: freq_scale    = 1
0.00.952.292 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.159 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.967.202 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.318 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.857 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.860 I llama_new_context_with_model: graph nodes  = 601
0.00.969.860 I llama_new_context_with_model: graph splits = 1
0.00.969.884 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.550.341 I main: llama threadpool init, n_threads = 4
0.01.550.357 I 
0.01.550.480 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.550.484 I 
0.01.550.733 I sampler seed: 2752586315
0.01.550.746 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.550.758 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.550.759 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.550.759 I 
 maneuvously. I am unable to access the text and am thus unable to provide further assistance. [end of text]


0.08.839.880 I llama_perf_sampler_print:    sampling time =      32.29 ms /    22 runs   (    1.47 ms per token,   681.41 tokens per second)
0.08.839.883 I llama_perf_context_print:        load time =    1549.39 ms
0.08.839.885 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.839.886 I llama_perf_context_print:        eval time =    7229.98 ms /    21 runs   (  344.28 ms per token,     2.90 tokens per second)
0.08.839.902 I llama_perf_context_print:       total time =    7289.55 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m36.300s
user	46m30.305s
sys	0m6.435s
