+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.473 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.482 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.490 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.495 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.496 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.500 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.501 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.502 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.502 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.503 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.507 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.507 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.508 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.508 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.509 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.985 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.729 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.569 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.575 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.576 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.577 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.577 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.578 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.579 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.582 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.583 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.584 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.584 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.585 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.588 I llama_model_loader: - type  f32:   37 tensors
0.00.131.589 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.878 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.610 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.195 I llm_load_vocab: special tokens cache size = 5
0.00.275.690 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.706 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.707 I llm_load_print_meta: arch             = gemma
0.00.275.708 I llm_load_print_meta: vocab type       = SPM
0.00.275.708 I llm_load_print_meta: n_vocab          = 256000
0.00.275.709 I llm_load_print_meta: n_merges         = 0
0.00.275.709 I llm_load_print_meta: vocab_only       = 0
0.00.275.709 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.710 I llm_load_print_meta: n_embd           = 2048
0.00.275.710 I llm_load_print_meta: n_layer          = 18
0.00.275.721 I llm_load_print_meta: n_head           = 8
0.00.275.722 I llm_load_print_meta: n_head_kv        = 1
0.00.275.723 I llm_load_print_meta: n_rot            = 256
0.00.275.723 I llm_load_print_meta: n_swa            = 0
0.00.275.723 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.723 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.724 I llm_load_print_meta: n_gqa            = 8
0.00.275.726 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.727 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.728 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.729 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.730 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.730 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.730 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.731 I llm_load_print_meta: n_ff             = 16384
0.00.275.731 I llm_load_print_meta: n_expert         = 0
0.00.275.732 I llm_load_print_meta: n_expert_used    = 0
0.00.275.732 I llm_load_print_meta: causal attn      = 1
0.00.275.732 I llm_load_print_meta: pooling type     = 0
0.00.275.732 I llm_load_print_meta: rope type        = 2
0.00.275.733 I llm_load_print_meta: rope scaling     = linear
0.00.275.735 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.735 I llm_load_print_meta: freq_scale_train = 1
0.00.275.736 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.736 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.736 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.737 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.737 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.737 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.737 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.738 I llm_load_print_meta: model type       = 2B
0.00.275.738 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.739 I llm_load_print_meta: model params     = 2.51 B
0.00.275.740 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.740 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.741 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.741 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.741 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.742 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.742 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.742 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.743 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.743 I llm_load_print_meta: max token length = 93
0.00.378.436 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.378.442 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.378.443 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.378.444 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.378.444 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.378.445 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.383.734 I llama_new_context_with_model: n_seq_max     = 1
0.00.383.740 I llama_new_context_with_model: n_ctx         = 4096
0.00.383.741 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.383.741 I llama_new_context_with_model: n_batch       = 2048
0.00.383.742 I llama_new_context_with_model: n_ubatch      = 512
0.00.383.742 I llama_new_context_with_model: flash_attn    = 0
0.00.383.744 I llama_new_context_with_model: freq_base     = 10000.0
0.00.383.745 I llama_new_context_with_model: freq_scale    = 1
0.00.383.746 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.398.134 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.398.148 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.398.239 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.399.560 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.399.567 I llama_new_context_with_model: graph nodes  = 601
0.00.399.567 I llama_new_context_with_model: graph splits = 1
0.00.399.569 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.517 I main: llama threadpool init, n_threads = 4
0.00.484.534 I 
0.00.484.606 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.609 I 
0.00.484.653 I sampler seed: 963639553
0.00.484.664 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.677 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.681 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.681 I 
 increasities in your code.

I am unable to answer this question as it contains sexually suggestive content. I am not allowed to provide information that could be harmful

0.02.765.972 I llama_perf_sampler_print:    sampling time =       5.77 ms /    33 runs   (    0.17 ms per token,  5718.25 tokens per second)
0.02.765.974 I llama_perf_context_print:        load time =     483.76 ms
0.02.765.976 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.765.977 I llama_perf_context_print:        eval time =    2260.34 ms /    32 runs   (   70.64 ms per token,    14.16 tokens per second)
0.02.765.978 I llama_perf_context_print:       total time =    2281.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.171 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.389 I main: llama backend init
0.00.000.395 I main: load the model and apply lora adapter, if any
0.00.020.655 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.669 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.676 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.677 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.681 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.681 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.682 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.682 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.683 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.683 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.687 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.688 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.688 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.689 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.689 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.268 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.503 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.353 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.359 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.360 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.360 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.361 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.362 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.363 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.365 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.366 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.367 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.367 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.368 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.371 I llama_model_loader: - type  f32:   37 tensors
0.00.130.372 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.921 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.050 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.605 I llm_load_vocab: special tokens cache size = 5
0.00.265.257 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.275 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.276 I llm_load_print_meta: arch             = gemma
0.00.265.276 I llm_load_print_meta: vocab type       = SPM
0.00.265.277 I llm_load_print_meta: n_vocab          = 256000
0.00.265.277 I llm_load_print_meta: n_merges         = 0
0.00.265.278 I llm_load_print_meta: vocab_only       = 0
0.00.265.278 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.278 I llm_load_print_meta: n_embd           = 2048
0.00.265.279 I llm_load_print_meta: n_layer          = 18
0.00.265.292 I llm_load_print_meta: n_head           = 8
0.00.265.293 I llm_load_print_meta: n_head_kv        = 1
0.00.265.293 I llm_load_print_meta: n_rot            = 256
0.00.265.293 I llm_load_print_meta: n_swa            = 0
0.00.265.294 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.294 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.295 I llm_load_print_meta: n_gqa            = 8
0.00.265.296 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.297 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.297 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.298 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.299 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.299 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.299 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.300 I llm_load_print_meta: n_ff             = 16384
0.00.265.301 I llm_load_print_meta: n_expert         = 0
0.00.265.301 I llm_load_print_meta: n_expert_used    = 0
0.00.265.301 I llm_load_print_meta: causal attn      = 1
0.00.265.302 I llm_load_print_meta: pooling type     = 0
0.00.265.302 I llm_load_print_meta: rope type        = 2
0.00.265.302 I llm_load_print_meta: rope scaling     = linear
0.00.265.304 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.304 I llm_load_print_meta: freq_scale_train = 1
0.00.265.305 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.305 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.305 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.306 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.306 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.306 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.306 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.307 I llm_load_print_meta: model type       = 2B
0.00.265.307 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.308 I llm_load_print_meta: model params     = 2.51 B
0.00.265.309 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.309 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.310 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.310 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.310 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.310 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.311 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.311 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.311 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.312 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.312 I llm_load_print_meta: max token length = 93
0.00.360.094 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.365.175 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.182 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.182 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.183 I llama_new_context_with_model: n_batch       = 2048
0.00.365.183 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.184 I llama_new_context_with_model: flash_attn    = 0
0.00.365.186 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.187 I llama_new_context_with_model: freq_scale    = 1
0.00.365.188 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.710 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.725 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.379.816 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.079 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.086 I llama_new_context_with_model: graph nodes  = 601
0.00.381.086 I llama_new_context_with_model: graph splits = 1
0.00.381.088 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.110 I main: llama threadpool init, n_threads = 4
0.00.462.128 I 
0.00.462.198 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.462.201 I 
0.00.462.245 I sampler seed: 2094238659
0.00.462.256 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.260 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.260 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.261 I 
 increasively. 

I am a large language model, trained by Google.

I am capable of generating human-quality text in response to a wide range

0.02.651.570 I llama_perf_sampler_print:    sampling time =       5.65 ms /    33 runs   (    0.17 ms per token,  5838.64 tokens per second)
0.02.651.572 I llama_perf_context_print:        load time =     461.70 ms
0.02.651.574 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.651.575 I llama_perf_context_print:        eval time =    2169.76 ms /    32 runs   (   67.80 ms per token,    14.75 tokens per second)
0.02.651.576 I llama_perf_context_print:       total time =    2189.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.554 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.757 I main: load the model and apply lora adapter, if any
0.00.021.432 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.442 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.450 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.455 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.456 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.461 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.462 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.463 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.463 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.464 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.465 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.470 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.471 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.472 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.472 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.473 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.030 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.732 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.604 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.611 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.612 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.612 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.613 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.614 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.614 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.617 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.617 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.618 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.618 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.620 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.623 I llama_model_loader: - type  f32:   37 tensors
0.00.131.624 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.570 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.113 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.268.828 I llm_load_vocab: special tokens cache size = 5
0.00.289.504 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.289.525 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.289.526 I llm_load_print_meta: arch             = gemma
0.00.289.526 I llm_load_print_meta: vocab type       = SPM
0.00.289.527 I llm_load_print_meta: n_vocab          = 256000
0.00.289.527 I llm_load_print_meta: n_merges         = 0
0.00.289.528 I llm_load_print_meta: vocab_only       = 0
0.00.289.528 I llm_load_print_meta: n_ctx_train      = 8192
0.00.289.528 I llm_load_print_meta: n_embd           = 2048
0.00.289.529 I llm_load_print_meta: n_layer          = 18
0.00.289.540 I llm_load_print_meta: n_head           = 8
0.00.289.542 I llm_load_print_meta: n_head_kv        = 1
0.00.289.542 I llm_load_print_meta: n_rot            = 256
0.00.289.542 I llm_load_print_meta: n_swa            = 0
0.00.289.543 I llm_load_print_meta: n_embd_head_k    = 256
0.00.289.543 I llm_load_print_meta: n_embd_head_v    = 256
0.00.289.544 I llm_load_print_meta: n_gqa            = 8
0.00.289.545 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.289.546 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.289.547 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.289.548 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.289.548 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.289.549 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.289.549 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.289.550 I llm_load_print_meta: n_ff             = 16384
0.00.289.550 I llm_load_print_meta: n_expert         = 0
0.00.289.551 I llm_load_print_meta: n_expert_used    = 0
0.00.289.551 I llm_load_print_meta: causal attn      = 1
0.00.289.551 I llm_load_print_meta: pooling type     = 0
0.00.289.551 I llm_load_print_meta: rope type        = 2
0.00.289.552 I llm_load_print_meta: rope scaling     = linear
0.00.289.553 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.289.554 I llm_load_print_meta: freq_scale_train = 1
0.00.289.554 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.289.555 I llm_load_print_meta: rope_finetuned   = unknown
0.00.289.555 I llm_load_print_meta: ssm_d_conv       = 0
0.00.289.555 I llm_load_print_meta: ssm_d_inner      = 0
0.00.289.555 I llm_load_print_meta: ssm_d_state      = 0
0.00.289.555 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.289.556 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.289.556 I llm_load_print_meta: model type       = 2B
0.00.289.557 I llm_load_print_meta: model ftype      = Q8_0
0.00.289.558 I llm_load_print_meta: model params     = 2.51 B
0.00.289.559 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.289.559 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.289.560 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.289.560 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.289.560 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.289.560 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.289.561 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.289.561 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.289.561 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.289.562 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.289.563 I llm_load_print_meta: max token length = 93
0.00.366.520 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.366.527 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.366.528 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.366.529 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.366.530 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.366.530 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.371.885 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.891 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.891 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.891 I llama_new_context_with_model: n_batch       = 2048
0.00.371.892 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.892 I llama_new_context_with_model: flash_attn    = 0
0.00.371.895 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.896 I llama_new_context_with_model: freq_scale    = 1
0.00.371.897 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.767 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.778 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.386.873 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.247 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.254 I llama_new_context_with_model: graph nodes  = 601
0.00.388.254 I llama_new_context_with_model: graph splits = 1
0.00.388.256 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.145 I main: llama threadpool init, n_threads = 4
0.00.475.160 I 
0.00.475.234 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.475.237 I 
0.00.475.279 I sampler seed: 2124396783
0.00.475.289 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.310 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.314 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.314 I 
 increably.

I am unable to locate the requested text. [end of text]


0.01.481.109 I llama_perf_sampler_print:    sampling time =       2.77 ms /    15 runs   (    0.18 ms per token,  5421.03 tokens per second)
0.01.481.112 I llama_perf_context_print:        load time =     474.37 ms
0.01.481.113 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.481.115 I llama_perf_context_print:        eval time =     995.82 ms /    14 runs   (   71.13 ms per token,    14.06 tokens per second)
0.01.481.115 I llama_perf_context_print:       total time =    1005.97 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.177 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.020.753 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.765 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.773 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.782 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.783 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.787 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.788 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.789 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.789 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.790 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.791 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.795 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.796 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.797 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.797 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.798 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.061.547 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.137.644 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.144.530 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.144.538 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.144.539 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.144.540 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.144.541 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.144.542 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.144.542 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.144.546 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.144.546 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.144.547 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.144.548 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.144.549 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.144.553 I llama_model_loader: - type  f32:   37 tensors
0.00.144.554 I llama_model_loader: - type q8_0:  127 tensors
0.00.217.852 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.565 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.213 I llm_load_vocab: special tokens cache size = 5
0.00.288.123 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.143 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.144 I llm_load_print_meta: arch             = gemma
0.00.288.145 I llm_load_print_meta: vocab type       = SPM
0.00.288.145 I llm_load_print_meta: n_vocab          = 256000
0.00.288.146 I llm_load_print_meta: n_merges         = 0
0.00.288.146 I llm_load_print_meta: vocab_only       = 0
0.00.288.146 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.147 I llm_load_print_meta: n_embd           = 2048
0.00.288.147 I llm_load_print_meta: n_layer          = 18
0.00.288.159 I llm_load_print_meta: n_head           = 8
0.00.288.160 I llm_load_print_meta: n_head_kv        = 1
0.00.288.160 I llm_load_print_meta: n_rot            = 256
0.00.288.161 I llm_load_print_meta: n_swa            = 0
0.00.288.161 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.161 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.162 I llm_load_print_meta: n_gqa            = 8
0.00.288.163 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.164 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.165 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.166 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.166 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.167 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.167 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.168 I llm_load_print_meta: n_ff             = 16384
0.00.288.168 I llm_load_print_meta: n_expert         = 0
0.00.288.169 I llm_load_print_meta: n_expert_used    = 0
0.00.288.169 I llm_load_print_meta: causal attn      = 1
0.00.288.169 I llm_load_print_meta: pooling type     = 0
0.00.288.170 I llm_load_print_meta: rope type        = 2
0.00.288.170 I llm_load_print_meta: rope scaling     = linear
0.00.288.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.172 I llm_load_print_meta: freq_scale_train = 1
0.00.288.172 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.173 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.173 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.173 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.173 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.174 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.174 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.174 I llm_load_print_meta: model type       = 2B
0.00.288.175 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.176 I llm_load_print_meta: model params     = 2.51 B
0.00.288.176 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.177 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.177 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.178 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.178 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.178 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.178 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.179 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.179 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.179 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.180 I llm_load_print_meta: max token length = 93
0.00.359.713 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.359.721 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.364.756 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.764 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.764 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.764 I llama_new_context_with_model: n_batch       = 2048
0.00.364.765 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.765 I llama_new_context_with_model: flash_attn    = 0
0.00.364.768 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.769 I llama_new_context_with_model: freq_scale    = 1
0.00.364.770 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.379.960 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.379.974 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.075 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.381.468 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.381.475 I llama_new_context_with_model: graph nodes  = 601
0.00.381.475 I llama_new_context_with_model: graph splits = 1
0.00.381.477 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.971 I main: llama threadpool init, n_threads = 4
0.00.471.988 I 
0.00.472.065 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.472.068 I 
0.00.472.113 I sampler seed: 1863319227
0.00.472.124 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.472.137 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.472.140 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.472.141 I 
 increably. 

I am a large language model, trained by Google. I am capable of generating human-quality text, translating languages, and providing information

0.02.925.107 I llama_perf_sampler_print:    sampling time =       5.54 ms /    33 runs   (    0.17 ms per token,  5959.91 tokens per second)
0.02.925.110 I llama_perf_context_print:        load time =     471.58 ms
0.02.925.111 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.925.113 I llama_perf_context_print:        eval time =    2432.98 ms /    32 runs   (   76.03 ms per token,    13.15 tokens per second)
0.02.925.114 I llama_perf_context_print:       total time =    2453.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.315s
user	0m34.694s
sys	0m9.356s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4317 (adffa6ff)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40238.92 ms
main:    total time = 40238.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.535 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.000.739 I main: load the model and apply lora adapter, if any
0.00.021.898 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.905 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.915 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.921 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.922 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.928 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.929 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.930 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.930 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.931 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.935 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.936 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.936 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.937 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.937 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.123 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.914 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.921 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.922 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.923 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.924 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.925 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.926 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.929 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.930 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.931 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.932 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.933 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.936 I llama_model_loader: - type  f32:   37 tensors
0.00.131.938 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.939 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.361 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.874 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.478 I llm_load_vocab: special tokens cache size = 5
0.00.276.317 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.336 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.337 I llm_load_print_meta: arch             = gemma
0.00.276.337 I llm_load_print_meta: vocab type       = SPM
0.00.276.339 I llm_load_print_meta: n_vocab          = 256000
0.00.276.340 I llm_load_print_meta: n_merges         = 0
0.00.276.340 I llm_load_print_meta: vocab_only       = 0
0.00.276.340 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.341 I llm_load_print_meta: n_embd           = 2048
0.00.276.342 I llm_load_print_meta: n_layer          = 18
0.00.276.354 I llm_load_print_meta: n_head           = 8
0.00.276.355 I llm_load_print_meta: n_head_kv        = 1
0.00.276.355 I llm_load_print_meta: n_rot            = 256
0.00.276.356 I llm_load_print_meta: n_swa            = 0
0.00.276.356 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.357 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.358 I llm_load_print_meta: n_gqa            = 8
0.00.276.359 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.360 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.361 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.363 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.364 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.364 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.365 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.366 I llm_load_print_meta: n_ff             = 16384
0.00.276.366 I llm_load_print_meta: n_expert         = 0
0.00.276.366 I llm_load_print_meta: n_expert_used    = 0
0.00.276.367 I llm_load_print_meta: causal attn      = 1
0.00.276.367 I llm_load_print_meta: pooling type     = 0
0.00.276.367 I llm_load_print_meta: rope type        = 2
0.00.276.368 I llm_load_print_meta: rope scaling     = linear
0.00.276.369 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.370 I llm_load_print_meta: freq_scale_train = 1
0.00.276.370 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.370 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.371 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.371 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.371 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.371 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.372 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.373 I llm_load_print_meta: model type       = 2B
0.00.276.373 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.374 I llm_load_print_meta: model params     = 2.51 B
0.00.276.375 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.375 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.378 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.378 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.379 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.379 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.379 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.380 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.380 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.381 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.381 I llm_load_print_meta: max token length = 93
0.00.335.713 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.335.721 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.335.721 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.335.722 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.335.723 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.335.723 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.860 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.866 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.867 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.867 I llama_new_context_with_model: n_batch       = 2048
0.00.340.868 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.868 I llama_new_context_with_model: flash_attn    = 0
0.00.340.871 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.872 I llama_new_context_with_model: freq_scale    = 1
0.00.340.873 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.876 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.893 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.985 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.330 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.338 I llama_new_context_with_model: graph nodes  = 601
0.00.357.338 I llama_new_context_with_model: graph splits = 1
0.00.357.341 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.664 I main: llama threadpool init, n_threads = 4
0.00.444.680 I 
0.00.444.755 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.444.758 I 
0.00.444.802 I sampler seed: 477197958
0.00.444.813 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.816 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.817 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.817 I 
 maneuvorous plants that prey on insects.

These plants have a thick, fleshy stem that is covered in small, sharp teeth. The stems are also coated with

0.02.106.720 I llama_perf_sampler_print:    sampling time =       6.22 ms /    33 runs   (    0.19 ms per token,  5302.91 tokens per second)
0.02.106.722 I llama_perf_context_print:        load time =     443.91 ms
0.02.106.723 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.106.724 I llama_perf_context_print:        eval time =    1641.39 ms /    32 runs   (   51.29 ms per token,    19.50 tokens per second)
0.02.106.725 I llama_perf_context_print:       total time =    1662.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4317 (adffa6ff)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40204.28 ms
main:    total time = 40204.28 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.551 I build: 4317 (adffa6ff) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.021.078 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.094 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.104 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.108 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.112 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.112 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.113 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.113 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.114 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.115 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.119 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.119 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.120 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.120 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.121 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.027 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.404 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.411 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.412 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.413 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.413 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.414 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.415 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.418 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.418 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.423 I llama_model_loader: - type  f32:   37 tensors
0.00.131.424 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.425 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.684 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.669 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.339 I llm_load_vocab: special tokens cache size = 5
0.00.272.152 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.171 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.171 I llm_load_print_meta: arch             = gemma
0.00.272.172 I llm_load_print_meta: vocab type       = SPM
0.00.272.172 I llm_load_print_meta: n_vocab          = 256000
0.00.272.173 I llm_load_print_meta: n_merges         = 0
0.00.272.173 I llm_load_print_meta: vocab_only       = 0
0.00.272.173 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.174 I llm_load_print_meta: n_embd           = 2048
0.00.272.174 I llm_load_print_meta: n_layer          = 18
0.00.272.186 I llm_load_print_meta: n_head           = 8
0.00.272.187 I llm_load_print_meta: n_head_kv        = 1
0.00.272.188 I llm_load_print_meta: n_rot            = 256
0.00.272.188 I llm_load_print_meta: n_swa            = 0
0.00.272.188 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.189 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.189 I llm_load_print_meta: n_gqa            = 8
0.00.272.191 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.192 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.192 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.194 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.194 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.194 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.195 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.195 I llm_load_print_meta: n_ff             = 16384
0.00.272.196 I llm_load_print_meta: n_expert         = 0
0.00.272.196 I llm_load_print_meta: n_expert_used    = 0
0.00.272.196 I llm_load_print_meta: causal attn      = 1
0.00.272.196 I llm_load_print_meta: pooling type     = 0
0.00.272.197 I llm_load_print_meta: rope type        = 2
0.00.272.197 I llm_load_print_meta: rope scaling     = linear
0.00.272.199 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.199 I llm_load_print_meta: freq_scale_train = 1
0.00.272.200 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.200 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.200 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.200 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.201 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.201 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.201 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.202 I llm_load_print_meta: model type       = 2B
0.00.272.202 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.203 I llm_load_print_meta: model params     = 2.51 B
0.00.272.204 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.204 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.205 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.205 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.206 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.206 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.206 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.207 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.207 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.208 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.208 I llm_load_print_meta: max token length = 93
0.00.329.704 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.334.847 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.853 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.853 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.854 I llama_new_context_with_model: n_batch       = 2048
0.00.334.854 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.855 I llama_new_context_with_model: flash_attn    = 0
0.00.334.857 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.858 I llama_new_context_with_model: freq_scale    = 1
0.00.334.859 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.648 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.680 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.771 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.994 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.001 I llama_new_context_with_model: graph nodes  = 601
0.00.351.001 I llama_new_context_with_model: graph splits = 1
0.00.351.003 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.782 I main: llama threadpool init, n_threads = 4
0.00.425.797 I 
0.00.425.873 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.876 I 
0.00.425.918 I sampler seed: 3022569131
0.00.425.929 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.942 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.945 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.945 I 
 seconally. [end of text]


0.00.628.592 I llama_perf_sampler_print:    sampling time =       0.70 ms /     5 runs   (    0.14 ms per token,  7112.38 tokens per second)
0.00.628.595 I llama_perf_context_print:        load time =     425.01 ms
0.00.628.596 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.628.597 I llama_perf_context_print:        eval time =     199.46 ms /     4 runs   (   49.87 ms per token,    20.05 tokens per second)
0.00.628.598 I llama_perf_context_print:       total time =     202.82 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.060s
user	10m18.991s
sys	0m7.034s
