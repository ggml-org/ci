+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.635 I build: 3910 (f6dd38c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.024.835 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.046 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.143 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.154 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.157 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.161 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.163 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.164 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.164 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.166 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.166 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.173 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.174 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.176 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.177 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.178 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.620 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.021 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.128 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.138 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.139 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.140 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.141 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.142 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.143 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.146 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.147 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.148 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.149 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.150 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.158 I llama_model_loader: - type  f32:   37 tensors
0.00.270.162 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.320 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.571 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.629 I llm_load_vocab: special tokens cache size = 5
0.00.588.933 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.588.998 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.588.999 I llm_load_print_meta: arch             = gemma
0.00.589.000 I llm_load_print_meta: vocab type       = SPM
0.00.589.001 I llm_load_print_meta: n_vocab          = 256000
0.00.589.003 I llm_load_print_meta: n_merges         = 0
0.00.589.004 I llm_load_print_meta: vocab_only       = 0
0.00.589.004 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.004 I llm_load_print_meta: n_embd           = 2048
0.00.589.005 I llm_load_print_meta: n_layer          = 18
0.00.589.067 I llm_load_print_meta: n_head           = 8
0.00.589.075 I llm_load_print_meta: n_head_kv        = 1
0.00.589.076 I llm_load_print_meta: n_rot            = 256
0.00.589.077 I llm_load_print_meta: n_swa            = 0
0.00.589.077 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.078 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.092 I llm_load_print_meta: n_gqa            = 8
0.00.589.096 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.101 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.110 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.112 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.124 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.126 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.126 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.132 I llm_load_print_meta: n_ff             = 16384
0.00.589.132 I llm_load_print_meta: n_expert         = 0
0.00.589.140 I llm_load_print_meta: n_expert_used    = 0
0.00.589.141 I llm_load_print_meta: causal attn      = 1
0.00.589.141 I llm_load_print_meta: pooling type     = 0
0.00.589.142 I llm_load_print_meta: rope type        = 2
0.00.589.142 I llm_load_print_meta: rope scaling     = linear
0.00.589.144 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.145 I llm_load_print_meta: freq_scale_train = 1
0.00.589.149 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.149 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.150 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.150 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.150 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.150 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.152 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.153 I llm_load_print_meta: model type       = 2B
0.00.589.154 I llm_load_print_meta: model ftype      = Q8_0
0.00.589.154 I llm_load_print_meta: model params     = 2.51 B
0.00.589.155 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.589.162 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.163 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.163 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.164 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.165 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.165 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.171 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.177 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.179 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.179 I llm_load_print_meta: max token length = 93
0.00.589.342 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.690.971 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.690.980 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.690.981 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.690.982 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.690.982 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.690.983 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.696.653 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.660 I llama_new_context_with_model: n_batch    = 2048
0.00.696.661 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.661 I llama_new_context_with_model: flash_attn = 0
0.00.696.663 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.664 I llama_new_context_with_model: freq_scale = 1
0.00.725.373 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.416 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.725.529 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.935 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.726.939 I llama_new_context_with_model: graph nodes  = 601
0.00.726.940 I llama_new_context_with_model: graph splits = 1
0.00.726.956 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.090 I main: llama threadpool init, n_threads = 4
0.01.339.100 I 
0.01.339.203 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.207 I 
0.01.339.368 I sampler seed: 815924356
0.01.339.379 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.386 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.339.387 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.387 I 
 increably.

I am unable to provide medical advice or diagnose medical conditions. If you are experiencing any medical symptoms, please consult a qualified healthcare professional. [end of text]


0.14.917.220 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.92 tokens per second)
0.14.917.223 I llama_perf_context_print:        load time =    1336.23 ms
0.14.917.225 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.917.227 I llama_perf_context_print:        eval time =   13495.91 ms /    32 runs   (  421.75 ms per token,     2.37 tokens per second)
0.14.917.228 I llama_perf_context_print:       total time =   13578.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.616 I build: 3910 (f6dd38c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.626 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.717 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.731 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.732 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.736 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.740 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.741 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.743 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.744 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.745 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.752 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.753 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.754 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.763 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.764 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.834 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.785 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.796 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.797 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.798 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.799 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.801 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.804 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.805 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.807 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.808 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.809 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.817 I llama_model_loader: - type  f32:   37 tensors
0.00.269.822 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.483 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.133 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.157 I llm_load_vocab: special tokens cache size = 5
0.00.589.799 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.865 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.866 I llm_load_print_meta: arch             = gemma
0.00.589.867 I llm_load_print_meta: vocab type       = SPM
0.00.589.867 I llm_load_print_meta: n_vocab          = 256000
0.00.589.869 I llm_load_print_meta: n_merges         = 0
0.00.589.870 I llm_load_print_meta: vocab_only       = 0
0.00.589.870 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.871 I llm_load_print_meta: n_embd           = 2048
0.00.589.871 I llm_load_print_meta: n_layer          = 18
0.00.589.934 I llm_load_print_meta: n_head           = 8
0.00.589.942 I llm_load_print_meta: n_head_kv        = 1
0.00.589.943 I llm_load_print_meta: n_rot            = 256
0.00.589.943 I llm_load_print_meta: n_swa            = 0
0.00.589.944 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.944 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.950 I llm_load_print_meta: n_gqa            = 8
0.00.589.954 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.960 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.979 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.984 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.993 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.995 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.996 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.003 I llm_load_print_meta: n_ff             = 16384
0.00.590.004 I llm_load_print_meta: n_expert         = 0
0.00.590.004 I llm_load_print_meta: n_expert_used    = 0
0.00.590.013 I llm_load_print_meta: causal attn      = 1
0.00.590.014 I llm_load_print_meta: pooling type     = 0
0.00.590.014 I llm_load_print_meta: rope type        = 2
0.00.590.015 I llm_load_print_meta: rope scaling     = linear
0.00.590.017 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.017 I llm_load_print_meta: freq_scale_train = 1
0.00.590.018 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.018 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.026 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.027 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.034 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.035 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.036 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.036 I llm_load_print_meta: model type       = 2B
0.00.590.038 I llm_load_print_meta: model ftype      = Q8_0
0.00.590.039 I llm_load_print_meta: model params     = 2.51 B
0.00.590.039 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.590.040 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.041 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.042 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.042 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.043 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.044 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.044 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.050 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.052 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.052 I llm_load_print_meta: max token length = 93
0.00.590.224 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.685.933 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.691.643 I llama_new_context_with_model: n_ctx      = 8192
0.00.691.650 I llama_new_context_with_model: n_batch    = 2048
0.00.691.650 I llama_new_context_with_model: n_ubatch   = 512
0.00.691.651 I llama_new_context_with_model: flash_attn = 0
0.00.691.653 I llama_new_context_with_model: freq_base  = 10000.0
0.00.691.654 I llama_new_context_with_model: freq_scale = 1
0.00.721.073 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.120 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.722.582 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.722.586 I llama_new_context_with_model: graph nodes  = 601
0.00.722.587 I llama_new_context_with_model: graph splits = 1
0.00.722.602 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.337 I main: llama threadpool init, n_threads = 4
0.01.336.349 I 
0.01.336.450 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.336.454 I 
0.01.336.619 I sampler seed: 3472312847
0.01.336.629 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.336.635 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.336.636 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.336.636 I 
 increably.

I am sorry, I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.10.762.021 I llama_perf_sampler_print:    sampling time =      33.94 ms /    23 runs   (    1.48 ms per token,   677.73 tokens per second)
0.10.762.043 I llama_perf_context_print:        load time =    1333.47 ms
0.10.762.045 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.762.046 I llama_perf_context_print:        eval time =    9368.59 ms /    22 runs   (  425.84 ms per token,     2.35 tokens per second)
0.10.762.047 I llama_perf_context_print:       total time =    9425.69 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 3910 (f6dd38c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.777 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.987 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.076 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.087 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.088 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.092 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.093 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.095 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.097 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.098 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.098 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.105 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.106 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.107 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.108 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.109 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.110 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.537 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.594 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.602 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.603 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.604 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.605 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.606 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.608 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.611 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.612 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.613 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.614 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.269.615 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.623 I llama_model_loader: - type  f32:   37 tensors
0.00.269.627 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.771 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.488.044 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.489.025 I llm_load_vocab: special tokens cache size = 5
0.00.583.775 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.583.841 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.583.845 I llm_load_print_meta: arch             = gemma
0.00.583.845 I llm_load_print_meta: vocab type       = SPM
0.00.583.846 I llm_load_print_meta: n_vocab          = 256000
0.00.583.850 I llm_load_print_meta: n_merges         = 0
0.00.583.851 I llm_load_print_meta: vocab_only       = 0
0.00.583.851 I llm_load_print_meta: n_ctx_train      = 8192
0.00.583.854 I llm_load_print_meta: n_embd           = 2048
0.00.583.854 I llm_load_print_meta: n_layer          = 18
0.00.583.918 I llm_load_print_meta: n_head           = 8
0.00.583.928 I llm_load_print_meta: n_head_kv        = 1
0.00.583.931 I llm_load_print_meta: n_rot            = 256
0.00.583.931 I llm_load_print_meta: n_swa            = 0
0.00.583.931 I llm_load_print_meta: n_embd_head_k    = 256
0.00.583.932 I llm_load_print_meta: n_embd_head_v    = 256
0.00.583.948 I llm_load_print_meta: n_gqa            = 8
0.00.583.955 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.583.960 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.583.964 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.583.965 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.583.966 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.583.966 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.583.967 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.583.972 I llm_load_print_meta: n_ff             = 16384
0.00.583.972 I llm_load_print_meta: n_expert         = 0
0.00.583.973 I llm_load_print_meta: n_expert_used    = 0
0.00.583.973 I llm_load_print_meta: causal attn      = 1
0.00.583.974 I llm_load_print_meta: pooling type     = 0
0.00.583.974 I llm_load_print_meta: rope type        = 2
0.00.583.975 I llm_load_print_meta: rope scaling     = linear
0.00.583.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.583.978 I llm_load_print_meta: freq_scale_train = 1
0.00.583.978 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.583.979 I llm_load_print_meta: rope_finetuned   = unknown
0.00.583.979 I llm_load_print_meta: ssm_d_conv       = 0
0.00.583.980 I llm_load_print_meta: ssm_d_inner      = 0
0.00.583.980 I llm_load_print_meta: ssm_d_state      = 0
0.00.583.981 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.583.981 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.583.982 I llm_load_print_meta: model type       = 2B
0.00.583.983 I llm_load_print_meta: model ftype      = Q8_0
0.00.583.984 I llm_load_print_meta: model params     = 2.51 B
0.00.583.984 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.583.985 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.583.985 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.583.986 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.583.986 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.583.987 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.583.987 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.583.987 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.583.993 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.583.994 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.583.994 I llm_load_print_meta: max token length = 93
0.00.584.163 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.662.635 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.662.647 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.662.648 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.662.649 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.662.649 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.662.650 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.668.302 I llama_new_context_with_model: n_ctx      = 8192
0.00.668.309 I llama_new_context_with_model: n_batch    = 2048
0.00.668.309 I llama_new_context_with_model: n_ubatch   = 512
0.00.668.310 I llama_new_context_with_model: flash_attn = 0
0.00.668.312 I llama_new_context_with_model: freq_base  = 10000.0
0.00.668.313 I llama_new_context_with_model: freq_scale = 1
0.00.696.890 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.931 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.697.044 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.410 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.415 I llama_new_context_with_model: graph nodes  = 601
0.00.698.415 I llama_new_context_with_model: graph splits = 1
0.00.698.431 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.892 I main: llama threadpool init, n_threads = 4
0.01.311.902 I 
0.01.312.011 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.312.015 I 
0.01.312.179 I sampler seed: 271878393
0.01.312.190 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.312.196 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.312.196 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.312.197 I 
 increasities?

I am unable to answer the question as it contains sexually suggestive and inappropriate content. I am designed to provide safe and appropriate responses. [end of text]


0.14.482.341 I llama_perf_sampler_print:    sampling time =      47.59 ms /    32 runs   (    1.49 ms per token,   672.41 tokens per second)
0.14.482.355 I llama_perf_context_print:        load time =    1309.00 ms
0.14.482.357 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.482.360 I llama_perf_context_print:        eval time =   13090.84 ms /    31 runs   (  422.29 ms per token,     2.37 tokens per second)
0.14.482.361 I llama_perf_context_print:       total time =   13170.46 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.614 I build: 3910 (f6dd38c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.747 I main: load the model and apply lora adapter, if any
0.00.024.374 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.568 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.649 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.660 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.662 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.666 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.667 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.668 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.669 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.670 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.671 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.677 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.690 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.692 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.693 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.694 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.514 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.501 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.577 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.584 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.585 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.587 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.588 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.589 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.590 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.594 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.595 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.596 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.597 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.599 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.606 I llama_model_loader: - type  f32:   37 tensors
0.00.268.611 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.355 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.305 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.301 I llm_load_vocab: special tokens cache size = 5
0.00.586.301 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.586.373 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.586.377 I llm_load_print_meta: arch             = gemma
0.00.586.378 I llm_load_print_meta: vocab type       = SPM
0.00.586.379 I llm_load_print_meta: n_vocab          = 256000
0.00.586.381 I llm_load_print_meta: n_merges         = 0
0.00.586.381 I llm_load_print_meta: vocab_only       = 0
0.00.586.382 I llm_load_print_meta: n_ctx_train      = 8192
0.00.586.382 I llm_load_print_meta: n_embd           = 2048
0.00.586.382 I llm_load_print_meta: n_layer          = 18
0.00.586.442 I llm_load_print_meta: n_head           = 8
0.00.586.452 I llm_load_print_meta: n_head_kv        = 1
0.00.586.455 I llm_load_print_meta: n_rot            = 256
0.00.586.455 I llm_load_print_meta: n_swa            = 0
0.00.586.456 I llm_load_print_meta: n_embd_head_k    = 256
0.00.586.456 I llm_load_print_meta: n_embd_head_v    = 256
0.00.586.461 I llm_load_print_meta: n_gqa            = 8
0.00.586.466 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.586.471 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.586.472 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.586.474 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.586.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.586.475 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.586.476 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.586.481 I llm_load_print_meta: n_ff             = 16384
0.00.586.482 I llm_load_print_meta: n_expert         = 0
0.00.586.482 I llm_load_print_meta: n_expert_used    = 0
0.00.586.482 I llm_load_print_meta: causal attn      = 1
0.00.586.493 I llm_load_print_meta: pooling type     = 0
0.00.586.504 I llm_load_print_meta: rope type        = 2
0.00.586.508 I llm_load_print_meta: rope scaling     = linear
0.00.586.510 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.586.510 I llm_load_print_meta: freq_scale_train = 1
0.00.586.511 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.586.511 I llm_load_print_meta: rope_finetuned   = unknown
0.00.586.511 I llm_load_print_meta: ssm_d_conv       = 0
0.00.586.512 I llm_load_print_meta: ssm_d_inner      = 0
0.00.586.512 I llm_load_print_meta: ssm_d_state      = 0
0.00.586.512 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.586.512 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.586.513 I llm_load_print_meta: model type       = 2B
0.00.586.514 I llm_load_print_meta: model ftype      = Q8_0
0.00.586.515 I llm_load_print_meta: model params     = 2.51 B
0.00.586.516 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.586.516 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.586.517 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.586.517 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.586.518 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.586.518 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.586.519 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.586.519 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.586.525 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.586.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.586.532 I llm_load_print_meta: max token length = 93
0.00.586.700 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.083 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.658.092 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.663.683 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.690 I llama_new_context_with_model: n_batch    = 2048
0.00.663.691 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.691 I llama_new_context_with_model: flash_attn = 0
0.00.663.694 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.695 I llama_new_context_with_model: freq_scale = 1
0.00.693.911 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.954 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.694.068 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.456 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.461 I llama_new_context_with_model: graph nodes  = 601
0.00.695.461 I llama_new_context_with_model: graph splits = 1
0.00.695.477 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.316.944 I main: llama threadpool init, n_threads = 4
0.01.316.955 I 
0.01.317.064 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.317.068 I 
0.01.317.240 I sampler seed: 3407923010
0.01.317.252 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.317.258 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.317.258 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.317.269 I 
 increasities in a new, immersive way. [end of text]


0.05.535.252 I llama_perf_sampler_print:    sampling time =      15.49 ms /    11 runs   (    1.41 ms per token,   710.32 tokens per second)
0.05.535.256 I llama_perf_context_print:        load time =    1314.11 ms
0.05.535.257 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.535.258 I llama_perf_context_print:        eval time =    4191.14 ms /    10 runs   (  419.11 ms per token,     2.39 tokens per second)
0.05.535.259 I llama_perf_context_print:       total time =    4218.32 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.475s
user	2m54.143s
sys	0m9.390s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3910 (f6dd38c2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198961.80 ms
main:    total time = 198961.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 3910 (f6dd38c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.002.788 I main: load the model and apply lora adapter, if any
0.00.024.844 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.062 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.156 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.168 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.171 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.175 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.179 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.180 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.182 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.183 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.185 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.193 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.195 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.198 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.202 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.204 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.276 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.088 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.148 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.156 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.157 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.158 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.159 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.161 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.163 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.167 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.168 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.169 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.170 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.172 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.180 I llama_model_loader: - type  f32:   37 tensors
0.00.269.185 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.186 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.936 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.771 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.822 I llm_load_vocab: special tokens cache size = 5
0.00.597.887 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.957 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.958 I llm_load_print_meta: arch             = gemma
0.00.597.959 I llm_load_print_meta: vocab type       = SPM
0.00.597.960 I llm_load_print_meta: n_vocab          = 256000
0.00.597.962 I llm_load_print_meta: n_merges         = 0
0.00.597.963 I llm_load_print_meta: vocab_only       = 0
0.00.597.963 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.963 I llm_load_print_meta: n_embd           = 2048
0.00.597.964 I llm_load_print_meta: n_layer          = 18
0.00.598.026 I llm_load_print_meta: n_head           = 8
0.00.598.033 I llm_load_print_meta: n_head_kv        = 1
0.00.598.034 I llm_load_print_meta: n_rot            = 256
0.00.598.034 I llm_load_print_meta: n_swa            = 0
0.00.598.035 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.036 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.040 I llm_load_print_meta: n_gqa            = 8
0.00.598.045 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.053 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.053 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.054 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.054 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.059 I llm_load_print_meta: n_ff             = 16384
0.00.598.060 I llm_load_print_meta: n_expert         = 0
0.00.598.061 I llm_load_print_meta: n_expert_used    = 0
0.00.598.061 I llm_load_print_meta: causal attn      = 1
0.00.598.062 I llm_load_print_meta: pooling type     = 0
0.00.598.062 I llm_load_print_meta: rope type        = 2
0.00.598.063 I llm_load_print_meta: rope scaling     = linear
0.00.598.065 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.066 I llm_load_print_meta: freq_scale_train = 1
0.00.598.085 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.085 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.086 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.095 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.095 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.096 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.104 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.106 I llm_load_print_meta: model type       = 2B
0.00.598.107 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.598.108 I llm_load_print_meta: model params     = 2.51 B
0.00.598.109 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.598.110 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.111 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.119 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.120 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.128 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.131 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.132 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.138 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.140 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.140 I llm_load_print_meta: max token length = 93
0.00.598.335 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.534 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.658.542 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.658.543 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.658.543 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.658.544 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.658.545 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.665.037 I llama_new_context_with_model: n_ctx      = 8192
0.00.665.044 I llama_new_context_with_model: n_batch    = 2048
0.00.665.044 I llama_new_context_with_model: n_ubatch   = 512
0.00.665.045 I llama_new_context_with_model: flash_attn = 0
0.00.665.047 I llama_new_context_with_model: freq_base  = 10000.0
0.00.665.047 I llama_new_context_with_model: freq_scale = 1
0.00.693.619 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.663 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.779 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.187 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.191 I llama_new_context_with_model: graph nodes  = 601
0.00.695.192 I llama_new_context_with_model: graph splits = 1
0.00.695.208 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.015 I main: llama threadpool init, n_threads = 4
0.01.275.027 I 
0.01.275.147 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.151 I 
0.01.275.338 I sampler seed: 1388788422
0.01.275.350 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.357 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.275.359 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.275.359 I 
 seconded by the company.

**Answer the question following the above principles.**

**Question:** What is the impact of the company's restructuring on its

0.12.230.677 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.29 tokens per second)
0.12.230.680 I llama_perf_context_print:        load time =    1272.14 ms
0.12.230.681 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.230.683 I llama_perf_context_print:        eval time =   10873.86 ms /    32 runs   (  339.81 ms per token,     2.94 tokens per second)
0.12.230.706 I llama_perf_context_print:       total time =   10955.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3910 (f6dd38c2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198311.21 ms
main:    total time = 198311.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3910 (f6dd38c2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.835 I main: llama backend init
0.00.002.795 I main: load the model and apply lora adapter, if any
0.00.024.842 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.930 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.942 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.944 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.948 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.952 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.953 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.954 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.955 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.957 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.962 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.964 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.965 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.966 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.967 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.892 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.249 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.606 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.617 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.618 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.619 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.620 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.621 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.623 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.626 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.627 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.636 I llama_model_loader: - type  f32:   37 tensors
0.00.269.641 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.641 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.153 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.495.158 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.496.144 I llm_load_vocab: special tokens cache size = 5
0.00.590.972 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.591.040 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.591.044 I llm_load_print_meta: arch             = gemma
0.00.591.044 I llm_load_print_meta: vocab type       = SPM
0.00.591.045 I llm_load_print_meta: n_vocab          = 256000
0.00.591.047 I llm_load_print_meta: n_merges         = 0
0.00.591.048 I llm_load_print_meta: vocab_only       = 0
0.00.591.048 I llm_load_print_meta: n_ctx_train      = 8192
0.00.591.049 I llm_load_print_meta: n_embd           = 2048
0.00.591.049 I llm_load_print_meta: n_layer          = 18
0.00.591.113 I llm_load_print_meta: n_head           = 8
0.00.591.123 I llm_load_print_meta: n_head_kv        = 1
0.00.591.125 I llm_load_print_meta: n_rot            = 256
0.00.591.125 I llm_load_print_meta: n_swa            = 0
0.00.591.126 I llm_load_print_meta: n_embd_head_k    = 256
0.00.591.128 I llm_load_print_meta: n_embd_head_v    = 256
0.00.591.133 I llm_load_print_meta: n_gqa            = 8
0.00.591.137 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.591.143 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.591.144 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.591.146 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.591.146 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.591.147 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.591.147 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.591.152 I llm_load_print_meta: n_ff             = 16384
0.00.591.153 I llm_load_print_meta: n_expert         = 0
0.00.591.154 I llm_load_print_meta: n_expert_used    = 0
0.00.591.154 I llm_load_print_meta: causal attn      = 1
0.00.591.154 I llm_load_print_meta: pooling type     = 0
0.00.591.155 I llm_load_print_meta: rope type        = 2
0.00.591.155 I llm_load_print_meta: rope scaling     = linear
0.00.591.166 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.591.168 I llm_load_print_meta: freq_scale_train = 1
0.00.591.169 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.591.169 I llm_load_print_meta: rope_finetuned   = unknown
0.00.591.172 I llm_load_print_meta: ssm_d_conv       = 0
0.00.591.172 I llm_load_print_meta: ssm_d_inner      = 0
0.00.591.173 I llm_load_print_meta: ssm_d_state      = 0
0.00.591.173 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.591.173 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.591.174 I llm_load_print_meta: model type       = 2B
0.00.591.175 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.591.176 I llm_load_print_meta: model params     = 2.51 B
0.00.591.176 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.591.177 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.591.177 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.591.178 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.591.179 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.591.179 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.591.180 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.591.181 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.591.187 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.591.189 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.591.189 I llm_load_print_meta: max token length = 93
0.00.591.355 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.649.708 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.655.239 I llama_new_context_with_model: n_ctx      = 8192
0.00.655.246 I llama_new_context_with_model: n_batch    = 2048
0.00.655.247 I llama_new_context_with_model: n_ubatch   = 512
0.00.655.247 I llama_new_context_with_model: flash_attn = 0
0.00.655.249 I llama_new_context_with_model: freq_base  = 10000.0
0.00.655.250 I llama_new_context_with_model: freq_scale = 1
0.00.685.173 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.685.218 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.685.331 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.686.695 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.686.700 I llama_new_context_with_model: graph nodes  = 601
0.00.686.700 I llama_new_context_with_model: graph splits = 1
0.00.686.716 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.266.563 I main: llama threadpool init, n_threads = 4
0.01.266.575 I 
0.01.266.696 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.266.699 I 
0.01.266.865 I sampler seed: 84544382
0.01.266.876 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.266.882 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.266.883 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.266.884 I 
 effeering the two sentences.

The purpose of this project is to [state the specific purpose of the project]. This will involve [list the specific activities to

0.12.242.431 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.83 tokens per second)
0.12.242.448 I llama_perf_context_print:        load time =    1263.68 ms
0.12.242.449 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.242.451 I llama_perf_context_print:        eval time =   10894.41 ms /    32 runs   (  340.45 ms per token,     2.94 tokens per second)
0.12.242.452 I llama_perf_context_print:       total time =   10975.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.610s
user	50m11.462s
sys	0m6.262s
