+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.025.002 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.246 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.339 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.351 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.353 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.358 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.362 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.364 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.365 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.371 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.372 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.382 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.384 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.386 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.389 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.391 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.258 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.208 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.868 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.878 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.879 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.880 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.881 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.882 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.884 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.887 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.888 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.890 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.890 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.892 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.900 I llama_model_loader: - type  f32:   37 tensors
0.00.269.905 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.640 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.878 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.905 I llm_load_vocab: special tokens cache size = 5
0.00.589.753 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.824 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.825 I llm_load_print_meta: arch             = gemma
0.00.589.826 I llm_load_print_meta: vocab type       = SPM
0.00.589.826 I llm_load_print_meta: n_vocab          = 256000
0.00.589.829 I llm_load_print_meta: n_merges         = 0
0.00.589.829 I llm_load_print_meta: vocab_only       = 0
0.00.589.830 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.831 I llm_load_print_meta: n_embd           = 2048
0.00.589.831 I llm_load_print_meta: n_layer          = 18
0.00.589.894 I llm_load_print_meta: n_head           = 8
0.00.589.902 I llm_load_print_meta: n_head_kv        = 1
0.00.589.902 I llm_load_print_meta: n_rot            = 256
0.00.589.903 I llm_load_print_meta: n_swa            = 0
0.00.589.904 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.904 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.909 I llm_load_print_meta: n_gqa            = 8
0.00.589.914 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.920 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.921 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.923 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.923 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.924 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.925 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.930 I llm_load_print_meta: n_ff             = 16384
0.00.589.930 I llm_load_print_meta: n_expert         = 0
0.00.589.931 I llm_load_print_meta: n_expert_used    = 0
0.00.589.931 I llm_load_print_meta: causal attn      = 1
0.00.589.942 I llm_load_print_meta: pooling type     = 0
0.00.589.943 I llm_load_print_meta: rope type        = 2
0.00.589.944 I llm_load_print_meta: rope scaling     = linear
0.00.589.945 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.946 I llm_load_print_meta: freq_scale_train = 1
0.00.589.947 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.947 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.948 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.949 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.949 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.949 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.962 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.963 I llm_load_print_meta: model type       = 2B
0.00.589.964 I llm_load_print_meta: model ftype      = Q8_0
0.00.589.965 I llm_load_print_meta: model params     = 2.51 B
0.00.589.966 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.589.967 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.967 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.968 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.968 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.969 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.969 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.970 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.983 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.985 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.986 I llm_load_print_meta: max token length = 93
0.00.590.162 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.829 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.691.839 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.691.840 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.691.840 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.691.841 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.691.842 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.697.769 I llama_new_context_with_model: n_ctx      = 8192
0.00.697.776 I llama_new_context_with_model: n_batch    = 2048
0.00.697.776 I llama_new_context_with_model: n_ubatch   = 512
0.00.697.777 I llama_new_context_with_model: flash_attn = 0
0.00.697.780 I llama_new_context_with_model: freq_base  = 10000.0
0.00.697.781 I llama_new_context_with_model: freq_scale = 1
0.00.726.262 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.726.305 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.726.425 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.727.833 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.727.842 I llama_new_context_with_model: graph nodes  = 601
0.00.727.842 I llama_new_context_with_model: graph splits = 1
0.00.727.861 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.352 I main: llama threadpool init, n_threads = 4
0.01.339.365 I 
0.01.339.464 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.464 I 
0.01.339.636 I sampler seed: 3613914001
0.01.339.647 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.339.653 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.339.653 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.339.654 I 
 increasities, and the complexities of human behavior.

The study of psychology aims to understand the fundamental nature of human behavior, including the motivations, emotions, and

0.14.868.632 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.04 tokens per second)
0.14.868.635 I llama_perf_context_print:        load time =    1336.48 ms
0.14.868.660 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.868.662 I llama_perf_context_print:        eval time =   13446.93 ms /    32 runs   (  420.22 ms per token,     2.38 tokens per second)
0.14.868.663 I llama_perf_context_print:       total time =   13529.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.831 I main: llama backend init
0.00.002.758 I main: load the model and apply lora adapter, if any
0.00.024.697 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.786 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.799 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.801 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.804 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.805 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.806 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.808 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.809 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.810 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.817 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.818 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.827 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.831 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.832 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.600 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.025 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.616 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.624 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.625 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.626 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.628 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.629 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.633 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.637 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.638 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.639 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.640 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.641 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.651 I llama_model_loader: - type  f32:   37 tensors
0.00.269.656 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.139 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.230 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.220 I llm_load_vocab: special tokens cache size = 5
0.00.603.784 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.857 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.862 I llm_load_print_meta: arch             = gemma
0.00.603.863 I llm_load_print_meta: vocab type       = SPM
0.00.603.863 I llm_load_print_meta: n_vocab          = 256000
0.00.603.866 I llm_load_print_meta: n_merges         = 0
0.00.603.867 I llm_load_print_meta: vocab_only       = 0
0.00.603.867 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.868 I llm_load_print_meta: n_embd           = 2048
0.00.603.869 I llm_load_print_meta: n_layer          = 18
0.00.603.937 I llm_load_print_meta: n_head           = 8
0.00.603.946 I llm_load_print_meta: n_head_kv        = 1
0.00.603.947 I llm_load_print_meta: n_rot            = 256
0.00.603.948 I llm_load_print_meta: n_swa            = 0
0.00.603.949 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.949 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.953 I llm_load_print_meta: n_gqa            = 8
0.00.603.959 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.963 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.965 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.966 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.966 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.967 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.967 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.972 I llm_load_print_meta: n_ff             = 16384
0.00.603.973 I llm_load_print_meta: n_expert         = 0
0.00.603.974 I llm_load_print_meta: n_expert_used    = 0
0.00.603.974 I llm_load_print_meta: causal attn      = 1
0.00.603.974 I llm_load_print_meta: pooling type     = 0
0.00.603.975 I llm_load_print_meta: rope type        = 2
0.00.603.975 I llm_load_print_meta: rope scaling     = linear
0.00.603.985 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.988 I llm_load_print_meta: freq_scale_train = 1
0.00.603.989 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.989 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.989 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.990 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.990 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.990 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.991 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.991 I llm_load_print_meta: model type       = 2B
0.00.603.992 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.993 I llm_load_print_meta: model params     = 2.51 B
0.00.604.006 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.007 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.008 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.008 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.009 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.010 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.010 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.010 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.016 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.018 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.018 I llm_load_print_meta: max token length = 93
0.00.604.183 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.699.367 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.704.895 I llama_new_context_with_model: n_ctx      = 8192
0.00.704.902 I llama_new_context_with_model: n_batch    = 2048
0.00.704.903 I llama_new_context_with_model: n_ubatch   = 512
0.00.704.904 I llama_new_context_with_model: flash_attn = 0
0.00.704.906 I llama_new_context_with_model: freq_base  = 10000.0
0.00.704.907 I llama_new_context_with_model: freq_scale = 1
0.00.733.839 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.733.883 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.734.036 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.735.410 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.735.416 I llama_new_context_with_model: graph nodes  = 601
0.00.735.416 I llama_new_context_with_model: graph splits = 1
0.00.735.432 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.366 I main: llama threadpool init, n_threads = 4
0.01.345.377 I 
0.01.345.480 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.484 I 
0.01.345.651 I sampler seed: 551978682
0.01.345.661 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.668 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.345.670 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.683 I 
 increasities and the allure of the forbidden.

These are just some of the themes that emerge in my writing. I am struggling to find a cohesive and engaging

0.14.930.885 I llama_perf_sampler_print:    sampling time =      49.44 ms /    33 runs   (    1.50 ms per token,   667.48 tokens per second)
0.14.930.888 I llama_perf_context_print:        load time =    1342.52 ms
0.14.930.890 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.930.892 I llama_perf_context_print:        eval time =   13500.61 ms /    32 runs   (  421.89 ms per token,     2.37 tokens per second)
0.14.930.905 I llama_perf_context_print:       total time =   13585.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.678 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.002.848 I main: load the model and apply lora adapter, if any
0.00.024.986 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.210 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.316 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.330 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.332 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.337 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.342 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.343 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.345 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.347 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.348 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.360 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.364 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.366 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.367 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.369 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.336 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.109 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.789 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.798 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.800 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.801 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.802 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.803 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.804 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.808 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.809 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.810 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.811 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.812 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.820 I llama_model_loader: - type  f32:   37 tensors
0.00.270.824 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.336 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.950 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.002 I llm_load_vocab: special tokens cache size = 5
0.00.600.173 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.248 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.252 I llm_load_print_meta: arch             = gemma
0.00.600.253 I llm_load_print_meta: vocab type       = SPM
0.00.600.254 I llm_load_print_meta: n_vocab          = 256000
0.00.600.256 I llm_load_print_meta: n_merges         = 0
0.00.600.257 I llm_load_print_meta: vocab_only       = 0
0.00.600.258 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.258 I llm_load_print_meta: n_embd           = 2048
0.00.600.259 I llm_load_print_meta: n_layer          = 18
0.00.600.334 I llm_load_print_meta: n_head           = 8
0.00.600.344 I llm_load_print_meta: n_head_kv        = 1
0.00.600.344 I llm_load_print_meta: n_rot            = 256
0.00.600.345 I llm_load_print_meta: n_swa            = 0
0.00.600.345 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.345 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.350 I llm_load_print_meta: n_gqa            = 8
0.00.600.354 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.359 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.361 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.362 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.362 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.363 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.363 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.369 I llm_load_print_meta: n_ff             = 16384
0.00.600.369 I llm_load_print_meta: n_expert         = 0
0.00.600.370 I llm_load_print_meta: n_expert_used    = 0
0.00.600.370 I llm_load_print_meta: causal attn      = 1
0.00.600.371 I llm_load_print_meta: pooling type     = 0
0.00.600.372 I llm_load_print_meta: rope type        = 2
0.00.600.372 I llm_load_print_meta: rope scaling     = linear
0.00.600.374 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.383 I llm_load_print_meta: freq_scale_train = 1
0.00.600.386 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.387 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.387 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.387 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.388 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.388 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.388 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.389 I llm_load_print_meta: model type       = 2B
0.00.600.390 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.391 I llm_load_print_meta: model params     = 2.51 B
0.00.600.392 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.392 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.394 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.394 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.395 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.396 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.396 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.397 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.404 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.406 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.406 I llm_load_print_meta: max token length = 93
0.00.600.586 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.679.212 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.679.220 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.679.221 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.679.221 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.679.222 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.679.223 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.684.989 I llama_new_context_with_model: n_ctx      = 8192
0.00.684.997 I llama_new_context_with_model: n_batch    = 2048
0.00.684.997 I llama_new_context_with_model: n_ubatch   = 512
0.00.684.998 I llama_new_context_with_model: flash_attn = 0
0.00.685.001 I llama_new_context_with_model: freq_base  = 10000.0
0.00.685.002 I llama_new_context_with_model: freq_scale = 1
0.00.715.489 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.535 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.649 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.717.049 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.717.057 I llama_new_context_with_model: graph nodes  = 601
0.00.717.057 I llama_new_context_with_model: graph splits = 1
0.00.717.074 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.329.862 I main: llama threadpool init, n_threads = 4
0.01.329.873 I 
0.01.329.996 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.330.001 I 
0.01.330.183 I sampler seed: 3834082957
0.01.330.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.330.201 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.330.202 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.330.202 I 
 increably. The more so, the more I yearn to engage with it, to explore its intricacies and to lose myself in its embrace. [end of text]


0.13.690.562 I llama_perf_sampler_print:    sampling time =      44.87 ms /    30 runs   (    1.50 ms per token,   668.63 tokens per second)
0.13.690.566 I llama_perf_context_print:        load time =    1326.90 ms
0.13.690.568 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.13.690.571 I llama_perf_context_print:        eval time =   12285.86 ms /    29 runs   (  423.65 ms per token,     2.36 tokens per second)
0.13.690.573 I llama_perf_context_print:       total time =   12360.71 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.672 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.861 I main: llama backend init
0.00.002.796 I main: load the model and apply lora adapter, if any
0.00.024.890 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.085 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.172 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.184 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.185 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.190 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.193 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.195 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.195 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.197 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.197 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.205 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.206 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.207 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.208 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.209 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.569 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.270 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.487 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.494 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.496 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.497 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.498 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.499 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.500 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.504 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.505 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.506 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.507 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.508 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.517 I llama_model_loader: - type  f32:   37 tensors
0.00.271.521 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.523 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.753 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.755 I llm_load_vocab: special tokens cache size = 5
0.00.613.745 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.817 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.821 I llm_load_print_meta: arch             = gemma
0.00.613.822 I llm_load_print_meta: vocab type       = SPM
0.00.613.823 I llm_load_print_meta: n_vocab          = 256000
0.00.613.825 I llm_load_print_meta: n_merges         = 0
0.00.613.825 I llm_load_print_meta: vocab_only       = 0
0.00.613.826 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.826 I llm_load_print_meta: n_embd           = 2048
0.00.613.827 I llm_load_print_meta: n_layer          = 18
0.00.613.892 I llm_load_print_meta: n_head           = 8
0.00.613.902 I llm_load_print_meta: n_head_kv        = 1
0.00.613.904 I llm_load_print_meta: n_rot            = 256
0.00.613.905 I llm_load_print_meta: n_swa            = 0
0.00.613.905 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.916 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.921 I llm_load_print_meta: n_gqa            = 8
0.00.613.926 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.934 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.935 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.936 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.949 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.952 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.953 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.958 I llm_load_print_meta: n_ff             = 16384
0.00.613.958 I llm_load_print_meta: n_expert         = 0
0.00.613.959 I llm_load_print_meta: n_expert_used    = 0
0.00.613.959 I llm_load_print_meta: causal attn      = 1
0.00.613.959 I llm_load_print_meta: pooling type     = 0
0.00.613.960 I llm_load_print_meta: rope type        = 2
0.00.613.960 I llm_load_print_meta: rope scaling     = linear
0.00.613.962 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.962 I llm_load_print_meta: freq_scale_train = 1
0.00.613.963 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.963 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.963 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.964 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.964 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.964 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.964 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.965 I llm_load_print_meta: model type       = 2B
0.00.613.966 I llm_load_print_meta: model ftype      = Q8_0
0.00.613.967 I llm_load_print_meta: model params     = 2.51 B
0.00.613.968 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.613.968 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.977 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.986 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.987 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.987 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.988 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.995 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.001 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.002 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.003 I llm_load_print_meta: max token length = 93
0.00.614.166 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.685.859 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.685.869 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.691.515 I llama_new_context_with_model: n_ctx      = 8192
0.00.691.523 I llama_new_context_with_model: n_batch    = 2048
0.00.691.523 I llama_new_context_with_model: n_ubatch   = 512
0.00.691.524 I llama_new_context_with_model: flash_attn = 0
0.00.691.526 I llama_new_context_with_model: freq_base  = 10000.0
0.00.691.527 I llama_new_context_with_model: freq_scale = 1
0.00.720.127 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.720.174 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.720.292 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.721.689 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.721.696 I llama_new_context_with_model: graph nodes  = 601
0.00.721.696 I llama_new_context_with_model: graph splits = 1
0.00.721.712 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.333.036 I main: llama threadpool init, n_threads = 4
0.01.333.049 I 
0.01.333.160 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.333.164 I 
0.01.333.340 I sampler seed: 2986604897
0.01.333.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.333.367 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.333.371 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.333.371 I 
 increasities, the story of a young woman named Anya.

**Synopsis:**

Anya, a young woman burdened with the weight of her responsibilities,

0.14.948.823 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.43 tokens per second)
0.14.948.842 I llama_perf_context_print:        load time =    1330.15 ms
0.14.948.844 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.948.845 I llama_perf_context_print:        eval time =   13533.70 ms /    32 runs   (  422.93 ms per token,     2.36 tokens per second)
0.14.948.846 I llama_perf_context_print:       total time =   13615.80 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m8.911s
user	3m44.989s
sys	0m9.485s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3927 (76e5d871)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199478.23 ms
main:    total time = 199478.23 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.024.874 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.084 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.189 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.196 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.197 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.199 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.201 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.203 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.205 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.212 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.217 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.219 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.221 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.167 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.874 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.683 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.694 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.696 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.697 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.698 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.699 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.700 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.704 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.705 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.706 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.707 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.708 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.717 I llama_model_loader: - type  f32:   37 tensors
0.00.270.722 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.724 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.432 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.207 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.291 I llm_load_vocab: special tokens cache size = 5
0.00.611.296 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.369 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.370 I llm_load_print_meta: arch             = gemma
0.00.611.370 I llm_load_print_meta: vocab type       = SPM
0.00.611.371 I llm_load_print_meta: n_vocab          = 256000
0.00.611.374 I llm_load_print_meta: n_merges         = 0
0.00.611.374 I llm_load_print_meta: vocab_only       = 0
0.00.611.375 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.375 I llm_load_print_meta: n_embd           = 2048
0.00.611.375 I llm_load_print_meta: n_layer          = 18
0.00.611.439 I llm_load_print_meta: n_head           = 8
0.00.611.448 I llm_load_print_meta: n_head_kv        = 1
0.00.611.449 I llm_load_print_meta: n_rot            = 256
0.00.611.451 I llm_load_print_meta: n_swa            = 0
0.00.611.452 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.452 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.459 I llm_load_print_meta: n_gqa            = 8
0.00.611.467 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.473 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.475 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.477 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.486 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.487 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.488 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.495 I llm_load_print_meta: n_ff             = 16384
0.00.611.496 I llm_load_print_meta: n_expert         = 0
0.00.611.497 I llm_load_print_meta: n_expert_used    = 0
0.00.611.498 I llm_load_print_meta: causal attn      = 1
0.00.611.499 I llm_load_print_meta: pooling type     = 0
0.00.611.500 I llm_load_print_meta: rope type        = 2
0.00.611.500 I llm_load_print_meta: rope scaling     = linear
0.00.611.503 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.504 I llm_load_print_meta: freq_scale_train = 1
0.00.611.508 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.509 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.509 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.510 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.511 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.512 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.512 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.513 I llm_load_print_meta: model type       = 2B
0.00.611.515 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.611.516 I llm_load_print_meta: model params     = 2.51 B
0.00.611.518 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.611.519 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.520 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.521 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.525 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.526 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.526 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.527 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.535 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.537 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.541 I llm_load_print_meta: max token length = 93
0.00.611.720 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.671.657 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.671.667 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.671.668 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.671.669 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.671.670 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.671.670 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.677.532 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.541 I llama_new_context_with_model: n_batch    = 2048
0.00.677.541 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.542 I llama_new_context_with_model: flash_attn = 0
0.00.677.544 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.545 I llama_new_context_with_model: freq_scale = 1
0.00.707.337 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.382 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.504 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.708.909 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.917 I llama_new_context_with_model: graph nodes  = 601
0.00.708.918 I llama_new_context_with_model: graph splits = 1
0.00.708.935 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.056 I main: llama threadpool init, n_threads = 4
0.01.285.069 I 
0.01.285.190 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.194 I 
0.01.285.368 I sampler seed: 1580475442
0.01.285.379 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.388 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.285.389 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.285.390 I 
 seconded with the idea of a timelapse video showcasing the changing seasons. The timelapse video would capture the essence of a place, capturing its unique beauty and changing landscapes

0.12.132.598 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.94 tokens per second)
0.12.132.602 I llama_perf_context_print:        load time =    1282.17 ms
0.12.132.603 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.132.604 I llama_perf_context_print:        eval time =   10765.56 ms /    32 runs   (  336.42 ms per token,     2.97 tokens per second)
0.12.132.618 I llama_perf_context_print:       total time =   10847.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3927 (76e5d871)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199399.72 ms
main:    total time = 199399.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.618 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.554 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.641 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.655 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.656 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.661 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.664 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.665 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.666 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.667 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.668 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.673 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.675 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.676 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.677 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.679 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.759 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.598 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.241 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.248 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.249 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.250 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.252 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.253 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.256 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.260 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.261 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.268 I llama_model_loader: - type  f32:   37 tensors
0.00.270.273 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.273 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.642 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.093 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.154 I llm_load_vocab: special tokens cache size = 5
0.00.602.966 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.032 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.033 I llm_load_print_meta: arch             = gemma
0.00.603.034 I llm_load_print_meta: vocab type       = SPM
0.00.603.035 I llm_load_print_meta: n_vocab          = 256000
0.00.603.037 I llm_load_print_meta: n_merges         = 0
0.00.603.038 I llm_load_print_meta: vocab_only       = 0
0.00.603.038 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.039 I llm_load_print_meta: n_embd           = 2048
0.00.603.039 I llm_load_print_meta: n_layer          = 18
0.00.603.104 I llm_load_print_meta: n_head           = 8
0.00.603.111 I llm_load_print_meta: n_head_kv        = 1
0.00.603.112 I llm_load_print_meta: n_rot            = 256
0.00.603.113 I llm_load_print_meta: n_swa            = 0
0.00.603.113 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.113 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.118 I llm_load_print_meta: n_gqa            = 8
0.00.603.122 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.127 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.129 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.130 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.131 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.132 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.132 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.138 I llm_load_print_meta: n_ff             = 16384
0.00.603.138 I llm_load_print_meta: n_expert         = 0
0.00.603.138 I llm_load_print_meta: n_expert_used    = 0
0.00.603.139 I llm_load_print_meta: causal attn      = 1
0.00.603.140 I llm_load_print_meta: pooling type     = 0
0.00.603.140 I llm_load_print_meta: rope type        = 2
0.00.603.140 I llm_load_print_meta: rope scaling     = linear
0.00.603.142 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.142 I llm_load_print_meta: freq_scale_train = 1
0.00.603.143 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.143 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.144 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.144 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.145 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.145 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.146 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.147 I llm_load_print_meta: model type       = 2B
0.00.603.166 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.603.171 I llm_load_print_meta: model params     = 2.51 B
0.00.603.172 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.603.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.188 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.189 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.190 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.191 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.191 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.192 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.198 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.199 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.200 I llm_load_print_meta: max token length = 93
0.00.603.369 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.662.268 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.667.851 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.858 I llama_new_context_with_model: n_batch    = 2048
0.00.667.859 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.859 I llama_new_context_with_model: flash_attn = 0
0.00.667.862 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.863 I llama_new_context_with_model: freq_scale = 1
0.00.697.369 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.697.415 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.697.529 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.698.945 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.952 I llama_new_context_with_model: graph nodes  = 601
0.00.698.952 I llama_new_context_with_model: graph splits = 1
0.00.698.970 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.971 I main: llama threadpool init, n_threads = 4
0.01.275.983 I 
0.01.276.092 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.276.096 I 
0.01.276.263 I sampler seed: 1362536479
0.01.276.274 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.276.280 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.276.281 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.276.281 I 
 seconded "I can't believe it's already been a year since you guys moved in."

Is it appropriate to respond to this comment with:

0.12.186.091 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.53 tokens per second)
0.12.186.094 I llama_perf_context_print:        load time =    1273.11 ms
0.12.186.096 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.186.097 I llama_perf_context_print:        eval time =   10828.28 ms /    32 runs   (  338.38 ms per token,     2.96 tokens per second)
0.12.186.112 I llama_perf_context_print:       total time =   10910.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.053s
user	50m15.642s
sys	0m6.365s
