+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.539 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.844 I main: load the model and apply lora adapter, if any
0.00.021.861 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.910 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.916 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.926 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.929 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.932 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.933 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.933 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.934 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.934 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.935 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.940 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.940 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.941 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.941 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.942 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.839 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.507 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.467 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.476 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.477 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.478 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.478 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.479 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.480 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.483 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.483 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.484 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.484 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.485 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.489 I llama_model_loader: - type  f32:   37 tensors
0.00.131.493 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.174 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.396 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.166 I llm_load_vocab: special tokens cache size = 5
0.00.273.997 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.016 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.016 I llm_load_print_meta: arch             = gemma
0.00.274.017 I llm_load_print_meta: vocab type       = SPM
0.00.274.017 I llm_load_print_meta: n_vocab          = 256000
0.00.274.018 I llm_load_print_meta: n_merges         = 0
0.00.274.018 I llm_load_print_meta: vocab_only       = 0
0.00.274.018 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.019 I llm_load_print_meta: n_embd           = 2048
0.00.274.019 I llm_load_print_meta: n_layer          = 18
0.00.274.031 I llm_load_print_meta: n_head           = 8
0.00.274.032 I llm_load_print_meta: n_head_kv        = 1
0.00.274.032 I llm_load_print_meta: n_rot            = 256
0.00.274.032 I llm_load_print_meta: n_swa            = 0
0.00.274.032 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.033 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.034 I llm_load_print_meta: n_gqa            = 8
0.00.274.035 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.035 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.036 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.038 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.038 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.038 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.039 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.040 I llm_load_print_meta: n_ff             = 16384
0.00.274.040 I llm_load_print_meta: n_expert         = 0
0.00.274.040 I llm_load_print_meta: n_expert_used    = 0
0.00.274.040 I llm_load_print_meta: causal attn      = 1
0.00.274.041 I llm_load_print_meta: pooling type     = 0
0.00.274.041 I llm_load_print_meta: rope type        = 2
0.00.274.041 I llm_load_print_meta: rope scaling     = linear
0.00.274.043 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.043 I llm_load_print_meta: freq_scale_train = 1
0.00.274.044 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.044 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.044 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.045 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.045 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.046 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.046 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.047 I llm_load_print_meta: model type       = 2B
0.00.274.047 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.048 I llm_load_print_meta: model params     = 2.51 B
0.00.274.049 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.049 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.050 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.050 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.051 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.051 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.052 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.052 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.052 I llm_load_print_meta: max token length = 93
0.00.274.075 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.374.892 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.374.900 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.374.901 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.374.902 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.374.902 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.374.903 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.380.000 I llama_new_context_with_model: n_ctx      = 8192
0.00.380.007 I llama_new_context_with_model: n_batch    = 2048
0.00.380.007 I llama_new_context_with_model: n_ubatch   = 512
0.00.380.008 I llama_new_context_with_model: flash_attn = 0
0.00.380.011 I llama_new_context_with_model: freq_base  = 10000.0
0.00.380.012 I llama_new_context_with_model: freq_scale = 1
0.00.409.797 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.409.812 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.409.898 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.410.782 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.410.790 I llama_new_context_with_model: graph nodes  = 601
0.00.410.790 I llama_new_context_with_model: graph splits = 1
0.00.410.792 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.501.450 I main: llama threadpool init, n_threads = 4
0.00.501.462 I 
0.00.501.542 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.501.546 I 
0.00.501.582 I sampler seed: 1819619624
0.00.501.593 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.501.597 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.501.597 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.501.597 I 
 increasels to provide a playful and challenging way for players to learn and practice their skills.

**Benefits:**

* Develop hand-eye coordination
* Enhance

0.02.743.729 I llama_perf_sampler_print:    sampling time =       4.72 ms /    33 runs   (    0.14 ms per token,  6987.08 tokens per second)
0.02.743.732 I llama_perf_context_print:        load time =     499.58 ms
0.02.743.733 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.743.734 I llama_perf_context_print:        eval time =    2223.97 ms /    32 runs   (   69.50 ms per token,    14.39 tokens per second)
0.02.743.735 I llama_perf_context_print:       total time =    2242.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.541 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.741 I main: llama backend init
0.00.001.826 I main: load the model and apply lora adapter, if any
0.00.021.922 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.933 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.940 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.941 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.944 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.945 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.946 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.946 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.947 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.947 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.951 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.951 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.952 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.952 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.954 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.749 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.888 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.724 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.730 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.731 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.732 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.732 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.733 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.734 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.736 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.736 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.737 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.738 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.739 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.741 I llama_model_loader: - type  f32:   37 tensors
0.00.130.743 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.565 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.326 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.092 I llm_load_vocab: special tokens cache size = 5
0.00.265.807 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.823 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.824 I llm_load_print_meta: arch             = gemma
0.00.265.824 I llm_load_print_meta: vocab type       = SPM
0.00.265.825 I llm_load_print_meta: n_vocab          = 256000
0.00.265.826 I llm_load_print_meta: n_merges         = 0
0.00.265.826 I llm_load_print_meta: vocab_only       = 0
0.00.265.826 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.827 I llm_load_print_meta: n_embd           = 2048
0.00.265.827 I llm_load_print_meta: n_layer          = 18
0.00.265.838 I llm_load_print_meta: n_head           = 8
0.00.265.839 I llm_load_print_meta: n_head_kv        = 1
0.00.265.839 I llm_load_print_meta: n_rot            = 256
0.00.265.839 I llm_load_print_meta: n_swa            = 0
0.00.265.840 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.840 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.841 I llm_load_print_meta: n_gqa            = 8
0.00.265.842 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.843 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.844 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.845 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.846 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.846 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.846 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.847 I llm_load_print_meta: n_ff             = 16384
0.00.265.848 I llm_load_print_meta: n_expert         = 0
0.00.265.848 I llm_load_print_meta: n_expert_used    = 0
0.00.265.848 I llm_load_print_meta: causal attn      = 1
0.00.265.848 I llm_load_print_meta: pooling type     = 0
0.00.265.848 I llm_load_print_meta: rope type        = 2
0.00.265.849 I llm_load_print_meta: rope scaling     = linear
0.00.265.851 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.851 I llm_load_print_meta: freq_scale_train = 1
0.00.265.851 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.852 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.852 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.853 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.853 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.853 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.853 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.854 I llm_load_print_meta: model type       = 2B
0.00.265.854 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.855 I llm_load_print_meta: model params     = 2.51 B
0.00.265.856 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.856 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.857 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.857 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.858 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.858 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.858 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.859 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.859 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.860 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.860 I llm_load_print_meta: max token length = 93
0.00.265.885 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.358.605 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.363.663 I llama_new_context_with_model: n_ctx      = 8192
0.00.363.668 I llama_new_context_with_model: n_batch    = 2048
0.00.363.669 I llama_new_context_with_model: n_ubatch   = 512
0.00.363.669 I llama_new_context_with_model: flash_attn = 0
0.00.363.672 I llama_new_context_with_model: freq_base  = 10000.0
0.00.363.673 I llama_new_context_with_model: freq_scale = 1
0.00.393.124 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.393.136 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.393.227 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.083 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.394.090 I llama_new_context_with_model: graph nodes  = 601
0.00.394.091 I llama_new_context_with_model: graph splits = 1
0.00.394.093 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.491.719 I main: llama threadpool init, n_threads = 4
0.00.491.732 I 
0.00.491.813 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.491.817 I 
0.00.491.852 I sampler seed: 1431255851
0.00.491.862 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.491.865 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.491.866 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.491.866 I 
 increasities by giving evidence to support your claims.

I am unable to provide specific evidence or make subjective claims as requested, as I am not permitted to express

0.02.653.549 I llama_perf_sampler_print:    sampling time =       4.75 ms /    33 runs   (    0.14 ms per token,  6942.98 tokens per second)
0.02.653.551 I llama_perf_context_print:        load time =     489.87 ms
0.02.653.552 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.653.554 I llama_perf_context_print:        eval time =    2143.95 ms /    32 runs   (   67.00 ms per token,    14.93 tokens per second)
0.02.653.554 I llama_perf_context_print:       total time =    2161.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.531 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.001.917 I main: load the model and apply lora adapter, if any
0.00.021.909 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.956 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.966 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.971 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.983 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.987 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.990 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.990 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.991 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.991 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.992 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.995 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.996 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.997 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.997 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.998 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.973 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.400 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.267 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.274 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.276 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.276 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.277 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.278 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.278 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.282 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.282 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.283 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.283 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.284 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.287 I llama_model_loader: - type  f32:   37 tensors
0.00.131.289 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.466 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.817 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.586 I llm_load_vocab: special tokens cache size = 5
0.00.269.198 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.214 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.214 I llm_load_print_meta: arch             = gemma
0.00.269.215 I llm_load_print_meta: vocab type       = SPM
0.00.269.216 I llm_load_print_meta: n_vocab          = 256000
0.00.269.216 I llm_load_print_meta: n_merges         = 0
0.00.269.216 I llm_load_print_meta: vocab_only       = 0
0.00.269.217 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.217 I llm_load_print_meta: n_embd           = 2048
0.00.269.217 I llm_load_print_meta: n_layer          = 18
0.00.269.229 I llm_load_print_meta: n_head           = 8
0.00.269.230 I llm_load_print_meta: n_head_kv        = 1
0.00.269.230 I llm_load_print_meta: n_rot            = 256
0.00.269.231 I llm_load_print_meta: n_swa            = 0
0.00.269.231 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.231 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.232 I llm_load_print_meta: n_gqa            = 8
0.00.269.233 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.234 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.235 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.236 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.236 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.237 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.237 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.238 I llm_load_print_meta: n_ff             = 16384
0.00.269.238 I llm_load_print_meta: n_expert         = 0
0.00.269.239 I llm_load_print_meta: n_expert_used    = 0
0.00.269.239 I llm_load_print_meta: causal attn      = 1
0.00.269.239 I llm_load_print_meta: pooling type     = 0
0.00.269.239 I llm_load_print_meta: rope type        = 2
0.00.269.240 I llm_load_print_meta: rope scaling     = linear
0.00.269.241 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.242 I llm_load_print_meta: freq_scale_train = 1
0.00.269.242 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.243 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.243 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.243 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.243 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.244 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.244 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.244 I llm_load_print_meta: model type       = 2B
0.00.269.245 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.246 I llm_load_print_meta: model params     = 2.51 B
0.00.269.246 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.247 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.247 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.248 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.248 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.248 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.249 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.249 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.249 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.250 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.250 I llm_load_print_meta: max token length = 93
0.00.269.268 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.346.418 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.346.424 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.346.425 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.346.426 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.346.426 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.346.427 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.351.428 I llama_new_context_with_model: n_ctx      = 8192
0.00.351.434 I llama_new_context_with_model: n_batch    = 2048
0.00.351.434 I llama_new_context_with_model: n_ubatch   = 512
0.00.351.435 I llama_new_context_with_model: flash_attn = 0
0.00.351.437 I llama_new_context_with_model: freq_base  = 10000.0
0.00.351.438 I llama_new_context_with_model: freq_scale = 1
0.00.379.516 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.379.528 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.379.619 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.463 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.380.471 I llama_new_context_with_model: graph nodes  = 601
0.00.380.472 I llama_new_context_with_model: graph splits = 1
0.00.380.473 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.295 I main: llama threadpool init, n_threads = 4
0.00.470.308 I 
0.00.470.386 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.470.390 I 
0.00.470.426 I sampler seed: 2371225679
0.00.470.437 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.439 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.470.440 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.440 I 
 maneurages.

The provided text contains a misspelling. The correct spelling is "troubles".

Troubles is a common problem that can affect people of

0.02.707.374 I llama_perf_sampler_print:    sampling time =       4.91 ms /    33 runs   (    0.15 ms per token,  6727.83 tokens per second)
0.02.707.376 I llama_perf_context_print:        load time =     468.35 ms
0.02.707.378 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.707.379 I llama_perf_context_print:        eval time =    2219.12 ms /    32 runs   (   69.35 ms per token,    14.42 tokens per second)
0.02.707.380 I llama_perf_context_print:       total time =    2237.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.569 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.001.926 I main: load the model and apply lora adapter, if any
0.00.021.916 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.962 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.967 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.973 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.975 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.979 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.980 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.981 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.982 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.983 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.984 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.990 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.991 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.991 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.992 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.993 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.982 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.980 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.852 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.859 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.861 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.862 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.863 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.864 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.865 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.870 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.871 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.872 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.873 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.874 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.878 I llama_model_loader: - type  f32:   37 tensors
0.00.130.881 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.052 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.868 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.671 I llm_load_vocab: special tokens cache size = 5
0.00.268.612 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.628 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.628 I llm_load_print_meta: arch             = gemma
0.00.268.629 I llm_load_print_meta: vocab type       = SPM
0.00.268.629 I llm_load_print_meta: n_vocab          = 256000
0.00.268.630 I llm_load_print_meta: n_merges         = 0
0.00.268.630 I llm_load_print_meta: vocab_only       = 0
0.00.268.631 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.631 I llm_load_print_meta: n_embd           = 2048
0.00.268.631 I llm_load_print_meta: n_layer          = 18
0.00.268.642 I llm_load_print_meta: n_head           = 8
0.00.268.643 I llm_load_print_meta: n_head_kv        = 1
0.00.268.643 I llm_load_print_meta: n_rot            = 256
0.00.268.644 I llm_load_print_meta: n_swa            = 0
0.00.268.644 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.644 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.647 I llm_load_print_meta: n_gqa            = 8
0.00.268.648 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.649 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.652 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.654 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.654 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.655 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.655 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.657 I llm_load_print_meta: n_ff             = 16384
0.00.268.657 I llm_load_print_meta: n_expert         = 0
0.00.268.657 I llm_load_print_meta: n_expert_used    = 0
0.00.268.658 I llm_load_print_meta: causal attn      = 1
0.00.268.658 I llm_load_print_meta: pooling type     = 0
0.00.268.659 I llm_load_print_meta: rope type        = 2
0.00.268.660 I llm_load_print_meta: rope scaling     = linear
0.00.268.663 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.664 I llm_load_print_meta: freq_scale_train = 1
0.00.268.665 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.666 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.666 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.667 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.668 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.669 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.670 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.671 I llm_load_print_meta: model type       = 2B
0.00.268.672 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.673 I llm_load_print_meta: model params     = 2.51 B
0.00.268.674 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.676 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.677 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.677 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.678 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.678 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.679 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.680 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.681 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.684 I llm_load_print_meta: max token length = 93
0.00.268.718 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.339.514 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.339.522 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.344.527 I llama_new_context_with_model: n_ctx      = 8192
0.00.344.534 I llama_new_context_with_model: n_batch    = 2048
0.00.344.534 I llama_new_context_with_model: n_ubatch   = 512
0.00.344.535 I llama_new_context_with_model: flash_attn = 0
0.00.344.537 I llama_new_context_with_model: freq_base  = 10000.0
0.00.344.538 I llama_new_context_with_model: freq_scale = 1
0.00.373.390 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.373.405 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.373.499 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.381 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.374.389 I llama_new_context_with_model: graph nodes  = 601
0.00.374.390 I llama_new_context_with_model: graph splits = 1
0.00.374.391 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.006 I main: llama threadpool init, n_threads = 4
0.00.469.017 I 
0.00.469.099 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.104 I 
0.00.469.144 I sampler seed: 1567007967
0.00.469.163 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.166 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.469.166 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.167 I 
 increasities?

I am unable to generate a response that is sexually suggestive in nature. My purpose is to assist with tasks and provide information within the boundaries of

0.02.877.716 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6586.83 tokens per second)
0.02.877.718 I llama_perf_context_print:        load time =     467.06 ms
0.02.877.720 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.877.722 I llama_perf_context_print:        eval time =    2389.98 ms /    32 runs   (   74.69 ms per token,    13.39 tokens per second)
0.02.877.723 I llama_perf_context_print:       total time =    2408.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.500s
user	0m39.173s
sys	0m9.334s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3927 (76e5d871)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32019.72 ms
main:    total time = 32019.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.548 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.001.869 I main: load the model and apply lora adapter, if any
0.00.022.423 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.470 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.481 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.486 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.487 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.490 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.491 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.492 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.492 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.493 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.493 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.496 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.497 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.498 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.498 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.499 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.742 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.523 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.448 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.455 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.457 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.457 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.458 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.459 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.459 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.462 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.463 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.463 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.464 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.465 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.469 I llama_model_loader: - type  f32:   37 tensors
0.00.132.472 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.474 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.530 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.623 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.429 I llm_load_vocab: special tokens cache size = 5
0.00.271.080 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.099 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.099 I llm_load_print_meta: arch             = gemma
0.00.271.100 I llm_load_print_meta: vocab type       = SPM
0.00.271.100 I llm_load_print_meta: n_vocab          = 256000
0.00.271.101 I llm_load_print_meta: n_merges         = 0
0.00.271.101 I llm_load_print_meta: vocab_only       = 0
0.00.271.101 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.102 I llm_load_print_meta: n_embd           = 2048
0.00.271.102 I llm_load_print_meta: n_layer          = 18
0.00.271.113 I llm_load_print_meta: n_head           = 8
0.00.271.114 I llm_load_print_meta: n_head_kv        = 1
0.00.271.115 I llm_load_print_meta: n_rot            = 256
0.00.271.115 I llm_load_print_meta: n_swa            = 0
0.00.271.115 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.116 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.116 I llm_load_print_meta: n_gqa            = 8
0.00.271.117 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.118 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.120 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.121 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.121 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.122 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.122 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.123 I llm_load_print_meta: n_ff             = 16384
0.00.271.123 I llm_load_print_meta: n_expert         = 0
0.00.271.123 I llm_load_print_meta: n_expert_used    = 0
0.00.271.123 I llm_load_print_meta: causal attn      = 1
0.00.271.124 I llm_load_print_meta: pooling type     = 0
0.00.271.124 I llm_load_print_meta: rope type        = 2
0.00.271.124 I llm_load_print_meta: rope scaling     = linear
0.00.271.126 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.126 I llm_load_print_meta: freq_scale_train = 1
0.00.271.127 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.127 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.127 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.128 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.128 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.128 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.128 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.129 I llm_load_print_meta: model type       = 2B
0.00.271.129 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.130 I llm_load_print_meta: model params     = 2.51 B
0.00.271.131 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.131 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.132 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.132 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.133 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.133 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.133 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.134 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.134 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.135 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.135 I llm_load_print_meta: max token length = 93
0.00.271.162 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.330.751 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.330.758 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.330.759 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.330.759 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.330.760 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.330.760 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.335.982 I llama_new_context_with_model: n_ctx      = 8192
0.00.335.988 I llama_new_context_with_model: n_batch    = 2048
0.00.335.988 I llama_new_context_with_model: n_ubatch   = 512
0.00.335.989 I llama_new_context_with_model: flash_attn = 0
0.00.335.993 I llama_new_context_with_model: freq_base  = 10000.0
0.00.335.994 I llama_new_context_with_model: freq_scale = 1
0.00.365.114 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.365.129 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.365.232 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.150 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.366.158 I llama_new_context_with_model: graph nodes  = 601
0.00.366.158 I llama_new_context_with_model: graph splits = 1
0.00.366.160 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.424 I main: llama threadpool init, n_threads = 4
0.00.448.437 I 
0.00.448.527 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.448.530 I 
0.00.448.574 I sampler seed: 1456865672
0.00.448.584 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.589 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.448.590 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.590 I 
 squaRED BULL.

I need to generate a response that is creative, engaging, and captures the essence of the prompt.

**Response:**

Within the

0.02.060.947 I llama_perf_sampler_print:    sampling time =       4.70 ms /    33 runs   (    0.14 ms per token,  7018.29 tokens per second)
0.02.060.949 I llama_perf_context_print:        load time =     446.53 ms
0.02.060.950 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.060.952 I llama_perf_context_print:        eval time =    1594.42 ms /    32 runs   (   49.83 ms per token,    20.07 tokens per second)
0.02.060.952 I llama_perf_context_print:       total time =    1612.53 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3927 (76e5d871)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32249.20 ms
main:    total time = 32249.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.553 I build: 3927 (76e5d871) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.915 I main: load the model and apply lora adapter, if any
0.00.022.224 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.236 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.248 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.249 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.253 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.257 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.257 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.258 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.258 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.259 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.263 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.264 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.264 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.265 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.265 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.015 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.395 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.304 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.309 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.310 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.311 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.311 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.312 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.313 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.316 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.316 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.319 I llama_model_loader: - type  f32:   37 tensors
0.00.132.322 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.322 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.188 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.516 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.281 I llm_load_vocab: special tokens cache size = 5
0.00.268.984 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.999 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.000 I llm_load_print_meta: arch             = gemma
0.00.269.000 I llm_load_print_meta: vocab type       = SPM
0.00.269.001 I llm_load_print_meta: n_vocab          = 256000
0.00.269.001 I llm_load_print_meta: n_merges         = 0
0.00.269.002 I llm_load_print_meta: vocab_only       = 0
0.00.269.002 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.002 I llm_load_print_meta: n_embd           = 2048
0.00.269.002 I llm_load_print_meta: n_layer          = 18
0.00.269.014 I llm_load_print_meta: n_head           = 8
0.00.269.015 I llm_load_print_meta: n_head_kv        = 1
0.00.269.015 I llm_load_print_meta: n_rot            = 256
0.00.269.016 I llm_load_print_meta: n_swa            = 0
0.00.269.016 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.016 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.017 I llm_load_print_meta: n_gqa            = 8
0.00.269.018 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.019 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.019 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.021 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.022 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.022 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.022 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.023 I llm_load_print_meta: n_ff             = 16384
0.00.269.023 I llm_load_print_meta: n_expert         = 0
0.00.269.023 I llm_load_print_meta: n_expert_used    = 0
0.00.269.024 I llm_load_print_meta: causal attn      = 1
0.00.269.024 I llm_load_print_meta: pooling type     = 0
0.00.269.024 I llm_load_print_meta: rope type        = 2
0.00.269.025 I llm_load_print_meta: rope scaling     = linear
0.00.269.026 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.027 I llm_load_print_meta: freq_scale_train = 1
0.00.269.027 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.027 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.028 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.028 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.028 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.028 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.029 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.029 I llm_load_print_meta: model type       = 2B
0.00.269.029 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.030 I llm_load_print_meta: model params     = 2.51 B
0.00.269.031 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.031 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.031 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.032 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.032 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.032 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.033 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.033 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.034 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.034 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.034 I llm_load_print_meta: max token length = 93
0.00.269.053 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.770.646 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.775.646 I llama_new_context_with_model: n_ctx      = 8192
0.00.775.652 I llama_new_context_with_model: n_batch    = 2048
0.00.775.653 I llama_new_context_with_model: n_ubatch   = 512
0.00.775.653 I llama_new_context_with_model: flash_attn = 0
0.00.775.656 I llama_new_context_with_model: freq_base  = 10000.0
0.00.775.657 I llama_new_context_with_model: freq_scale = 1
0.00.804.460 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.804.475 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.804.566 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.805.412 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.805.420 I llama_new_context_with_model: graph nodes  = 601
0.00.805.421 I llama_new_context_with_model: graph splits = 1
0.00.805.423 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.887.383 I main: llama threadpool init, n_threads = 4
0.00.887.395 I 
0.00.887.472 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.887.475 I 
0.00.887.512 I sampler seed: 621024859
0.00.887.522 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.887.525 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.887.526 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.887.526 I 
 fufilling, and the final answer.

**Question:** Simplify the following expression:

$$3x^2 + 2x - 5x -

0.02.491.027 I llama_perf_sampler_print:    sampling time =       4.58 ms /    33 runs   (    0.14 ms per token,  7202.10 tokens per second)
0.02.491.030 I llama_perf_context_print:        load time =     885.44 ms
0.02.491.031 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.491.033 I llama_perf_context_print:        eval time =    1586.06 ms /    32 runs   (   49.56 ms per token,    20.18 tokens per second)
0.02.491.033 I llama_perf_context_print:       total time =    1603.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.580s
user	8m14.554s
sys	0m7.078s
