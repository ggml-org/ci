+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.690 I build: 3827 (7691654c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
0.00.024.911 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.090 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.176 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.188 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.190 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.194 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.203 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.208 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.226 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.228 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.229 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.230 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.819 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.063 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.497 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.503 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.504 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.505 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.505 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.506 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.507 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.510 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.511 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.512 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.513 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.197.514 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.521 I llama_model_loader: - type  f32:   37 tensors
0.00.197.525 I llama_model_loader: - type q8_0:  127 tensors
0.00.500.515 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.464 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.489 I llm_load_vocab: special tokens cache size = 5
0.00.584.912 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.584.966 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.584.967 I llm_load_print_meta: arch             = gemma
0.00.584.968 I llm_load_print_meta: vocab type       = SPM
0.00.584.969 I llm_load_print_meta: n_vocab          = 256000
0.00.584.971 I llm_load_print_meta: n_merges         = 0
0.00.584.972 I llm_load_print_meta: vocab_only       = 0
0.00.584.972 I llm_load_print_meta: n_ctx_train      = 8192
0.00.584.973 I llm_load_print_meta: n_embd           = 2048
0.00.584.973 I llm_load_print_meta: n_layer          = 18
0.00.585.009 I llm_load_print_meta: n_head           = 8
0.00.585.015 I llm_load_print_meta: n_head_kv        = 1
0.00.585.016 I llm_load_print_meta: n_rot            = 256
0.00.585.016 I llm_load_print_meta: n_swa            = 0
0.00.585.017 I llm_load_print_meta: n_embd_head_k    = 256
0.00.585.017 I llm_load_print_meta: n_embd_head_v    = 256
0.00.585.022 I llm_load_print_meta: n_gqa            = 8
0.00.585.026 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.585.031 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.585.032 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.585.033 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.585.034 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.585.034 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.585.035 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.585.039 I llm_load_print_meta: n_ff             = 16384
0.00.585.040 I llm_load_print_meta: n_expert         = 0
0.00.585.041 I llm_load_print_meta: n_expert_used    = 0
0.00.585.041 I llm_load_print_meta: causal attn      = 1
0.00.585.041 I llm_load_print_meta: pooling type     = 0
0.00.585.042 I llm_load_print_meta: rope type        = 2
0.00.585.042 I llm_load_print_meta: rope scaling     = linear
0.00.585.043 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.585.044 I llm_load_print_meta: freq_scale_train = 1
0.00.585.045 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.585.045 I llm_load_print_meta: rope_finetuned   = unknown
0.00.585.045 I llm_load_print_meta: ssm_d_conv       = 0
0.00.585.046 I llm_load_print_meta: ssm_d_inner      = 0
0.00.585.046 I llm_load_print_meta: ssm_d_state      = 0
0.00.585.046 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.585.047 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.585.047 I llm_load_print_meta: model type       = 2B
0.00.585.048 I llm_load_print_meta: model ftype      = Q8_0
0.00.585.049 I llm_load_print_meta: model params     = 2.51 B
0.00.585.049 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.585.050 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.585.050 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.585.051 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.585.051 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.585.051 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.585.052 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.585.052 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.585.058 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.585.060 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.585.060 I llm_load_print_meta: max token length = 93
0.00.585.227 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.684.644 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.684.652 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.684.653 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.684.654 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.684.655 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.684.655 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.690.203 I llama_new_context_with_model: n_ctx      = 8192
0.00.690.211 I llama_new_context_with_model: n_batch    = 2048
0.00.690.211 I llama_new_context_with_model: n_ubatch   = 512
0.00.690.212 I llama_new_context_with_model: flash_attn = 0
0.00.690.214 I llama_new_context_with_model: freq_base  = 10000.0
0.00.690.215 I llama_new_context_with_model: freq_scale = 1
0.00.721.204 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.721.247 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.721.389 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.722.805 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.722.811 I llama_new_context_with_model: graph nodes  = 601
0.00.722.812 I llama_new_context_with_model: graph splits = 1
0.00.722.827 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.300 I main: llama threadpool init, n_threads = 4
0.01.335.311 I 
0.01.335.404 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.411 I 
0.01.335.580 I sampler seed: 488401837
0.01.335.593 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.335.600 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.335.602 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.335.602 I 
 increably.

I am unable to generate a response because the provided text contains offensive and inappropriate language. [end of text]


0.10.618.380 I llama_perf_sampler_print:    sampling time =      33.82 ms /    23 runs   (    1.47 ms per token,   680.03 tokens per second)
0.10.618.383 I llama_perf_context_print:        load time =    1332.38 ms
0.10.618.385 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.618.396 I llama_perf_context_print:        eval time =    9225.71 ms /    22 runs   (  419.35 ms per token,     2.38 tokens per second)
0.10.618.397 I llama_perf_context_print:       total time =    9283.09 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.637 I build: 3827 (7691654c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.025.154 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.246 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.259 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.261 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.265 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.269 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.270 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.271 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.271 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.272 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.278 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.279 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.280 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.281 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.282 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.096.024 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.537 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.903 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.912 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.913 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.914 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.915 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.916 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.917 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.921 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.922 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.923 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.923 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.924 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.934 I llama_model_loader: - type  f32:   37 tensors
0.00.197.938 I llama_model_loader: - type q8_0:  127 tensors
0.00.492.374 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.427 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.507 I llm_load_vocab: special tokens cache size = 5
0.00.575.754 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.575.812 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.575.813 I llm_load_print_meta: arch             = gemma
0.00.575.813 I llm_load_print_meta: vocab type       = SPM
0.00.575.815 I llm_load_print_meta: n_vocab          = 256000
0.00.575.817 I llm_load_print_meta: n_merges         = 0
0.00.575.818 I llm_load_print_meta: vocab_only       = 0
0.00.575.819 I llm_load_print_meta: n_ctx_train      = 8192
0.00.575.819 I llm_load_print_meta: n_embd           = 2048
0.00.575.819 I llm_load_print_meta: n_layer          = 18
0.00.575.853 I llm_load_print_meta: n_head           = 8
0.00.575.861 I llm_load_print_meta: n_head_kv        = 1
0.00.575.862 I llm_load_print_meta: n_rot            = 256
0.00.575.862 I llm_load_print_meta: n_swa            = 0
0.00.575.862 I llm_load_print_meta: n_embd_head_k    = 256
0.00.575.863 I llm_load_print_meta: n_embd_head_v    = 256
0.00.575.867 I llm_load_print_meta: n_gqa            = 8
0.00.575.872 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.575.877 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.575.878 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.575.879 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.575.880 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.575.880 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.575.880 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.575.885 I llm_load_print_meta: n_ff             = 16384
0.00.575.886 I llm_load_print_meta: n_expert         = 0
0.00.575.886 I llm_load_print_meta: n_expert_used    = 0
0.00.575.888 I llm_load_print_meta: causal attn      = 1
0.00.575.888 I llm_load_print_meta: pooling type     = 0
0.00.575.889 I llm_load_print_meta: rope type        = 2
0.00.575.890 I llm_load_print_meta: rope scaling     = linear
0.00.575.891 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.575.892 I llm_load_print_meta: freq_scale_train = 1
0.00.575.893 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.575.893 I llm_load_print_meta: rope_finetuned   = unknown
0.00.575.894 I llm_load_print_meta: ssm_d_conv       = 0
0.00.575.894 I llm_load_print_meta: ssm_d_inner      = 0
0.00.575.894 I llm_load_print_meta: ssm_d_state      = 0
0.00.575.895 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.575.896 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.575.897 I llm_load_print_meta: model type       = 2B
0.00.575.898 I llm_load_print_meta: model ftype      = Q8_0
0.00.575.898 I llm_load_print_meta: model params     = 2.51 B
0.00.575.900 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.575.901 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.575.901 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.575.902 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.575.913 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.575.914 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.575.919 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.575.919 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.575.925 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.575.927 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.575.939 I llm_load_print_meta: max token length = 93
0.00.576.122 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.670.837 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.676.485 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.491 I llama_new_context_with_model: n_batch    = 2048
0.00.676.492 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.492 I llama_new_context_with_model: flash_attn = 0
0.00.676.494 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.495 I llama_new_context_with_model: freq_scale = 1
0.00.705.769 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.811 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.705.921 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.707.300 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.707.306 I llama_new_context_with_model: graph nodes  = 601
0.00.707.306 I llama_new_context_with_model: graph splits = 1
0.00.707.323 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.318.824 I main: llama threadpool init, n_threads = 4
0.01.318.835 I 
0.01.318.925 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.929 I 
0.01.319.091 I sampler seed: 3103664848
0.01.319.102 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.319.107 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.319.108 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.319.108 I 
 increably! [end of text]


0.02.991.884 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   803.08 tokens per second)
0.02.991.886 I llama_perf_context_print:        load time =    1315.96 ms
0.02.991.906 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.991.908 I llama_perf_context_print:        eval time =    1660.55 ms /     4 runs   (  415.14 ms per token,     2.41 tokens per second)
0.02.991.909 I llama_perf_context_print:       total time =    1673.07 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.671 I build: 3827 (7691654c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.878 I main: llama backend init
0.00.002.823 I main: load the model and apply lora adapter, if any
0.00.024.876 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.083 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.178 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.190 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.191 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.196 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.201 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.201 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.202 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.203 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.204 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.211 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.212 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.213 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.214 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.215 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.477 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.227 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.713 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.721 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.721 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.722 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.723 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.724 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.725 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.728 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.729 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.730 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.731 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.197.732 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.739 I llama_model_loader: - type  f32:   37 tensors
0.00.197.744 I llama_model_loader: - type q8_0:  127 tensors
0.00.484.951 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.892 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.964 I llm_load_vocab: special tokens cache size = 5
0.00.568.081 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.568.144 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.568.148 I llm_load_print_meta: arch             = gemma
0.00.568.149 I llm_load_print_meta: vocab type       = SPM
0.00.568.150 I llm_load_print_meta: n_vocab          = 256000
0.00.568.152 I llm_load_print_meta: n_merges         = 0
0.00.568.152 I llm_load_print_meta: vocab_only       = 0
0.00.568.153 I llm_load_print_meta: n_ctx_train      = 8192
0.00.568.153 I llm_load_print_meta: n_embd           = 2048
0.00.568.153 I llm_load_print_meta: n_layer          = 18
0.00.568.189 I llm_load_print_meta: n_head           = 8
0.00.568.198 I llm_load_print_meta: n_head_kv        = 1
0.00.568.198 I llm_load_print_meta: n_rot            = 256
0.00.568.199 I llm_load_print_meta: n_swa            = 0
0.00.568.199 I llm_load_print_meta: n_embd_head_k    = 256
0.00.568.199 I llm_load_print_meta: n_embd_head_v    = 256
0.00.568.204 I llm_load_print_meta: n_gqa            = 8
0.00.568.209 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.568.215 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.568.215 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.568.219 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.568.220 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.568.220 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.568.221 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.568.226 I llm_load_print_meta: n_ff             = 16384
0.00.568.226 I llm_load_print_meta: n_expert         = 0
0.00.568.227 I llm_load_print_meta: n_expert_used    = 0
0.00.568.227 I llm_load_print_meta: causal attn      = 1
0.00.568.228 I llm_load_print_meta: pooling type     = 0
0.00.568.228 I llm_load_print_meta: rope type        = 2
0.00.568.229 I llm_load_print_meta: rope scaling     = linear
0.00.568.231 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.568.231 I llm_load_print_meta: freq_scale_train = 1
0.00.568.232 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.568.233 I llm_load_print_meta: rope_finetuned   = unknown
0.00.568.233 I llm_load_print_meta: ssm_d_conv       = 0
0.00.568.234 I llm_load_print_meta: ssm_d_inner      = 0
0.00.568.234 I llm_load_print_meta: ssm_d_state      = 0
0.00.568.244 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.568.245 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.568.246 I llm_load_print_meta: model type       = 2B
0.00.568.248 I llm_load_print_meta: model ftype      = Q8_0
0.00.568.248 I llm_load_print_meta: model params     = 2.51 B
0.00.568.250 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.568.250 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.568.251 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.568.252 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.568.252 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.568.253 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.568.254 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.568.254 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.568.260 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.568.261 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.568.264 I llm_load_print_meta: max token length = 93
0.00.568.439 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.645.317 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.645.325 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.645.326 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.645.327 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.645.327 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.645.328 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.650.896 I llama_new_context_with_model: n_ctx      = 8192
0.00.650.903 I llama_new_context_with_model: n_batch    = 2048
0.00.650.903 I llama_new_context_with_model: n_ubatch   = 512
0.00.650.904 I llama_new_context_with_model: flash_attn = 0
0.00.650.907 I llama_new_context_with_model: freq_base  = 10000.0
0.00.650.908 I llama_new_context_with_model: freq_scale = 1
0.00.681.084 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.681.124 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.681.234 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.682.633 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.682.639 I llama_new_context_with_model: graph nodes  = 601
0.00.682.640 I llama_new_context_with_model: graph splits = 1
0.00.682.655 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.303.625 I main: llama threadpool init, n_threads = 4
0.01.303.636 I 
0.01.303.732 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.303.736 I 
0.01.303.900 I sampler seed: 1896639168
0.01.303.911 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.303.915 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.303.916 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.303.916 I 
 increasities

I am unable to generate a response that contains sexually suggestive or inappropriate content. My purpose is to assist with tasks and questions that are within the boundaries

0.14.940.139 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.61 tokens per second)
0.14.940.153 I llama_perf_context_print:        load time =    1300.70 ms
0.14.940.155 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.940.157 I llama_perf_context_print:        eval time =   13554.57 ms /    32 runs   (  423.58 ms per token,     2.36 tokens per second)
0.14.940.158 I llama_perf_context_print:       total time =   13636.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.637 I build: 3827 (7691654c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.024.665 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.870 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.958 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.969 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.970 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.974 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.975 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.976 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.977 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.978 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.979 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.986 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.991 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.992 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.993 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.994 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.054 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.833 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.288 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.295 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.296 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.297 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.298 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.299 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.300 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.303 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.304 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.305 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.306 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.197.307 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.314 I llama_model_loader: - type  f32:   37 tensors
0.00.197.318 I llama_model_loader: - type q8_0:  127 tensors
0.00.481.081 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.854 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.895 I llm_load_vocab: special tokens cache size = 5
0.00.563.322 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.563.377 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.563.378 I llm_load_print_meta: arch             = gemma
0.00.563.379 I llm_load_print_meta: vocab type       = SPM
0.00.563.380 I llm_load_print_meta: n_vocab          = 256000
0.00.563.382 I llm_load_print_meta: n_merges         = 0
0.00.563.382 I llm_load_print_meta: vocab_only       = 0
0.00.563.383 I llm_load_print_meta: n_ctx_train      = 8192
0.00.563.383 I llm_load_print_meta: n_embd           = 2048
0.00.563.383 I llm_load_print_meta: n_layer          = 18
0.00.563.416 I llm_load_print_meta: n_head           = 8
0.00.563.423 I llm_load_print_meta: n_head_kv        = 1
0.00.563.423 I llm_load_print_meta: n_rot            = 256
0.00.563.424 I llm_load_print_meta: n_swa            = 0
0.00.563.425 I llm_load_print_meta: n_embd_head_k    = 256
0.00.563.425 I llm_load_print_meta: n_embd_head_v    = 256
0.00.563.430 I llm_load_print_meta: n_gqa            = 8
0.00.563.435 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.563.440 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.563.441 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.563.442 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.563.442 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.563.443 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.563.443 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.563.449 I llm_load_print_meta: n_ff             = 16384
0.00.563.450 I llm_load_print_meta: n_expert         = 0
0.00.563.450 I llm_load_print_meta: n_expert_used    = 0
0.00.563.451 I llm_load_print_meta: causal attn      = 1
0.00.563.452 I llm_load_print_meta: pooling type     = 0
0.00.563.452 I llm_load_print_meta: rope type        = 2
0.00.563.453 I llm_load_print_meta: rope scaling     = linear
0.00.563.454 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.563.455 I llm_load_print_meta: freq_scale_train = 1
0.00.563.455 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.563.456 I llm_load_print_meta: rope_finetuned   = unknown
0.00.563.456 I llm_load_print_meta: ssm_d_conv       = 0
0.00.563.457 I llm_load_print_meta: ssm_d_inner      = 0
0.00.563.457 I llm_load_print_meta: ssm_d_state      = 0
0.00.563.457 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.563.458 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.563.459 I llm_load_print_meta: model type       = 2B
0.00.563.459 I llm_load_print_meta: model ftype      = Q8_0
0.00.563.460 I llm_load_print_meta: model params     = 2.51 B
0.00.563.461 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.563.462 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.563.462 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.563.463 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.563.464 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.563.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.563.465 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.563.465 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.563.471 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.563.474 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.563.474 I llm_load_print_meta: max token length = 93
0.00.563.652 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.634.556 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.634.567 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.640.311 I llama_new_context_with_model: n_ctx      = 8192
0.00.640.319 I llama_new_context_with_model: n_batch    = 2048
0.00.640.320 I llama_new_context_with_model: n_ubatch   = 512
0.00.640.320 I llama_new_context_with_model: flash_attn = 0
0.00.640.323 I llama_new_context_with_model: freq_base  = 10000.0
0.00.640.323 I llama_new_context_with_model: freq_scale = 1
0.00.669.912 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.669.956 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.670.074 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.671.477 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.671.484 I llama_new_context_with_model: graph nodes  = 601
0.00.671.485 I llama_new_context_with_model: graph splits = 1
0.00.671.502 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.284.079 I main: llama threadpool init, n_threads = 4
0.01.284.090 I 
0.01.284.186 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.284.191 I 
0.01.284.367 I sampler seed: 1316804127
0.01.284.378 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.284.382 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.284.383 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.284.384 I 
 increasities on the surface of Mars.

The Curiosity rover, currently exploring Mars, discovered evidence of ancient lakes or ponds on Mars, suggesting the possibility of past

0.14.922.933 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.09 tokens per second)
0.14.922.937 I llama_perf_context_print:        load time =    1281.17 ms
0.14.922.939 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.922.941 I llama_perf_context_print:        eval time =   13556.48 ms /    32 runs   (  423.64 ms per token,     2.36 tokens per second)
0.14.922.942 I llama_perf_context_print:       total time =   13638.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m53.091s
user	2m45.380s
sys	0m9.437s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3827 (7691654c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199741.80 ms
main:    total time = 199741.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.629 I build: 3827 (7691654c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.024.550 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.734 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.819 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.829 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.830 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.842 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.843 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.844 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.845 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.846 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.854 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.861 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.862 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.874 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.878 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.879 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.723 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.213 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.564 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.570 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.571 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.572 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.572 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.573 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.574 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.578 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.579 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.580 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.581 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.582 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.589 I llama_model_loader: - type  f32:   37 tensors
0.00.196.593 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.594 I llama_model_loader: - type q6_K:   19 tensors
0.00.472.190 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.866 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.852 I llm_load_vocab: special tokens cache size = 5
0.00.556.122 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.556.177 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.556.178 I llm_load_print_meta: arch             = gemma
0.00.556.178 I llm_load_print_meta: vocab type       = SPM
0.00.556.179 I llm_load_print_meta: n_vocab          = 256000
0.00.556.182 I llm_load_print_meta: n_merges         = 0
0.00.556.182 I llm_load_print_meta: vocab_only       = 0
0.00.556.183 I llm_load_print_meta: n_ctx_train      = 8192
0.00.556.183 I llm_load_print_meta: n_embd           = 2048
0.00.556.183 I llm_load_print_meta: n_layer          = 18
0.00.556.218 I llm_load_print_meta: n_head           = 8
0.00.556.225 I llm_load_print_meta: n_head_kv        = 1
0.00.556.226 I llm_load_print_meta: n_rot            = 256
0.00.556.226 I llm_load_print_meta: n_swa            = 0
0.00.556.226 I llm_load_print_meta: n_embd_head_k    = 256
0.00.556.227 I llm_load_print_meta: n_embd_head_v    = 256
0.00.556.231 I llm_load_print_meta: n_gqa            = 8
0.00.556.236 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.556.241 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.556.242 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.556.243 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.556.244 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.556.244 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.556.244 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.556.249 I llm_load_print_meta: n_ff             = 16384
0.00.556.250 I llm_load_print_meta: n_expert         = 0
0.00.556.250 I llm_load_print_meta: n_expert_used    = 0
0.00.556.250 I llm_load_print_meta: causal attn      = 1
0.00.556.251 I llm_load_print_meta: pooling type     = 0
0.00.556.251 I llm_load_print_meta: rope type        = 2
0.00.556.252 I llm_load_print_meta: rope scaling     = linear
0.00.556.253 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.556.254 I llm_load_print_meta: freq_scale_train = 1
0.00.556.254 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.556.254 I llm_load_print_meta: rope_finetuned   = unknown
0.00.556.254 I llm_load_print_meta: ssm_d_conv       = 0
0.00.556.255 I llm_load_print_meta: ssm_d_inner      = 0
0.00.556.255 I llm_load_print_meta: ssm_d_state      = 0
0.00.556.255 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.556.256 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.556.256 I llm_load_print_meta: model type       = 2B
0.00.556.257 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.556.258 I llm_load_print_meta: model params     = 2.51 B
0.00.556.258 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.556.259 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.556.259 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.556.260 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.556.260 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.556.260 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.556.261 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.556.261 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.556.266 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.556.268 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.556.269 I llm_load_print_meta: max token length = 93
0.00.556.442 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.616.073 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.616.085 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.616.086 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.616.086 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.616.087 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.616.088 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.621.548 I llama_new_context_with_model: n_ctx      = 8192
0.00.621.555 I llama_new_context_with_model: n_batch    = 2048
0.00.621.555 I llama_new_context_with_model: n_ubatch   = 512
0.00.621.556 I llama_new_context_with_model: flash_attn = 0
0.00.621.558 I llama_new_context_with_model: freq_base  = 10000.0
0.00.621.559 I llama_new_context_with_model: freq_scale = 1
0.00.651.199 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.651.238 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.651.346 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.652.678 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.652.683 I llama_new_context_with_model: graph nodes  = 601
0.00.652.684 I llama_new_context_with_model: graph splits = 1
0.00.652.699 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.235.711 I main: llama threadpool init, n_threads = 4
0.01.235.723 I 
0.01.235.814 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.235.817 I 
0.01.235.981 I sampler seed: 2640501838
0.01.235.991 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.235.996 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.235.997 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.235.997 I 
 squaRED by the sun. The sun shines brightly in the sky, casting a warm glow and illuminating the flowers and trees. The birds sing sweetly in the trees

0.12.185.103 I llama_perf_sampler_print:    sampling time =      49.19 ms /    33 runs   (    1.49 ms per token,   670.81 tokens per second)
0.12.185.106 I llama_perf_context_print:        load time =    1232.85 ms
0.12.185.108 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.185.112 I llama_perf_context_print:        eval time =   10867.08 ms /    32 runs   (  339.60 ms per token,     2.94 tokens per second)
0.12.185.113 I llama_perf_context_print:       total time =   10949.40 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3827 (7691654c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199193.81 ms
main:    total time = 199193.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.626 I build: 3827 (7691654c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.803 I main: load the model and apply lora adapter, if any
0.00.024.810 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.915 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.931 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.936 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.942 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.943 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.945 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.947 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.956 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.958 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.966 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.968 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.969 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.970 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.972 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.509 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.086 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.096 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.097 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.099 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.101 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.104 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.119 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.131 I llama_model_loader: - type  f32:   37 tensors
0.00.198.137 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.138 I llama_model_loader: - type q6_K:   19 tensors
0.00.493.311 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.128 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.167 I llm_load_vocab: special tokens cache size = 5
0.00.579.604 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.579.666 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.579.667 I llm_load_print_meta: arch             = gemma
0.00.579.668 I llm_load_print_meta: vocab type       = SPM
0.00.579.669 I llm_load_print_meta: n_vocab          = 256000
0.00.579.671 I llm_load_print_meta: n_merges         = 0
0.00.579.672 I llm_load_print_meta: vocab_only       = 0
0.00.579.672 I llm_load_print_meta: n_ctx_train      = 8192
0.00.579.673 I llm_load_print_meta: n_embd           = 2048
0.00.579.673 I llm_load_print_meta: n_layer          = 18
0.00.579.709 I llm_load_print_meta: n_head           = 8
0.00.579.716 I llm_load_print_meta: n_head_kv        = 1
0.00.579.717 I llm_load_print_meta: n_rot            = 256
0.00.579.717 I llm_load_print_meta: n_swa            = 0
0.00.579.717 I llm_load_print_meta: n_embd_head_k    = 256
0.00.579.718 I llm_load_print_meta: n_embd_head_v    = 256
0.00.579.722 I llm_load_print_meta: n_gqa            = 8
0.00.579.727 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.579.732 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.579.733 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.579.735 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.579.735 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.579.735 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.579.736 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.579.742 I llm_load_print_meta: n_ff             = 16384
0.00.579.743 I llm_load_print_meta: n_expert         = 0
0.00.579.743 I llm_load_print_meta: n_expert_used    = 0
0.00.579.743 I llm_load_print_meta: causal attn      = 1
0.00.579.744 I llm_load_print_meta: pooling type     = 0
0.00.579.744 I llm_load_print_meta: rope type        = 2
0.00.579.745 I llm_load_print_meta: rope scaling     = linear
0.00.579.746 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.579.747 I llm_load_print_meta: freq_scale_train = 1
0.00.579.747 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.579.747 I llm_load_print_meta: rope_finetuned   = unknown
0.00.579.748 I llm_load_print_meta: ssm_d_conv       = 0
0.00.579.748 I llm_load_print_meta: ssm_d_inner      = 0
0.00.579.748 I llm_load_print_meta: ssm_d_state      = 0
0.00.579.748 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.579.749 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.579.750 I llm_load_print_meta: model type       = 2B
0.00.579.751 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.579.751 I llm_load_print_meta: model params     = 2.51 B
0.00.579.752 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.579.752 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.579.753 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.579.753 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.579.754 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.579.754 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.579.754 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.579.755 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.579.761 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.579.764 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.579.764 I llm_load_print_meta: max token length = 93
0.00.579.965 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.638.610 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.644.371 I llama_new_context_with_model: n_ctx      = 8192
0.00.644.379 I llama_new_context_with_model: n_batch    = 2048
0.00.644.379 I llama_new_context_with_model: n_ubatch   = 512
0.00.644.380 I llama_new_context_with_model: flash_attn = 0
0.00.644.383 I llama_new_context_with_model: freq_base  = 10000.0
0.00.644.383 I llama_new_context_with_model: freq_scale = 1
0.00.676.052 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.676.101 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.676.213 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.677.591 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.677.598 I llama_new_context_with_model: graph nodes  = 601
0.00.677.599 I llama_new_context_with_model: graph splits = 1
0.00.677.616 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.256.366 I main: llama threadpool init, n_threads = 4
0.01.256.377 I 
0.01.256.481 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.256.485 I 
0.01.256.664 I sampler seed: 4176246898
0.01.256.675 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.256.680 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.256.682 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.256.683 I 
 seconded.

I understand that the question is requesting clarification on the meaning of a sentence. However, without additional context or information, I am unable to provide

0.12.162.316 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.37 tokens per second)
0.12.162.329 I llama_perf_context_print:        load time =    1253.48 ms
0.12.162.331 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.162.333 I llama_perf_context_print:        eval time =   10823.56 ms /    32 runs   (  338.24 ms per token,     2.96 tokens per second)
0.12.162.334 I llama_perf_context_print:       total time =   10905.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.079s
user	50m21.937s
sys	0m6.511s
