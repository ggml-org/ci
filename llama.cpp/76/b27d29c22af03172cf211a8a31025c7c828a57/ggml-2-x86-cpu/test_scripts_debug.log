+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4209 (76b27d29) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.871 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.023.742 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.754 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.845 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.857 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.859 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.867 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.871 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.873 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.874 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.876 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.878 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.888 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.890 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.891 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.893 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.895 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.741 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.398 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.217 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.227 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.229 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.230 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.232 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.233 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.235 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.239 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.240 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.242 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.243 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.245 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.253 I llama_model_loader: - type  f32:   37 tensors
0.00.349.256 I llama_model_loader: - type q8_0:  127 tensors
0.00.579.158 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.428 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.383 I llm_load_vocab: special tokens cache size = 5
0.00.824.772 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.824.847 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.824.851 I llm_load_print_meta: arch             = gemma
0.00.824.852 I llm_load_print_meta: vocab type       = SPM
0.00.824.852 I llm_load_print_meta: n_vocab          = 256000
0.00.824.855 I llm_load_print_meta: n_merges         = 0
0.00.824.855 I llm_load_print_meta: vocab_only       = 0
0.00.824.855 I llm_load_print_meta: n_ctx_train      = 8192
0.00.824.856 I llm_load_print_meta: n_embd           = 2048
0.00.824.856 I llm_load_print_meta: n_layer          = 18
0.00.824.922 I llm_load_print_meta: n_head           = 8
0.00.824.932 I llm_load_print_meta: n_head_kv        = 1
0.00.824.932 I llm_load_print_meta: n_rot            = 256
0.00.824.933 I llm_load_print_meta: n_swa            = 0
0.00.824.934 I llm_load_print_meta: n_embd_head_k    = 256
0.00.824.934 I llm_load_print_meta: n_embd_head_v    = 256
0.00.824.939 I llm_load_print_meta: n_gqa            = 8
0.00.824.944 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.824.951 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.824.952 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.824.954 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.824.954 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.824.954 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.824.955 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.824.960 I llm_load_print_meta: n_ff             = 16384
0.00.824.960 I llm_load_print_meta: n_expert         = 0
0.00.824.960 I llm_load_print_meta: n_expert_used    = 0
0.00.824.961 I llm_load_print_meta: causal attn      = 1
0.00.824.964 I llm_load_print_meta: pooling type     = 0
0.00.824.964 I llm_load_print_meta: rope type        = 2
0.00.824.965 I llm_load_print_meta: rope scaling     = linear
0.00.824.966 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.824.967 I llm_load_print_meta: freq_scale_train = 1
0.00.824.967 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.824.968 I llm_load_print_meta: rope_finetuned   = unknown
0.00.824.968 I llm_load_print_meta: ssm_d_conv       = 0
0.00.824.969 I llm_load_print_meta: ssm_d_inner      = 0
0.00.824.969 I llm_load_print_meta: ssm_d_state      = 0
0.00.824.970 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.824.971 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.824.972 I llm_load_print_meta: model type       = 2B
0.00.824.973 I llm_load_print_meta: model ftype      = Q8_0
0.00.824.975 I llm_load_print_meta: model params     = 2.51 B
0.00.824.984 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.824.985 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.824.986 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.824.987 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.824.988 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.824.988 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.824.989 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.824.991 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.825.005 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.825.007 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.825.007 I llm_load_print_meta: max token length = 93
0.00.926.526 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.926.537 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.926.538 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.926.539 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.926.539 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.926.540 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.932.562 I llama_new_context_with_model: n_seq_max     = 1
0.00.932.568 I llama_new_context_with_model: n_ctx         = 4096
0.00.932.569 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.932.569 I llama_new_context_with_model: n_batch       = 2048
0.00.932.570 I llama_new_context_with_model: n_ubatch      = 512
0.00.932.570 I llama_new_context_with_model: flash_attn    = 0
0.00.932.572 I llama_new_context_with_model: freq_base     = 10000.0
0.00.932.573 I llama_new_context_with_model: freq_scale    = 1
0.00.932.574 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.947.045 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.947.089 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.947.216 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.949.739 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.949.743 I llama_new_context_with_model: graph nodes  = 601
0.00.949.744 I llama_new_context_with_model: graph splits = 1
0.00.949.767 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.558.362 I main: llama threadpool init, n_threads = 4
0.01.558.380 I 
0.01.558.495 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.558.500 I 
0.01.558.733 I sampler seed: 857197226
0.01.558.746 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.558.758 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.558.759 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.558.760 I 
 increasities by using the following formula:

$$R = k(P)^{a}e^{-kP}$$

Where R is the relative abundance, P

0.15.140.513 I llama_perf_sampler_print:    sampling time =      48.95 ms /    33 runs   (    1.48 ms per token,   674.12 tokens per second)
0.15.140.517 I llama_perf_context_print:        load time =    1557.39 ms
0.15.140.519 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.140.521 I llama_perf_context_print:        eval time =   13493.05 ms /    32 runs   (  421.66 ms per token,     2.37 tokens per second)
0.15.140.522 I llama_perf_context_print:       total time =   13582.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 4209 (76b27d29) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.026.008 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.108 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.123 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.128 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.135 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.136 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.138 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.140 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.141 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.143 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.154 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.158 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.159 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.161 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.162 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.237.504 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.339.762 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.363.746 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.363.757 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.363.758 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.363.759 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.363.761 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.363.762 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.363.763 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.363.768 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.363.770 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.363.771 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.363.772 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.363.774 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.363.782 I llama_model_loader: - type  f32:   37 tensors
0.00.363.784 I llama_model_loader: - type q8_0:  127 tensors
0.00.596.675 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.662.561 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.663.572 I llm_load_vocab: special tokens cache size = 5
0.00.856.359 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.428 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.429 I llm_load_print_meta: arch             = gemma
0.00.856.430 I llm_load_print_meta: vocab type       = SPM
0.00.856.431 I llm_load_print_meta: n_vocab          = 256000
0.00.856.433 I llm_load_print_meta: n_merges         = 0
0.00.856.434 I llm_load_print_meta: vocab_only       = 0
0.00.856.434 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.435 I llm_load_print_meta: n_embd           = 2048
0.00.856.435 I llm_load_print_meta: n_layer          = 18
0.00.856.503 I llm_load_print_meta: n_head           = 8
0.00.856.510 I llm_load_print_meta: n_head_kv        = 1
0.00.856.511 I llm_load_print_meta: n_rot            = 256
0.00.856.512 I llm_load_print_meta: n_swa            = 0
0.00.856.512 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.513 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.517 I llm_load_print_meta: n_gqa            = 8
0.00.856.522 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.526 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.528 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.530 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.531 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.531 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.531 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.537 I llm_load_print_meta: n_ff             = 16384
0.00.856.537 I llm_load_print_meta: n_expert         = 0
0.00.856.538 I llm_load_print_meta: n_expert_used    = 0
0.00.856.538 I llm_load_print_meta: causal attn      = 1
0.00.856.538 I llm_load_print_meta: pooling type     = 0
0.00.856.542 I llm_load_print_meta: rope type        = 2
0.00.856.542 I llm_load_print_meta: rope scaling     = linear
0.00.856.544 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.544 I llm_load_print_meta: freq_scale_train = 1
0.00.856.545 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.545 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.545 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.546 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.546 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.558 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.559 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.559 I llm_load_print_meta: model type       = 2B
0.00.856.573 I llm_load_print_meta: model ftype      = Q8_0
0.00.856.576 I llm_load_print_meta: model params     = 2.51 B
0.00.856.585 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.856.585 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.586 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.586 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.587 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.587 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.587 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.588 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.595 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.596 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.599 I llm_load_print_meta: max token length = 93
0.00.952.063 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.957.924 I llama_new_context_with_model: n_seq_max     = 1
0.00.957.932 I llama_new_context_with_model: n_ctx         = 4096
0.00.957.932 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.957.932 I llama_new_context_with_model: n_batch       = 2048
0.00.957.933 I llama_new_context_with_model: n_ubatch      = 512
0.00.957.933 I llama_new_context_with_model: flash_attn    = 0
0.00.957.935 I llama_new_context_with_model: freq_base     = 10000.0
0.00.957.936 I llama_new_context_with_model: freq_scale    = 1
0.00.957.937 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.973.384 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.973.428 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.973.557 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.976.163 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.976.166 I llama_new_context_with_model: graph nodes  = 601
0.00.976.167 I llama_new_context_with_model: graph splits = 1
0.00.976.189 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.585.559 I main: llama threadpool init, n_threads = 4
0.01.585.574 I 
0.01.585.688 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.585.692 I 
0.01.585.925 I sampler seed: 3289747583
0.01.585.938 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.585.947 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.585.951 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.585.951 I 
 increably, and then turned to me, a weary wanderer with eyes that held the wisdom of ages. "Wanderer, what troubles you?"

I looked

0.15.194.475 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.61 tokens per second)
0.15.194.478 I llama_perf_context_print:        load time =    1584.59 ms
0.15.194.492 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.194.494 I llama_perf_context_print:        eval time =   13520.37 ms /    32 runs   (  422.51 ms per token,     2.37 tokens per second)
0.15.194.495 I llama_perf_context_print:       total time =   13608.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.740 I build: 4209 (76b27d29) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.944 I main: llama backend init
0.00.000.952 I main: load the model and apply lora adapter, if any
0.00.023.348 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.359 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.449 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.461 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.463 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.468 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.473 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.474 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.475 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.477 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.478 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.489 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.491 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.493 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.495 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.496 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.324.865 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.348.767 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.348.779 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.348.780 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.348.782 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.348.783 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.348.785 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.348.786 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.348.791 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.348.792 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.348.794 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.348.795 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.348.797 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.348.807 I llama_model_loader: - type  f32:   37 tensors
0.00.348.810 I llama_model_loader: - type q8_0:  127 tensors
0.00.580.519 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.645.487 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.646.484 I llm_load_vocab: special tokens cache size = 5
0.00.847.989 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.848.062 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.848.063 I llm_load_print_meta: arch             = gemma
0.00.848.063 I llm_load_print_meta: vocab type       = SPM
0.00.848.064 I llm_load_print_meta: n_vocab          = 256000
0.00.848.067 I llm_load_print_meta: n_merges         = 0
0.00.848.067 I llm_load_print_meta: vocab_only       = 0
0.00.848.067 I llm_load_print_meta: n_ctx_train      = 8192
0.00.848.068 I llm_load_print_meta: n_embd           = 2048
0.00.848.068 I llm_load_print_meta: n_layer          = 18
0.00.848.133 I llm_load_print_meta: n_head           = 8
0.00.848.140 I llm_load_print_meta: n_head_kv        = 1
0.00.848.141 I llm_load_print_meta: n_rot            = 256
0.00.848.141 I llm_load_print_meta: n_swa            = 0
0.00.848.142 I llm_load_print_meta: n_embd_head_k    = 256
0.00.848.142 I llm_load_print_meta: n_embd_head_v    = 256
0.00.848.147 I llm_load_print_meta: n_gqa            = 8
0.00.848.151 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.848.156 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.848.158 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.848.159 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.848.159 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.848.160 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.848.160 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.848.165 I llm_load_print_meta: n_ff             = 16384
0.00.848.165 I llm_load_print_meta: n_expert         = 0
0.00.848.165 I llm_load_print_meta: n_expert_used    = 0
0.00.848.166 I llm_load_print_meta: causal attn      = 1
0.00.848.166 I llm_load_print_meta: pooling type     = 0
0.00.848.166 I llm_load_print_meta: rope type        = 2
0.00.848.167 I llm_load_print_meta: rope scaling     = linear
0.00.848.168 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.848.169 I llm_load_print_meta: freq_scale_train = 1
0.00.848.169 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.848.170 I llm_load_print_meta: rope_finetuned   = unknown
0.00.848.170 I llm_load_print_meta: ssm_d_conv       = 0
0.00.848.170 I llm_load_print_meta: ssm_d_inner      = 0
0.00.848.170 I llm_load_print_meta: ssm_d_state      = 0
0.00.848.171 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.848.171 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.848.172 I llm_load_print_meta: model type       = 2B
0.00.848.172 I llm_load_print_meta: model ftype      = Q8_0
0.00.848.173 I llm_load_print_meta: model params     = 2.51 B
0.00.848.182 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.848.182 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.848.183 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.848.184 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.848.184 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.848.184 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.848.185 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.848.185 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.848.190 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.848.192 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.848.192 I llm_load_print_meta: max token length = 93
0.00.926.239 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.926.248 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.926.249 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.926.250 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.926.250 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.926.251 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.932.155 I llama_new_context_with_model: n_seq_max     = 1
0.00.932.164 I llama_new_context_with_model: n_ctx         = 4096
0.00.932.165 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.932.165 I llama_new_context_with_model: n_batch       = 2048
0.00.932.165 I llama_new_context_with_model: n_ubatch      = 512
0.00.932.166 I llama_new_context_with_model: flash_attn    = 0
0.00.932.169 I llama_new_context_with_model: freq_base     = 10000.0
0.00.932.170 I llama_new_context_with_model: freq_scale    = 1
0.00.932.171 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.947.117 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.947.159 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.947.306 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.949.891 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.949.896 I llama_new_context_with_model: graph nodes  = 601
0.00.949.897 I llama_new_context_with_model: graph splits = 1
0.00.949.921 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.641.142 I main: llama threadpool init, n_threads = 4
0.01.641.159 I 
0.01.641.293 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.641.297 I 
0.01.641.542 I sampler seed: 3693908712
0.01.641.555 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.641.567 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.641.568 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.641.568 I 
 maneuvously.

I am unable to generate a response due to the limitations imposed by the platform. [end of text]


0.11.014.904 I llama_perf_sampler_print:    sampling time =      33.82 ms /    23 runs   (    1.47 ms per token,   680.13 tokens per second)
0.11.014.921 I llama_perf_context_print:        load time =    1640.08 ms
0.11.014.923 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.014.937 I llama_perf_context_print:        eval time =    9311.58 ms /    22 runs   (  423.25 ms per token,     2.36 tokens per second)
0.11.014.939 I llama_perf_context_print:       total time =    9373.77 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 4209 (76b27d29) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.205 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.217 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.303 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.315 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.317 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.322 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.326 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.327 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.329 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.330 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.341 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.343 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.344 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.345 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.346 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.222.975 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.160 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.040 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.051 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.052 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.054 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.055 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.056 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.058 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.062 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.064 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.065 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.066 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.349.068 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.077 I llama_model_loader: - type  f32:   37 tensors
0.00.349.079 I llama_model_loader: - type q8_0:  127 tensors
0.00.577.196 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.853 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.776 I llm_load_vocab: special tokens cache size = 5
0.00.842.458 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.842.530 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.842.531 I llm_load_print_meta: arch             = gemma
0.00.842.532 I llm_load_print_meta: vocab type       = SPM
0.00.842.533 I llm_load_print_meta: n_vocab          = 256000
0.00.842.535 I llm_load_print_meta: n_merges         = 0
0.00.842.535 I llm_load_print_meta: vocab_only       = 0
0.00.842.536 I llm_load_print_meta: n_ctx_train      = 8192
0.00.842.536 I llm_load_print_meta: n_embd           = 2048
0.00.842.536 I llm_load_print_meta: n_layer          = 18
0.00.842.603 I llm_load_print_meta: n_head           = 8
0.00.842.611 I llm_load_print_meta: n_head_kv        = 1
0.00.842.611 I llm_load_print_meta: n_rot            = 256
0.00.842.613 I llm_load_print_meta: n_swa            = 0
0.00.842.613 I llm_load_print_meta: n_embd_head_k    = 256
0.00.842.614 I llm_load_print_meta: n_embd_head_v    = 256
0.00.842.619 I llm_load_print_meta: n_gqa            = 8
0.00.842.623 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.842.628 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.842.629 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.842.631 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.842.632 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.842.632 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.842.632 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.842.637 I llm_load_print_meta: n_ff             = 16384
0.00.842.638 I llm_load_print_meta: n_expert         = 0
0.00.842.650 I llm_load_print_meta: n_expert_used    = 0
0.00.842.651 I llm_load_print_meta: causal attn      = 1
0.00.842.652 I llm_load_print_meta: pooling type     = 0
0.00.842.664 I llm_load_print_meta: rope type        = 2
0.00.842.669 I llm_load_print_meta: rope scaling     = linear
0.00.842.670 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.842.671 I llm_load_print_meta: freq_scale_train = 1
0.00.842.671 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.842.672 I llm_load_print_meta: rope_finetuned   = unknown
0.00.842.672 I llm_load_print_meta: ssm_d_conv       = 0
0.00.842.681 I llm_load_print_meta: ssm_d_inner      = 0
0.00.842.682 I llm_load_print_meta: ssm_d_state      = 0
0.00.842.690 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.842.691 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.842.692 I llm_load_print_meta: model type       = 2B
0.00.842.693 I llm_load_print_meta: model ftype      = Q8_0
0.00.842.694 I llm_load_print_meta: model params     = 2.51 B
0.00.842.703 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.842.711 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.842.715 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.842.716 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.842.716 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.842.717 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.842.717 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.842.717 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.842.724 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.842.725 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.842.726 I llm_load_print_meta: max token length = 93
0.00.916.028 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.916.038 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.921.884 I llama_new_context_with_model: n_seq_max     = 1
0.00.921.890 I llama_new_context_with_model: n_ctx         = 4096
0.00.921.891 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.921.891 I llama_new_context_with_model: n_batch       = 2048
0.00.921.892 I llama_new_context_with_model: n_ubatch      = 512
0.00.921.892 I llama_new_context_with_model: flash_attn    = 0
0.00.921.895 I llama_new_context_with_model: freq_base     = 10000.0
0.00.921.896 I llama_new_context_with_model: freq_scale    = 1
0.00.921.897 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.936.444 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.936.486 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.936.625 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.939.243 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.939.247 I llama_new_context_with_model: graph nodes  = 601
0.00.939.247 I llama_new_context_with_model: graph splits = 1
0.00.939.270 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.548.086 I main: llama threadpool init, n_threads = 4
0.01.548.103 I 
0.01.548.214 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.548.218 I 
0.01.548.449 I sampler seed: 2319269941
0.01.548.462 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.472 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.476 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.476 I 
 increasities, and the evolution of our understanding of these phenomena.

## Exploring the Evolution of Understanding:

**Ancient Views:**

* Early cultures understood these

0.15.222.727 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.00 tokens per second)
0.15.222.730 I llama_perf_context_print:        load time =    1547.11 ms
0.15.222.732 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.222.745 I llama_perf_context_print:        eval time =   13585.62 ms /    32 runs   (  424.55 ms per token,     2.36 tokens per second)
0.15.222.747 I llama_perf_context_print:       total time =   13674.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.284s
user	3m34.901s
sys	0m9.395s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4209 (76b27d29)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186218.91 ms
main:    total time = 186218.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4209 (76b27d29) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.023.942 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.952 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.048 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.063 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.070 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.072 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.075 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.076 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.077 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.085 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.086 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.088 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.090 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.325.595 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.403 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.413 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.414 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.417 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.418 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.420 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.423 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.425 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.426 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.427 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.429 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.437 I llama_model_loader: - type  f32:   37 tensors
0.00.349.439 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.440 I llama_model_loader: - type q6_K:   19 tensors
0.00.573.255 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.640.306 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.641.358 I llm_load_vocab: special tokens cache size = 5
0.00.830.268 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.830.345 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.830.346 I llm_load_print_meta: arch             = gemma
0.00.830.346 I llm_load_print_meta: vocab type       = SPM
0.00.830.348 I llm_load_print_meta: n_vocab          = 256000
0.00.830.350 I llm_load_print_meta: n_merges         = 0
0.00.830.350 I llm_load_print_meta: vocab_only       = 0
0.00.830.351 I llm_load_print_meta: n_ctx_train      = 8192
0.00.830.351 I llm_load_print_meta: n_embd           = 2048
0.00.830.351 I llm_load_print_meta: n_layer          = 18
0.00.830.419 I llm_load_print_meta: n_head           = 8
0.00.830.427 I llm_load_print_meta: n_head_kv        = 1
0.00.830.427 I llm_load_print_meta: n_rot            = 256
0.00.830.428 I llm_load_print_meta: n_swa            = 0
0.00.830.428 I llm_load_print_meta: n_embd_head_k    = 256
0.00.830.428 I llm_load_print_meta: n_embd_head_v    = 256
0.00.830.433 I llm_load_print_meta: n_gqa            = 8
0.00.830.438 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.830.443 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.830.444 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.830.446 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.830.447 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.830.448 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.830.448 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.830.453 I llm_load_print_meta: n_ff             = 16384
0.00.830.453 I llm_load_print_meta: n_expert         = 0
0.00.830.454 I llm_load_print_meta: n_expert_used    = 0
0.00.830.454 I llm_load_print_meta: causal attn      = 1
0.00.830.455 I llm_load_print_meta: pooling type     = 0
0.00.830.455 I llm_load_print_meta: rope type        = 2
0.00.830.455 I llm_load_print_meta: rope scaling     = linear
0.00.830.457 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.830.457 I llm_load_print_meta: freq_scale_train = 1
0.00.830.458 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.830.459 I llm_load_print_meta: rope_finetuned   = unknown
0.00.830.459 I llm_load_print_meta: ssm_d_conv       = 0
0.00.830.460 I llm_load_print_meta: ssm_d_inner      = 0
0.00.830.460 I llm_load_print_meta: ssm_d_state      = 0
0.00.830.460 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.830.460 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.830.461 I llm_load_print_meta: model type       = 2B
0.00.830.466 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.830.467 I llm_load_print_meta: model params     = 2.51 B
0.00.830.478 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.830.479 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.830.479 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.830.480 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.830.481 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.830.481 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.830.482 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.830.482 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.830.488 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.830.490 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.830.490 I llm_load_print_meta: max token length = 93
0.00.892.651 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.892.658 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.892.659 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.892.660 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.892.661 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.892.661 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.898.516 I llama_new_context_with_model: n_seq_max     = 1
0.00.898.524 I llama_new_context_with_model: n_ctx         = 4096
0.00.898.524 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.898.525 I llama_new_context_with_model: n_batch       = 2048
0.00.898.525 I llama_new_context_with_model: n_ubatch      = 512
0.00.898.526 I llama_new_context_with_model: flash_attn    = 0
0.00.898.528 I llama_new_context_with_model: freq_base     = 10000.0
0.00.898.528 I llama_new_context_with_model: freq_scale    = 1
0.00.898.529 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.913.005 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.913.048 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.913.169 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.915.713 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.915.719 I llama_new_context_with_model: graph nodes  = 601
0.00.915.719 I llama_new_context_with_model: graph splits = 1
0.00.915.741 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.496.914 I main: llama threadpool init, n_threads = 4
0.01.496.931 I 
0.01.497.047 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.497.051 I 
0.01.497.289 I sampler seed: 2830475562
0.01.497.302 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.497.311 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.497.315 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.497.315 I 
 seconally, but the man was still standing.

**Meaning:**

The man remained standing despite being overtaken by a wave of surprise.

**Explanation:**

0.12.615.800 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.74 tokens per second)
0.12.615.803 I llama_perf_context_print:        load time =    1495.96 ms
0.12.615.805 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.615.806 I llama_perf_context_print:        eval time =   11029.45 ms /    32 runs   (  344.67 ms per token,     2.90 tokens per second)
0.12.615.807 I llama_perf_context_print:       total time =   11118.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4209 (76b27d29)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186312.80 ms
main:    total time = 186312.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.669 I build: 4209 (76b27d29) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.023.546 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.650 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.666 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.669 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.675 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.679 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.681 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.682 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.683 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.684 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.695 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.697 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.698 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.700 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.701 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.232.975 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.334.651 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.358.557 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.358.567 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.358.569 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.358.570 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.358.571 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.358.574 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.358.576 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.358.580 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.358.582 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.358.590 I llama_model_loader: - type  f32:   37 tensors
0.00.358.592 I llama_model_loader: - type q4_K:  108 tensors
0.00.358.593 I llama_model_loader: - type q6_K:   19 tensors
0.00.577.431 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.635.092 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.636.019 I llm_load_vocab: special tokens cache size = 5
0.00.832.785 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.832.859 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.832.860 I llm_load_print_meta: arch             = gemma
0.00.832.861 I llm_load_print_meta: vocab type       = SPM
0.00.832.862 I llm_load_print_meta: n_vocab          = 256000
0.00.832.864 I llm_load_print_meta: n_merges         = 0
0.00.832.865 I llm_load_print_meta: vocab_only       = 0
0.00.832.865 I llm_load_print_meta: n_ctx_train      = 8192
0.00.832.866 I llm_load_print_meta: n_embd           = 2048
0.00.832.866 I llm_load_print_meta: n_layer          = 18
0.00.832.929 I llm_load_print_meta: n_head           = 8
0.00.832.937 I llm_load_print_meta: n_head_kv        = 1
0.00.832.939 I llm_load_print_meta: n_rot            = 256
0.00.832.939 I llm_load_print_meta: n_swa            = 0
0.00.832.940 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.946 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.951 I llm_load_print_meta: n_gqa            = 8
0.00.832.956 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.961 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.962 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.964 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.966 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.966 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.971 I llm_load_print_meta: n_ff             = 16384
0.00.832.972 I llm_load_print_meta: n_expert         = 0
0.00.832.972 I llm_load_print_meta: n_expert_used    = 0
0.00.832.972 I llm_load_print_meta: causal attn      = 1
0.00.832.973 I llm_load_print_meta: pooling type     = 0
0.00.832.973 I llm_load_print_meta: rope type        = 2
0.00.832.974 I llm_load_print_meta: rope scaling     = linear
0.00.832.975 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.976 I llm_load_print_meta: freq_scale_train = 1
0.00.832.976 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.977 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.977 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.977 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.981 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.981 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.981 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.982 I llm_load_print_meta: model type       = 2B
0.00.832.983 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.832.984 I llm_load_print_meta: model params     = 2.51 B
0.00.832.994 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.832.995 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.996 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.996 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.833.010 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.833.013 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.833.013 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.833.014 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.833.020 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.833.022 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.833.022 I llm_load_print_meta: max token length = 93
0.00.890.910 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.896.934 I llama_new_context_with_model: n_seq_max     = 1
0.00.896.942 I llama_new_context_with_model: n_ctx         = 4096
0.00.896.942 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.896.943 I llama_new_context_with_model: n_batch       = 2048
0.00.896.943 I llama_new_context_with_model: n_ubatch      = 512
0.00.896.944 I llama_new_context_with_model: flash_attn    = 0
0.00.896.947 I llama_new_context_with_model: freq_base     = 10000.0
0.00.896.948 I llama_new_context_with_model: freq_scale    = 1
0.00.896.949 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.912.992 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.913.039 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.913.166 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.915.808 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.915.813 I llama_new_context_with_model: graph nodes  = 601
0.00.915.813 I llama_new_context_with_model: graph splits = 1
0.00.915.837 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.499.843 I main: llama threadpool init, n_threads = 4
0.01.499.860 I 
0.01.499.972 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.499.977 I 
0.01.500.209 I sampler seed: 4063840963
0.01.500.222 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.500.250 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.500.255 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.500.255 I 
 guaranteing the ability to enter a meditative state for extended periods of time.

**Method:**

1. **Mindfulness Meditation:** Practice mindfulness meditation for at

0.12.602.589 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.59 tokens per second)
0.12.602.593 I llama_perf_context_print:        load time =    1498.87 ms
0.12.602.594 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.602.596 I llama_perf_context_print:        eval time =   11013.39 ms /    32 runs   (  344.17 ms per token,     2.91 tokens per second)
0.12.602.596 I llama_perf_context_print:       total time =   11102.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.646s
user	46m41.836s
sys	0m6.383s
