+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.552 I build: 4227 (11b4d582) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.000.748 I main: load the model and apply lora adapter, if any
0.00.021.437 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.447 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.455 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.460 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.463 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.467 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.468 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.469 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.469 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.470 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.470 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.474 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.474 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.476 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.819 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.439 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.264 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.271 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.272 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.273 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.274 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.275 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.276 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.280 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.281 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.283 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.283 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.285 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.288 I llama_model_loader: - type  f32:   37 tensors
0.00.130.290 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.199 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.564 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.059 I llm_load_vocab: special tokens cache size = 5
0.00.262.974 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.990 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.990 I llm_load_print_meta: arch             = gemma
0.00.262.991 I llm_load_print_meta: vocab type       = SPM
0.00.262.991 I llm_load_print_meta: n_vocab          = 256000
0.00.262.992 I llm_load_print_meta: n_merges         = 0
0.00.262.993 I llm_load_print_meta: vocab_only       = 0
0.00.262.993 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.993 I llm_load_print_meta: n_embd           = 2048
0.00.262.993 I llm_load_print_meta: n_layer          = 18
0.00.263.003 I llm_load_print_meta: n_head           = 8
0.00.263.004 I llm_load_print_meta: n_head_kv        = 1
0.00.263.004 I llm_load_print_meta: n_rot            = 256
0.00.263.005 I llm_load_print_meta: n_swa            = 0
0.00.263.005 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.005 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.006 I llm_load_print_meta: n_gqa            = 8
0.00.263.007 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.008 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.009 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.010 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.011 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.011 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.011 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.012 I llm_load_print_meta: n_ff             = 16384
0.00.263.013 I llm_load_print_meta: n_expert         = 0
0.00.263.013 I llm_load_print_meta: n_expert_used    = 0
0.00.263.013 I llm_load_print_meta: causal attn      = 1
0.00.263.013 I llm_load_print_meta: pooling type     = 0
0.00.263.014 I llm_load_print_meta: rope type        = 2
0.00.263.014 I llm_load_print_meta: rope scaling     = linear
0.00.263.015 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.016 I llm_load_print_meta: freq_scale_train = 1
0.00.263.016 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.016 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.017 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.017 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.017 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.017 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.018 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.018 I llm_load_print_meta: model type       = 2B
0.00.263.019 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.019 I llm_load_print_meta: model params     = 2.51 B
0.00.263.020 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.021 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.021 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.021 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.022 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.022 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.022 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.023 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.023 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.023 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.024 I llm_load_print_meta: max token length = 93
0.00.365.853 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.862 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.863 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.863 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.864 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.865 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.043 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.049 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.049 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.050 I llama_new_context_with_model: n_batch       = 2048
0.00.371.050 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.051 I llama_new_context_with_model: flash_attn    = 0
0.00.371.053 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.054 I llama_new_context_with_model: freq_scale    = 1
0.00.371.055 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.243 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.258 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.349 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.668 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.675 I llama_new_context_with_model: graph nodes  = 601
0.00.386.675 I llama_new_context_with_model: graph splits = 1
0.00.386.677 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.475.450 I main: llama threadpool init, n_threads = 4
0.00.475.467 I 
0.00.475.542 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.475.545 I 
0.00.475.593 I sampler seed: 3344310770
0.00.475.603 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.475.607 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.475.607 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.475.610 I 
 increasements

I am unable to generate a response as the provided prompt contains potentially harmful and inappropriate content. [end of text]


0.02.022.748 I llama_perf_sampler_print:    sampling time =       3.25 ms /    23 runs   (    0.14 ms per token,  7068.22 tokens per second)
0.02.022.751 I llama_perf_context_print:        load time =     474.68 ms
0.02.022.753 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.022.755 I llama_perf_context_print:        eval time =    1533.80 ms /    22 runs   (   69.72 ms per token,    14.34 tokens per second)
0.02.022.757 I llama_perf_context_print:       total time =    1547.31 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.551 I build: 4227 (11b4d582) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.153 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.166 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.172 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.173 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.176 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.179 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.180 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.180 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.181 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.181 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.185 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.186 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.186 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.187 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.187 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.560 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.894 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.716 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.724 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.725 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.726 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.727 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.729 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.731 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.732 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.733 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.734 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.736 I llama_model_loader: - type  f32:   37 tensors
0.00.129.737 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.066 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.332 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.826 I llm_load_vocab: special tokens cache size = 5
0.00.259.608 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.623 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.623 I llm_load_print_meta: arch             = gemma
0.00.259.624 I llm_load_print_meta: vocab type       = SPM
0.00.259.624 I llm_load_print_meta: n_vocab          = 256000
0.00.259.625 I llm_load_print_meta: n_merges         = 0
0.00.259.625 I llm_load_print_meta: vocab_only       = 0
0.00.259.626 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.626 I llm_load_print_meta: n_embd           = 2048
0.00.259.626 I llm_load_print_meta: n_layer          = 18
0.00.259.637 I llm_load_print_meta: n_head           = 8
0.00.259.638 I llm_load_print_meta: n_head_kv        = 1
0.00.259.639 I llm_load_print_meta: n_rot            = 256
0.00.259.639 I llm_load_print_meta: n_swa            = 0
0.00.259.639 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.640 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.640 I llm_load_print_meta: n_gqa            = 8
0.00.259.641 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.642 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.643 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.645 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.645 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.646 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.646 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.647 I llm_load_print_meta: n_ff             = 16384
0.00.259.647 I llm_load_print_meta: n_expert         = 0
0.00.259.647 I llm_load_print_meta: n_expert_used    = 0
0.00.259.647 I llm_load_print_meta: causal attn      = 1
0.00.259.648 I llm_load_print_meta: pooling type     = 0
0.00.259.648 I llm_load_print_meta: rope type        = 2
0.00.259.648 I llm_load_print_meta: rope scaling     = linear
0.00.259.650 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.651 I llm_load_print_meta: freq_scale_train = 1
0.00.259.651 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.651 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.652 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.652 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.652 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.652 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.653 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.653 I llm_load_print_meta: model type       = 2B
0.00.259.653 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.654 I llm_load_print_meta: model params     = 2.51 B
0.00.259.655 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.655 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.656 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.656 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.656 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.657 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.657 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.658 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.658 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.659 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.659 I llm_load_print_meta: max token length = 93
0.00.352.203 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.357.315 I llama_new_context_with_model: n_seq_max     = 1
0.00.357.321 I llama_new_context_with_model: n_ctx         = 4096
0.00.357.321 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.357.322 I llama_new_context_with_model: n_batch       = 2048
0.00.357.322 I llama_new_context_with_model: n_ubatch      = 512
0.00.357.322 I llama_new_context_with_model: flash_attn    = 0
0.00.357.326 I llama_new_context_with_model: freq_base     = 10000.0
0.00.357.327 I llama_new_context_with_model: freq_scale    = 1
0.00.357.328 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.515 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.372.529 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.372.634 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.903 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.373.911 I llama_new_context_with_model: graph nodes  = 601
0.00.373.911 I llama_new_context_with_model: graph splits = 1
0.00.373.913 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.971 I main: llama threadpool init, n_threads = 4
0.00.453.987 I 
0.00.454.058 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.454.061 I 
0.00.454.103 I sampler seed: 4181218647
0.00.454.115 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.119 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.120 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.123 I 
 increasities, the rise of social media, and the impact of globalization.

Discuss how these factors are interconnected and have shaped the contemporary world.

**Inter

0.02.622.169 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7125.89 tokens per second)
0.02.622.172 I llama_perf_context_print:        load time =     453.19 ms
0.02.622.173 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.622.175 I llama_perf_context_print:        eval time =    2150.11 ms /    32 runs   (   67.19 ms per token,    14.88 tokens per second)
0.02.622.175 I llama_perf_context_print:       total time =    2168.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.530 I build: 4227 (11b4d582) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.020.981 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.991 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.998 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.002 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.003 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.006 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.006 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.007 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.008 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.008 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.008 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.012 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.012 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.013 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.013 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.014 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.630 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.482 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.258 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.265 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.266 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.267 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.267 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.268 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.269 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.272 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.273 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.274 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.274 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.275 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.278 I llama_model_loader: - type  f32:   37 tensors
0.00.130.279 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.859 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.155 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.649 I llm_load_vocab: special tokens cache size = 5
0.00.260.721 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.736 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.737 I llm_load_print_meta: arch             = gemma
0.00.260.737 I llm_load_print_meta: vocab type       = SPM
0.00.260.738 I llm_load_print_meta: n_vocab          = 256000
0.00.260.738 I llm_load_print_meta: n_merges         = 0
0.00.260.739 I llm_load_print_meta: vocab_only       = 0
0.00.260.739 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.739 I llm_load_print_meta: n_embd           = 2048
0.00.260.740 I llm_load_print_meta: n_layer          = 18
0.00.260.751 I llm_load_print_meta: n_head           = 8
0.00.260.752 I llm_load_print_meta: n_head_kv        = 1
0.00.260.752 I llm_load_print_meta: n_rot            = 256
0.00.260.752 I llm_load_print_meta: n_swa            = 0
0.00.260.753 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.753 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.754 I llm_load_print_meta: n_gqa            = 8
0.00.260.755 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.756 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.757 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.758 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.759 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.759 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.760 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.761 I llm_load_print_meta: n_ff             = 16384
0.00.260.761 I llm_load_print_meta: n_expert         = 0
0.00.260.761 I llm_load_print_meta: n_expert_used    = 0
0.00.260.761 I llm_load_print_meta: causal attn      = 1
0.00.260.762 I llm_load_print_meta: pooling type     = 0
0.00.260.762 I llm_load_print_meta: rope type        = 2
0.00.260.762 I llm_load_print_meta: rope scaling     = linear
0.00.260.764 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.765 I llm_load_print_meta: freq_scale_train = 1
0.00.260.765 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.765 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.766 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.766 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.766 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.767 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.767 I llm_load_print_meta: model type       = 2B
0.00.260.767 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.768 I llm_load_print_meta: model params     = 2.51 B
0.00.260.769 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.769 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.770 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.770 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.771 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.771 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.771 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.772 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.772 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.773 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.773 I llm_load_print_meta: max token length = 93
0.00.336.122 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.336.129 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.130 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.336.130 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.336.131 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.132 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.341.387 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.393 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.393 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.394 I llama_new_context_with_model: n_batch       = 2048
0.00.341.394 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.395 I llama_new_context_with_model: flash_attn    = 0
0.00.341.397 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.397 I llama_new_context_with_model: freq_scale    = 1
0.00.341.399 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.418 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.434 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.526 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.761 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.768 I llama_new_context_with_model: graph nodes  = 601
0.00.357.768 I llama_new_context_with_model: graph splits = 1
0.00.357.770 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.417 I main: llama threadpool init, n_threads = 4
0.00.443.433 I 
0.00.443.504 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.443.507 I 
0.00.443.549 I sampler seed: 1771812756
0.00.443.561 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.564 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.565 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.565 I 
 increably.

I am unable to access the requested text. Please provide me with the text so that I can assist you. [end of text]


0.02.374.665 I llama_perf_sampler_print:    sampling time =       3.97 ms /    28 runs   (    0.14 ms per token,  7052.90 tokens per second)
0.02.374.668 I llama_perf_context_print:        load time =     442.66 ms
0.02.374.669 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.374.671 I llama_perf_context_print:        eval time =    1915.29 ms /    27 runs   (   70.94 ms per token,    14.10 tokens per second)
0.02.374.672 I llama_perf_context_print:       total time =    1931.26 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.178 I build: 4227 (11b4d582) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.379 I main: llama backend init
0.00.000.386 I main: load the model and apply lora adapter, if any
0.00.020.498 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.509 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.516 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.526 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.527 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.531 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.531 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.532 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.532 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.534 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.534 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.538 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.539 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.539 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.540 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.540 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.765 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.770 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.628 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.636 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.636 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.637 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.638 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.641 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.641 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.642 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.643 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.644 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.648 I llama_model_loader: - type  f32:   37 tensors
0.00.129.649 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.280 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.839 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.521 I llm_load_vocab: special tokens cache size = 5
0.00.272.740 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.759 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.759 I llm_load_print_meta: arch             = gemma
0.00.272.760 I llm_load_print_meta: vocab type       = SPM
0.00.272.761 I llm_load_print_meta: n_vocab          = 256000
0.00.272.761 I llm_load_print_meta: n_merges         = 0
0.00.272.762 I llm_load_print_meta: vocab_only       = 0
0.00.272.762 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.763 I llm_load_print_meta: n_embd           = 2048
0.00.272.763 I llm_load_print_meta: n_layer          = 18
0.00.272.774 I llm_load_print_meta: n_head           = 8
0.00.272.775 I llm_load_print_meta: n_head_kv        = 1
0.00.272.775 I llm_load_print_meta: n_rot            = 256
0.00.272.776 I llm_load_print_meta: n_swa            = 0
0.00.272.776 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.778 I llm_load_print_meta: n_gqa            = 8
0.00.272.779 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.780 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.780 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.782 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.783 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.783 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.784 I llm_load_print_meta: n_ff             = 16384
0.00.272.784 I llm_load_print_meta: n_expert         = 0
0.00.272.785 I llm_load_print_meta: n_expert_used    = 0
0.00.272.785 I llm_load_print_meta: causal attn      = 1
0.00.272.785 I llm_load_print_meta: pooling type     = 0
0.00.272.785 I llm_load_print_meta: rope type        = 2
0.00.272.786 I llm_load_print_meta: rope scaling     = linear
0.00.272.788 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.788 I llm_load_print_meta: freq_scale_train = 1
0.00.272.788 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.789 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.789 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.789 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.790 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.790 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.790 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.791 I llm_load_print_meta: model type       = 2B
0.00.272.791 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.792 I llm_load_print_meta: model params     = 2.51 B
0.00.272.793 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.793 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.794 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.795 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.795 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.795 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.796 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.796 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.797 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.798 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.798 I llm_load_print_meta: max token length = 93
0.00.344.196 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.344.204 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.349.130 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.135 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.135 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.136 I llama_new_context_with_model: n_batch       = 2048
0.00.349.136 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.137 I llama_new_context_with_model: flash_attn    = 0
0.00.349.139 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.140 I llama_new_context_with_model: freq_scale    = 1
0.00.349.141 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.004 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.018 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.113 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.370 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.376 I llama_new_context_with_model: graph nodes  = 601
0.00.364.377 I llama_new_context_with_model: graph splits = 1
0.00.364.378 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.452.747 I main: llama threadpool init, n_threads = 4
0.00.452.761 I 
0.00.452.834 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.452.838 I 
0.00.452.882 I sampler seed: 3088270170
0.00.452.892 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.452.895 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.452.896 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.452.896 I 
 increasities by emphasizing the transformative potential of the experiences.

**Questions to Consider:**

* What are the key elements that contribute to the transformative potential of these

0.02.874.678 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6351.04 tokens per second)
0.02.874.681 I llama_perf_context_print:        load time =     452.34 ms
0.02.874.682 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.874.683 I llama_perf_context_print:        eval time =    2402.65 ms /    32 runs   (   75.08 ms per token,    13.32 tokens per second)
0.02.874.684 I llama_perf_context_print:       total time =    2421.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.330s
user	0m35.153s
sys	0m9.240s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4227 (11b4d582)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40209.02 ms
main:    total time = 40209.02 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.570 I build: 4227 (11b4d582) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.787 I main: load the model and apply lora adapter, if any
0.00.021.337 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.359 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.362 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.367 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.368 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.368 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.369 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.369 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.370 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.374 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.375 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.375 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.376 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.376 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.758 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.171 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.020 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.027 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.027 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.028 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.028 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.029 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.029 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.031 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.032 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.033 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.033 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.034 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.036 I llama_model_loader: - type  f32:   37 tensors
0.00.130.037 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.038 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.132 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.906 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.242.467 I llm_load_vocab: special tokens cache size = 5
0.00.263.488 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.507 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.508 I llm_load_print_meta: arch             = gemma
0.00.263.509 I llm_load_print_meta: vocab type       = SPM
0.00.263.509 I llm_load_print_meta: n_vocab          = 256000
0.00.263.510 I llm_load_print_meta: n_merges         = 0
0.00.263.510 I llm_load_print_meta: vocab_only       = 0
0.00.263.511 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.511 I llm_load_print_meta: n_embd           = 2048
0.00.263.511 I llm_load_print_meta: n_layer          = 18
0.00.263.524 I llm_load_print_meta: n_head           = 8
0.00.263.525 I llm_load_print_meta: n_head_kv        = 1
0.00.263.525 I llm_load_print_meta: n_rot            = 256
0.00.263.526 I llm_load_print_meta: n_swa            = 0
0.00.263.526 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.526 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.527 I llm_load_print_meta: n_gqa            = 8
0.00.263.528 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.529 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.530 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.532 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.532 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.533 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.533 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.534 I llm_load_print_meta: n_ff             = 16384
0.00.263.534 I llm_load_print_meta: n_expert         = 0
0.00.263.534 I llm_load_print_meta: n_expert_used    = 0
0.00.263.535 I llm_load_print_meta: causal attn      = 1
0.00.263.535 I llm_load_print_meta: pooling type     = 0
0.00.263.535 I llm_load_print_meta: rope type        = 2
0.00.263.536 I llm_load_print_meta: rope scaling     = linear
0.00.263.538 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.538 I llm_load_print_meta: freq_scale_train = 1
0.00.263.539 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.539 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.540 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.540 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.540 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.540 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.541 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.541 I llm_load_print_meta: model type       = 2B
0.00.263.542 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.543 I llm_load_print_meta: model params     = 2.51 B
0.00.263.543 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.544 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.544 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.545 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.545 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.545 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.546 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.546 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.546 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.547 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.547 I llm_load_print_meta: max token length = 93
0.00.323.445 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.323.454 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.323.455 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.323.456 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.323.456 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.323.457 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.328.688 I llama_new_context_with_model: n_seq_max     = 1
0.00.328.696 I llama_new_context_with_model: n_ctx         = 4096
0.00.328.697 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.328.697 I llama_new_context_with_model: n_batch       = 2048
0.00.328.697 I llama_new_context_with_model: n_ubatch      = 512
0.00.328.698 I llama_new_context_with_model: flash_attn    = 0
0.00.328.701 I llama_new_context_with_model: freq_base     = 10000.0
0.00.328.702 I llama_new_context_with_model: freq_scale    = 1
0.00.328.703 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.202 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.344.218 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.344.311 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.345.709 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.345.715 I llama_new_context_with_model: graph nodes  = 601
0.00.345.715 I llama_new_context_with_model: graph splits = 1
0.00.345.717 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.330 I main: llama threadpool init, n_threads = 4
0.00.421.345 I 
0.00.421.419 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.421.419 I 
0.00.421.467 I sampler seed: 1004120240
0.00.421.476 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.478 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.479 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.479 I 
 effeering through the streets, the acrid tang of exhaust fumes mixing with the scent of fresh bread wafting from the bakery window. The rhythmic rumble of a

0.01.995.686 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6524.32 tokens per second)
0.01.995.688 I llama_perf_context_print:        load time =     420.52 ms
0.01.995.689 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.995.691 I llama_perf_context_print:        eval time =    1556.00 ms /    32 runs   (   48.62 ms per token,    20.57 tokens per second)
0.01.995.691 I llama_perf_context_print:       total time =    1574.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4227 (11b4d582)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40163.12 ms
main:    total time = 40163.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.526 I build: 4227 (11b4d582) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.729 I main: load the model and apply lora adapter, if any
0.00.021.099 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.115 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.120 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.122 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.125 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.126 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.126 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.127 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.127 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.128 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.132 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.132 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.133 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.133 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.297 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.692 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.517 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.523 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.524 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.524 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.525 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.526 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.526 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.529 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.529 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.533 I llama_model_loader: - type  f32:   37 tensors
0.00.129.534 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.535 I llama_model_loader: - type q6_K:   19 tensors
0.00.198.603 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.234.940 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.235.372 I llm_load_vocab: special tokens cache size = 5
0.00.256.069 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.256.083 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.256.084 I llm_load_print_meta: arch             = gemma
0.00.256.085 I llm_load_print_meta: vocab type       = SPM
0.00.256.085 I llm_load_print_meta: n_vocab          = 256000
0.00.256.086 I llm_load_print_meta: n_merges         = 0
0.00.256.086 I llm_load_print_meta: vocab_only       = 0
0.00.256.086 I llm_load_print_meta: n_ctx_train      = 8192
0.00.256.087 I llm_load_print_meta: n_embd           = 2048
0.00.256.087 I llm_load_print_meta: n_layer          = 18
0.00.256.097 I llm_load_print_meta: n_head           = 8
0.00.256.098 I llm_load_print_meta: n_head_kv        = 1
0.00.256.098 I llm_load_print_meta: n_rot            = 256
0.00.256.098 I llm_load_print_meta: n_swa            = 0
0.00.256.099 I llm_load_print_meta: n_embd_head_k    = 256
0.00.256.099 I llm_load_print_meta: n_embd_head_v    = 256
0.00.256.100 I llm_load_print_meta: n_gqa            = 8
0.00.256.101 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.256.102 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.256.102 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.256.104 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.256.105 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.256.105 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.256.106 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.256.106 I llm_load_print_meta: n_ff             = 16384
0.00.256.107 I llm_load_print_meta: n_expert         = 0
0.00.256.107 I llm_load_print_meta: n_expert_used    = 0
0.00.256.107 I llm_load_print_meta: causal attn      = 1
0.00.256.108 I llm_load_print_meta: pooling type     = 0
0.00.256.108 I llm_load_print_meta: rope type        = 2
0.00.256.108 I llm_load_print_meta: rope scaling     = linear
0.00.256.110 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.256.111 I llm_load_print_meta: freq_scale_train = 1
0.00.256.111 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.256.111 I llm_load_print_meta: rope_finetuned   = unknown
0.00.256.112 I llm_load_print_meta: ssm_d_conv       = 0
0.00.256.112 I llm_load_print_meta: ssm_d_inner      = 0
0.00.256.112 I llm_load_print_meta: ssm_d_state      = 0
0.00.256.113 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.256.113 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.256.113 I llm_load_print_meta: model type       = 2B
0.00.256.114 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.256.115 I llm_load_print_meta: model params     = 2.51 B
0.00.256.115 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.256.115 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.256.116 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.256.116 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.256.117 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.256.117 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.256.118 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.256.118 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.256.118 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.256.119 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.256.119 I llm_load_print_meta: max token length = 93
0.00.312.760 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.317.913 I llama_new_context_with_model: n_seq_max     = 1
0.00.317.919 I llama_new_context_with_model: n_ctx         = 4096
0.00.317.920 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.317.920 I llama_new_context_with_model: n_batch       = 2048
0.00.317.921 I llama_new_context_with_model: n_ubatch      = 512
0.00.317.921 I llama_new_context_with_model: flash_attn    = 0
0.00.317.925 I llama_new_context_with_model: freq_base     = 10000.0
0.00.317.926 I llama_new_context_with_model: freq_scale    = 1
0.00.317.927 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.333.317 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.333.334 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.333.429 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.334.700 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.334.706 I llama_new_context_with_model: graph nodes  = 601
0.00.334.707 I llama_new_context_with_model: graph splits = 1
0.00.334.708 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.409.812 I main: llama threadpool init, n_threads = 4
0.00.409.828 I 
0.00.409.900 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.409.903 I 
0.00.409.952 I sampler seed: 3688953971
0.00.409.962 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.409.974 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.409.977 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.409.977 I 
 seconded the question and added the following information:

The question is about the possibility of a future pandemic. It specifically focuses on the potential for a zoono

0.01.976.880 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6421.48 tokens per second)
0.01.976.882 I llama_perf_context_print:        load time =     409.06 ms
0.01.976.883 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.976.885 I llama_perf_context_print:        eval time =    1547.45 ms /    32 runs   (   48.36 ms per token,    20.68 tokens per second)
0.01.976.885 I llama_perf_context_print:       total time =    1567.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.097s
user	10m24.161s
sys	0m6.814s
