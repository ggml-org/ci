+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.563 I build: 3960 (11d47057) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.001.893 I main: load the model and apply lora adapter, if any
0.00.022.413 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.460 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.468 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.473 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.474 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.478 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.479 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.479 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.480 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.481 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.481 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.486 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.486 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.487 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.487 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.488 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.701 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.404 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.393 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.400 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.400 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.401 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.402 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.403 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.404 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.407 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.408 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.409 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.410 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.411 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.416 I llama_model_loader: - type  f32:   37 tensors
0.00.133.418 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.902 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.485 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.219 I llm_load_vocab: special tokens cache size = 5
0.00.282.409 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.429 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.430 I llm_load_print_meta: arch             = gemma
0.00.282.430 I llm_load_print_meta: vocab type       = SPM
0.00.282.431 I llm_load_print_meta: n_vocab          = 256000
0.00.282.432 I llm_load_print_meta: n_merges         = 0
0.00.282.432 I llm_load_print_meta: vocab_only       = 0
0.00.282.432 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.433 I llm_load_print_meta: n_embd           = 2048
0.00.282.433 I llm_load_print_meta: n_layer          = 18
0.00.282.446 I llm_load_print_meta: n_head           = 8
0.00.282.447 I llm_load_print_meta: n_head_kv        = 1
0.00.282.448 I llm_load_print_meta: n_rot            = 256
0.00.282.448 I llm_load_print_meta: n_swa            = 0
0.00.282.448 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.449 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.449 I llm_load_print_meta: n_gqa            = 8
0.00.282.451 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.452 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.453 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.454 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.454 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.455 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.455 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.456 I llm_load_print_meta: n_ff             = 16384
0.00.282.456 I llm_load_print_meta: n_expert         = 0
0.00.282.456 I llm_load_print_meta: n_expert_used    = 0
0.00.282.457 I llm_load_print_meta: causal attn      = 1
0.00.282.457 I llm_load_print_meta: pooling type     = 0
0.00.282.457 I llm_load_print_meta: rope type        = 2
0.00.282.458 I llm_load_print_meta: rope scaling     = linear
0.00.282.459 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.460 I llm_load_print_meta: freq_scale_train = 1
0.00.282.460 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.460 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.461 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.461 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.461 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.461 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.461 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.462 I llm_load_print_meta: model type       = 2B
0.00.282.462 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.463 I llm_load_print_meta: model params     = 2.51 B
0.00.282.464 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.464 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.465 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.465 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.466 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.466 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.466 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.467 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.467 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.467 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.468 I llm_load_print_meta: max token length = 93
0.00.282.499 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.383.497 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.383.502 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.383.503 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.383.503 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.383.504 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.383.504 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.388.655 I llama_new_context_with_model: n_ctx      = 8192
0.00.388.662 I llama_new_context_with_model: n_batch    = 2048
0.00.388.662 I llama_new_context_with_model: n_ubatch   = 512
0.00.388.663 I llama_new_context_with_model: flash_attn = 0
0.00.388.665 I llama_new_context_with_model: freq_base  = 10000.0
0.00.388.666 I llama_new_context_with_model: freq_scale = 1
0.00.417.984 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.417.999 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.418.093 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.418.970 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.418.978 I llama_new_context_with_model: graph nodes  = 601
0.00.418.978 I llama_new_context_with_model: graph splits = 1
0.00.418.980 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.511.019 I main: llama threadpool init, n_threads = 4
0.00.511.033 I 
0.00.511.132 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.511.135 I 
0.00.511.175 I sampler seed: 3439927892
0.00.511.186 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.511.188 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.511.188 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.511.189 I 
 increasities by rearranging the words to form grammatically correct sentences.

a) I wish I had more time to relax.
b) I wish I had

0.02.778.151 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7004.88 tokens per second)
0.02.778.153 I llama_perf_context_print:        load time =     509.10 ms
0.02.778.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.778.155 I llama_perf_context_print:        eval time =    2246.95 ms /    32 runs   (   70.22 ms per token,    14.24 tokens per second)
0.02.778.156 I llama_perf_context_print:       total time =    2267.14 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.565 I build: 3960 (11d47057) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.791 I main: llama backend init
0.00.001.885 I main: load the model and apply lora adapter, if any
0.00.022.830 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.841 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.851 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.852 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.858 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.859 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.860 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.862 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.862 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.863 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.868 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.868 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.869 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.870 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.870 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.849 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.782 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.663 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.671 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.672 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.673 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.674 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.675 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.676 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.679 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.680 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.681 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.682 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.134.683 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.687 I llama_model_loader: - type  f32:   37 tensors
0.00.134.690 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.990 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.901 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.539 I llm_load_vocab: special tokens cache size = 5
0.00.284.816 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.831 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.832 I llm_load_print_meta: arch             = gemma
0.00.284.832 I llm_load_print_meta: vocab type       = SPM
0.00.284.833 I llm_load_print_meta: n_vocab          = 256000
0.00.284.833 I llm_load_print_meta: n_merges         = 0
0.00.284.834 I llm_load_print_meta: vocab_only       = 0
0.00.284.834 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.834 I llm_load_print_meta: n_embd           = 2048
0.00.284.835 I llm_load_print_meta: n_layer          = 18
0.00.284.847 I llm_load_print_meta: n_head           = 8
0.00.284.848 I llm_load_print_meta: n_head_kv        = 1
0.00.284.849 I llm_load_print_meta: n_rot            = 256
0.00.284.849 I llm_load_print_meta: n_swa            = 0
0.00.284.849 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.850 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.851 I llm_load_print_meta: n_gqa            = 8
0.00.284.852 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.853 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.854 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.855 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.855 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.855 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.856 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.857 I llm_load_print_meta: n_ff             = 16384
0.00.284.857 I llm_load_print_meta: n_expert         = 0
0.00.284.857 I llm_load_print_meta: n_expert_used    = 0
0.00.284.858 I llm_load_print_meta: causal attn      = 1
0.00.284.858 I llm_load_print_meta: pooling type     = 0
0.00.284.858 I llm_load_print_meta: rope type        = 2
0.00.284.859 I llm_load_print_meta: rope scaling     = linear
0.00.284.860 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.861 I llm_load_print_meta: freq_scale_train = 1
0.00.284.861 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.862 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.862 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.862 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.862 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.862 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.863 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.863 I llm_load_print_meta: model type       = 2B
0.00.284.864 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.865 I llm_load_print_meta: model params     = 2.51 B
0.00.284.865 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.866 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.866 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.867 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.867 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.867 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.867 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.868 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.868 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.868 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.869 I llm_load_print_meta: max token length = 93
0.00.284.889 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.380.495 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.385.651 I llama_new_context_with_model: n_ctx      = 8192
0.00.385.659 I llama_new_context_with_model: n_batch    = 2048
0.00.385.659 I llama_new_context_with_model: n_ubatch   = 512
0.00.385.660 I llama_new_context_with_model: flash_attn = 0
0.00.385.663 I llama_new_context_with_model: freq_base  = 10000.0
0.00.385.664 I llama_new_context_with_model: freq_scale = 1
0.00.416.414 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.416.428 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.416.526 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.417.409 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.417.418 I llama_new_context_with_model: graph nodes  = 601
0.00.417.418 I llama_new_context_with_model: graph splits = 1
0.00.417.420 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.506.116 I main: llama threadpool init, n_threads = 4
0.00.506.130 I 
0.00.506.207 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.506.210 I 
0.00.506.252 I sampler seed: 2682328022
0.00.506.262 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.506.265 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.506.265 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.506.266 I 
 increably!

I'm having some difficulties with my current job and I'm considering making a career change. While I value my current position and the

0.02.700.213 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6450.35 tokens per second)
0.02.700.215 I llama_perf_context_print:        load time =     504.21 ms
0.02.700.216 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.700.218 I llama_perf_context_print:        eval time =    2174.06 ms /    32 runs   (   67.94 ms per token,    14.72 tokens per second)
0.02.700.218 I llama_perf_context_print:       total time =    2194.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.542 I build: 3960 (11d47057) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.749 I main: llama backend init
0.00.001.892 I main: load the model and apply lora adapter, if any
0.00.021.916 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.983 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.994 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.000 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.004 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.009 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.010 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.010 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.011 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.012 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.012 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.017 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.018 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.019 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.020 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.021 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.576 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.301 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.309 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.310 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.311 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.312 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.314 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.314 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.317 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.318 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.319 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.320 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.321 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.326 I llama_model_loader: - type  f32:   37 tensors
0.00.134.330 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.709 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.039 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.613 I llm_load_vocab: special tokens cache size = 5
0.00.269.844 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.862 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.863 I llm_load_print_meta: arch             = gemma
0.00.269.863 I llm_load_print_meta: vocab type       = SPM
0.00.269.864 I llm_load_print_meta: n_vocab          = 256000
0.00.269.864 I llm_load_print_meta: n_merges         = 0
0.00.269.864 I llm_load_print_meta: vocab_only       = 0
0.00.269.865 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.865 I llm_load_print_meta: n_embd           = 2048
0.00.269.865 I llm_load_print_meta: n_layer          = 18
0.00.269.878 I llm_load_print_meta: n_head           = 8
0.00.269.879 I llm_load_print_meta: n_head_kv        = 1
0.00.269.880 I llm_load_print_meta: n_rot            = 256
0.00.269.880 I llm_load_print_meta: n_swa            = 0
0.00.269.880 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.880 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.881 I llm_load_print_meta: n_gqa            = 8
0.00.269.882 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.883 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.884 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.885 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.885 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.886 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.886 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.887 I llm_load_print_meta: n_ff             = 16384
0.00.269.887 I llm_load_print_meta: n_expert         = 0
0.00.269.887 I llm_load_print_meta: n_expert_used    = 0
0.00.269.888 I llm_load_print_meta: causal attn      = 1
0.00.269.888 I llm_load_print_meta: pooling type     = 0
0.00.269.888 I llm_load_print_meta: rope type        = 2
0.00.269.888 I llm_load_print_meta: rope scaling     = linear
0.00.269.890 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.890 I llm_load_print_meta: freq_scale_train = 1
0.00.269.891 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.891 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.891 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.891 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.891 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.892 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.892 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.892 I llm_load_print_meta: model type       = 2B
0.00.269.893 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.894 I llm_load_print_meta: model params     = 2.51 B
0.00.269.894 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.895 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.895 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.895 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.896 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.896 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.896 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.897 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.897 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.897 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.898 I llm_load_print_meta: max token length = 93
0.00.269.919 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.347.226 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.347.234 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.347.235 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.347.236 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.347.236 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.347.237 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.352.240 I llama_new_context_with_model: n_ctx      = 8192
0.00.352.247 I llama_new_context_with_model: n_batch    = 2048
0.00.352.247 I llama_new_context_with_model: n_ubatch   = 512
0.00.352.248 I llama_new_context_with_model: flash_attn = 0
0.00.352.250 I llama_new_context_with_model: freq_base  = 10000.0
0.00.352.251 I llama_new_context_with_model: freq_scale = 1
0.00.382.017 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.382.034 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.382.128 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.035 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.383.044 I llama_new_context_with_model: graph nodes  = 601
0.00.383.044 I llama_new_context_with_model: graph splits = 1
0.00.383.046 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.901 I main: llama threadpool init, n_threads = 4
0.00.473.915 I 
0.00.474.006 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.474.009 I 
0.00.474.058 I sampler seed: 2008303519
0.00.474.068 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.078 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.079 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.079 I 
 increasities, but it is unclear to me if they are just a symptom of another medical condition or if they are a sign of something more serious.

**

0.02.741.249 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6478.21 tokens per second)
0.02.741.251 I llama_perf_context_print:        load time =     471.99 ms
0.02.741.253 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.741.255 I llama_perf_context_print:        eval time =    2247.29 ms /    32 runs   (   70.23 ms per token,    14.24 tokens per second)
0.02.741.256 I llama_perf_context_print:       total time =    2267.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.495 I build: 3960 (11d47057) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.714 I main: llama backend init
0.00.001.849 I main: load the model and apply lora adapter, if any
0.00.021.752 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.812 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.824 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.830 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.835 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.844 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.850 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.852 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.861 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.862 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.863 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.865 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.866 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.598 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.184 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.132 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.139 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.140 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.141 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.142 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.143 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.144 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.148 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.148 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.149 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.150 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.151 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.156 I llama_model_loader: - type  f32:   37 tensors
0.00.133.160 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.263 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.679 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.239 I llm_load_vocab: special tokens cache size = 5
0.00.268.013 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.030 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.030 I llm_load_print_meta: arch             = gemma
0.00.268.031 I llm_load_print_meta: vocab type       = SPM
0.00.268.031 I llm_load_print_meta: n_vocab          = 256000
0.00.268.032 I llm_load_print_meta: n_merges         = 0
0.00.268.032 I llm_load_print_meta: vocab_only       = 0
0.00.268.032 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.033 I llm_load_print_meta: n_embd           = 2048
0.00.268.033 I llm_load_print_meta: n_layer          = 18
0.00.268.044 I llm_load_print_meta: n_head           = 8
0.00.268.045 I llm_load_print_meta: n_head_kv        = 1
0.00.268.045 I llm_load_print_meta: n_rot            = 256
0.00.268.045 I llm_load_print_meta: n_swa            = 0
0.00.268.046 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.046 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.047 I llm_load_print_meta: n_gqa            = 8
0.00.268.048 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.049 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.049 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.050 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.051 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.051 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.051 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.052 I llm_load_print_meta: n_ff             = 16384
0.00.268.053 I llm_load_print_meta: n_expert         = 0
0.00.268.053 I llm_load_print_meta: n_expert_used    = 0
0.00.268.053 I llm_load_print_meta: causal attn      = 1
0.00.268.053 I llm_load_print_meta: pooling type     = 0
0.00.268.054 I llm_load_print_meta: rope type        = 2
0.00.268.054 I llm_load_print_meta: rope scaling     = linear
0.00.268.055 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.056 I llm_load_print_meta: freq_scale_train = 1
0.00.268.056 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.057 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.057 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.057 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.057 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.057 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.058 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.058 I llm_load_print_meta: model type       = 2B
0.00.268.059 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.059 I llm_load_print_meta: model params     = 2.51 B
0.00.268.060 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.061 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.061 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.061 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.062 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.062 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.062 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.063 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.063 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.064 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.064 I llm_load_print_meta: max token length = 93
0.00.268.084 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.338.945 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.338.953 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.343.849 I llama_new_context_with_model: n_ctx      = 8192
0.00.343.855 I llama_new_context_with_model: n_batch    = 2048
0.00.343.856 I llama_new_context_with_model: n_ubatch   = 512
0.00.343.856 I llama_new_context_with_model: flash_attn = 0
0.00.343.858 I llama_new_context_with_model: freq_base  = 10000.0
0.00.343.859 I llama_new_context_with_model: freq_scale = 1
0.00.373.024 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.373.039 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.373.142 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.996 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.374.004 I llama_new_context_with_model: graph nodes  = 601
0.00.374.005 I llama_new_context_with_model: graph splits = 1
0.00.374.006 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.285 I main: llama threadpool init, n_threads = 4
0.00.469.299 I 
0.00.469.389 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.469.392 I 
0.00.469.434 I sampler seed: 1748669714
0.00.469.445 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.450 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.451 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.451 I 
 increamically.

I'm not sure what you're talking about. Could you please explain? [end of text]


0.02.143.036 I llama_perf_sampler_print:    sampling time =       3.59 ms /    23 runs   (    0.16 ms per token,  6401.34 tokens per second)
0.02.143.038 I llama_perf_context_print:        load time =     467.41 ms
0.02.143.039 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.143.041 I llama_perf_context_print:        eval time =    1659.18 ms /    22 runs   (   75.42 ms per token,    13.26 tokens per second)
0.02.143.041 I llama_perf_context_print:       total time =    1673.76 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.921s
user	0m36.558s
sys	0m9.444s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3960 (11d47057)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32018.93 ms
main:    total time = 32018.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 3960 (11d47057) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.001.871 I main: load the model and apply lora adapter, if any
0.00.021.941 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.989 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.000 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.006 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.007 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.011 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.014 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.015 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.015 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.016 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.016 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.019 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.020 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.020 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.021 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.021 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.820 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.292 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.088 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.094 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.095 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.096 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.097 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.098 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.099 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.102 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.103 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.104 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.105 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.106 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.109 I llama_model_loader: - type  f32:   37 tensors
0.00.133.111 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.112 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.611 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.889 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.490 I llm_load_vocab: special tokens cache size = 5
0.00.267.585 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.604 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.604 I llm_load_print_meta: arch             = gemma
0.00.267.605 I llm_load_print_meta: vocab type       = SPM
0.00.267.606 I llm_load_print_meta: n_vocab          = 256000
0.00.267.606 I llm_load_print_meta: n_merges         = 0
0.00.267.606 I llm_load_print_meta: vocab_only       = 0
0.00.267.607 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.607 I llm_load_print_meta: n_embd           = 2048
0.00.267.607 I llm_load_print_meta: n_layer          = 18
0.00.267.618 I llm_load_print_meta: n_head           = 8
0.00.267.619 I llm_load_print_meta: n_head_kv        = 1
0.00.267.619 I llm_load_print_meta: n_rot            = 256
0.00.267.620 I llm_load_print_meta: n_swa            = 0
0.00.267.620 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.620 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.621 I llm_load_print_meta: n_gqa            = 8
0.00.267.623 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.623 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.624 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.625 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.626 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.626 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.626 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.627 I llm_load_print_meta: n_ff             = 16384
0.00.267.628 I llm_load_print_meta: n_expert         = 0
0.00.267.628 I llm_load_print_meta: n_expert_used    = 0
0.00.267.628 I llm_load_print_meta: causal attn      = 1
0.00.267.628 I llm_load_print_meta: pooling type     = 0
0.00.267.629 I llm_load_print_meta: rope type        = 2
0.00.267.629 I llm_load_print_meta: rope scaling     = linear
0.00.267.631 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.631 I llm_load_print_meta: freq_scale_train = 1
0.00.267.632 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.632 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.632 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.632 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.633 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.633 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.633 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.634 I llm_load_print_meta: model type       = 2B
0.00.267.634 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.635 I llm_load_print_meta: model params     = 2.51 B
0.00.267.636 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.636 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.636 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.637 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.637 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.637 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.637 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.638 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.638 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.639 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.639 I llm_load_print_meta: max token length = 93
0.00.267.659 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.327.729 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.327.735 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.327.736 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.327.737 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.327.737 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.327.738 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.332.847 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.856 I llama_new_context_with_model: n_batch    = 2048
0.00.332.857 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.857 I llama_new_context_with_model: flash_attn = 0
0.00.332.861 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.861 I llama_new_context_with_model: freq_scale = 1
0.00.363.817 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.363.832 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.363.927 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.814 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.364.821 I llama_new_context_with_model: graph nodes  = 601
0.00.364.822 I llama_new_context_with_model: graph splits = 1
0.00.364.823 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.450.618 I main: llama threadpool init, n_threads = 4
0.00.450.632 I 
0.00.450.708 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.450.712 I 
0.00.450.756 I sampler seed: 2115044291
0.00.450.766 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.450.768 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.450.769 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.450.769 I 
 seconally.

I'm having trouble finding the correct answer for this question.

**Question:** Explain why it is important to maintain a healthy balance between

0.02.087.717 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6654.57 tokens per second)
0.02.087.719 I llama_perf_context_print:        load time =     448.72 ms
0.02.087.720 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.087.722 I llama_perf_context_print:        eval time =    1617.27 ms /    32 runs   (   50.54 ms per token,    19.79 tokens per second)
0.02.087.722 I llama_perf_context_print:       total time =    1637.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3960 (11d47057)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32060.95 ms
main:    total time = 32060.95 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.540 I build: 3960 (11d47057) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.737 I main: llama backend init
0.00.001.852 I main: load the model and apply lora adapter, if any
0.00.022.012 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.029 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.036 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.037 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.041 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.041 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.042 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.042 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.043 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.043 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.047 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.048 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.048 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.049 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.049 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.967 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.820 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.669 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.677 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.678 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.679 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.679 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.680 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.683 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.687 I llama_model_loader: - type  f32:   37 tensors
0.00.133.689 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.690 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.479 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.366 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.985 I llm_load_vocab: special tokens cache size = 5
0.00.276.178 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.195 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.196 I llm_load_print_meta: arch             = gemma
0.00.276.197 I llm_load_print_meta: vocab type       = SPM
0.00.276.197 I llm_load_print_meta: n_vocab          = 256000
0.00.276.198 I llm_load_print_meta: n_merges         = 0
0.00.276.198 I llm_load_print_meta: vocab_only       = 0
0.00.276.199 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.217 I llm_load_print_meta: n_embd           = 2048
0.00.276.218 I llm_load_print_meta: n_layer          = 18
0.00.276.231 I llm_load_print_meta: n_head           = 8
0.00.276.232 I llm_load_print_meta: n_head_kv        = 1
0.00.276.233 I llm_load_print_meta: n_rot            = 256
0.00.276.233 I llm_load_print_meta: n_swa            = 0
0.00.276.234 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.234 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.235 I llm_load_print_meta: n_gqa            = 8
0.00.276.237 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.238 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.240 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.243 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.243 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.245 I llm_load_print_meta: n_ff             = 16384
0.00.276.245 I llm_load_print_meta: n_expert         = 0
0.00.276.247 I llm_load_print_meta: n_expert_used    = 0
0.00.276.247 I llm_load_print_meta: causal attn      = 1
0.00.276.248 I llm_load_print_meta: pooling type     = 0
0.00.276.248 I llm_load_print_meta: rope type        = 2
0.00.276.249 I llm_load_print_meta: rope scaling     = linear
0.00.276.251 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.253 I llm_load_print_meta: freq_scale_train = 1
0.00.276.253 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.254 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.255 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.255 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.255 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.256 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.256 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.257 I llm_load_print_meta: model type       = 2B
0.00.276.258 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.260 I llm_load_print_meta: model params     = 2.51 B
0.00.276.261 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.261 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.262 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.262 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.263 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.266 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.266 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.267 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.268 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.268 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.269 I llm_load_print_meta: max token length = 93
0.00.276.302 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.337.031 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.342.145 I llama_new_context_with_model: n_ctx      = 8192
0.00.342.152 I llama_new_context_with_model: n_batch    = 2048
0.00.342.152 I llama_new_context_with_model: n_ubatch   = 512
0.00.342.153 I llama_new_context_with_model: flash_attn = 0
0.00.342.156 I llama_new_context_with_model: freq_base  = 10000.0
0.00.342.157 I llama_new_context_with_model: freq_scale = 1
0.00.372.041 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.372.055 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.372.155 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.014 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.373.022 I llama_new_context_with_model: graph nodes  = 601
0.00.373.022 I llama_new_context_with_model: graph splits = 1
0.00.373.024 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.454.989 I main: llama threadpool init, n_threads = 4
0.00.455.004 I 
0.00.455.084 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.455.089 I 
0.00.455.142 I sampler seed: 2503382324
0.00.455.153 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.156 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.157 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.157 I 
 increasities, and other forms of sexual harassment have a devastating impact on the lives of victims. It is crucial to address this issue and create a safer environment for

0.02.089.876 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6830.88 tokens per second)
0.02.089.879 I llama_perf_context_print:        load time =     453.11 ms
0.02.089.880 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.089.881 I llama_perf_context_print:        eval time =    1615.00 ms /    32 runs   (   50.47 ms per token,    19.81 tokens per second)
0.02.089.882 I llama_perf_context_print:       total time =    1634.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.092s
user	8m15.009s
sys	0m6.877s
