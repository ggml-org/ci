+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.549 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.001.852 I main: load the model and apply lora adapter, if any
0.00.022.023 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.072 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.082 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.087 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.088 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.091 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.092 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.092 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.093 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.094 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.095 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.098 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.098 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.099 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.100 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.100 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.801 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.351 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.174 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.180 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.180 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.181 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.182 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.183 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.183 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.186 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.186 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.188 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.188 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.189 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.191 I llama_model_loader: - type  f32:   37 tensors
0.00.132.194 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.957 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.620 I llm_load_vocab: special tokens cache size = 5
0.00.215.026 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.040 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.040 I llm_load_print_meta: arch             = gemma
0.00.215.041 I llm_load_print_meta: vocab type       = SPM
0.00.215.042 I llm_load_print_meta: n_vocab          = 256000
0.00.215.042 I llm_load_print_meta: n_merges         = 0
0.00.215.043 I llm_load_print_meta: vocab_only       = 0
0.00.215.043 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.043 I llm_load_print_meta: n_embd           = 2048
0.00.215.044 I llm_load_print_meta: n_layer          = 18
0.00.215.055 I llm_load_print_meta: n_head           = 8
0.00.215.056 I llm_load_print_meta: n_head_kv        = 1
0.00.215.056 I llm_load_print_meta: n_rot            = 256
0.00.215.056 I llm_load_print_meta: n_swa            = 0
0.00.215.056 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.057 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.058 I llm_load_print_meta: n_gqa            = 8
0.00.215.059 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.060 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.060 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.062 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.062 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.063 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.064 I llm_load_print_meta: n_ff             = 16384
0.00.215.064 I llm_load_print_meta: n_expert         = 0
0.00.215.064 I llm_load_print_meta: n_expert_used    = 0
0.00.215.065 I llm_load_print_meta: causal attn      = 1
0.00.215.065 I llm_load_print_meta: pooling type     = 0
0.00.215.065 I llm_load_print_meta: rope type        = 2
0.00.215.065 I llm_load_print_meta: rope scaling     = linear
0.00.215.067 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.068 I llm_load_print_meta: freq_scale_train = 1
0.00.215.068 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.068 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.068 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.069 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.069 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.069 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.069 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.070 I llm_load_print_meta: model type       = 2B
0.00.215.070 I llm_load_print_meta: model ftype      = Q8_0
0.00.215.071 I llm_load_print_meta: model params     = 2.51 B
0.00.215.072 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.215.072 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.073 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.073 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.073 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.074 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.074 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.074 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.075 I llm_load_print_meta: max token length = 93
0.00.215.089 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.313.898 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.313.908 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.313.909 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.313.909 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.313.910 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.313.910 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.319.198 I llama_new_context_with_model: n_ctx      = 8192
0.00.319.207 I llama_new_context_with_model: n_batch    = 2048
0.00.319.207 I llama_new_context_with_model: n_ubatch   = 512
0.00.319.207 I llama_new_context_with_model: flash_attn = 0
0.00.319.210 I llama_new_context_with_model: freq_base  = 10000.0
0.00.319.211 I llama_new_context_with_model: freq_scale = 1
0.00.348.795 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.348.810 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.348.900 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.349.791 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.349.799 I llama_new_context_with_model: graph nodes  = 601
0.00.349.800 I llama_new_context_with_model: graph splits = 1
0.00.349.802 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.901 I main: llama threadpool init, n_threads = 4
0.00.441.914 I 
0.00.441.989 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.992 I 
0.00.442.029 I sampler seed: 3298629751
0.00.442.040 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.042 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.442.043 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities.

I am unable to generate a response that is both safe and informative. The requested content contains sexually suggestive and potentially harmful information. Therefore, I

0.02.689.099 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6016.41 tokens per second)
0.02.689.101 I llama_perf_context_print:        load time =     440.03 ms
0.02.689.103 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.689.104 I llama_perf_context_print:        eval time =    2227.75 ms /    32 runs   (   69.62 ms per token,    14.36 tokens per second)
0.02.689.105 I llama_perf_context_print:       total time =    2247.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.552 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.001.843 I main: load the model and apply lora adapter, if any
0.00.021.782 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.796 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.807 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.811 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.815 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.816 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.816 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.818 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.819 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.820 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.824 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.825 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.825 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.826 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.827 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.994 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.801 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.808 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.808 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.809 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.809 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.810 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.811 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.813 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.814 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.815 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.816 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.816 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.820 I llama_model_loader: - type  f32:   37 tensors
0.00.131.822 I llama_model_loader: - type q8_0:  127 tensors
0.00.194.652 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.195.293 I llm_load_vocab: special tokens cache size = 5
0.00.213.821 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.213.834 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.213.834 I llm_load_print_meta: arch             = gemma
0.00.213.835 I llm_load_print_meta: vocab type       = SPM
0.00.213.835 I llm_load_print_meta: n_vocab          = 256000
0.00.213.835 I llm_load_print_meta: n_merges         = 0
0.00.213.836 I llm_load_print_meta: vocab_only       = 0
0.00.213.836 I llm_load_print_meta: n_ctx_train      = 8192
0.00.213.836 I llm_load_print_meta: n_embd           = 2048
0.00.213.837 I llm_load_print_meta: n_layer          = 18
0.00.213.848 I llm_load_print_meta: n_head           = 8
0.00.213.849 I llm_load_print_meta: n_head_kv        = 1
0.00.213.849 I llm_load_print_meta: n_rot            = 256
0.00.213.849 I llm_load_print_meta: n_swa            = 0
0.00.213.850 I llm_load_print_meta: n_embd_head_k    = 256
0.00.213.850 I llm_load_print_meta: n_embd_head_v    = 256
0.00.213.851 I llm_load_print_meta: n_gqa            = 8
0.00.213.852 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.213.853 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.213.854 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.213.855 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.213.855 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.213.856 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.213.856 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.213.857 I llm_load_print_meta: n_ff             = 16384
0.00.213.858 I llm_load_print_meta: n_expert         = 0
0.00.213.858 I llm_load_print_meta: n_expert_used    = 0
0.00.213.858 I llm_load_print_meta: causal attn      = 1
0.00.213.859 I llm_load_print_meta: pooling type     = 0
0.00.213.859 I llm_load_print_meta: rope type        = 2
0.00.213.859 I llm_load_print_meta: rope scaling     = linear
0.00.213.861 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.213.862 I llm_load_print_meta: freq_scale_train = 1
0.00.213.862 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.213.862 I llm_load_print_meta: rope_finetuned   = unknown
0.00.213.863 I llm_load_print_meta: ssm_d_conv       = 0
0.00.213.863 I llm_load_print_meta: ssm_d_inner      = 0
0.00.213.863 I llm_load_print_meta: ssm_d_state      = 0
0.00.213.863 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.213.864 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.213.864 I llm_load_print_meta: model type       = 2B
0.00.213.865 I llm_load_print_meta: model ftype      = Q8_0
0.00.213.866 I llm_load_print_meta: model params     = 2.51 B
0.00.213.866 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.213.867 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.213.867 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.213.867 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.213.868 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.213.868 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.213.868 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.213.869 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.213.869 I llm_load_print_meta: max token length = 93
0.00.213.887 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.308.961 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.313.931 I llama_new_context_with_model: n_ctx      = 8192
0.00.313.936 I llama_new_context_with_model: n_batch    = 2048
0.00.313.937 I llama_new_context_with_model: n_ubatch   = 512
0.00.313.938 I llama_new_context_with_model: flash_attn = 0
0.00.313.940 I llama_new_context_with_model: freq_base  = 10000.0
0.00.313.941 I llama_new_context_with_model: freq_scale = 1
0.00.343.136 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.152 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.242 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.129 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.136 I llama_new_context_with_model: graph nodes  = 601
0.00.344.137 I llama_new_context_with_model: graph splits = 1
0.00.344.138 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.558 I main: llama threadpool init, n_threads = 4
0.00.430.569 I 
0.00.430.641 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.430.648 I 
0.00.430.683 I sampler seed: 4000612780
0.00.430.691 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.694 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.430.694 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities to the present, but it is not possible to predict how long they will last.

**Question:** What does this passage imply about the uncertainty and

0.02.609.160 I llama_perf_sampler_print:    sampling time =       5.41 ms /    33 runs   (    0.16 ms per token,  6095.31 tokens per second)
0.02.609.162 I llama_perf_context_print:        load time =     428.70 ms
0.02.609.164 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.609.165 I llama_perf_context_print:        eval time =    2159.94 ms /    32 runs   (   67.50 ms per token,    14.82 tokens per second)
0.02.609.166 I llama_perf_context_print:       total time =    2178.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.594 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.798 I main: llama backend init
0.00.001.885 I main: load the model and apply lora adapter, if any
0.00.022.108 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.158 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.165 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.170 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.171 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.175 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.175 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.176 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.177 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.178 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.178 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.183 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.184 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.184 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.185 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.185 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.286 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.307 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.290 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.299 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.300 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.300 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.301 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.303 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.304 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.307 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.308 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.309 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.310 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.311 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.315 I llama_model_loader: - type  f32:   37 tensors
0.00.133.318 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.021 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.701 I llm_load_vocab: special tokens cache size = 5
0.00.216.253 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.268 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.268 I llm_load_print_meta: arch             = gemma
0.00.216.269 I llm_load_print_meta: vocab type       = SPM
0.00.216.270 I llm_load_print_meta: n_vocab          = 256000
0.00.216.270 I llm_load_print_meta: n_merges         = 0
0.00.216.271 I llm_load_print_meta: vocab_only       = 0
0.00.216.271 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.272 I llm_load_print_meta: n_embd           = 2048
0.00.216.272 I llm_load_print_meta: n_layer          = 18
0.00.216.286 I llm_load_print_meta: n_head           = 8
0.00.216.287 I llm_load_print_meta: n_head_kv        = 1
0.00.216.288 I llm_load_print_meta: n_rot            = 256
0.00.216.289 I llm_load_print_meta: n_swa            = 0
0.00.216.290 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.290 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.292 I llm_load_print_meta: n_gqa            = 8
0.00.216.294 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.296 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.297 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.299 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.300 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.303 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.304 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.305 I llm_load_print_meta: n_ff             = 16384
0.00.216.306 I llm_load_print_meta: n_expert         = 0
0.00.216.306 I llm_load_print_meta: n_expert_used    = 0
0.00.216.307 I llm_load_print_meta: causal attn      = 1
0.00.216.307 I llm_load_print_meta: pooling type     = 0
0.00.216.308 I llm_load_print_meta: rope type        = 2
0.00.216.309 I llm_load_print_meta: rope scaling     = linear
0.00.216.311 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.312 I llm_load_print_meta: freq_scale_train = 1
0.00.216.312 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.313 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.313 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.314 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.314 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.315 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.316 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.317 I llm_load_print_meta: model type       = 2B
0.00.216.318 I llm_load_print_meta: model ftype      = Q8_0
0.00.216.319 I llm_load_print_meta: model params     = 2.51 B
0.00.216.320 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.216.322 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.322 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.323 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.324 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.324 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.325 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.326 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.326 I llm_load_print_meta: max token length = 93
0.00.216.354 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.318 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.292.326 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.292.327 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.292.328 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.292.328 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.292.329 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.297.571 I llama_new_context_with_model: n_ctx      = 8192
0.00.297.578 I llama_new_context_with_model: n_batch    = 2048
0.00.297.578 I llama_new_context_with_model: n_ubatch   = 512
0.00.297.579 I llama_new_context_with_model: flash_attn = 0
0.00.297.581 I llama_new_context_with_model: freq_base  = 10000.0
0.00.297.582 I llama_new_context_with_model: freq_scale = 1
0.00.326.860 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.326.877 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.326.977 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.327.876 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.327.885 I llama_new_context_with_model: graph nodes  = 601
0.00.327.885 I llama_new_context_with_model: graph splits = 1
0.00.327.887 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.314 I main: llama threadpool init, n_threads = 4
0.00.420.332 I 
0.00.420.420 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.420.424 I 
0.00.420.458 I sampler seed: 450071825
0.00.420.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.476 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.420.478 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, but alas, her beauty was lost in the process.

This passage is from a poem about a tragic woman. Her beauty is compared to the

0.02.708.395 I llama_perf_sampler_print:    sampling time =       5.60 ms /    33 runs   (    0.17 ms per token,  5897.07 tokens per second)
0.02.708.398 I llama_perf_context_print:        load time =     418.41 ms
0.02.708.399 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.400 I llama_perf_context_print:        eval time =    2269.04 ms /    32 runs   (   70.91 ms per token,    14.10 tokens per second)
0.02.708.401 I llama_perf_context_print:       total time =    2288.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.550 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.001.926 I main: load the model and apply lora adapter, if any
0.00.022.072 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.124 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.134 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.140 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.142 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.146 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.148 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.149 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.149 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.150 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.151 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.156 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.156 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.157 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.158 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.159 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.810 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.022 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.872 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.880 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.880 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.881 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.882 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.882 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.883 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.886 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.887 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.888 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.889 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.891 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.894 I llama_model_loader: - type  f32:   37 tensors
0.00.132.897 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.686 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.203.468 I llm_load_vocab: special tokens cache size = 5
0.00.222.374 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.390 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.391 I llm_load_print_meta: arch             = gemma
0.00.222.391 I llm_load_print_meta: vocab type       = SPM
0.00.222.392 I llm_load_print_meta: n_vocab          = 256000
0.00.222.392 I llm_load_print_meta: n_merges         = 0
0.00.222.393 I llm_load_print_meta: vocab_only       = 0
0.00.222.393 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.393 I llm_load_print_meta: n_embd           = 2048
0.00.222.394 I llm_load_print_meta: n_layer          = 18
0.00.222.408 I llm_load_print_meta: n_head           = 8
0.00.222.409 I llm_load_print_meta: n_head_kv        = 1
0.00.222.409 I llm_load_print_meta: n_rot            = 256
0.00.222.410 I llm_load_print_meta: n_swa            = 0
0.00.222.410 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.410 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.411 I llm_load_print_meta: n_gqa            = 8
0.00.222.412 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.413 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.414 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.415 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.416 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.416 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.417 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.417 I llm_load_print_meta: n_ff             = 16384
0.00.222.418 I llm_load_print_meta: n_expert         = 0
0.00.222.418 I llm_load_print_meta: n_expert_used    = 0
0.00.222.418 I llm_load_print_meta: causal attn      = 1
0.00.222.419 I llm_load_print_meta: pooling type     = 0
0.00.222.419 I llm_load_print_meta: rope type        = 2
0.00.222.419 I llm_load_print_meta: rope scaling     = linear
0.00.222.420 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.421 I llm_load_print_meta: freq_scale_train = 1
0.00.222.421 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.422 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.422 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.422 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.423 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.423 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.424 I llm_load_print_meta: model type       = 2B
0.00.222.424 I llm_load_print_meta: model ftype      = Q8_0
0.00.222.425 I llm_load_print_meta: model params     = 2.51 B
0.00.222.427 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.222.427 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.428 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.428 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.429 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.429 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.429 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.430 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.430 I llm_load_print_meta: max token length = 93
0.00.222.458 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.292.571 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.292.579 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.297.676 I llama_new_context_with_model: n_ctx      = 8192
0.00.297.683 I llama_new_context_with_model: n_batch    = 2048
0.00.297.683 I llama_new_context_with_model: n_ubatch   = 512
0.00.297.684 I llama_new_context_with_model: flash_attn = 0
0.00.297.686 I llama_new_context_with_model: freq_base  = 10000.0
0.00.297.687 I llama_new_context_with_model: freq_scale = 1
0.00.327.221 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.327.236 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.327.339 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.328.199 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.328.208 I llama_new_context_with_model: graph nodes  = 601
0.00.328.208 I llama_new_context_with_model: graph splits = 1
0.00.328.210 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.422.554 I main: llama threadpool init, n_threads = 4
0.00.422.567 I 
0.00.422.649 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.422.653 I 
0.00.422.687 I sampler seed: 3450757772
0.00.422.700 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.422.703 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.422.704 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably.

I cannot answer the question as it contains inappropriate language. [end of text]


0.01.635.431 I llama_perf_sampler_print:    sampling time =       2.73 ms /    17 runs   (    0.16 ms per token,  6227.11 tokens per second)
0.01.635.434 I llama_perf_context_print:        load time =     420.61 ms
0.01.635.436 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.635.438 I llama_perf_context_print:        eval time =    1202.93 ms /    16 runs   (   75.18 ms per token,    13.30 tokens per second)
0.01.635.439 I llama_perf_context_print:       total time =    1212.89 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.227s
user	0m34.345s
sys	0m9.490s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3813 (116efee0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32091.70 ms
main:    total time = 32091.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.565 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.001.860 I main: load the model and apply lora adapter, if any
0.00.022.059 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.108 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.119 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.124 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.128 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.131 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.132 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.133 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.133 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.134 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.135 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.138 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.139 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.140 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.140 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.141 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.867 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.462 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.292 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.299 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.300 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.300 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.301 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.302 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.303 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.305 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.306 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.307 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.307 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.308 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.311 I llama_model_loader: - type  f32:   37 tensors
0.00.132.313 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.314 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.791 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.494 I llm_load_vocab: special tokens cache size = 5
0.00.220.079 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.091 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.092 I llm_load_print_meta: arch             = gemma
0.00.220.092 I llm_load_print_meta: vocab type       = SPM
0.00.220.093 I llm_load_print_meta: n_vocab          = 256000
0.00.220.093 I llm_load_print_meta: n_merges         = 0
0.00.220.094 I llm_load_print_meta: vocab_only       = 0
0.00.220.094 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.094 I llm_load_print_meta: n_embd           = 2048
0.00.220.095 I llm_load_print_meta: n_layer          = 18
0.00.220.106 I llm_load_print_meta: n_head           = 8
0.00.220.107 I llm_load_print_meta: n_head_kv        = 1
0.00.220.108 I llm_load_print_meta: n_rot            = 256
0.00.220.108 I llm_load_print_meta: n_swa            = 0
0.00.220.109 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.109 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.110 I llm_load_print_meta: n_gqa            = 8
0.00.220.111 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.112 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.113 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.114 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.115 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.115 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.116 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.117 I llm_load_print_meta: n_ff             = 16384
0.00.220.117 I llm_load_print_meta: n_expert         = 0
0.00.220.117 I llm_load_print_meta: n_expert_used    = 0
0.00.220.118 I llm_load_print_meta: causal attn      = 1
0.00.220.118 I llm_load_print_meta: pooling type     = 0
0.00.220.118 I llm_load_print_meta: rope type        = 2
0.00.220.119 I llm_load_print_meta: rope scaling     = linear
0.00.220.120 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.121 I llm_load_print_meta: freq_scale_train = 1
0.00.220.121 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.121 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.122 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.122 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.122 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.122 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.123 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.123 I llm_load_print_meta: model type       = 2B
0.00.220.124 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.220.125 I llm_load_print_meta: model params     = 2.51 B
0.00.220.125 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.220.126 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.126 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.126 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.127 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.127 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.128 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.128 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.128 I llm_load_print_meta: max token length = 93
0.00.220.144 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.278.894 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.278.901 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.278.901 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.278.902 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.278.903 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.278.903 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.284.076 I llama_new_context_with_model: n_ctx      = 8192
0.00.284.081 I llama_new_context_with_model: n_batch    = 2048
0.00.284.082 I llama_new_context_with_model: n_ubatch   = 512
0.00.284.082 I llama_new_context_with_model: flash_attn = 0
0.00.284.085 I llama_new_context_with_model: freq_base  = 10000.0
0.00.284.085 I llama_new_context_with_model: freq_scale = 1
0.00.313.345 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.313.359 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.313.451 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.314.286 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.314.294 I llama_new_context_with_model: graph nodes  = 601
0.00.314.295 I llama_new_context_with_model: graph splits = 1
0.00.314.297 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.396.342 I main: llama threadpool init, n_threads = 4
0.00.396.355 I 
0.00.396.431 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.396.434 I 
0.00.396.463 I sampler seed: 3958155310
0.00.396.472 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.396.474 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.396.475 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally. 

**Assistant**

I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.01.542.617 I llama_perf_sampler_print:    sampling time =       3.98 ms /    24 runs   (    0.17 ms per token,  6025.61 tokens per second)
0.01.542.620 I llama_perf_context_print:        load time =     394.47 ms
0.01.542.621 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.542.622 I llama_perf_context_print:        eval time =    1132.12 ms /    23 runs   (   49.22 ms per token,    20.32 tokens per second)
0.01.542.623 I llama_perf_context_print:       total time =    1146.28 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3813 (116efee0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32041.44 ms
main:    total time = 32041.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.552 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.744 I main: llama backend init
0.00.001.844 I main: load the model and apply lora adapter, if any
0.00.022.329 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.342 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.349 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.350 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.354 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.355 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.356 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.356 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.357 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.357 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.362 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.363 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.364 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.364 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.365 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.162 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.089 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.921 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.928 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.929 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.929 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.930 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.931 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.932 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.934 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.934 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.938 I llama_model_loader: - type  f32:   37 tensors
0.00.132.940 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.940 I llama_model_loader: - type q6_K:   19 tensors
0.00.197.137 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.853 I llm_load_vocab: special tokens cache size = 5
0.00.216.541 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.554 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.554 I llm_load_print_meta: arch             = gemma
0.00.216.555 I llm_load_print_meta: vocab type       = SPM
0.00.216.556 I llm_load_print_meta: n_vocab          = 256000
0.00.216.556 I llm_load_print_meta: n_merges         = 0
0.00.216.557 I llm_load_print_meta: vocab_only       = 0
0.00.216.557 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.557 I llm_load_print_meta: n_embd           = 2048
0.00.216.558 I llm_load_print_meta: n_layer          = 18
0.00.216.569 I llm_load_print_meta: n_head           = 8
0.00.216.571 I llm_load_print_meta: n_head_kv        = 1
0.00.216.571 I llm_load_print_meta: n_rot            = 256
0.00.216.571 I llm_load_print_meta: n_swa            = 0
0.00.216.572 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.572 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.573 I llm_load_print_meta: n_gqa            = 8
0.00.216.574 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.575 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.576 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.577 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.578 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.578 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.578 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.579 I llm_load_print_meta: n_ff             = 16384
0.00.216.579 I llm_load_print_meta: n_expert         = 0
0.00.216.580 I llm_load_print_meta: n_expert_used    = 0
0.00.216.580 I llm_load_print_meta: causal attn      = 1
0.00.216.580 I llm_load_print_meta: pooling type     = 0
0.00.216.581 I llm_load_print_meta: rope type        = 2
0.00.216.581 I llm_load_print_meta: rope scaling     = linear
0.00.216.583 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.583 I llm_load_print_meta: freq_scale_train = 1
0.00.216.584 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.584 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.584 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.584 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.585 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.585 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.585 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.586 I llm_load_print_meta: model type       = 2B
0.00.216.586 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.216.587 I llm_load_print_meta: model params     = 2.51 B
0.00.216.588 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.216.588 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.589 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.589 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.589 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.590 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.590 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.590 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.591 I llm_load_print_meta: max token length = 93
0.00.216.614 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.274.536 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.279.530 I llama_new_context_with_model: n_ctx      = 8192
0.00.279.535 I llama_new_context_with_model: n_batch    = 2048
0.00.279.536 I llama_new_context_with_model: n_ubatch   = 512
0.00.279.536 I llama_new_context_with_model: flash_attn = 0
0.00.279.539 I llama_new_context_with_model: freq_base  = 10000.0
0.00.279.539 I llama_new_context_with_model: freq_scale = 1
0.00.310.483 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.310.500 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.310.598 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.311.490 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.311.497 I llama_new_context_with_model: graph nodes  = 601
0.00.311.497 I llama_new_context_with_model: graph splits = 1
0.00.311.500 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.391.702 I main: llama threadpool init, n_threads = 4
0.00.391.714 I 
0.00.391.785 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.391.789 I 
0.00.391.818 I sampler seed: 2064013601
0.00.391.827 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.391.831 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.391.831 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 squaRED DRAGON.

The squire of the dragon was an intelligent and resourceful young man named Balthazar. Balthazar's quick wit and sharp mind were his

0.01.996.932 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6006.55 tokens per second)
0.01.996.934 I llama_perf_context_print:        load time =     389.84 ms
0.01.996.935 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.996.937 I llama_perf_context_print:        eval time =    1586.70 ms /    32 runs   (   49.58 ms per token,    20.17 tokens per second)
0.01.996.938 I llama_perf_context_print:       total time =    1605.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.643s
user	8m12.799s
sys	0m7.041s
