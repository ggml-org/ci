+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.648 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.838 I main: load the model and apply lora adapter, if any
0.00.024.677 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.862 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.973 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.985 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.987 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.991 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.993 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.993 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.994 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.995 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.996 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.003 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.004 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.005 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.006 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.007 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.695 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.685 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.950 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.957 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.958 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.958 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.959 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.960 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.961 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.964 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.965 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.966 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.967 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.968 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.975 I llama_model_loader: - type  f32:   37 tensors
0.00.196.979 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.830 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.829 I llm_load_vocab: special tokens cache size = 5
0.00.528.438 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.528.495 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.528.496 I llm_load_print_meta: arch             = gemma
0.00.528.497 I llm_load_print_meta: vocab type       = SPM
0.00.528.498 I llm_load_print_meta: n_vocab          = 256000
0.00.528.500 I llm_load_print_meta: n_merges         = 0
0.00.528.501 I llm_load_print_meta: vocab_only       = 0
0.00.528.501 I llm_load_print_meta: n_ctx_train      = 8192
0.00.528.501 I llm_load_print_meta: n_embd           = 2048
0.00.528.502 I llm_load_print_meta: n_layer          = 18
0.00.528.535 I llm_load_print_meta: n_head           = 8
0.00.528.541 I llm_load_print_meta: n_head_kv        = 1
0.00.528.541 I llm_load_print_meta: n_rot            = 256
0.00.528.542 I llm_load_print_meta: n_swa            = 0
0.00.528.542 I llm_load_print_meta: n_embd_head_k    = 256
0.00.528.542 I llm_load_print_meta: n_embd_head_v    = 256
0.00.528.547 I llm_load_print_meta: n_gqa            = 8
0.00.528.552 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.528.580 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.528.582 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.528.584 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.528.592 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.528.593 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.528.594 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.528.600 I llm_load_print_meta: n_ff             = 16384
0.00.528.601 I llm_load_print_meta: n_expert         = 0
0.00.528.601 I llm_load_print_meta: n_expert_used    = 0
0.00.528.602 I llm_load_print_meta: causal attn      = 1
0.00.528.602 I llm_load_print_meta: pooling type     = 0
0.00.528.606 I llm_load_print_meta: rope type        = 2
0.00.528.607 I llm_load_print_meta: rope scaling     = linear
0.00.528.608 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.528.609 I llm_load_print_meta: freq_scale_train = 1
0.00.528.610 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.528.610 I llm_load_print_meta: rope_finetuned   = unknown
0.00.528.610 I llm_load_print_meta: ssm_d_conv       = 0
0.00.528.611 I llm_load_print_meta: ssm_d_inner      = 0
0.00.528.611 I llm_load_print_meta: ssm_d_state      = 0
0.00.528.611 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.528.612 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.528.613 I llm_load_print_meta: model type       = 2B
0.00.528.621 I llm_load_print_meta: model ftype      = Q8_0
0.00.528.623 I llm_load_print_meta: model params     = 2.51 B
0.00.528.624 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.528.627 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.528.628 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.528.628 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.528.629 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.528.629 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.528.629 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.528.630 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.528.630 I llm_load_print_meta: max token length = 93
0.00.528.808 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.629.972 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.629.981 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.629.982 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.629.982 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.629.983 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.629.984 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.635.687 I llama_new_context_with_model: n_ctx      = 8192
0.00.635.694 I llama_new_context_with_model: n_batch    = 2048
0.00.635.695 I llama_new_context_with_model: n_ubatch   = 512
0.00.635.695 I llama_new_context_with_model: flash_attn = 0
0.00.635.698 I llama_new_context_with_model: freq_base  = 10000.0
0.00.635.699 I llama_new_context_with_model: freq_scale = 1
0.00.665.320 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.665.367 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.665.483 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.666.878 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.666.885 I llama_new_context_with_model: graph nodes  = 601
0.00.666.885 I llama_new_context_with_model: graph splits = 1
0.00.666.901 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.867 I main: llama threadpool init, n_threads = 4
0.01.279.878 I 
0.01.279.972 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.976 I 
0.01.280.134 I sampler seed: 3573813863
0.01.280.145 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.150 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.280.152 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities

I am unable to generate the requested response as it contains sexually suggestive and inappropriate content. My purpose is to assist with tasks that comply with ethical and

0.14.862.266 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.89 tokens per second)
0.14.862.270 I llama_perf_context_print:        load time =    1276.95 ms
0.14.862.272 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.862.274 I llama_perf_context_print:        eval time =   13497.46 ms /    32 runs   (  421.80 ms per token,     2.37 tokens per second)
0.14.862.275 I llama_perf_context_print:       total time =   13582.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.642 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.002.831 I main: load the model and apply lora adapter, if any
0.00.024.950 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.040 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.055 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.056 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.063 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.064 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.065 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.066 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.067 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.067 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.074 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.076 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.077 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.077 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.078 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.568 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.152 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.354 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.362 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.363 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.364 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.365 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.366 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.367 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.371 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.372 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.373 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.374 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.375 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.384 I llama_model_loader: - type  f32:   37 tensors
0.00.197.389 I llama_model_loader: - type q8_0:  127 tensors
0.00.469.733 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.470.750 I llm_load_vocab: special tokens cache size = 5
0.00.528.534 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.528.591 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.528.593 I llm_load_print_meta: arch             = gemma
0.00.528.593 I llm_load_print_meta: vocab type       = SPM
0.00.528.594 I llm_load_print_meta: n_vocab          = 256000
0.00.528.597 I llm_load_print_meta: n_merges         = 0
0.00.528.597 I llm_load_print_meta: vocab_only       = 0
0.00.528.598 I llm_load_print_meta: n_ctx_train      = 8192
0.00.528.598 I llm_load_print_meta: n_embd           = 2048
0.00.528.598 I llm_load_print_meta: n_layer          = 18
0.00.528.631 I llm_load_print_meta: n_head           = 8
0.00.528.638 I llm_load_print_meta: n_head_kv        = 1
0.00.528.639 I llm_load_print_meta: n_rot            = 256
0.00.528.639 I llm_load_print_meta: n_swa            = 0
0.00.528.640 I llm_load_print_meta: n_embd_head_k    = 256
0.00.528.640 I llm_load_print_meta: n_embd_head_v    = 256
0.00.528.644 I llm_load_print_meta: n_gqa            = 8
0.00.528.649 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.528.653 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.528.654 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.528.670 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.528.672 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.528.672 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.528.673 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.528.677 I llm_load_print_meta: n_ff             = 16384
0.00.528.678 I llm_load_print_meta: n_expert         = 0
0.00.528.678 I llm_load_print_meta: n_expert_used    = 0
0.00.528.679 I llm_load_print_meta: causal attn      = 1
0.00.528.680 I llm_load_print_meta: pooling type     = 0
0.00.528.680 I llm_load_print_meta: rope type        = 2
0.00.528.681 I llm_load_print_meta: rope scaling     = linear
0.00.528.682 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.528.683 I llm_load_print_meta: freq_scale_train = 1
0.00.528.683 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.528.683 I llm_load_print_meta: rope_finetuned   = unknown
0.00.528.684 I llm_load_print_meta: ssm_d_conv       = 0
0.00.528.684 I llm_load_print_meta: ssm_d_inner      = 0
0.00.528.684 I llm_load_print_meta: ssm_d_state      = 0
0.00.528.685 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.528.686 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.528.687 I llm_load_print_meta: model type       = 2B
0.00.528.696 I llm_load_print_meta: model ftype      = Q8_0
0.00.528.701 I llm_load_print_meta: model params     = 2.51 B
0.00.528.702 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.528.702 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.528.709 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.528.710 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.528.710 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.528.710 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.528.711 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.528.712 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.528.713 I llm_load_print_meta: max token length = 93
0.00.528.914 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.625.581 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.631.232 I llama_new_context_with_model: n_ctx      = 8192
0.00.631.239 I llama_new_context_with_model: n_batch    = 2048
0.00.631.240 I llama_new_context_with_model: n_ubatch   = 512
0.00.631.240 I llama_new_context_with_model: flash_attn = 0
0.00.631.243 I llama_new_context_with_model: freq_base  = 10000.0
0.00.631.243 I llama_new_context_with_model: freq_scale = 1
0.00.661.180 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.661.225 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.661.339 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.662.741 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.662.747 I llama_new_context_with_model: graph nodes  = 601
0.00.662.747 I llama_new_context_with_model: graph splits = 1
0.00.662.764 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.276.896 I main: llama threadpool init, n_threads = 4
0.01.276.907 I 
0.01.277.001 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.277.005 I 
0.01.277.164 I sampler seed: 3912340419
0.01.277.175 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.277.179 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.277.180 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 maneuvled, a whimsical and enchanting tale set in a world of talking animals and magical landscapes.

**The Story:**

In the enchanted realm of Whis

0.14.912.513 I llama_perf_sampler_print:    sampling time =      49.25 ms /    33 runs   (    1.49 ms per token,   670.09 tokens per second)
0.14.912.516 I llama_perf_context_print:        load time =    1273.99 ms
0.14.912.518 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.912.521 I llama_perf_context_print:        eval time =   13553.01 ms /    32 runs   (  423.53 ms per token,     2.36 tokens per second)
0.14.912.532 I llama_perf_context_print:       total time =   13635.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.612 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.801 I main: llama backend init
0.00.002.719 I main: load the model and apply lora adapter, if any
0.00.024.453 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.633 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.721 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.732 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.733 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.737 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.738 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.738 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.739 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.740 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.741 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.747 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.748 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.748 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.749 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.750 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.681 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.373 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.419 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.425 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.426 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.427 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.428 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.434 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.435 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.436 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.436 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.438 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.446 I llama_model_loader: - type  f32:   37 tensors
0.00.196.451 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.798 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.465.846 I llm_load_vocab: special tokens cache size = 5
0.00.523.603 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.523.661 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.523.662 I llm_load_print_meta: arch             = gemma
0.00.523.663 I llm_load_print_meta: vocab type       = SPM
0.00.523.664 I llm_load_print_meta: n_vocab          = 256000
0.00.523.667 I llm_load_print_meta: n_merges         = 0
0.00.523.668 I llm_load_print_meta: vocab_only       = 0
0.00.523.668 I llm_load_print_meta: n_ctx_train      = 8192
0.00.523.668 I llm_load_print_meta: n_embd           = 2048
0.00.523.669 I llm_load_print_meta: n_layer          = 18
0.00.523.703 I llm_load_print_meta: n_head           = 8
0.00.523.729 I llm_load_print_meta: n_head_kv        = 1
0.00.523.730 I llm_load_print_meta: n_rot            = 256
0.00.523.731 I llm_load_print_meta: n_swa            = 0
0.00.523.731 I llm_load_print_meta: n_embd_head_k    = 256
0.00.523.732 I llm_load_print_meta: n_embd_head_v    = 256
0.00.523.738 I llm_load_print_meta: n_gqa            = 8
0.00.523.743 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.523.748 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.523.749 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.523.751 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.523.751 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.523.751 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.523.752 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.523.757 I llm_load_print_meta: n_ff             = 16384
0.00.523.757 I llm_load_print_meta: n_expert         = 0
0.00.523.761 I llm_load_print_meta: n_expert_used    = 0
0.00.523.762 I llm_load_print_meta: causal attn      = 1
0.00.523.762 I llm_load_print_meta: pooling type     = 0
0.00.523.762 I llm_load_print_meta: rope type        = 2
0.00.523.763 I llm_load_print_meta: rope scaling     = linear
0.00.523.765 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.523.766 I llm_load_print_meta: freq_scale_train = 1
0.00.523.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.523.766 I llm_load_print_meta: rope_finetuned   = unknown
0.00.523.766 I llm_load_print_meta: ssm_d_conv       = 0
0.00.523.767 I llm_load_print_meta: ssm_d_inner      = 0
0.00.523.767 I llm_load_print_meta: ssm_d_state      = 0
0.00.523.770 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.523.771 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.523.772 I llm_load_print_meta: model type       = 2B
0.00.523.773 I llm_load_print_meta: model ftype      = Q8_0
0.00.523.774 I llm_load_print_meta: model params     = 2.51 B
0.00.523.774 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.523.775 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.523.775 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.523.776 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.523.776 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.523.776 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.523.777 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.523.777 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.523.778 I llm_load_print_meta: max token length = 93
0.00.523.958 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.600.942 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.600.952 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.600.953 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.600.953 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.600.954 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.600.955 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.606.463 I llama_new_context_with_model: n_ctx      = 8192
0.00.606.470 I llama_new_context_with_model: n_batch    = 2048
0.00.606.471 I llama_new_context_with_model: n_ubatch   = 512
0.00.606.471 I llama_new_context_with_model: flash_attn = 0
0.00.606.473 I llama_new_context_with_model: freq_base  = 10000.0
0.00.606.474 I llama_new_context_with_model: freq_scale = 1
0.00.635.158 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.635.199 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.635.316 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.636.749 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.636.755 I llama_new_context_with_model: graph nodes  = 601
0.00.636.755 I llama_new_context_with_model: graph splits = 1
0.00.636.771 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.253.918 I main: llama threadpool init, n_threads = 4
0.01.253.930 I 
0.01.254.022 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.254.026 I 
0.01.254.186 I sampler seed: 3286193472
0.01.254.196 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.254.203 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.254.204 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. [end of text]


0.02.949.765 I llama_perf_sampler_print:    sampling time =       6.20 ms /     5 runs   (    1.24 ms per token,   806.45 tokens per second)
0.02.949.768 I llama_perf_context_print:        load time =    1251.12 ms
0.02.949.770 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.949.781 I llama_perf_context_print:        eval time =    1684.02 ms /     4 runs   (  421.01 ms per token,     2.38 tokens per second)
0.02.949.782 I llama_perf_context_print:       total time =    1695.86 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.609 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.799 I main: llama backend init
0.00.002.728 I main: load the model and apply lora adapter, if any
0.00.024.492 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.678 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.766 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.777 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.778 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.782 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.783 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.784 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.784 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.785 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.786 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.794 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.795 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.795 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.796 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.797 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.065 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.648 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.862 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.870 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.871 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.871 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.872 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.873 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.874 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.888 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.891 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.892 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.893 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.196.895 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.903 I llama_model_loader: - type  f32:   37 tensors
0.00.196.908 I llama_model_loader: - type q8_0:  127 tensors
0.00.462.425 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.463.451 I llm_load_vocab: special tokens cache size = 5
0.00.521.427 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.521.481 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.521.482 I llm_load_print_meta: arch             = gemma
0.00.521.483 I llm_load_print_meta: vocab type       = SPM
0.00.521.483 I llm_load_print_meta: n_vocab          = 256000
0.00.521.486 I llm_load_print_meta: n_merges         = 0
0.00.521.486 I llm_load_print_meta: vocab_only       = 0
0.00.521.487 I llm_load_print_meta: n_ctx_train      = 8192
0.00.521.487 I llm_load_print_meta: n_embd           = 2048
0.00.521.488 I llm_load_print_meta: n_layer          = 18
0.00.521.522 I llm_load_print_meta: n_head           = 8
0.00.521.528 I llm_load_print_meta: n_head_kv        = 1
0.00.521.529 I llm_load_print_meta: n_rot            = 256
0.00.521.529 I llm_load_print_meta: n_swa            = 0
0.00.521.530 I llm_load_print_meta: n_embd_head_k    = 256
0.00.521.530 I llm_load_print_meta: n_embd_head_v    = 256
0.00.521.535 I llm_load_print_meta: n_gqa            = 8
0.00.521.540 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.521.544 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.521.545 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.521.547 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.521.547 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.521.548 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.521.548 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.521.553 I llm_load_print_meta: n_ff             = 16384
0.00.521.554 I llm_load_print_meta: n_expert         = 0
0.00.521.554 I llm_load_print_meta: n_expert_used    = 0
0.00.521.555 I llm_load_print_meta: causal attn      = 1
0.00.521.555 I llm_load_print_meta: pooling type     = 0
0.00.521.555 I llm_load_print_meta: rope type        = 2
0.00.521.556 I llm_load_print_meta: rope scaling     = linear
0.00.521.557 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.521.558 I llm_load_print_meta: freq_scale_train = 1
0.00.521.558 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.521.559 I llm_load_print_meta: rope_finetuned   = unknown
0.00.521.560 I llm_load_print_meta: ssm_d_conv       = 0
0.00.521.560 I llm_load_print_meta: ssm_d_inner      = 0
0.00.521.561 I llm_load_print_meta: ssm_d_state      = 0
0.00.521.561 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.521.566 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.521.567 I llm_load_print_meta: model type       = 2B
0.00.521.589 I llm_load_print_meta: model ftype      = Q8_0
0.00.521.590 I llm_load_print_meta: model params     = 2.51 B
0.00.521.591 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.521.599 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.521.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.521.601 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.521.601 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.521.601 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.521.602 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.521.603 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.521.603 I llm_load_print_meta: max token length = 93
0.00.521.786 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.592.499 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.592.508 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.598.031 I llama_new_context_with_model: n_ctx      = 8192
0.00.598.038 I llama_new_context_with_model: n_batch    = 2048
0.00.598.039 I llama_new_context_with_model: n_ubatch   = 512
0.00.598.039 I llama_new_context_with_model: flash_attn = 0
0.00.598.041 I llama_new_context_with_model: freq_base  = 10000.0
0.00.598.042 I llama_new_context_with_model: freq_scale = 1
0.00.626.811 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.626.871 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.626.986 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.628.393 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.628.399 I llama_new_context_with_model: graph nodes  = 601
0.00.628.400 I llama_new_context_with_model: graph splits = 1
0.00.628.417 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.243.186 I main: llama threadpool init, n_threads = 4
0.01.243.197 I 
0.01.243.287 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.243.291 I 
0.01.243.453 I sampler seed: 2243995769
0.01.243.463 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.243.467 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.243.468 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities with the intention of understanding them better and possibly manipulating them for personal gain. [end of text]


0.08.840.191 I llama_perf_sampler_print:    sampling time =      27.68 ms /    19 runs   (    1.46 ms per token,   686.49 tokens per second)
0.08.840.194 I llama_perf_context_print:        load time =    1240.38 ms
0.08.840.215 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.840.217 I llama_perf_context_print:        eval time =    7550.19 ms /    18 runs   (  419.46 ms per token,     2.38 tokens per second)
0.08.840.218 I llama_perf_context_print:       total time =    7597.02 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m51.149s
user	2m38.378s
sys	0m9.397s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3813 (116efee0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200054.34 ms
main:    total time = 200054.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.687 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.819 I main: load the model and apply lora adapter, if any
0.00.024.837 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.024 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.110 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.121 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.122 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.126 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.127 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.128 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.129 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.130 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.131 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.137 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.138 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.140 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.141 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.289 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.445 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.633 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.640 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.640 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.641 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.642 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.643 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.644 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.647 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.648 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.649 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.650 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.651 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.661 I llama_model_loader: - type  f32:   37 tensors
0.00.196.665 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.666 I llama_model_loader: - type q6_K:   19 tensors
0.00.472.990 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.473.980 I llm_load_vocab: special tokens cache size = 5
0.00.531.725 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.778 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.779 I llm_load_print_meta: arch             = gemma
0.00.531.780 I llm_load_print_meta: vocab type       = SPM
0.00.531.781 I llm_load_print_meta: n_vocab          = 256000
0.00.531.783 I llm_load_print_meta: n_merges         = 0
0.00.531.784 I llm_load_print_meta: vocab_only       = 0
0.00.531.784 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.785 I llm_load_print_meta: n_embd           = 2048
0.00.531.785 I llm_load_print_meta: n_layer          = 18
0.00.531.817 I llm_load_print_meta: n_head           = 8
0.00.531.823 I llm_load_print_meta: n_head_kv        = 1
0.00.531.823 I llm_load_print_meta: n_rot            = 256
0.00.531.824 I llm_load_print_meta: n_swa            = 0
0.00.531.824 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.825 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.829 I llm_load_print_meta: n_gqa            = 8
0.00.531.834 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.839 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.840 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.842 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.842 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.842 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.843 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.847 I llm_load_print_meta: n_ff             = 16384
0.00.531.848 I llm_load_print_meta: n_expert         = 0
0.00.531.848 I llm_load_print_meta: n_expert_used    = 0
0.00.531.849 I llm_load_print_meta: causal attn      = 1
0.00.531.849 I llm_load_print_meta: pooling type     = 0
0.00.531.849 I llm_load_print_meta: rope type        = 2
0.00.531.850 I llm_load_print_meta: rope scaling     = linear
0.00.531.852 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.852 I llm_load_print_meta: freq_scale_train = 1
0.00.531.853 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.853 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.853 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.853 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.854 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.854 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.854 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.855 I llm_load_print_meta: model type       = 2B
0.00.531.856 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.531.857 I llm_load_print_meta: model params     = 2.51 B
0.00.531.858 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.531.859 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.860 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.861 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.861 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.861 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.862 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.863 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.863 I llm_load_print_meta: max token length = 93
0.00.532.038 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.592.913 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.592.923 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.592.924 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.592.925 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.592.925 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.592.926 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.598.444 I llama_new_context_with_model: n_ctx      = 8192
0.00.598.452 I llama_new_context_with_model: n_batch    = 2048
0.00.598.452 I llama_new_context_with_model: n_ubatch   = 512
0.00.598.453 I llama_new_context_with_model: flash_attn = 0
0.00.598.455 I llama_new_context_with_model: freq_base  = 10000.0
0.00.598.456 I llama_new_context_with_model: freq_scale = 1
0.00.628.605 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.628.646 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.628.755 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.630.096 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.630.103 I llama_new_context_with_model: graph nodes  = 601
0.00.630.104 I llama_new_context_with_model: graph splits = 1
0.00.630.121 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.211.840 I main: llama threadpool init, n_threads = 4
0.01.211.853 I 
0.01.211.947 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.211.950 I 
0.01.212.119 I sampler seed: 1618941507
0.01.212.129 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.212.133 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.212.134 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities! [end of text]


0.02.579.674 I llama_perf_sampler_print:    sampling time =       6.21 ms /     5 runs   (    1.24 ms per token,   804.51 tokens per second)
0.02.579.678 I llama_perf_context_print:        load time =    1208.94 ms
0.02.579.680 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.579.682 I llama_perf_context_print:        eval time =    1355.85 ms /     4 runs   (  338.96 ms per token,     2.95 tokens per second)
0.02.579.683 I llama_perf_context_print:       total time =    1367.85 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3813 (116efee0)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199928.38 ms
main:    total time = 199928.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.669 I build: 3813 (116efee0) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.888 I main: llama backend init
0.00.002.849 I main: load the model and apply lora adapter, if any
0.00.024.825 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.917 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.933 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.934 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.938 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.939 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.940 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.941 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.943 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.944 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.949 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.950 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.951 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.951 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.952 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.956 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.549 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.697 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.705 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.706 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.707 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.708 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.718 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.719 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.723 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.724 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.733 I llama_model_loader: - type  f32:   37 tensors
0.00.196.737 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.739 I llama_model_loader: - type q6_K:   19 tensors
0.00.481.277 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.482.378 I llm_load_vocab: special tokens cache size = 5
0.00.540.352 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.540.413 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.540.414 I llm_load_print_meta: arch             = gemma
0.00.540.414 I llm_load_print_meta: vocab type       = SPM
0.00.540.415 I llm_load_print_meta: n_vocab          = 256000
0.00.540.418 I llm_load_print_meta: n_merges         = 0
0.00.540.418 I llm_load_print_meta: vocab_only       = 0
0.00.540.419 I llm_load_print_meta: n_ctx_train      = 8192
0.00.540.419 I llm_load_print_meta: n_embd           = 2048
0.00.540.419 I llm_load_print_meta: n_layer          = 18
0.00.540.453 I llm_load_print_meta: n_head           = 8
0.00.540.459 I llm_load_print_meta: n_head_kv        = 1
0.00.540.460 I llm_load_print_meta: n_rot            = 256
0.00.540.460 I llm_load_print_meta: n_swa            = 0
0.00.540.461 I llm_load_print_meta: n_embd_head_k    = 256
0.00.540.461 I llm_load_print_meta: n_embd_head_v    = 256
0.00.540.465 I llm_load_print_meta: n_gqa            = 8
0.00.540.470 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.540.475 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.540.476 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.540.501 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.540.502 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.540.502 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.540.503 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.540.508 I llm_load_print_meta: n_ff             = 16384
0.00.540.509 I llm_load_print_meta: n_expert         = 0
0.00.540.509 I llm_load_print_meta: n_expert_used    = 0
0.00.540.510 I llm_load_print_meta: causal attn      = 1
0.00.540.510 I llm_load_print_meta: pooling type     = 0
0.00.540.520 I llm_load_print_meta: rope type        = 2
0.00.540.520 I llm_load_print_meta: rope scaling     = linear
0.00.540.522 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.540.523 I llm_load_print_meta: freq_scale_train = 1
0.00.540.523 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.540.523 I llm_load_print_meta: rope_finetuned   = unknown
0.00.540.524 I llm_load_print_meta: ssm_d_conv       = 0
0.00.540.524 I llm_load_print_meta: ssm_d_inner      = 0
0.00.540.525 I llm_load_print_meta: ssm_d_state      = 0
0.00.540.525 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.540.526 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.540.527 I llm_load_print_meta: model type       = 2B
0.00.540.527 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.540.528 I llm_load_print_meta: model params     = 2.51 B
0.00.540.533 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.540.534 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.540.534 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.540.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.540.535 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.540.535 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.540.544 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.540.545 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.540.545 I llm_load_print_meta: max token length = 93
0.00.540.726 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.598.352 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.603.857 I llama_new_context_with_model: n_ctx      = 8192
0.00.603.865 I llama_new_context_with_model: n_batch    = 2048
0.00.603.866 I llama_new_context_with_model: n_ubatch   = 512
0.00.603.866 I llama_new_context_with_model: flash_attn = 0
0.00.603.869 I llama_new_context_with_model: freq_base  = 10000.0
0.00.603.870 I llama_new_context_with_model: freq_scale = 1
0.00.633.450 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.633.497 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.633.605 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.634.990 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.634.997 I llama_new_context_with_model: graph nodes  = 601
0.00.634.998 I llama_new_context_with_model: graph splits = 1
0.00.635.012 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.217.066 I main: llama threadpool init, n_threads = 4
0.01.217.079 I 
0.01.217.184 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.217.189 I 
0.01.217.369 I sampler seed: 3301940191
0.01.217.380 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.217.384 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.217.385 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 fufing the melody and repeating the phrase "I'm here" in a mournful tone.

The mournful melody drifted through the empty streets, echoing the loneliness

0.12.239.605 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.47 tokens per second)
0.12.239.609 I llama_perf_context_print:        load time =    1214.13 ms
0.12.239.611 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.239.624 I llama_perf_context_print:        eval time =   10940.05 ms /    32 runs   (  341.88 ms per token,     2.93 tokens per second)
0.12.239.626 I llama_perf_context_print:       total time =   11022.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m57.594s
user	49m40.742s
sys	0m6.376s
