+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 3909 (11ac9800) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.840 I main: llama backend init
0.00.002.768 I main: load the model and apply lora adapter, if any
0.00.024.678 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.878 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.966 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.978 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.979 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.984 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.986 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.987 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.988 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.000 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.004 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.011 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.014 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.015 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.016 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.017 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.699 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.297 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.726 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.735 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.736 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.737 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.738 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.739 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.741 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.744 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.745 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.746 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.746 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.748 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.756 I llama_model_loader: - type  f32:   37 tensors
0.00.269.760 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.894 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.628 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.712 I llm_load_vocab: special tokens cache size = 5
0.00.588.156 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.588.227 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.588.228 I llm_load_print_meta: arch             = gemma
0.00.588.228 I llm_load_print_meta: vocab type       = SPM
0.00.588.229 I llm_load_print_meta: n_vocab          = 256000
0.00.588.231 I llm_load_print_meta: n_merges         = 0
0.00.588.232 I llm_load_print_meta: vocab_only       = 0
0.00.588.232 I llm_load_print_meta: n_ctx_train      = 8192
0.00.588.233 I llm_load_print_meta: n_embd           = 2048
0.00.588.233 I llm_load_print_meta: n_layer          = 18
0.00.588.297 I llm_load_print_meta: n_head           = 8
0.00.588.303 I llm_load_print_meta: n_head_kv        = 1
0.00.588.304 I llm_load_print_meta: n_rot            = 256
0.00.588.304 I llm_load_print_meta: n_swa            = 0
0.00.588.305 I llm_load_print_meta: n_embd_head_k    = 256
0.00.588.305 I llm_load_print_meta: n_embd_head_v    = 256
0.00.588.309 I llm_load_print_meta: n_gqa            = 8
0.00.588.314 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.588.320 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.588.321 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.588.323 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.588.323 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.588.323 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.588.324 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.588.329 I llm_load_print_meta: n_ff             = 16384
0.00.588.330 I llm_load_print_meta: n_expert         = 0
0.00.588.330 I llm_load_print_meta: n_expert_used    = 0
0.00.588.331 I llm_load_print_meta: causal attn      = 1
0.00.588.331 I llm_load_print_meta: pooling type     = 0
0.00.588.332 I llm_load_print_meta: rope type        = 2
0.00.588.333 I llm_load_print_meta: rope scaling     = linear
0.00.588.334 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.588.336 I llm_load_print_meta: freq_scale_train = 1
0.00.588.336 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.588.336 I llm_load_print_meta: rope_finetuned   = unknown
0.00.588.337 I llm_load_print_meta: ssm_d_conv       = 0
0.00.588.347 I llm_load_print_meta: ssm_d_inner      = 0
0.00.588.348 I llm_load_print_meta: ssm_d_state      = 0
0.00.588.348 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.588.349 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.588.349 I llm_load_print_meta: model type       = 2B
0.00.588.350 I llm_load_print_meta: model ftype      = Q8_0
0.00.588.351 I llm_load_print_meta: model params     = 2.51 B
0.00.588.352 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.588.353 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.588.353 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.588.354 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.588.355 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.588.355 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.588.355 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.588.356 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.588.362 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.588.364 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.588.364 I llm_load_print_meta: max token length = 93
0.00.588.532 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.689.176 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.689.183 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.689.184 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.689.185 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.689.186 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.689.186 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.694.778 I llama_new_context_with_model: n_ctx      = 8192
0.00.694.785 I llama_new_context_with_model: n_batch    = 2048
0.00.694.785 I llama_new_context_with_model: n_ubatch   = 512
0.00.694.785 I llama_new_context_with_model: flash_attn = 0
0.00.694.788 I llama_new_context_with_model: freq_base  = 10000.0
0.00.694.788 I llama_new_context_with_model: freq_scale = 1
0.00.722.933 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.977 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.723.093 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.515 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.724.519 I llama_new_context_with_model: graph nodes  = 601
0.00.724.520 I llama_new_context_with_model: graph splits = 1
0.00.724.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.336 I main: llama threadpool init, n_threads = 4
0.01.338.347 I 
0.01.338.452 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.456 I 
0.01.338.622 I sampler seed: 3462316342
0.01.338.633 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.641 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.338.642 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.643 I 
 increasities, and a new understanding of the challenges and opportunities of digital transformation in healthcare.

**Keywords:** Digital transformation, healthcare, challenges, opportunities, transformative

0.14.862.432 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.90 tokens per second)
0.14.862.435 I llama_perf_context_print:        load time =    1335.47 ms
0.14.862.459 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.862.461 I llama_perf_context_print:        eval time =   13442.44 ms /    32 runs   (  420.08 ms per token,     2.38 tokens per second)
0.14.862.462 I llama_perf_context_print:       total time =   13524.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 3909 (11ac9800) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.025.365 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.463 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.478 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.482 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.488 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.490 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.491 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.492 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.494 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.495 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.512 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.514 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.515 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.516 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.788 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.559 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.877 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.884 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.885 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.886 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.887 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.889 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.890 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.893 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.894 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.895 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.896 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.898 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.905 I llama_model_loader: - type  f32:   37 tensors
0.00.268.909 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.790 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.763 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.758 I llm_load_vocab: special tokens cache size = 5
0.00.585.015 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.585.085 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.585.088 I llm_load_print_meta: arch             = gemma
0.00.585.090 I llm_load_print_meta: vocab type       = SPM
0.00.585.090 I llm_load_print_meta: n_vocab          = 256000
0.00.585.093 I llm_load_print_meta: n_merges         = 0
0.00.585.093 I llm_load_print_meta: vocab_only       = 0
0.00.585.093 I llm_load_print_meta: n_ctx_train      = 8192
0.00.585.094 I llm_load_print_meta: n_embd           = 2048
0.00.585.094 I llm_load_print_meta: n_layer          = 18
0.00.585.158 I llm_load_print_meta: n_head           = 8
0.00.585.164 I llm_load_print_meta: n_head_kv        = 1
0.00.585.165 I llm_load_print_meta: n_rot            = 256
0.00.585.165 I llm_load_print_meta: n_swa            = 0
0.00.585.166 I llm_load_print_meta: n_embd_head_k    = 256
0.00.585.166 I llm_load_print_meta: n_embd_head_v    = 256
0.00.585.170 I llm_load_print_meta: n_gqa            = 8
0.00.585.175 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.585.179 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.585.181 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.585.182 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.585.182 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.585.183 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.585.183 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.585.188 I llm_load_print_meta: n_ff             = 16384
0.00.585.188 I llm_load_print_meta: n_expert         = 0
0.00.585.188 I llm_load_print_meta: n_expert_used    = 0
0.00.585.189 I llm_load_print_meta: causal attn      = 1
0.00.585.189 I llm_load_print_meta: pooling type     = 0
0.00.585.189 I llm_load_print_meta: rope type        = 2
0.00.585.190 I llm_load_print_meta: rope scaling     = linear
0.00.585.191 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.585.192 I llm_load_print_meta: freq_scale_train = 1
0.00.585.192 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.585.193 I llm_load_print_meta: rope_finetuned   = unknown
0.00.585.193 I llm_load_print_meta: ssm_d_conv       = 0
0.00.585.193 I llm_load_print_meta: ssm_d_inner      = 0
0.00.585.194 I llm_load_print_meta: ssm_d_state      = 0
0.00.585.194 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.585.194 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.585.195 I llm_load_print_meta: model type       = 2B
0.00.585.196 I llm_load_print_meta: model ftype      = Q8_0
0.00.585.196 I llm_load_print_meta: model params     = 2.51 B
0.00.585.197 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.585.198 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.585.198 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.585.199 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.585.199 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.585.200 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.585.201 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.585.201 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.585.206 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.585.208 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.585.208 I llm_load_print_meta: max token length = 93
0.00.585.372 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.680.558 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.686.193 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.200 I llama_new_context_with_model: n_batch    = 2048
0.00.686.201 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.201 I llama_new_context_with_model: flash_attn = 0
0.00.686.203 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.204 I llama_new_context_with_model: freq_scale = 1
0.00.715.303 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.715.346 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.715.460 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.716.809 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.716.814 I llama_new_context_with_model: graph nodes  = 601
0.00.716.814 I llama_new_context_with_model: graph splits = 1
0.00.716.829 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.356.943 I main: llama threadpool init, n_threads = 4
0.01.356.955 I 
0.01.357.063 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.357.066 I 
0.01.357.230 I sampler seed: 1925133030
0.01.357.240 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.357.246 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.357.247 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.357.247 I 
 increasities:

**Part 1: Unraveling the Mystery**

1. What is the significance of the number "3"?
2. How

0.15.066.714 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.57 tokens per second)
0.15.066.739 I llama_perf_context_print:        load time =    1354.05 ms
0.15.066.740 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.066.742 I llama_perf_context_print:        eval time =   13628.04 ms /    32 runs   (  425.88 ms per token,     2.35 tokens per second)
0.15.066.743 I llama_perf_context_print:       total time =   13709.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3909 (11ac9800) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.754 I main: load the model and apply lora adapter, if any
0.00.024.447 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.648 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.734 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.744 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.746 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.749 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.750 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.753 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.754 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.754 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.763 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.767 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.768 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.769 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.770 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.224 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.129 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.437 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.445 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.446 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.448 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.448 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.450 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.452 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.455 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.457 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.458 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.459 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.272.460 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.468 I llama_model_loader: - type  f32:   37 tensors
0.00.272.471 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.406 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.414 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.410 I llm_load_vocab: special tokens cache size = 5
0.00.592.728 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.799 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.800 I llm_load_print_meta: arch             = gemma
0.00.592.800 I llm_load_print_meta: vocab type       = SPM
0.00.592.801 I llm_load_print_meta: n_vocab          = 256000
0.00.592.803 I llm_load_print_meta: n_merges         = 0
0.00.592.804 I llm_load_print_meta: vocab_only       = 0
0.00.592.804 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.805 I llm_load_print_meta: n_embd           = 2048
0.00.592.805 I llm_load_print_meta: n_layer          = 18
0.00.592.868 I llm_load_print_meta: n_head           = 8
0.00.592.875 I llm_load_print_meta: n_head_kv        = 1
0.00.592.876 I llm_load_print_meta: n_rot            = 256
0.00.592.876 I llm_load_print_meta: n_swa            = 0
0.00.592.876 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.877 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.882 I llm_load_print_meta: n_gqa            = 8
0.00.592.886 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.891 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.892 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.894 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.895 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.895 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.896 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.900 I llm_load_print_meta: n_ff             = 16384
0.00.592.901 I llm_load_print_meta: n_expert         = 0
0.00.592.901 I llm_load_print_meta: n_expert_used    = 0
0.00.592.903 I llm_load_print_meta: causal attn      = 1
0.00.592.903 I llm_load_print_meta: pooling type     = 0
0.00.592.903 I llm_load_print_meta: rope type        = 2
0.00.592.904 I llm_load_print_meta: rope scaling     = linear
0.00.592.905 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.914 I llm_load_print_meta: freq_scale_train = 1
0.00.592.915 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.915 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.915 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.928 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.929 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.929 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.930 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.930 I llm_load_print_meta: model type       = 2B
0.00.592.931 I llm_load_print_meta: model ftype      = Q8_0
0.00.592.932 I llm_load_print_meta: model params     = 2.51 B
0.00.592.933 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.592.933 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.934 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.935 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.935 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.935 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.944 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.945 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.951 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.952 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.953 I llm_load_print_meta: max token length = 93
0.00.593.113 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.670.453 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.670.464 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.670.465 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.670.466 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.670.466 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.670.467 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.676.119 I llama_new_context_with_model: n_ctx      = 8192
0.00.676.126 I llama_new_context_with_model: n_batch    = 2048
0.00.676.127 I llama_new_context_with_model: n_ubatch   = 512
0.00.676.127 I llama_new_context_with_model: flash_attn = 0
0.00.676.130 I llama_new_context_with_model: freq_base  = 10000.0
0.00.676.131 I llama_new_context_with_model: freq_scale = 1
0.00.706.529 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.706.569 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.682 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.082 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.087 I llama_new_context_with_model: graph nodes  = 601
0.00.708.087 I llama_new_context_with_model: graph splits = 1
0.00.708.104 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.321.986 I main: llama threadpool init, n_threads = 4
0.01.321.998 I 
0.01.322.103 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.322.107 I 
0.01.322.271 I sampler seed: 2582003264
0.01.322.282 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.288 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.322.291 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.292 I 
 seconary factors.

**Answer:**

**Secondary factors** are additional factors that influence the risk of a disease beyond the presence of the primary risk factors.

0.14.924.158 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.85 tokens per second)
0.14.924.161 I llama_perf_context_print:        load time =    1319.14 ms
0.14.924.163 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.924.165 I llama_perf_context_print:        eval time =   13520.89 ms /    32 runs   (  422.53 ms per token,     2.37 tokens per second)
0.14.924.175 I llama_perf_context_print:       total time =   13602.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 3909 (11ac9800) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.556 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.763 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.857 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.871 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.875 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.876 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.877 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.878 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.879 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.880 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.886 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.887 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.888 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.889 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.890 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.615 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.132 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.398 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.404 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.406 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.407 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.408 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.409 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.410 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.413 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.414 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.415 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.417 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.418 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.426 I llama_model_loader: - type  f32:   37 tensors
0.00.267.429 I llama_model_loader: - type q8_0:  127 tensors
0.00.444.878 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.492.444 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.493.439 I llm_load_vocab: special tokens cache size = 5
0.00.586.455 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.586.524 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.586.525 I llm_load_print_meta: arch             = gemma
0.00.586.526 I llm_load_print_meta: vocab type       = SPM
0.00.586.527 I llm_load_print_meta: n_vocab          = 256000
0.00.586.529 I llm_load_print_meta: n_merges         = 0
0.00.586.529 I llm_load_print_meta: vocab_only       = 0
0.00.586.530 I llm_load_print_meta: n_ctx_train      = 8192
0.00.586.530 I llm_load_print_meta: n_embd           = 2048
0.00.586.530 I llm_load_print_meta: n_layer          = 18
0.00.586.594 I llm_load_print_meta: n_head           = 8
0.00.586.602 I llm_load_print_meta: n_head_kv        = 1
0.00.586.606 I llm_load_print_meta: n_rot            = 256
0.00.586.607 I llm_load_print_meta: n_swa            = 0
0.00.586.607 I llm_load_print_meta: n_embd_head_k    = 256
0.00.586.607 I llm_load_print_meta: n_embd_head_v    = 256
0.00.586.613 I llm_load_print_meta: n_gqa            = 8
0.00.586.617 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.586.623 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.586.627 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.586.628 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.586.628 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.586.629 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.586.629 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.586.643 I llm_load_print_meta: n_ff             = 16384
0.00.586.645 I llm_load_print_meta: n_expert         = 0
0.00.586.645 I llm_load_print_meta: n_expert_used    = 0
0.00.586.645 I llm_load_print_meta: causal attn      = 1
0.00.586.646 I llm_load_print_meta: pooling type     = 0
0.00.586.649 I llm_load_print_meta: rope type        = 2
0.00.586.649 I llm_load_print_meta: rope scaling     = linear
0.00.586.651 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.586.652 I llm_load_print_meta: freq_scale_train = 1
0.00.586.652 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.586.652 I llm_load_print_meta: rope_finetuned   = unknown
0.00.586.653 I llm_load_print_meta: ssm_d_conv       = 0
0.00.586.653 I llm_load_print_meta: ssm_d_inner      = 0
0.00.586.653 I llm_load_print_meta: ssm_d_state      = 0
0.00.586.654 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.586.654 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.586.654 I llm_load_print_meta: model type       = 2B
0.00.586.666 I llm_load_print_meta: model ftype      = Q8_0
0.00.586.674 I llm_load_print_meta: model params     = 2.51 B
0.00.586.675 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.586.675 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.586.677 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.586.677 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.586.678 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.586.678 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.586.679 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.586.680 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.586.686 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.586.687 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.586.687 I llm_load_print_meta: max token length = 93
0.00.586.865 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.657.773 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.657.782 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.663.585 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.591 I llama_new_context_with_model: n_batch    = 2048
0.00.663.592 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.592 I llama_new_context_with_model: flash_attn = 0
0.00.663.594 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.595 I llama_new_context_with_model: freq_scale = 1
0.00.692.403 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.446 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.692.568 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.693.942 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.693.947 I llama_new_context_with_model: graph nodes  = 601
0.00.693.948 I llama_new_context_with_model: graph splits = 1
0.00.693.962 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.305.330 I main: llama threadpool init, n_threads = 4
0.01.305.340 I 
0.01.305.459 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.305.470 I 
0.01.305.646 I sampler seed: 736869571
0.01.305.657 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.305.664 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.305.665 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.305.665 I 
 seconally in a way that is engaging and informative.

Imagine you're giving a presentation to a group of high school students. You want to grab their

0.14.912.072 I llama_perf_sampler_print:    sampling time =      49.61 ms /    33 runs   (    1.50 ms per token,   665.15 tokens per second)
0.14.912.076 I llama_perf_context_print:        load time =    1302.46 ms
0.14.912.077 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.912.080 I llama_perf_context_print:        eval time =   13524.15 ms /    32 runs   (  422.63 ms per token,     2.37 tokens per second)
0.14.912.081 I llama_perf_context_print:       total time =   13606.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.828s
user	3m50.390s
sys	0m9.450s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3909 (11ac9800)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198422.61 ms
main:    total time = 198422.61 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 3909 (11ac9800) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.024.857 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.069 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.154 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.165 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.166 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.170 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.171 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.173 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.174 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.175 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.176 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.185 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.188 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.190 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.190 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.191 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.594 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.752 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.043 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.050 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.052 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.053 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.054 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.055 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.057 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.061 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.062 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.063 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.064 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.066 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.074 I llama_model_loader: - type  f32:   37 tensors
0.00.268.077 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.079 I llama_model_loader: - type q6_K:   19 tensors
0.00.433.141 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.327 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.486.342 I llm_load_vocab: special tokens cache size = 5
0.00.597.609 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.679 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.680 I llm_load_print_meta: arch             = gemma
0.00.597.681 I llm_load_print_meta: vocab type       = SPM
0.00.597.681 I llm_load_print_meta: n_vocab          = 256000
0.00.597.684 I llm_load_print_meta: n_merges         = 0
0.00.597.684 I llm_load_print_meta: vocab_only       = 0
0.00.597.684 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.685 I llm_load_print_meta: n_embd           = 2048
0.00.597.685 I llm_load_print_meta: n_layer          = 18
0.00.597.747 I llm_load_print_meta: n_head           = 8
0.00.597.755 I llm_load_print_meta: n_head_kv        = 1
0.00.597.755 I llm_load_print_meta: n_rot            = 256
0.00.597.756 I llm_load_print_meta: n_swa            = 0
0.00.597.756 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.756 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.761 I llm_load_print_meta: n_gqa            = 8
0.00.597.765 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.770 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.771 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.773 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.773 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.774 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.774 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.779 I llm_load_print_meta: n_ff             = 16384
0.00.597.779 I llm_load_print_meta: n_expert         = 0
0.00.597.779 I llm_load_print_meta: n_expert_used    = 0
0.00.597.780 I llm_load_print_meta: causal attn      = 1
0.00.597.780 I llm_load_print_meta: pooling type     = 0
0.00.597.781 I llm_load_print_meta: rope type        = 2
0.00.597.781 I llm_load_print_meta: rope scaling     = linear
0.00.597.803 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.804 I llm_load_print_meta: freq_scale_train = 1
0.00.597.805 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.805 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.806 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.806 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.806 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.807 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.807 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.808 I llm_load_print_meta: model type       = 2B
0.00.597.809 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.597.810 I llm_load_print_meta: model params     = 2.51 B
0.00.597.817 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.597.818 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.819 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.820 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.820 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.821 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.821 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.822 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.828 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.829 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.830 I llm_load_print_meta: max token length = 93
0.00.598.015 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.657.444 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.657.453 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.657.454 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.657.455 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.657.455 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.657.456 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.663.111 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.117 I llama_new_context_with_model: n_batch    = 2048
0.00.663.118 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.119 I llama_new_context_with_model: flash_attn = 0
0.00.663.122 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.123 I llama_new_context_with_model: freq_scale = 1
0.00.692.813 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.854 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.692.968 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.694.422 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.694.427 I llama_new_context_with_model: graph nodes  = 601
0.00.694.427 I llama_new_context_with_model: graph splits = 1
0.00.694.442 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.272.210 I main: llama threadpool init, n_threads = 4
0.01.272.220 I 
0.01.272.327 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.331 I 
0.01.272.495 I sampler seed: 757500614
0.01.272.505 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.512 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.272.512 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.515 I 
 increasities and other inappropriate behavior in the workplace.

**Response:**

Addressing inappropriate workplace behavior is crucial for maintaining a safe and productive work environment. Here'

0.12.221.939 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.47 tokens per second)
0.12.221.942 I llama_perf_context_print:        load time =    1269.30 ms
0.12.221.944 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.221.945 I llama_perf_context_print:        eval time =   10868.02 ms /    32 runs   (  339.63 ms per token,     2.94 tokens per second)
0.12.221.946 I llama_perf_context_print:       total time =   10949.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3909 (11ac9800)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198314.79 ms
main:    total time = 198314.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3909 (11ac9800) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.769 I main: load the model and apply lora adapter, if any
0.00.024.758 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.846 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.860 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.861 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.865 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.866 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.867 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.871 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.872 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.872 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.878 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.880 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.881 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.882 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.883 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.933 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.542 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.830 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.839 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.840 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.841 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.842 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.843 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.844 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.848 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.849 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.857 I llama_model_loader: - type  f32:   37 tensors
0.00.269.861 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.862 I llama_model_loader: - type q6_K:   19 tensors
0.00.440.301 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.489.326 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.490.312 I llm_load_vocab: special tokens cache size = 5
0.00.592.605 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.674 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.678 I llm_load_print_meta: arch             = gemma
0.00.592.679 I llm_load_print_meta: vocab type       = SPM
0.00.592.680 I llm_load_print_meta: n_vocab          = 256000
0.00.592.682 I llm_load_print_meta: n_merges         = 0
0.00.592.683 I llm_load_print_meta: vocab_only       = 0
0.00.592.683 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.683 I llm_load_print_meta: n_embd           = 2048
0.00.592.684 I llm_load_print_meta: n_layer          = 18
0.00.592.749 I llm_load_print_meta: n_head           = 8
0.00.592.759 I llm_load_print_meta: n_head_kv        = 1
0.00.592.759 I llm_load_print_meta: n_rot            = 256
0.00.592.760 I llm_load_print_meta: n_swa            = 0
0.00.592.760 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.761 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.766 I llm_load_print_meta: n_gqa            = 8
0.00.592.770 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.776 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.777 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.778 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.779 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.779 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.779 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.785 I llm_load_print_meta: n_ff             = 16384
0.00.592.785 I llm_load_print_meta: n_expert         = 0
0.00.592.786 I llm_load_print_meta: n_expert_used    = 0
0.00.592.786 I llm_load_print_meta: causal attn      = 1
0.00.592.787 I llm_load_print_meta: pooling type     = 0
0.00.592.787 I llm_load_print_meta: rope type        = 2
0.00.592.787 I llm_load_print_meta: rope scaling     = linear
0.00.592.790 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.790 I llm_load_print_meta: freq_scale_train = 1
0.00.592.792 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.792 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.793 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.794 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.794 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.794 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.795 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.796 I llm_load_print_meta: model type       = 2B
0.00.592.797 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.592.797 I llm_load_print_meta: model params     = 2.51 B
0.00.592.798 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.592.799 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.799 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.800 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.801 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.801 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.804 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.805 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.811 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.813 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.813 I llm_load_print_meta: max token length = 93
0.00.592.977 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.651.900 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.657.480 I llama_new_context_with_model: n_ctx      = 8192
0.00.657.487 I llama_new_context_with_model: n_batch    = 2048
0.00.657.487 I llama_new_context_with_model: n_ubatch   = 512
0.00.657.488 I llama_new_context_with_model: flash_attn = 0
0.00.657.490 I llama_new_context_with_model: freq_base  = 10000.0
0.00.657.490 I llama_new_context_with_model: freq_scale = 1
0.00.687.861 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.687.908 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.688.028 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.689.453 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.457 I llama_new_context_with_model: graph nodes  = 601
0.00.689.458 I llama_new_context_with_model: graph splits = 1
0.00.689.474 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.267.867 I main: llama threadpool init, n_threads = 4
0.01.267.878 I 
0.01.267.987 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.267.990 I 
0.01.268.157 I sampler seed: 3695648336
0.01.268.167 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.268.174 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.268.175 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.268.175 I 
 seconal, a genus of flowering plants characterized by their showy flowers and long, fleshy leaves.

**Evolution of the genus Sectional**

1. **

0.12.245.911 I llama_perf_sampler_print:    sampling time =      49.28 ms /    33 runs   (    1.49 ms per token,   669.59 tokens per second)
0.12.245.915 I llama_perf_context_print:        load time =    1265.01 ms
0.12.245.916 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.245.918 I llama_perf_context_print:        eval time =   10896.97 ms /    32 runs   (  340.53 ms per token,     2.94 tokens per second)
0.12.245.938 I llama_perf_context_print:       total time =   10978.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.076s
user	50m5.984s
sys	0m6.350s
