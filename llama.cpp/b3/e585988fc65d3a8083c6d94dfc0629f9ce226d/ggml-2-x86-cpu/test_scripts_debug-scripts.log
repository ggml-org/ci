+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.636 I build: 4128 (b3e58598) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.874 I main: load the model and apply lora adapter, if any
0.00.023.592 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.603 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.692 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.703 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.705 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.710 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.713 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.715 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.717 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.718 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.719 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.725 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.726 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.728 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.729 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.730 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.729 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.100 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.256 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.268 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.269 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.270 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.271 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.273 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.275 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.278 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.279 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.281 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.282 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.283 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.290 I llama_model_loader: - type  f32:   37 tensors
0.00.268.293 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.325 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.973 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.909 I llm_load_vocab: special tokens cache size = 5
0.00.608.969 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.035 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.036 I llm_load_print_meta: arch             = gemma
0.00.609.037 I llm_load_print_meta: vocab type       = SPM
0.00.609.039 I llm_load_print_meta: n_vocab          = 256000
0.00.609.041 I llm_load_print_meta: n_merges         = 0
0.00.609.041 I llm_load_print_meta: vocab_only       = 0
0.00.609.041 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.042 I llm_load_print_meta: n_embd           = 2048
0.00.609.042 I llm_load_print_meta: n_layer          = 18
0.00.609.109 I llm_load_print_meta: n_head           = 8
0.00.609.117 I llm_load_print_meta: n_head_kv        = 1
0.00.609.118 I llm_load_print_meta: n_rot            = 256
0.00.609.119 I llm_load_print_meta: n_swa            = 0
0.00.609.120 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.120 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.125 I llm_load_print_meta: n_gqa            = 8
0.00.609.129 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.134 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.136 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.137 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.138 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.138 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.139 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.144 I llm_load_print_meta: n_ff             = 16384
0.00.609.145 I llm_load_print_meta: n_expert         = 0
0.00.609.146 I llm_load_print_meta: n_expert_used    = 0
0.00.609.146 I llm_load_print_meta: causal attn      = 1
0.00.609.157 I llm_load_print_meta: pooling type     = 0
0.00.609.158 I llm_load_print_meta: rope type        = 2
0.00.609.159 I llm_load_print_meta: rope scaling     = linear
0.00.609.160 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.161 I llm_load_print_meta: freq_scale_train = 1
0.00.609.161 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.162 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.162 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.162 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.163 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.164 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.164 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.165 I llm_load_print_meta: model type       = 2B
0.00.609.166 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.167 I llm_load_print_meta: model params     = 2.51 B
0.00.609.177 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.178 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.179 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.179 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.180 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.180 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.181 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.182 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.189 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.190 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.190 I llm_load_print_meta: max token length = 93
0.00.711.476 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.711.485 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.711.486 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.711.487 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.711.488 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.711.488 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.717.390 I llama_new_context_with_model: n_seq_max     = 1
0.00.717.397 I llama_new_context_with_model: n_ctx         = 4096
0.00.717.397 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.717.397 I llama_new_context_with_model: n_batch       = 2048
0.00.717.398 I llama_new_context_with_model: n_ubatch      = 512
0.00.717.398 I llama_new_context_with_model: flash_attn    = 0
0.00.717.400 I llama_new_context_with_model: freq_base     = 10000.0
0.00.717.401 I llama_new_context_with_model: freq_scale    = 1
0.00.717.402 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.731.910 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.731.951 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.732.074 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.734.668 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.734.672 I llama_new_context_with_model: graph nodes  = 601
0.00.734.672 I llama_new_context_with_model: graph splits = 1
0.00.734.696 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.625 I main: llama threadpool init, n_threads = 4
0.01.343.641 I 
0.01.343.750 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.754 I 
0.01.343.988 I sampler seed: 3347036589
0.01.344.001 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.344.008 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.344.011 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.344.011 I 
 increamentalism in the early 19th century.

**Answer:**

**Realism**

Realism was a philosophical movement that emerged in the

0.14.939.386 I llama_perf_sampler_print:    sampling time =      49.16 ms /    33 runs   (    1.49 ms per token,   671.28 tokens per second)
0.14.939.390 I llama_perf_context_print:        load time =    1342.65 ms
0.14.939.392 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.939.394 I llama_perf_context_print:        eval time =   13505.73 ms /    32 runs   (  422.05 ms per token,     2.37 tokens per second)
0.14.939.395 I llama_perf_context_print:       total time =   13595.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4128 (b3e58598) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.000.846 I main: load the model and apply lora adapter, if any
0.00.025.922 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.026.027 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.041 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.048 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.059 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.064 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.066 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.074 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.077 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.079 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.090 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.096 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.097 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.098 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.100 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.349 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.281 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.330 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.339 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.340 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.341 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.342 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.343 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.344 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.349 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.350 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.351 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.352 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.271.354 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.362 I llama_model_loader: - type  f32:   37 tensors
0.00.271.364 I llama_model_loader: - type q8_0:  127 tensors
0.00.452.862 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.157 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.977 I llm_load_vocab: special tokens cache size = 5
0.00.619.399 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.469 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.471 I llm_load_print_meta: arch             = gemma
0.00.619.471 I llm_load_print_meta: vocab type       = SPM
0.00.619.472 I llm_load_print_meta: n_vocab          = 256000
0.00.619.474 I llm_load_print_meta: n_merges         = 0
0.00.619.475 I llm_load_print_meta: vocab_only       = 0
0.00.619.475 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.476 I llm_load_print_meta: n_embd           = 2048
0.00.619.476 I llm_load_print_meta: n_layer          = 18
0.00.619.536 I llm_load_print_meta: n_head           = 8
0.00.619.543 I llm_load_print_meta: n_head_kv        = 1
0.00.619.544 I llm_load_print_meta: n_rot            = 256
0.00.619.544 I llm_load_print_meta: n_swa            = 0
0.00.619.545 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.545 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.550 I llm_load_print_meta: n_gqa            = 8
0.00.619.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.575 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.578 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.579 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.580 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.581 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.582 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.591 I llm_load_print_meta: n_ff             = 16384
0.00.619.592 I llm_load_print_meta: n_expert         = 0
0.00.619.593 I llm_load_print_meta: n_expert_used    = 0
0.00.619.593 I llm_load_print_meta: causal attn      = 1
0.00.619.595 I llm_load_print_meta: pooling type     = 0
0.00.619.596 I llm_load_print_meta: rope type        = 2
0.00.619.603 I llm_load_print_meta: rope scaling     = linear
0.00.619.605 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.611 I llm_load_print_meta: freq_scale_train = 1
0.00.619.611 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.612 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.613 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.614 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.614 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.615 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.617 I llm_load_print_meta: model type       = 2B
0.00.619.619 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.620 I llm_load_print_meta: model params     = 2.51 B
0.00.619.632 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.633 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.634 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.635 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.636 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.637 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.638 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.638 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.646 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.647 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.648 I llm_load_print_meta: max token length = 93
0.00.716.763 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.722.909 I llama_new_context_with_model: n_seq_max     = 1
0.00.722.914 I llama_new_context_with_model: n_ctx         = 4096
0.00.722.915 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.722.915 I llama_new_context_with_model: n_batch       = 2048
0.00.722.915 I llama_new_context_with_model: n_ubatch      = 512
0.00.722.916 I llama_new_context_with_model: flash_attn    = 0
0.00.722.918 I llama_new_context_with_model: freq_base     = 10000.0
0.00.722.919 I llama_new_context_with_model: freq_scale    = 1
0.00.722.920 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.737.546 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.737.587 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.707 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.740.233 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.740.236 I llama_new_context_with_model: graph nodes  = 601
0.00.740.237 I llama_new_context_with_model: graph splits = 1
0.00.740.262 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.384.896 I main: llama threadpool init, n_threads = 4
0.01.384.910 I 
0.01.385.029 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.385.033 I 
0.01.385.278 I sampler seed: 1320707562
0.01.385.291 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.385.300 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.385.304 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.385.305 I 
 increasities can be caused by a variety of factors, including:

**1. Viral factors:**
* Common viral infections that can cause increasities include respiratory

0.15.105.142 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.28 tokens per second)
0.15.105.145 I llama_perf_context_print:        load time =    1383.96 ms
0.15.105.148 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.105.150 I llama_perf_context_print:        eval time =   13629.42 ms /    32 runs   (  425.92 ms per token,     2.35 tokens per second)
0.15.105.152 I llama_perf_context_print:       total time =   13720.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 4128 (b3e58598) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.869 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.023.322 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.332 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.425 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.438 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.440 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.447 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.453 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.455 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.456 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.458 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.460 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.471 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.473 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.477 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.480 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.678 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.420 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.497 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.505 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.506 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.507 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.508 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.509 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.510 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.514 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.515 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.517 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.517 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.519 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.527 I llama_model_loader: - type  f32:   37 tensors
0.00.268.529 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.578 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.273 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.195 I llm_load_vocab: special tokens cache size = 5
0.00.618.015 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.088 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.089 I llm_load_print_meta: arch             = gemma
0.00.618.090 I llm_load_print_meta: vocab type       = SPM
0.00.618.091 I llm_load_print_meta: n_vocab          = 256000
0.00.618.093 I llm_load_print_meta: n_merges         = 0
0.00.618.093 I llm_load_print_meta: vocab_only       = 0
0.00.618.094 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.094 I llm_load_print_meta: n_embd           = 2048
0.00.618.095 I llm_load_print_meta: n_layer          = 18
0.00.618.178 I llm_load_print_meta: n_head           = 8
0.00.618.198 I llm_load_print_meta: n_head_kv        = 1
0.00.618.199 I llm_load_print_meta: n_rot            = 256
0.00.618.201 I llm_load_print_meta: n_swa            = 0
0.00.618.202 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.202 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.214 I llm_load_print_meta: n_gqa            = 8
0.00.618.223 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.230 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.232 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.234 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.235 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.236 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.237 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.245 I llm_load_print_meta: n_ff             = 16384
0.00.618.247 I llm_load_print_meta: n_expert         = 0
0.00.618.247 I llm_load_print_meta: n_expert_used    = 0
0.00.618.248 I llm_load_print_meta: causal attn      = 1
0.00.618.250 I llm_load_print_meta: pooling type     = 0
0.00.618.250 I llm_load_print_meta: rope type        = 2
0.00.618.251 I llm_load_print_meta: rope scaling     = linear
0.00.618.253 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.254 I llm_load_print_meta: freq_scale_train = 1
0.00.618.258 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.259 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.259 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.260 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.260 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.261 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.262 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.262 I llm_load_print_meta: model type       = 2B
0.00.618.264 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.266 I llm_load_print_meta: model params     = 2.51 B
0.00.618.277 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.278 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.279 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.280 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.281 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.281 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.294 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.295 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.302 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.304 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.305 I llm_load_print_meta: max token length = 93
0.00.694.846 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.694.855 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.694.856 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.694.856 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.694.857 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.694.858 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.701.014 I llama_new_context_with_model: n_seq_max     = 1
0.00.701.022 I llama_new_context_with_model: n_ctx         = 4096
0.00.701.022 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.701.023 I llama_new_context_with_model: n_batch       = 2048
0.00.701.023 I llama_new_context_with_model: n_ubatch      = 512
0.00.701.024 I llama_new_context_with_model: flash_attn    = 0
0.00.701.026 I llama_new_context_with_model: freq_base     = 10000.0
0.00.701.027 I llama_new_context_with_model: freq_scale    = 1
0.00.701.028 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.715.420 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.715.458 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.715.577 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.718.107 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.718.111 I llama_new_context_with_model: graph nodes  = 601
0.00.718.112 I llama_new_context_with_model: graph splits = 1
0.00.718.136 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.876 I main: llama threadpool init, n_threads = 4
0.01.330.893 I 
0.01.331.013 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.017 I 
0.01.331.254 I sampler seed: 2957652900
0.01.331.267 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.276 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.331.280 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.281 I 
 increably. 

I have a question about a specific topic. Please provide me with the following information:

* The specific topic you want to discuss


0.14.882.754 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.13 tokens per second)
0.14.882.776 I llama_perf_context_print:        load time =    1329.90 ms
0.14.882.779 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.882.781 I llama_perf_context_print:        eval time =   13463.20 ms /    32 runs   (  420.72 ms per token,     2.38 tokens per second)
0.14.882.783 I llama_perf_context_print:       total time =   13551.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4128 (b3e58598) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.000.853 I main: load the model and apply lora adapter, if any
0.00.023.293 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.301 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.393 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.405 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.407 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.412 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.416 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.417 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.419 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.421 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.423 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.430 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.435 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.437 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.439 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.441 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.000 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.793 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.848 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.857 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.858 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.859 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.860 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.861 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.863 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.866 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.867 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.868 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.869 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.871 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.879 I llama_model_loader: - type  f32:   37 tensors
0.00.268.882 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.267 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.987 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.957 I llm_load_vocab: special tokens cache size = 5
0.00.606.939 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.013 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.014 I llm_load_print_meta: arch             = gemma
0.00.607.015 I llm_load_print_meta: vocab type       = SPM
0.00.607.016 I llm_load_print_meta: n_vocab          = 256000
0.00.607.018 I llm_load_print_meta: n_merges         = 0
0.00.607.019 I llm_load_print_meta: vocab_only       = 0
0.00.607.019 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.020 I llm_load_print_meta: n_embd           = 2048
0.00.607.020 I llm_load_print_meta: n_layer          = 18
0.00.607.088 I llm_load_print_meta: n_head           = 8
0.00.607.096 I llm_load_print_meta: n_head_kv        = 1
0.00.607.097 I llm_load_print_meta: n_rot            = 256
0.00.607.097 I llm_load_print_meta: n_swa            = 0
0.00.607.097 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.098 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.102 I llm_load_print_meta: n_gqa            = 8
0.00.607.108 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.115 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.117 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.119 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.119 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.121 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.121 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.129 I llm_load_print_meta: n_ff             = 16384
0.00.607.131 I llm_load_print_meta: n_expert         = 0
0.00.607.131 I llm_load_print_meta: n_expert_used    = 0
0.00.607.132 I llm_load_print_meta: causal attn      = 1
0.00.607.132 I llm_load_print_meta: pooling type     = 0
0.00.607.133 I llm_load_print_meta: rope type        = 2
0.00.607.134 I llm_load_print_meta: rope scaling     = linear
0.00.607.136 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.140 I llm_load_print_meta: freq_scale_train = 1
0.00.607.141 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.141 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.152 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.153 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.153 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.154 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.154 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.157 I llm_load_print_meta: model type       = 2B
0.00.607.159 I llm_load_print_meta: model ftype      = Q8_0
0.00.607.160 I llm_load_print_meta: model params     = 2.51 B
0.00.607.170 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.607.171 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.172 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.173 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.175 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.176 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.176 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.177 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.184 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.186 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.186 I llm_load_print_meta: max token length = 93
0.00.679.776 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.679.787 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.685.987 I llama_new_context_with_model: n_seq_max     = 1
0.00.685.994 I llama_new_context_with_model: n_ctx         = 4096
0.00.685.995 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.685.995 I llama_new_context_with_model: n_batch       = 2048
0.00.685.996 I llama_new_context_with_model: n_ubatch      = 512
0.00.685.996 I llama_new_context_with_model: flash_attn    = 0
0.00.685.998 I llama_new_context_with_model: freq_base     = 10000.0
0.00.685.999 I llama_new_context_with_model: freq_scale    = 1
0.00.686.000 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.700.299 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.700.337 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.700.460 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.219 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.703.223 I llama_new_context_with_model: graph nodes  = 601
0.00.703.223 I llama_new_context_with_model: graph splits = 1
0.00.703.248 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.313.403 I main: llama threadpool init, n_threads = 4
0.01.313.419 I 
0.01.313.535 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.313.539 I 
0.01.313.773 I sampler seed: 1208713530
0.01.313.786 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.313.795 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.313.799 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.313.800 I 
 increasities?

I cannot find the requested information in the provided context. Please provide more context or ask a specific question. [end of text]


0.12.359.743 I llama_perf_sampler_print:    sampling time =      40.02 ms /    27 runs   (    1.48 ms per token,   674.63 tokens per second)
0.12.359.746 I llama_perf_context_print:        load time =    1312.46 ms
0.12.359.747 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.359.749 I llama_perf_context_print:        eval time =   10972.80 ms /    26 runs   (  422.03 ms per token,     2.37 tokens per second)
0.12.359.750 I llama_perf_context_print:       total time =   11046.35 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.852s
user	3m40.497s
sys	0m9.332s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4128 (b3e58598)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187432.84 ms
main:    total time = 187432.84 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4128 (b3e58598) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.840 I main: load the model and apply lora adapter, if any
0.00.026.019 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.026.028 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.026.121 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.132 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.134 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.141 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.145 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.147 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.148 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.149 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.150 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.156 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.157 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.159 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.161 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.162 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.880 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.657 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.695 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.704 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.705 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.706 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.707 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.709 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.710 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.732 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.742 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.744 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.745 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.754 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.765 I llama_model_loader: - type  f32:   37 tensors
0.00.271.770 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.771 I llama_model_loader: - type q6_K:   19 tensors
0.00.449.812 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.130 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.110 I llm_load_vocab: special tokens cache size = 5
0.00.618.794 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.862 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.863 I llm_load_print_meta: arch             = gemma
0.00.618.864 I llm_load_print_meta: vocab type       = SPM
0.00.618.865 I llm_load_print_meta: n_vocab          = 256000
0.00.618.868 I llm_load_print_meta: n_merges         = 0
0.00.618.868 I llm_load_print_meta: vocab_only       = 0
0.00.618.869 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.869 I llm_load_print_meta: n_embd           = 2048
0.00.618.869 I llm_load_print_meta: n_layer          = 18
0.00.618.934 I llm_load_print_meta: n_head           = 8
0.00.618.942 I llm_load_print_meta: n_head_kv        = 1
0.00.618.943 I llm_load_print_meta: n_rot            = 256
0.00.618.944 I llm_load_print_meta: n_swa            = 0
0.00.618.945 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.945 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.950 I llm_load_print_meta: n_gqa            = 8
0.00.618.954 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.959 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.960 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.966 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.967 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.968 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.973 I llm_load_print_meta: n_ff             = 16384
0.00.618.974 I llm_load_print_meta: n_expert         = 0
0.00.618.975 I llm_load_print_meta: n_expert_used    = 0
0.00.618.976 I llm_load_print_meta: causal attn      = 1
0.00.618.979 I llm_load_print_meta: pooling type     = 0
0.00.618.979 I llm_load_print_meta: rope type        = 2
0.00.618.980 I llm_load_print_meta: rope scaling     = linear
0.00.618.981 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.982 I llm_load_print_meta: freq_scale_train = 1
0.00.618.982 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.982 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.983 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.983 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.983 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.984 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.984 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.984 I llm_load_print_meta: model type       = 2B
0.00.618.986 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.986 I llm_load_print_meta: model params     = 2.51 B
0.00.618.997 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.997 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.998 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.999 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.000 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.000 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.001 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.001 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.007 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.009 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.009 I llm_load_print_meta: max token length = 93
0.00.681.222 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.681.231 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.681.232 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.681.233 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.681.233 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.681.234 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.687.138 I llama_new_context_with_model: n_seq_max     = 1
0.00.687.145 I llama_new_context_with_model: n_ctx         = 4096
0.00.687.146 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.687.146 I llama_new_context_with_model: n_batch       = 2048
0.00.687.146 I llama_new_context_with_model: n_ubatch      = 512
0.00.687.147 I llama_new_context_with_model: flash_attn    = 0
0.00.687.149 I llama_new_context_with_model: freq_base     = 10000.0
0.00.687.150 I llama_new_context_with_model: freq_scale    = 1
0.00.687.151 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.701.668 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.701.707 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.701.835 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.383 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.704.387 I llama_new_context_with_model: graph nodes  = 601
0.00.704.388 I llama_new_context_with_model: graph splits = 1
0.00.704.410 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.290.432 I main: llama threadpool init, n_threads = 4
0.01.290.447 I 
0.01.290.552 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.290.556 I 
0.01.290.795 I sampler seed: 2194394530
0.01.290.807 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.290.813 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.290.817 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.290.817 I 
 seconally.

The sentence is talking about a time when someone did something wrong.

**Assistant**

I understand. I will analyze the sentence and provide

0.12.427.275 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.40 tokens per second)
0.12.427.291 I llama_perf_context_print:        load time =    1289.50 ms
0.12.427.293 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.427.294 I llama_perf_context_print:        eval time =   11048.22 ms /    32 runs   (  345.26 ms per token,     2.90 tokens per second)
0.12.427.295 I llama_perf_context_print:       total time =   11136.85 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4128 (b3e58598)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 187272.37 ms
main:    total time = 187272.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.673 I build: 4128 (b3e58598) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.023.562 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.682 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.698 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.704 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.711 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.713 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.715 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.718 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.720 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.722 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.736 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.742 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.744 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.747 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.748 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.195 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.001 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.105 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.115 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.117 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.118 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.119 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.122 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.123 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.127 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.129 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.138 I llama_model_loader: - type  f32:   37 tensors
0.00.269.141 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.142 I llama_model_loader: - type q6_K:   19 tensors
0.00.453.761 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.416 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.374 I llm_load_vocab: special tokens cache size = 5
0.00.614.647 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.614.719 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.614.720 I llm_load_print_meta: arch             = gemma
0.00.614.721 I llm_load_print_meta: vocab type       = SPM
0.00.614.721 I llm_load_print_meta: n_vocab          = 256000
0.00.614.723 I llm_load_print_meta: n_merges         = 0
0.00.614.724 I llm_load_print_meta: vocab_only       = 0
0.00.614.724 I llm_load_print_meta: n_ctx_train      = 8192
0.00.614.725 I llm_load_print_meta: n_embd           = 2048
0.00.614.725 I llm_load_print_meta: n_layer          = 18
0.00.614.792 I llm_load_print_meta: n_head           = 8
0.00.614.802 I llm_load_print_meta: n_head_kv        = 1
0.00.614.807 I llm_load_print_meta: n_rot            = 256
0.00.614.808 I llm_load_print_meta: n_swa            = 0
0.00.614.810 I llm_load_print_meta: n_embd_head_k    = 256
0.00.614.810 I llm_load_print_meta: n_embd_head_v    = 256
0.00.614.817 I llm_load_print_meta: n_gqa            = 8
0.00.614.824 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.614.843 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.614.849 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.614.851 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.614.852 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.614.853 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.614.853 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.614.863 I llm_load_print_meta: n_ff             = 16384
0.00.614.865 I llm_load_print_meta: n_expert         = 0
0.00.614.865 I llm_load_print_meta: n_expert_used    = 0
0.00.614.866 I llm_load_print_meta: causal attn      = 1
0.00.614.870 I llm_load_print_meta: pooling type     = 0
0.00.614.870 I llm_load_print_meta: rope type        = 2
0.00.614.871 I llm_load_print_meta: rope scaling     = linear
0.00.614.873 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.614.874 I llm_load_print_meta: freq_scale_train = 1
0.00.614.875 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.614.875 I llm_load_print_meta: rope_finetuned   = unknown
0.00.614.888 I llm_load_print_meta: ssm_d_conv       = 0
0.00.614.889 I llm_load_print_meta: ssm_d_inner      = 0
0.00.614.890 I llm_load_print_meta: ssm_d_state      = 0
0.00.614.902 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.614.903 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.614.905 I llm_load_print_meta: model type       = 2B
0.00.614.906 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.614.908 I llm_load_print_meta: model params     = 2.51 B
0.00.614.918 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.614.921 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.614.923 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.614.923 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.614.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.614.925 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.614.926 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.614.926 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.614.945 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.614.950 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.614.951 I llm_load_print_meta: max token length = 93
0.00.672.533 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.678.763 I llama_new_context_with_model: n_seq_max     = 1
0.00.678.771 I llama_new_context_with_model: n_ctx         = 4096
0.00.678.772 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.678.772 I llama_new_context_with_model: n_batch       = 2048
0.00.678.773 I llama_new_context_with_model: n_ubatch      = 512
0.00.678.773 I llama_new_context_with_model: flash_attn    = 0
0.00.678.776 I llama_new_context_with_model: freq_base     = 10000.0
0.00.678.777 I llama_new_context_with_model: freq_scale    = 1
0.00.678.777 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.693.682 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.693.727 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.693.860 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.696.475 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.696.479 I llama_new_context_with_model: graph nodes  = 601
0.00.696.479 I llama_new_context_with_model: graph splits = 1
0.00.696.505 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.420 I main: llama threadpool init, n_threads = 4
0.01.282.436 I 
0.01.282.554 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.558 I 
0.01.282.795 I sampler seed: 347960861
0.01.282.809 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.817 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.282.821 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.282.822 I 
 seconary lymphoid hyperplasia (SLLH) is characterized by lymphoid follicles containing plasma cells and a characteristic immunopathology.

**SLLH is associated with:**

0.12.431.032 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.89 tokens per second)
0.12.431.046 I llama_perf_context_print:        load time =    1281.44 ms
0.12.431.049 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.431.051 I llama_perf_context_print:        eval time =   11058.98 ms /    32 runs   (  345.59 ms per token,     2.89 tokens per second)
0.12.431.052 I llama_perf_context_print:       total time =   11148.62 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.423s
user	46m56.232s
sys	0m6.113s
