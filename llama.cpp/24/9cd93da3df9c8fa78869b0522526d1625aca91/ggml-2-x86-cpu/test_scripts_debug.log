+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 4186 (249cd93d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.914 I main: llama backend init
0.00.000.923 I main: load the model and apply lora adapter, if any
0.00.024.164 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.176 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.272 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.291 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.299 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.300 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.302 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.303 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.305 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.307 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.315 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.319 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.320 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.322 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.234.353 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.336.725 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.360.799 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.360.810 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.360.812 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.360.813 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.360.830 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.360.833 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.360.834 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.360.840 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.360.844 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.360.846 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.360.849 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.360.851 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.360.863 I llama_model_loader: - type  f32:   37 tensors
0.00.360.869 I llama_model_loader: - type q8_0:  127 tensors
0.00.611.829 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.682.009 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.683.068 I llm_load_vocab: special tokens cache size = 5
0.00.884.402 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.884.472 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.884.473 I llm_load_print_meta: arch             = gemma
0.00.884.474 I llm_load_print_meta: vocab type       = SPM
0.00.884.475 I llm_load_print_meta: n_vocab          = 256000
0.00.884.477 I llm_load_print_meta: n_merges         = 0
0.00.884.478 I llm_load_print_meta: vocab_only       = 0
0.00.884.478 I llm_load_print_meta: n_ctx_train      = 8192
0.00.884.479 I llm_load_print_meta: n_embd           = 2048
0.00.884.479 I llm_load_print_meta: n_layer          = 18
0.00.884.545 I llm_load_print_meta: n_head           = 8
0.00.884.552 I llm_load_print_meta: n_head_kv        = 1
0.00.884.552 I llm_load_print_meta: n_rot            = 256
0.00.884.553 I llm_load_print_meta: n_swa            = 0
0.00.884.553 I llm_load_print_meta: n_embd_head_k    = 256
0.00.884.553 I llm_load_print_meta: n_embd_head_v    = 256
0.00.884.558 I llm_load_print_meta: n_gqa            = 8
0.00.884.563 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.884.569 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.884.570 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.884.576 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.884.576 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.884.576 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.884.578 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.884.583 I llm_load_print_meta: n_ff             = 16384
0.00.884.584 I llm_load_print_meta: n_expert         = 0
0.00.884.584 I llm_load_print_meta: n_expert_used    = 0
0.00.884.585 I llm_load_print_meta: causal attn      = 1
0.00.884.586 I llm_load_print_meta: pooling type     = 0
0.00.884.586 I llm_load_print_meta: rope type        = 2
0.00.884.586 I llm_load_print_meta: rope scaling     = linear
0.00.884.588 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.884.588 I llm_load_print_meta: freq_scale_train = 1
0.00.884.588 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.884.589 I llm_load_print_meta: rope_finetuned   = unknown
0.00.884.590 I llm_load_print_meta: ssm_d_conv       = 0
0.00.884.591 I llm_load_print_meta: ssm_d_inner      = 0
0.00.884.591 I llm_load_print_meta: ssm_d_state      = 0
0.00.884.591 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.884.591 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.884.592 I llm_load_print_meta: model type       = 2B
0.00.884.594 I llm_load_print_meta: model ftype      = Q8_0
0.00.884.595 I llm_load_print_meta: model params     = 2.51 B
0.00.884.605 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.884.605 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.884.606 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.884.607 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.884.607 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.884.608 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.884.608 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.884.609 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.884.615 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.884.617 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.884.617 I llm_load_print_meta: max token length = 93
0.00.985.416 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.985.428 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.985.429 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.985.430 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.985.431 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.985.431 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.991.789 I llama_new_context_with_model: n_seq_max     = 1
0.00.991.800 I llama_new_context_with_model: n_ctx         = 4096
0.00.991.801 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.991.801 I llama_new_context_with_model: n_batch       = 2048
0.00.991.801 I llama_new_context_with_model: n_ubatch      = 512
0.00.991.802 I llama_new_context_with_model: flash_attn    = 0
0.00.991.806 I llama_new_context_with_model: freq_base     = 10000.0
0.00.991.807 I llama_new_context_with_model: freq_scale    = 1
0.00.991.807 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.007.728 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.007.772 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.007.898 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.010.446 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.010.450 I llama_new_context_with_model: graph nodes  = 601
0.01.010.451 I llama_new_context_with_model: graph splits = 1
0.01.010.474 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.628.069 I main: llama threadpool init, n_threads = 4
0.01.628.085 I 
0.01.628.219 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.628.224 I 
0.01.628.474 I sampler seed: 1570399437
0.01.628.490 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.628.516 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.628.521 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.628.522 I 
 seconally, ensuring proper punctuation and capitalization.

The question is about [insert topic].

**1. What is [insert definition]?**

**2

0.15.306.825 I llama_perf_sampler_print:    sampling time =      49.15 ms /    33 runs   (    1.49 ms per token,   671.41 tokens per second)
0.15.306.829 I llama_perf_context_print:        load time =    1627.03 ms
0.15.306.831 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.306.833 I llama_perf_context_print:        eval time =   13586.67 ms /    32 runs   (  424.58 ms per token,     2.36 tokens per second)
0.15.306.834 I llama_perf_context_print:       total time =   13678.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 4186 (249cd93d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.000.868 I main: load the model and apply lora adapter, if any
0.00.023.729 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.832 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.848 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.850 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.857 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.861 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.862 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.864 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.865 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.866 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.873 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.874 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.876 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.878 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.879 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.706 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.012 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.953 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.965 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.966 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.968 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.969 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.970 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.972 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.977 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.978 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.979 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.981 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.349.983 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.992 I llama_model_loader: - type  f32:   37 tensors
0.00.349.995 I llama_model_loader: - type q8_0:  127 tensors
0.00.586.685 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.657.429 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.658.438 I llm_load_vocab: special tokens cache size = 5
0.00.849.752 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.849.829 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.849.830 I llm_load_print_meta: arch             = gemma
0.00.849.831 I llm_load_print_meta: vocab type       = SPM
0.00.849.832 I llm_load_print_meta: n_vocab          = 256000
0.00.849.834 I llm_load_print_meta: n_merges         = 0
0.00.849.834 I llm_load_print_meta: vocab_only       = 0
0.00.849.835 I llm_load_print_meta: n_ctx_train      = 8192
0.00.849.835 I llm_load_print_meta: n_embd           = 2048
0.00.849.835 I llm_load_print_meta: n_layer          = 18
0.00.849.899 I llm_load_print_meta: n_head           = 8
0.00.849.905 I llm_load_print_meta: n_head_kv        = 1
0.00.849.906 I llm_load_print_meta: n_rot            = 256
0.00.849.906 I llm_load_print_meta: n_swa            = 0
0.00.849.907 I llm_load_print_meta: n_embd_head_k    = 256
0.00.849.907 I llm_load_print_meta: n_embd_head_v    = 256
0.00.849.912 I llm_load_print_meta: n_gqa            = 8
0.00.849.916 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.849.921 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.849.922 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.849.924 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.849.925 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.849.925 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.849.925 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.849.930 I llm_load_print_meta: n_ff             = 16384
0.00.849.931 I llm_load_print_meta: n_expert         = 0
0.00.849.931 I llm_load_print_meta: n_expert_used    = 0
0.00.849.931 I llm_load_print_meta: causal attn      = 1
0.00.849.932 I llm_load_print_meta: pooling type     = 0
0.00.849.932 I llm_load_print_meta: rope type        = 2
0.00.849.932 I llm_load_print_meta: rope scaling     = linear
0.00.849.934 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.849.935 I llm_load_print_meta: freq_scale_train = 1
0.00.849.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.849.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.849.936 I llm_load_print_meta: ssm_d_conv       = 0
0.00.849.937 I llm_load_print_meta: ssm_d_inner      = 0
0.00.849.942 I llm_load_print_meta: ssm_d_state      = 0
0.00.849.943 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.849.943 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.849.944 I llm_load_print_meta: model type       = 2B
0.00.849.970 I llm_load_print_meta: model ftype      = Q8_0
0.00.849.971 I llm_load_print_meta: model params     = 2.51 B
0.00.849.981 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.849.981 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.849.987 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.849.988 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.849.989 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.849.989 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.849.990 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.849.990 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.849.996 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.849.998 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.849.998 I llm_load_print_meta: max token length = 93
0.00.944.534 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.950.613 I llama_new_context_with_model: n_seq_max     = 1
0.00.950.622 I llama_new_context_with_model: n_ctx         = 4096
0.00.950.623 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.950.624 I llama_new_context_with_model: n_batch       = 2048
0.00.950.624 I llama_new_context_with_model: n_ubatch      = 512
0.00.950.625 I llama_new_context_with_model: flash_attn    = 0
0.00.950.628 I llama_new_context_with_model: freq_base     = 10000.0
0.00.950.629 I llama_new_context_with_model: freq_scale    = 1
0.00.950.630 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.966.490 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.966.539 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.966.669 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.969.269 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.969.273 I llama_new_context_with_model: graph nodes  = 601
0.00.969.273 I llama_new_context_with_model: graph splits = 1
0.00.969.296 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.579.870 I main: llama threadpool init, n_threads = 4
0.01.579.888 I 
0.01.580.006 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.580.010 I 
0.01.580.253 I sampler seed: 611112008
0.01.580.268 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.580.277 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.580.280 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.580.281 I 
 increasities as the new trend.

**What is the meaning of this statement?**

The provided text does not contain any specific information regarding the meaning of

0.15.291.691 I llama_perf_sampler_print:    sampling time =      49.57 ms /    33 runs   (    1.50 ms per token,   665.70 tokens per second)
0.15.291.694 I llama_perf_context_print:        load time =    1578.90 ms
0.15.291.718 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.291.720 I llama_perf_context_print:        eval time =   13620.96 ms /    32 runs   (  425.65 ms per token,     2.35 tokens per second)
0.15.291.721 I llama_perf_context_print:       total time =   13711.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4186 (249cd93d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.874 I main: llama backend init
0.00.000.882 I main: load the model and apply lora adapter, if any
0.00.024.069 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.083 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.186 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.200 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.205 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.214 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.218 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.220 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.222 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.223 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.225 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.238 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.242 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.244 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.245 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.247 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.396 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.612 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.755 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.770 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.771 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.773 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.774 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.776 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.778 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.782 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.783 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.785 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.350.786 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.350.788 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.350.797 I llama_model_loader: - type  f32:   37 tensors
0.00.350.799 I llama_model_loader: - type q8_0:  127 tensors
0.00.603.162 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.673.374 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.674.403 I llm_load_vocab: special tokens cache size = 5
0.00.860.915 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.860.993 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.860.994 I llm_load_print_meta: arch             = gemma
0.00.860.994 I llm_load_print_meta: vocab type       = SPM
0.00.860.996 I llm_load_print_meta: n_vocab          = 256000
0.00.860.998 I llm_load_print_meta: n_merges         = 0
0.00.860.999 I llm_load_print_meta: vocab_only       = 0
0.00.860.999 I llm_load_print_meta: n_ctx_train      = 8192
0.00.860.999 I llm_load_print_meta: n_embd           = 2048
0.00.861.000 I llm_load_print_meta: n_layer          = 18
0.00.861.066 I llm_load_print_meta: n_head           = 8
0.00.861.073 I llm_load_print_meta: n_head_kv        = 1
0.00.861.074 I llm_load_print_meta: n_rot            = 256
0.00.861.074 I llm_load_print_meta: n_swa            = 0
0.00.861.075 I llm_load_print_meta: n_embd_head_k    = 256
0.00.861.075 I llm_load_print_meta: n_embd_head_v    = 256
0.00.861.080 I llm_load_print_meta: n_gqa            = 8
0.00.861.084 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.861.090 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.861.091 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.861.093 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.861.094 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.861.094 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.861.094 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.861.099 I llm_load_print_meta: n_ff             = 16384
0.00.861.099 I llm_load_print_meta: n_expert         = 0
0.00.861.100 I llm_load_print_meta: n_expert_used    = 0
0.00.861.100 I llm_load_print_meta: causal attn      = 1
0.00.861.100 I llm_load_print_meta: pooling type     = 0
0.00.861.101 I llm_load_print_meta: rope type        = 2
0.00.861.101 I llm_load_print_meta: rope scaling     = linear
0.00.861.102 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.861.103 I llm_load_print_meta: freq_scale_train = 1
0.00.861.103 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.861.104 I llm_load_print_meta: rope_finetuned   = unknown
0.00.861.104 I llm_load_print_meta: ssm_d_conv       = 0
0.00.861.104 I llm_load_print_meta: ssm_d_inner      = 0
0.00.861.105 I llm_load_print_meta: ssm_d_state      = 0
0.00.861.105 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.861.105 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.861.106 I llm_load_print_meta: model type       = 2B
0.00.861.107 I llm_load_print_meta: model ftype      = Q8_0
0.00.861.107 I llm_load_print_meta: model params     = 2.51 B
0.00.861.118 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.861.119 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.861.119 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.861.120 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.861.120 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.861.121 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.861.121 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.861.122 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.861.127 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.861.129 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.861.129 I llm_load_print_meta: max token length = 93
0.00.937.301 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.937.312 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.937.314 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.937.314 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.937.315 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.937.316 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.943.332 I llama_new_context_with_model: n_seq_max     = 1
0.00.943.340 I llama_new_context_with_model: n_ctx         = 4096
0.00.943.340 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.943.340 I llama_new_context_with_model: n_batch       = 2048
0.00.943.341 I llama_new_context_with_model: n_ubatch      = 512
0.00.943.342 I llama_new_context_with_model: flash_attn    = 0
0.00.943.345 I llama_new_context_with_model: freq_base     = 10000.0
0.00.943.346 I llama_new_context_with_model: freq_scale    = 1
0.00.943.347 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.959.145 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.959.186 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.959.316 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.961.839 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.961.842 I llama_new_context_with_model: graph nodes  = 601
0.00.961.843 I llama_new_context_with_model: graph splits = 1
0.00.961.867 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.910 I main: llama threadpool init, n_threads = 4
0.01.576.930 I 
0.01.577.050 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.577.054 I 
0.01.577.297 I sampler seed: 3197002756
0.01.577.311 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.577.323 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.577.324 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.577.324 I 
 increably.

I am unable to generate a response because the provided context does not contain any information regarding the requested content. [end of text]


0.12.664.513 I llama_perf_sampler_print:    sampling time =      39.99 ms /    27 runs   (    1.48 ms per token,   675.08 tokens per second)
0.12.664.527 I llama_perf_context_print:        load time =    1575.92 ms
0.12.664.529 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.664.531 I llama_perf_context_print:        eval time =   11014.63 ms /    26 runs   (  423.64 ms per token,     2.36 tokens per second)
0.12.664.532 I llama_perf_context_print:       total time =   11087.61 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.687 I build: 4186 (249cd93d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.917 I main: llama backend init
0.00.000.926 I main: load the model and apply lora adapter, if any
0.00.023.432 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.445 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.550 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.552 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.560 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.565 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.566 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.568 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.570 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.571 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.581 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.583 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.585 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.586 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.229.264 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.331.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.355.568 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.355.580 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.355.582 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.355.583 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.355.585 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.355.586 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.355.587 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.355.592 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.355.593 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.355.594 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.355.596 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.355.598 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.355.607 I llama_model_loader: - type  f32:   37 tensors
0.00.355.609 I llama_model_loader: - type q8_0:  127 tensors
0.00.606.439 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.676.090 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.677.137 I llm_load_vocab: special tokens cache size = 5
0.00.875.297 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.875.375 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.875.376 I llm_load_print_meta: arch             = gemma
0.00.875.377 I llm_load_print_meta: vocab type       = SPM
0.00.875.378 I llm_load_print_meta: n_vocab          = 256000
0.00.875.381 I llm_load_print_meta: n_merges         = 0
0.00.875.382 I llm_load_print_meta: vocab_only       = 0
0.00.875.382 I llm_load_print_meta: n_ctx_train      = 8192
0.00.875.383 I llm_load_print_meta: n_embd           = 2048
0.00.875.383 I llm_load_print_meta: n_layer          = 18
0.00.875.448 I llm_load_print_meta: n_head           = 8
0.00.875.455 I llm_load_print_meta: n_head_kv        = 1
0.00.875.456 I llm_load_print_meta: n_rot            = 256
0.00.875.456 I llm_load_print_meta: n_swa            = 0
0.00.875.457 I llm_load_print_meta: n_embd_head_k    = 256
0.00.875.457 I llm_load_print_meta: n_embd_head_v    = 256
0.00.875.462 I llm_load_print_meta: n_gqa            = 8
0.00.875.466 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.875.471 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.875.472 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.875.474 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.875.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.875.475 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.875.475 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.875.480 I llm_load_print_meta: n_ff             = 16384
0.00.875.480 I llm_load_print_meta: n_expert         = 0
0.00.875.481 I llm_load_print_meta: n_expert_used    = 0
0.00.875.481 I llm_load_print_meta: causal attn      = 1
0.00.875.481 I llm_load_print_meta: pooling type     = 0
0.00.875.482 I llm_load_print_meta: rope type        = 2
0.00.875.482 I llm_load_print_meta: rope scaling     = linear
0.00.875.483 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.875.484 I llm_load_print_meta: freq_scale_train = 1
0.00.875.484 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.875.485 I llm_load_print_meta: rope_finetuned   = unknown
0.00.875.485 I llm_load_print_meta: ssm_d_conv       = 0
0.00.875.485 I llm_load_print_meta: ssm_d_inner      = 0
0.00.875.486 I llm_load_print_meta: ssm_d_state      = 0
0.00.875.486 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.875.486 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.875.487 I llm_load_print_meta: model type       = 2B
0.00.875.488 I llm_load_print_meta: model ftype      = Q8_0
0.00.875.489 I llm_load_print_meta: model params     = 2.51 B
0.00.875.497 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.875.498 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.875.498 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.875.499 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.875.499 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.875.500 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.875.500 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.875.501 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.875.507 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.875.508 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.875.509 I llm_load_print_meta: max token length = 93
0.00.948.217 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.948.229 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.954.161 I llama_new_context_with_model: n_seq_max     = 1
0.00.954.169 I llama_new_context_with_model: n_ctx         = 4096
0.00.954.169 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.954.170 I llama_new_context_with_model: n_batch       = 2048
0.00.954.170 I llama_new_context_with_model: n_ubatch      = 512
0.00.954.171 I llama_new_context_with_model: flash_attn    = 0
0.00.954.174 I llama_new_context_with_model: freq_base     = 10000.0
0.00.954.175 I llama_new_context_with_model: freq_scale    = 1
0.00.954.176 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.969.724 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.969.766 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.969.898 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.972.553 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.972.557 I llama_new_context_with_model: graph nodes  = 601
0.00.972.558 I llama_new_context_with_model: graph splits = 1
0.00.972.581 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.592.310 I main: llama threadpool init, n_threads = 4
0.01.592.330 I 
0.01.592.473 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.592.477 I 
0.01.592.718 I sampler seed: 3833681944
0.01.592.731 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.592.741 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.592.744 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.592.744 I 
 increasively.

I'm sorry, but I am unable to generate responses that are sexually suggestive in nature. [end of text]


0.11.809.053 I llama_perf_sampler_print:    sampling time =      36.89 ms /    25 runs   (    1.48 ms per token,   677.73 tokens per second)
0.11.809.057 I llama_perf_context_print:        load time =    1591.27 ms
0.11.809.059 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.809.062 I llama_perf_context_print:        eval time =   10148.41 ms /    24 runs   (  422.85 ms per token,     2.36 tokens per second)
0.11.809.063 I llama_perf_context_print:       total time =   10216.75 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.950s
user	3m28.638s
sys	0m9.628s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4186 (249cd93d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186572.42 ms
main:    total time = 186572.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 4186 (249cd93d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.000.888 I main: load the model and apply lora adapter, if any
0.00.023.742 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.755 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.856 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.869 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.872 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.880 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.884 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.885 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.887 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.889 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.890 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.902 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.906 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.908 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.909 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.910 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.235.182 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.337.274 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.361.253 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.361.264 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.361.265 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.361.266 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.361.268 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.361.269 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.361.272 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.361.277 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.361.279 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.361.281 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.361.283 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.361.298 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.361.311 I llama_model_loader: - type  f32:   37 tensors
0.00.361.314 I llama_model_loader: - type q4_K:  108 tensors
0.00.361.315 I llama_model_loader: - type q6_K:   19 tensors
0.00.610.415 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.680.527 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.681.694 I llm_load_vocab: special tokens cache size = 5
0.00.884.020 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.884.094 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.884.095 I llm_load_print_meta: arch             = gemma
0.00.884.096 I llm_load_print_meta: vocab type       = SPM
0.00.884.097 I llm_load_print_meta: n_vocab          = 256000
0.00.884.099 I llm_load_print_meta: n_merges         = 0
0.00.884.100 I llm_load_print_meta: vocab_only       = 0
0.00.884.100 I llm_load_print_meta: n_ctx_train      = 8192
0.00.884.100 I llm_load_print_meta: n_embd           = 2048
0.00.884.101 I llm_load_print_meta: n_layer          = 18
0.00.884.166 I llm_load_print_meta: n_head           = 8
0.00.884.172 I llm_load_print_meta: n_head_kv        = 1
0.00.884.173 I llm_load_print_meta: n_rot            = 256
0.00.884.173 I llm_load_print_meta: n_swa            = 0
0.00.884.174 I llm_load_print_meta: n_embd_head_k    = 256
0.00.884.174 I llm_load_print_meta: n_embd_head_v    = 256
0.00.884.178 I llm_load_print_meta: n_gqa            = 8
0.00.884.183 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.884.188 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.884.189 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.884.191 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.884.192 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.884.192 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.884.192 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.884.210 I llm_load_print_meta: n_ff             = 16384
0.00.884.211 I llm_load_print_meta: n_expert         = 0
0.00.884.211 I llm_load_print_meta: n_expert_used    = 0
0.00.884.212 I llm_load_print_meta: causal attn      = 1
0.00.884.212 I llm_load_print_meta: pooling type     = 0
0.00.884.212 I llm_load_print_meta: rope type        = 2
0.00.884.213 I llm_load_print_meta: rope scaling     = linear
0.00.884.214 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.884.215 I llm_load_print_meta: freq_scale_train = 1
0.00.884.215 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.884.215 I llm_load_print_meta: rope_finetuned   = unknown
0.00.884.216 I llm_load_print_meta: ssm_d_conv       = 0
0.00.884.216 I llm_load_print_meta: ssm_d_inner      = 0
0.00.884.216 I llm_load_print_meta: ssm_d_state      = 0
0.00.884.217 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.884.217 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.884.218 I llm_load_print_meta: model type       = 2B
0.00.884.219 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.884.220 I llm_load_print_meta: model params     = 2.51 B
0.00.884.229 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.884.229 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.884.243 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.884.244 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.884.245 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.884.245 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.884.254 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.884.258 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.884.265 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.884.266 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.884.267 I llm_load_print_meta: max token length = 93
0.00.946.001 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.946.008 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.946.009 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.946.010 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.946.010 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.946.011 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.952.028 I llama_new_context_with_model: n_seq_max     = 1
0.00.952.036 I llama_new_context_with_model: n_ctx         = 4096
0.00.952.036 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.952.036 I llama_new_context_with_model: n_batch       = 2048
0.00.952.037 I llama_new_context_with_model: n_ubatch      = 512
0.00.952.037 I llama_new_context_with_model: flash_attn    = 0
0.00.952.042 I llama_new_context_with_model: freq_base     = 10000.0
0.00.952.042 I llama_new_context_with_model: freq_scale    = 1
0.00.952.044 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.967.430 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.967.472 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.967.600 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.970.154 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.970.158 I llama_new_context_with_model: graph nodes  = 601
0.00.970.159 I llama_new_context_with_model: graph splits = 1
0.00.970.182 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.551.520 I main: llama threadpool init, n_threads = 4
0.01.551.538 I 
0.01.551.658 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.551.662 I 
0.01.551.902 I sampler seed: 3550655770
0.01.551.917 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.551.927 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.551.929 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.551.929 I 
 increasities. 

I'm so sorry, but I can't write sexually suggestive or inappropriate content. My purpose is to assist with tasks that are

0.12.675.283 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.58 tokens per second)
0.12.675.286 I llama_perf_context_print:        load time =    1550.53 ms
0.12.675.287 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.675.302 I llama_perf_context_print:        eval time =   11034.45 ms /    32 runs   (  344.83 ms per token,     2.90 tokens per second)
0.12.675.304 I llama_perf_context_print:       total time =   11123.77 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4186 (249cd93d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186527.09 ms
main:    total time = 186527.09 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.729 I build: 4186 (249cd93d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.977 I main: llama backend init
0.00.000.986 I main: load the model and apply lora adapter, if any
0.00.023.553 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.683 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.701 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.706 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.717 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.724 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.726 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.728 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.734 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.736 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.752 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.758 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.760 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.762 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.764 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.223.873 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.022 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.012 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.026 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.027 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.028 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.350.029 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.350.031 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.350.033 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.350.038 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.350.053 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.350.066 I llama_model_loader: - type  f32:   37 tensors
0.00.350.068 I llama_model_loader: - type q4_K:  108 tensors
0.00.350.070 I llama_model_loader: - type q6_K:   19 tensors
0.00.607.363 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.678.095 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.679.200 I llm_load_vocab: special tokens cache size = 5
0.00.880.072 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.880.146 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.880.150 I llm_load_print_meta: arch             = gemma
0.00.880.151 I llm_load_print_meta: vocab type       = SPM
0.00.880.152 I llm_load_print_meta: n_vocab          = 256000
0.00.880.154 I llm_load_print_meta: n_merges         = 0
0.00.880.154 I llm_load_print_meta: vocab_only       = 0
0.00.880.155 I llm_load_print_meta: n_ctx_train      = 8192
0.00.880.155 I llm_load_print_meta: n_embd           = 2048
0.00.880.155 I llm_load_print_meta: n_layer          = 18
0.00.880.228 I llm_load_print_meta: n_head           = 8
0.00.880.238 I llm_load_print_meta: n_head_kv        = 1
0.00.880.241 I llm_load_print_meta: n_rot            = 256
0.00.880.241 I llm_load_print_meta: n_swa            = 0
0.00.880.242 I llm_load_print_meta: n_embd_head_k    = 256
0.00.880.242 I llm_load_print_meta: n_embd_head_v    = 256
0.00.880.247 I llm_load_print_meta: n_gqa            = 8
0.00.880.252 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.880.257 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.880.260 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.880.262 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.880.262 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.880.263 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.880.263 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.880.271 I llm_load_print_meta: n_ff             = 16384
0.00.880.272 I llm_load_print_meta: n_expert         = 0
0.00.880.275 I llm_load_print_meta: n_expert_used    = 0
0.00.880.276 I llm_load_print_meta: causal attn      = 1
0.00.880.276 I llm_load_print_meta: pooling type     = 0
0.00.880.277 I llm_load_print_meta: rope type        = 2
0.00.880.278 I llm_load_print_meta: rope scaling     = linear
0.00.880.280 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.880.281 I llm_load_print_meta: freq_scale_train = 1
0.00.880.282 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.880.282 I llm_load_print_meta: rope_finetuned   = unknown
0.00.880.283 I llm_load_print_meta: ssm_d_conv       = 0
0.00.880.284 I llm_load_print_meta: ssm_d_inner      = 0
0.00.880.288 I llm_load_print_meta: ssm_d_state      = 0
0.00.880.288 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.880.289 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.880.289 I llm_load_print_meta: model type       = 2B
0.00.880.291 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.880.292 I llm_load_print_meta: model params     = 2.51 B
0.00.880.303 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.880.304 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.880.307 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.880.308 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.880.309 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.880.310 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.880.310 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.880.312 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.880.322 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.880.324 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.880.326 I llm_load_print_meta: max token length = 93
0.00.936.422 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.942.242 I llama_new_context_with_model: n_seq_max     = 1
0.00.942.250 I llama_new_context_with_model: n_ctx         = 4096
0.00.942.250 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.942.250 I llama_new_context_with_model: n_batch       = 2048
0.00.942.251 I llama_new_context_with_model: n_ubatch      = 512
0.00.942.251 I llama_new_context_with_model: flash_attn    = 0
0.00.942.254 I llama_new_context_with_model: freq_base     = 10000.0
0.00.942.254 I llama_new_context_with_model: freq_scale    = 1
0.00.942.255 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.957.738 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.957.781 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.957.908 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.960.547 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.960.551 I llama_new_context_with_model: graph nodes  = 601
0.00.960.552 I llama_new_context_with_model: graph splits = 1
0.00.960.575 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.545.771 I main: llama threadpool init, n_threads = 4
0.01.545.787 I 
0.01.545.917 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.545.921 I 
0.01.546.164 I sampler seed: 2416470239
0.01.546.178 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.546.191 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.546.192 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.546.192 I 
 fufilling in the shower.

**Assistant**

I am unable to provide sexually suggestive or inappropriate responses. My purpose is to assist with tasks and provide information

0.12.733.765 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.41 tokens per second)
0.12.733.768 I llama_perf_context_print:        load time =    1544.67 ms
0.12.733.769 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.733.770 I llama_perf_context_print:        eval time =   11098.20 ms /    32 runs   (  346.82 ms per token,     2.88 tokens per second)
0.12.733.772 I llama_perf_context_print:       total time =   11188.00 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m41.494s
user	46m46.498s
sys	0m6.389s
