+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.546 I build: 4111 (24203e9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.625 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.637 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.645 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.650 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.651 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.656 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.657 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.658 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.659 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.660 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.660 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.666 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.667 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.668 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.668 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.668 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.686 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.396 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.236 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.242 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.242 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.243 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.244 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.244 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.245 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.247 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.248 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.249 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.249 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.251 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.255 I llama_model_loader: - type  f32:   37 tensors
0.00.132.256 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.381 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.681 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.175 I llm_load_vocab: special tokens cache size = 5
0.00.262.060 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.075 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.077 I llm_load_print_meta: arch             = gemma
0.00.262.078 I llm_load_print_meta: vocab type       = SPM
0.00.262.078 I llm_load_print_meta: n_vocab          = 256000
0.00.262.078 I llm_load_print_meta: n_merges         = 0
0.00.262.079 I llm_load_print_meta: vocab_only       = 0
0.00.262.079 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.079 I llm_load_print_meta: n_embd           = 2048
0.00.262.080 I llm_load_print_meta: n_layer          = 18
0.00.262.089 I llm_load_print_meta: n_head           = 8
0.00.262.090 I llm_load_print_meta: n_head_kv        = 1
0.00.262.090 I llm_load_print_meta: n_rot            = 256
0.00.262.091 I llm_load_print_meta: n_swa            = 0
0.00.262.091 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.092 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.093 I llm_load_print_meta: n_gqa            = 8
0.00.262.096 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.097 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.098 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.099 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.101 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.101 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.101 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.103 I llm_load_print_meta: n_ff             = 16384
0.00.262.103 I llm_load_print_meta: n_expert         = 0
0.00.262.103 I llm_load_print_meta: n_expert_used    = 0
0.00.262.104 I llm_load_print_meta: causal attn      = 1
0.00.262.105 I llm_load_print_meta: pooling type     = 0
0.00.262.105 I llm_load_print_meta: rope type        = 2
0.00.262.105 I llm_load_print_meta: rope scaling     = linear
0.00.262.107 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.108 I llm_load_print_meta: freq_scale_train = 1
0.00.262.108 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.110 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.110 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.111 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.111 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.111 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.111 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.112 I llm_load_print_meta: model type       = 2B
0.00.262.113 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.115 I llm_load_print_meta: model params     = 2.51 B
0.00.262.116 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.117 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.117 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.118 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.118 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.119 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.119 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.120 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.120 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.120 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.121 I llm_load_print_meta: max token length = 93
0.00.363.236 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.363.241 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.363.242 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.363.243 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.363.243 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.363.244 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.368.439 I llama_new_context_with_model: n_seq_max     = 1
0.00.368.443 I llama_new_context_with_model: n_ctx         = 4096
0.00.368.444 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.368.444 I llama_new_context_with_model: n_batch       = 2048
0.00.368.444 I llama_new_context_with_model: n_ubatch      = 512
0.00.368.445 I llama_new_context_with_model: flash_attn    = 0
0.00.368.447 I llama_new_context_with_model: freq_base     = 10000.0
0.00.368.448 I llama_new_context_with_model: freq_scale    = 1
0.00.368.449 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.683 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.696 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.784 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.384.024 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.384.031 I llama_new_context_with_model: graph nodes  = 601
0.00.384.031 I llama_new_context_with_model: graph splits = 1
0.00.384.033 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.374 I main: llama threadpool init, n_threads = 4
0.00.468.385 I 
0.00.468.459 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.462 I 
0.00.468.504 I sampler seed: 3386094494
0.00.468.515 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.518 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.519 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.519 I 
 maneuvously.

**Answer:** I understand. I will assist you with your request. [end of text]


0.01.881.124 I llama_perf_sampler_print:    sampling time =       3.02 ms /    21 runs   (    0.14 ms per token,  6949.04 tokens per second)
0.01.881.127 I llama_perf_context_print:        load time =     467.61 ms
0.01.881.129 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.881.131 I llama_perf_context_print:        eval time =    1400.16 ms /    20 runs   (   70.01 ms per token,    14.28 tokens per second)
0.01.881.132 I llama_perf_context_print:       total time =    1412.76 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.538 I build: 4111 (24203e9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.234 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.248 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.258 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.263 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.266 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.267 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.268 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.269 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.270 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.270 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.275 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.275 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.276 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.276 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.276 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.587 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.127 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.949 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.955 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.956 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.957 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.958 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.959 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.960 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.963 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.964 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.965 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.965 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.966 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.969 I llama_model_loader: - type  f32:   37 tensors
0.00.130.971 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.492 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.717 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.241 I llm_load_vocab: special tokens cache size = 5
0.00.266.131 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.145 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.146 I llm_load_print_meta: arch             = gemma
0.00.266.146 I llm_load_print_meta: vocab type       = SPM
0.00.266.147 I llm_load_print_meta: n_vocab          = 256000
0.00.266.147 I llm_load_print_meta: n_merges         = 0
0.00.266.148 I llm_load_print_meta: vocab_only       = 0
0.00.266.148 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.148 I llm_load_print_meta: n_embd           = 2048
0.00.266.149 I llm_load_print_meta: n_layer          = 18
0.00.266.159 I llm_load_print_meta: n_head           = 8
0.00.266.160 I llm_load_print_meta: n_head_kv        = 1
0.00.266.160 I llm_load_print_meta: n_rot            = 256
0.00.266.161 I llm_load_print_meta: n_swa            = 0
0.00.266.161 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.161 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.162 I llm_load_print_meta: n_gqa            = 8
0.00.266.163 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.164 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.165 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.166 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.167 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.167 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.168 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.168 I llm_load_print_meta: n_ff             = 16384
0.00.266.169 I llm_load_print_meta: n_expert         = 0
0.00.266.169 I llm_load_print_meta: n_expert_used    = 0
0.00.266.169 I llm_load_print_meta: causal attn      = 1
0.00.266.169 I llm_load_print_meta: pooling type     = 0
0.00.266.170 I llm_load_print_meta: rope type        = 2
0.00.266.170 I llm_load_print_meta: rope scaling     = linear
0.00.266.172 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.172 I llm_load_print_meta: freq_scale_train = 1
0.00.266.173 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.173 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.173 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.173 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.174 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.174 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.174 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.174 I llm_load_print_meta: model type       = 2B
0.00.266.175 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.176 I llm_load_print_meta: model params     = 2.51 B
0.00.266.176 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.177 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.177 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.178 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.178 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.178 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.179 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.179 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.179 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.180 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.180 I llm_load_print_meta: max token length = 93
0.00.361.062 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.366.271 I llama_new_context_with_model: n_seq_max     = 1
0.00.366.276 I llama_new_context_with_model: n_ctx         = 4096
0.00.366.276 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.366.277 I llama_new_context_with_model: n_batch       = 2048
0.00.366.277 I llama_new_context_with_model: n_ubatch      = 512
0.00.366.278 I llama_new_context_with_model: flash_attn    = 0
0.00.366.280 I llama_new_context_with_model: freq_base     = 10000.0
0.00.366.280 I llama_new_context_with_model: freq_scale    = 1
0.00.366.282 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.380.869 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.380.883 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.380.973 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.215 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.219 I llama_new_context_with_model: graph nodes  = 601
0.00.382.219 I llama_new_context_with_model: graph splits = 1
0.00.382.221 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.462.418 I main: llama threadpool init, n_threads = 4
0.00.462.430 I 
0.00.462.504 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.462.508 I 
0.00.462.552 I sampler seed: 122823216
0.00.462.564 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.571 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.575 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.575 I 
 increasities to the young man before he drinks.

The old man says, "These words are mere suggestions, but they hold great wisdom. They are not

0.02.629.150 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6668.01 tokens per second)
0.02.629.152 I llama_perf_context_print:        load time =     461.66 ms
0.02.629.153 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.629.155 I llama_perf_context_print:        eval time =    2148.02 ms /    32 runs   (   67.13 ms per token,    14.90 tokens per second)
0.02.629.155 I llama_perf_context_print:       total time =    2166.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.536 I build: 4111 (24203e9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.233 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.243 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.250 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.255 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.256 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.261 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.262 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.263 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.264 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.265 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.266 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.270 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.271 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.272 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.273 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.515 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.622 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.438 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.444 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.445 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.445 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.446 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.447 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.448 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.450 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.450 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.451 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.451 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.452 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.455 I llama_model_loader: - type  f32:   37 tensors
0.00.130.455 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.660 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.131 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.623 I llm_load_vocab: special tokens cache size = 5
0.00.260.657 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.673 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.673 I llm_load_print_meta: arch             = gemma
0.00.260.674 I llm_load_print_meta: vocab type       = SPM
0.00.260.674 I llm_load_print_meta: n_vocab          = 256000
0.00.260.675 I llm_load_print_meta: n_merges         = 0
0.00.260.675 I llm_load_print_meta: vocab_only       = 0
0.00.260.675 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.676 I llm_load_print_meta: n_embd           = 2048
0.00.260.676 I llm_load_print_meta: n_layer          = 18
0.00.260.689 I llm_load_print_meta: n_head           = 8
0.00.260.691 I llm_load_print_meta: n_head_kv        = 1
0.00.260.691 I llm_load_print_meta: n_rot            = 256
0.00.260.692 I llm_load_print_meta: n_swa            = 0
0.00.260.693 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.694 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.696 I llm_load_print_meta: n_gqa            = 8
0.00.260.697 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.699 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.700 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.702 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.703 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.704 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.704 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.706 I llm_load_print_meta: n_ff             = 16384
0.00.260.707 I llm_load_print_meta: n_expert         = 0
0.00.260.707 I llm_load_print_meta: n_expert_used    = 0
0.00.260.708 I llm_load_print_meta: causal attn      = 1
0.00.260.708 I llm_load_print_meta: pooling type     = 0
0.00.260.709 I llm_load_print_meta: rope type        = 2
0.00.260.710 I llm_load_print_meta: rope scaling     = linear
0.00.260.713 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.714 I llm_load_print_meta: freq_scale_train = 1
0.00.260.715 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.716 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.716 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.716 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.717 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.718 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.718 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.719 I llm_load_print_meta: model type       = 2B
0.00.260.720 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.722 I llm_load_print_meta: model params     = 2.51 B
0.00.260.723 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.724 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.728 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.728 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.729 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.729 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.730 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.730 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.731 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.732 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.732 I llm_load_print_meta: max token length = 93
0.00.336.571 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.336.577 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.578 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.336.578 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.336.579 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.336.580 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.342.024 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.031 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.031 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.032 I llama_new_context_with_model: n_batch       = 2048
0.00.342.032 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.032 I llama_new_context_with_model: flash_attn    = 0
0.00.342.035 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.036 I llama_new_context_with_model: freq_scale    = 1
0.00.342.037 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.360 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.373 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.474 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.781 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.788 I llama_new_context_with_model: graph nodes  = 601
0.00.357.788 I llama_new_context_with_model: graph splits = 1
0.00.357.791 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.075 I main: llama threadpool init, n_threads = 4
0.00.444.087 I 
0.00.444.178 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.182 I 
0.00.444.233 I sampler seed: 958859403
0.00.444.243 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.248 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.249 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.249 I 
 increasities. 

This is the context for the provided text. I am unable to access the text you are referring to, so I am unable to provide

0.02.675.239 I llama_perf_sampler_print:    sampling time =       4.93 ms /    33 runs   (    0.15 ms per token,  6688.29 tokens per second)
0.02.675.241 I llama_perf_context_print:        load time =     443.30 ms
0.02.675.242 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.675.243 I llama_perf_context_print:        eval time =    2212.56 ms /    32 runs   (   69.14 ms per token,    14.46 tokens per second)
0.02.675.244 I llama_perf_context_print:       total time =    2231.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.574 I build: 4111 (24203e9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.781 I main: llama backend init
0.00.000.788 I main: load the model and apply lora adapter, if any
0.00.021.394 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.403 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.411 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.417 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.418 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.423 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.427 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.428 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.429 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.431 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.431 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.436 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.437 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.438 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.439 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.440 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.514 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.218 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.058 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.065 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.065 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.066 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.067 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.068 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.068 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.071 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.071 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.072 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.072 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.073 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.077 I llama_model_loader: - type  f32:   37 tensors
0.00.131.078 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.379 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.247 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.707 I llm_load_vocab: special tokens cache size = 5
0.00.264.987 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.007 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.008 I llm_load_print_meta: arch             = gemma
0.00.265.008 I llm_load_print_meta: vocab type       = SPM
0.00.265.009 I llm_load_print_meta: n_vocab          = 256000
0.00.265.010 I llm_load_print_meta: n_merges         = 0
0.00.265.010 I llm_load_print_meta: vocab_only       = 0
0.00.265.010 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.011 I llm_load_print_meta: n_embd           = 2048
0.00.265.011 I llm_load_print_meta: n_layer          = 18
0.00.265.023 I llm_load_print_meta: n_head           = 8
0.00.265.024 I llm_load_print_meta: n_head_kv        = 1
0.00.265.025 I llm_load_print_meta: n_rot            = 256
0.00.265.025 I llm_load_print_meta: n_swa            = 0
0.00.265.025 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.025 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.026 I llm_load_print_meta: n_gqa            = 8
0.00.265.027 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.028 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.029 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.031 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.031 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.031 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.032 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.032 I llm_load_print_meta: n_ff             = 16384
0.00.265.033 I llm_load_print_meta: n_expert         = 0
0.00.265.033 I llm_load_print_meta: n_expert_used    = 0
0.00.265.033 I llm_load_print_meta: causal attn      = 1
0.00.265.033 I llm_load_print_meta: pooling type     = 0
0.00.265.034 I llm_load_print_meta: rope type        = 2
0.00.265.034 I llm_load_print_meta: rope scaling     = linear
0.00.265.036 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.036 I llm_load_print_meta: freq_scale_train = 1
0.00.265.037 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.037 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.037 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.037 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.038 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.038 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.038 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.038 I llm_load_print_meta: model type       = 2B
0.00.265.039 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.040 I llm_load_print_meta: model params     = 2.51 B
0.00.265.041 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.041 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.042 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.042 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.042 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.043 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.043 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.043 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.044 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.044 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.044 I llm_load_print_meta: max token length = 93
0.00.336.365 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.336.372 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.341.618 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.624 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.625 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.625 I llama_new_context_with_model: n_batch       = 2048
0.00.341.626 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.626 I llama_new_context_with_model: flash_attn    = 0
0.00.341.628 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.629 I llama_new_context_with_model: freq_scale    = 1
0.00.341.630 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.035 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.051 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.137 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.475 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.481 I llama_new_context_with_model: graph nodes  = 601
0.00.357.482 I llama_new_context_with_model: graph splits = 1
0.00.357.483 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.199 I main: llama threadpool init, n_threads = 4
0.00.444.212 I 
0.00.444.296 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.299 I 
0.00.444.345 I sampler seed: 2099197294
0.00.444.357 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.360 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.362 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.362 I 
 increasities that capture attention.

**1. The Viral Photo of the Bearded Baby**

- A picture of a baby boy with a wild mane of

0.02.869.682 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6651.88 tokens per second)
0.02.869.684 I llama_perf_context_print:        load time =     443.39 ms
0.02.869.685 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.869.687 I llama_perf_context_print:        eval time =    2406.40 ms /    32 runs   (   75.20 ms per token,    13.30 tokens per second)
0.02.869.687 I llama_perf_context_print:       total time =    2425.49 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.404s
user	0m35.740s
sys	0m9.288s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4111 (24203e9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40205.45 ms
main:    total time = 40205.45 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.524 I build: 4111 (24203e9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.746 I main: load the model and apply lora adapter, if any
0.00.021.311 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.319 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.327 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.332 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.333 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.337 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.338 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.339 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.339 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.339 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.341 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.345 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.345 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.346 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.346 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.346 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.319 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.441 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.275 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.281 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.282 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.283 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.283 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.284 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.285 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.287 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.288 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.289 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.289 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.290 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.293 I llama_model_loader: - type  f32:   37 tensors
0.00.130.294 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.294 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.169 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.333 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.794 I llm_load_vocab: special tokens cache size = 5
0.00.262.979 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.997 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.997 I llm_load_print_meta: arch             = gemma
0.00.262.998 I llm_load_print_meta: vocab type       = SPM
0.00.262.998 I llm_load_print_meta: n_vocab          = 256000
0.00.262.999 I llm_load_print_meta: n_merges         = 0
0.00.262.999 I llm_load_print_meta: vocab_only       = 0
0.00.262.999 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.000 I llm_load_print_meta: n_embd           = 2048
0.00.263.000 I llm_load_print_meta: n_layer          = 18
0.00.263.012 I llm_load_print_meta: n_head           = 8
0.00.263.013 I llm_load_print_meta: n_head_kv        = 1
0.00.263.013 I llm_load_print_meta: n_rot            = 256
0.00.263.013 I llm_load_print_meta: n_swa            = 0
0.00.263.014 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.014 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.015 I llm_load_print_meta: n_gqa            = 8
0.00.263.016 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.017 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.018 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.019 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.020 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.020 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.020 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.021 I llm_load_print_meta: n_ff             = 16384
0.00.263.021 I llm_load_print_meta: n_expert         = 0
0.00.263.022 I llm_load_print_meta: n_expert_used    = 0
0.00.263.022 I llm_load_print_meta: causal attn      = 1
0.00.263.022 I llm_load_print_meta: pooling type     = 0
0.00.263.023 I llm_load_print_meta: rope type        = 2
0.00.263.023 I llm_load_print_meta: rope scaling     = linear
0.00.263.025 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.025 I llm_load_print_meta: freq_scale_train = 1
0.00.263.025 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.026 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.026 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.026 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.026 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.027 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.027 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.027 I llm_load_print_meta: model type       = 2B
0.00.263.028 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.263.029 I llm_load_print_meta: model params     = 2.51 B
0.00.263.030 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.263.030 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.031 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.031 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.031 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.032 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.032 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.032 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.033 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.033 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.033 I llm_load_print_meta: max token length = 93
0.00.322.626 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.322.634 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.322.635 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.322.635 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.322.636 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.322.636 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.327.946 I llama_new_context_with_model: n_seq_max     = 1
0.00.327.953 I llama_new_context_with_model: n_ctx         = 4096
0.00.327.953 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.327.953 I llama_new_context_with_model: n_batch       = 2048
0.00.327.954 I llama_new_context_with_model: n_ubatch      = 512
0.00.327.955 I llama_new_context_with_model: flash_attn    = 0
0.00.327.958 I llama_new_context_with_model: freq_base     = 10000.0
0.00.327.959 I llama_new_context_with_model: freq_scale    = 1
0.00.327.960 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.343.163 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.343.177 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.343.281 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.608 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.344.615 I llama_new_context_with_model: graph nodes  = 601
0.00.344.616 I llama_new_context_with_model: graph splits = 1
0.00.344.617 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.420.297 I main: llama threadpool init, n_threads = 4
0.00.420.311 I 
0.00.420.391 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.420.395 I 
0.00.420.437 I sampler seed: 2608753976
0.00.420.448 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.420.458 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.420.458 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.420.458 I 
 squaRE, a leading provider of financial services for individuals and businesses, has been facing challenges related to operational efficiency and customer service.

**Operational Efficiency Issues:**

0.01.992.457 I llama_perf_sampler_print:    sampling time =       5.01 ms /    33 runs   (    0.15 ms per token,  6584.20 tokens per second)
0.01.992.459 I llama_perf_context_print:        load time =     419.53 ms
0.01.992.461 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.992.462 I llama_perf_context_print:        eval time =    1553.33 ms /    32 runs   (   48.54 ms per token,    20.60 tokens per second)
0.01.992.463 I llama_perf_context_print:       total time =    1572.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4111 (24203e9d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40166.36 ms
main:    total time = 40166.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.529 I build: 4111 (24203e9d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.731 I main: load the model and apply lora adapter, if any
0.00.021.335 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.352 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.358 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.360 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.363 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.364 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.364 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.365 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.366 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.367 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.370 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.370 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.371 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.371 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.372 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.062 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.194 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.018 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.025 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.026 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.026 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.027 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.028 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.029 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.031 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.032 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.034 I llama_model_loader: - type  f32:   37 tensors
0.00.131.035 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.035 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.773 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.148 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.751 I llm_load_vocab: special tokens cache size = 5
0.00.273.781 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.797 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.798 I llm_load_print_meta: arch             = gemma
0.00.273.799 I llm_load_print_meta: vocab type       = SPM
0.00.273.799 I llm_load_print_meta: n_vocab          = 256000
0.00.273.800 I llm_load_print_meta: n_merges         = 0
0.00.273.800 I llm_load_print_meta: vocab_only       = 0
0.00.273.800 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.800 I llm_load_print_meta: n_embd           = 2048
0.00.273.801 I llm_load_print_meta: n_layer          = 18
0.00.273.813 I llm_load_print_meta: n_head           = 8
0.00.273.814 I llm_load_print_meta: n_head_kv        = 1
0.00.273.814 I llm_load_print_meta: n_rot            = 256
0.00.273.814 I llm_load_print_meta: n_swa            = 0
0.00.273.815 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.815 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.816 I llm_load_print_meta: n_gqa            = 8
0.00.273.817 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.818 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.819 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.820 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.821 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.821 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.821 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.822 I llm_load_print_meta: n_ff             = 16384
0.00.273.822 I llm_load_print_meta: n_expert         = 0
0.00.273.823 I llm_load_print_meta: n_expert_used    = 0
0.00.273.823 I llm_load_print_meta: causal attn      = 1
0.00.273.823 I llm_load_print_meta: pooling type     = 0
0.00.273.823 I llm_load_print_meta: rope type        = 2
0.00.273.824 I llm_load_print_meta: rope scaling     = linear
0.00.273.825 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.826 I llm_load_print_meta: freq_scale_train = 1
0.00.273.826 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.827 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.827 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.827 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.827 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.828 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.828 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.828 I llm_load_print_meta: model type       = 2B
0.00.273.829 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.273.829 I llm_load_print_meta: model params     = 2.51 B
0.00.273.830 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.273.830 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.831 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.831 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.832 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.832 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.832 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.833 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.833 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.833 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.834 I llm_load_print_meta: max token length = 93
0.00.331.253 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.336.375 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.381 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.382 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.382 I llama_new_context_with_model: n_batch       = 2048
0.00.336.383 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.384 I llama_new_context_with_model: flash_attn    = 0
0.00.336.386 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.387 I llama_new_context_with_model: freq_scale    = 1
0.00.336.388 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.835 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.850 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.948 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.219 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.225 I llama_new_context_with_model: graph nodes  = 601
0.00.353.225 I llama_new_context_with_model: graph splits = 1
0.00.353.227 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.422 I main: llama threadpool init, n_threads = 4
0.00.433.438 I 
0.00.433.511 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.433.515 I 
0.00.433.558 I sampler seed: 3600072971
0.00.433.569 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.572 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.572 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.572 I 
 strick the following:

**a) Explain the concept of a scientific revolution.**

**b) Discuss the key characteristics of a scientific revolution.**

**c

0.01.979.694 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6749.85 tokens per second)
0.01.979.697 I llama_perf_context_print:        load time =     432.67 ms
0.01.979.698 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.979.699 I llama_perf_context_print:        eval time =    1527.67 ms /    32 runs   (   47.74 ms per token,    20.95 tokens per second)
0.01.979.700 I llama_perf_context_print:       total time =    1546.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.111s
user	10m24.025s
sys	0m6.767s
