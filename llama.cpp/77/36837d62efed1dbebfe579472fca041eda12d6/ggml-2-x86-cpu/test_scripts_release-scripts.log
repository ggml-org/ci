+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.574 I build: 4274 (7736837d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.579 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.591 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.599 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.604 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.605 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.611 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.612 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.612 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.613 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.613 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.614 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.618 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.619 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.619 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.620 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.620 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.351 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.529 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.477 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.485 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.486 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.487 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.488 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.488 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.489 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.492 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.492 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.493 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.494 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.495 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.499 I llama_model_loader: - type  f32:   37 tensors
0.00.132.500 I llama_model_loader: - type q8_0:  127 tensors
0.00.212.591 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.706 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.378 I llm_load_vocab: special tokens cache size = 5
0.00.286.911 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.932 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.933 I llm_load_print_meta: arch             = gemma
0.00.286.933 I llm_load_print_meta: vocab type       = SPM
0.00.286.934 I llm_load_print_meta: n_vocab          = 256000
0.00.286.934 I llm_load_print_meta: n_merges         = 0
0.00.286.935 I llm_load_print_meta: vocab_only       = 0
0.00.286.935 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.935 I llm_load_print_meta: n_embd           = 2048
0.00.286.935 I llm_load_print_meta: n_layer          = 18
0.00.286.948 I llm_load_print_meta: n_head           = 8
0.00.286.949 I llm_load_print_meta: n_head_kv        = 1
0.00.286.949 I llm_load_print_meta: n_rot            = 256
0.00.286.949 I llm_load_print_meta: n_swa            = 0
0.00.286.949 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.950 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.950 I llm_load_print_meta: n_gqa            = 8
0.00.286.951 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.952 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.953 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.954 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.955 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.955 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.955 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.957 I llm_load_print_meta: n_ff             = 16384
0.00.286.957 I llm_load_print_meta: n_expert         = 0
0.00.286.957 I llm_load_print_meta: n_expert_used    = 0
0.00.286.957 I llm_load_print_meta: causal attn      = 1
0.00.286.958 I llm_load_print_meta: pooling type     = 0
0.00.286.958 I llm_load_print_meta: rope type        = 2
0.00.286.958 I llm_load_print_meta: rope scaling     = linear
0.00.286.959 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.960 I llm_load_print_meta: freq_scale_train = 1
0.00.286.960 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.961 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.961 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.961 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.962 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.962 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.962 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.962 I llm_load_print_meta: model type       = 2B
0.00.286.963 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.964 I llm_load_print_meta: model params     = 2.51 B
0.00.286.965 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.965 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.965 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.966 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.966 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.967 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.967 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.967 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.968 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.968 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.968 I llm_load_print_meta: max token length = 93
0.00.385.870 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.385.879 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.385.880 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.385.881 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.385.881 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.385.882 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.391.265 I llama_new_context_with_model: n_seq_max     = 1
0.00.391.273 I llama_new_context_with_model: n_ctx         = 4096
0.00.391.273 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.391.274 I llama_new_context_with_model: n_batch       = 2048
0.00.391.274 I llama_new_context_with_model: n_ubatch      = 512
0.00.391.287 I llama_new_context_with_model: flash_attn    = 0
0.00.391.291 I llama_new_context_with_model: freq_base     = 10000.0
0.00.391.292 I llama_new_context_with_model: freq_scale    = 1
0.00.391.293 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.406.259 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.406.273 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.406.366 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.703 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.407.710 I llama_new_context_with_model: graph nodes  = 601
0.00.407.710 I llama_new_context_with_model: graph splits = 1
0.00.407.712 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.894 I main: llama threadpool init, n_threads = 4
0.00.495.910 I 
0.00.495.984 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.495.987 I 
0.00.496.034 I sampler seed: 4141037213
0.00.496.046 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.057 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.496.060 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.060 I 
 increably, a smile stretching across my face like the morning sun. My heart, a whirlwind of nerves and excitement, pounded a steady rhythm against my ribs.

0.02.821.425 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6575.01 tokens per second)
0.02.821.428 I llama_perf_context_print:        load time =     495.10 ms
0.02.821.429 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.821.430 I llama_perf_context_print:        eval time =    2306.16 ms /    32 runs   (   72.07 ms per token,    13.88 tokens per second)
0.02.821.431 I llama_perf_context_print:       total time =    2325.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.578 I build: 4274 (7736837d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.802 I main: llama backend init
0.00.000.809 I main: load the model and apply lora adapter, if any
0.00.021.301 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.317 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.324 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.325 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.330 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.331 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.331 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.332 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.333 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.334 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.338 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.339 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.339 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.340 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.341 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.874 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.793 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.734 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.743 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.743 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.744 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.745 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.746 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.746 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.749 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.749 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.750 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.750 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.752 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.757 I llama_model_loader: - type  f32:   37 tensors
0.00.131.757 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.286 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.908 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.709 I llm_load_vocab: special tokens cache size = 5
0.00.292.979 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.293.000 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.293.001 I llm_load_print_meta: arch             = gemma
0.00.293.001 I llm_load_print_meta: vocab type       = SPM
0.00.293.002 I llm_load_print_meta: n_vocab          = 256000
0.00.293.003 I llm_load_print_meta: n_merges         = 0
0.00.293.003 I llm_load_print_meta: vocab_only       = 0
0.00.293.003 I llm_load_print_meta: n_ctx_train      = 8192
0.00.293.004 I llm_load_print_meta: n_embd           = 2048
0.00.293.004 I llm_load_print_meta: n_layer          = 18
0.00.293.017 I llm_load_print_meta: n_head           = 8
0.00.293.018 I llm_load_print_meta: n_head_kv        = 1
0.00.293.018 I llm_load_print_meta: n_rot            = 256
0.00.293.018 I llm_load_print_meta: n_swa            = 0
0.00.293.019 I llm_load_print_meta: n_embd_head_k    = 256
0.00.293.019 I llm_load_print_meta: n_embd_head_v    = 256
0.00.293.020 I llm_load_print_meta: n_gqa            = 8
0.00.293.021 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.293.021 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.293.022 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.293.023 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.293.024 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.293.024 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.293.024 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.293.025 I llm_load_print_meta: n_ff             = 16384
0.00.293.025 I llm_load_print_meta: n_expert         = 0
0.00.293.026 I llm_load_print_meta: n_expert_used    = 0
0.00.293.026 I llm_load_print_meta: causal attn      = 1
0.00.293.026 I llm_load_print_meta: pooling type     = 0
0.00.293.026 I llm_load_print_meta: rope type        = 2
0.00.293.027 I llm_load_print_meta: rope scaling     = linear
0.00.293.028 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.293.029 I llm_load_print_meta: freq_scale_train = 1
0.00.293.029 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.293.030 I llm_load_print_meta: rope_finetuned   = unknown
0.00.293.031 I llm_load_print_meta: ssm_d_conv       = 0
0.00.293.031 I llm_load_print_meta: ssm_d_inner      = 0
0.00.293.031 I llm_load_print_meta: ssm_d_state      = 0
0.00.293.032 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.293.033 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.293.033 I llm_load_print_meta: model type       = 2B
0.00.293.034 I llm_load_print_meta: model ftype      = Q8_0
0.00.293.034 I llm_load_print_meta: model params     = 2.51 B
0.00.293.035 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.293.035 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.293.037 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.293.037 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.293.038 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.293.039 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.293.039 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.293.039 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.293.040 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.293.041 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.293.041 I llm_load_print_meta: max token length = 93
0.00.387.475 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.392.907 I llama_new_context_with_model: n_seq_max     = 1
0.00.392.915 I llama_new_context_with_model: n_ctx         = 4096
0.00.392.916 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.392.916 I llama_new_context_with_model: n_batch       = 2048
0.00.392.917 I llama_new_context_with_model: n_ubatch      = 512
0.00.392.918 I llama_new_context_with_model: flash_attn    = 0
0.00.392.922 I llama_new_context_with_model: freq_base     = 10000.0
0.00.392.923 I llama_new_context_with_model: freq_scale    = 1
0.00.392.924 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.409.299 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.409.317 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.409.423 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.410.862 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.410.867 I llama_new_context_with_model: graph nodes  = 601
0.00.410.868 I llama_new_context_with_model: graph splits = 1
0.00.410.870 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.496.175 I main: llama threadpool init, n_threads = 4
0.00.496.192 I 
0.00.496.272 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.496.276 I 
0.00.496.338 I sampler seed: 3778454038
0.00.496.349 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.496.359 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.496.363 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.496.363 I 
 maneuvled.

**Answer:** "Analogy".

**Analogy** is a figure of speech that establishes a relationship between two things that are otherwise

0.02.749.624 I llama_perf_sampler_print:    sampling time =       5.16 ms /    33 runs   (    0.16 ms per token,  6397.83 tokens per second)
0.02.749.626 I llama_perf_context_print:        load time =     495.35 ms
0.02.749.627 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.749.629 I llama_perf_context_print:        eval time =    2233.70 ms /    32 runs   (   69.80 ms per token,    14.33 tokens per second)
0.02.749.630 I llama_perf_context_print:       total time =    2253.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.622 I build: 4274 (7736837d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.827 I main: llama backend init
0.00.000.835 I main: load the model and apply lora adapter, if any
0.00.021.753 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.765 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.772 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.781 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.782 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.789 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.789 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.790 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.790 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.792 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.793 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.797 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.798 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.798 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.799 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.800 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.676 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.848 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.767 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.774 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.775 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.775 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.776 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.777 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.778 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.782 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.783 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.784 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.785 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.786 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.789 I llama_model_loader: - type  f32:   37 tensors
0.00.132.790 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.044 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.012 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.677 I llm_load_vocab: special tokens cache size = 5
0.00.283.070 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.088 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.090 I llm_load_print_meta: arch             = gemma
0.00.283.091 I llm_load_print_meta: vocab type       = SPM
0.00.283.091 I llm_load_print_meta: n_vocab          = 256000
0.00.283.092 I llm_load_print_meta: n_merges         = 0
0.00.283.092 I llm_load_print_meta: vocab_only       = 0
0.00.283.093 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.093 I llm_load_print_meta: n_embd           = 2048
0.00.283.093 I llm_load_print_meta: n_layer          = 18
0.00.283.106 I llm_load_print_meta: n_head           = 8
0.00.283.107 I llm_load_print_meta: n_head_kv        = 1
0.00.283.107 I llm_load_print_meta: n_rot            = 256
0.00.283.107 I llm_load_print_meta: n_swa            = 0
0.00.283.107 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.108 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.109 I llm_load_print_meta: n_gqa            = 8
0.00.283.110 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.111 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.111 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.113 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.113 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.114 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.114 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.116 I llm_load_print_meta: n_ff             = 16384
0.00.283.116 I llm_load_print_meta: n_expert         = 0
0.00.283.116 I llm_load_print_meta: n_expert_used    = 0
0.00.283.117 I llm_load_print_meta: causal attn      = 1
0.00.283.117 I llm_load_print_meta: pooling type     = 0
0.00.283.117 I llm_load_print_meta: rope type        = 2
0.00.283.117 I llm_load_print_meta: rope scaling     = linear
0.00.283.119 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.119 I llm_load_print_meta: freq_scale_train = 1
0.00.283.120 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.120 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.131 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.132 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.132 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.133 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.133 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.133 I llm_load_print_meta: model type       = 2B
0.00.283.134 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.135 I llm_load_print_meta: model params     = 2.51 B
0.00.283.136 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.136 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.137 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.137 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.138 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.138 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.138 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.139 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.139 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.140 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.140 I llm_load_print_meta: max token length = 93
0.00.359.470 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.359.478 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.479 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.359.479 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.359.480 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.359.481 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.364.896 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.903 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.903 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.904 I llama_new_context_with_model: n_batch       = 2048
0.00.364.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.905 I llama_new_context_with_model: flash_attn    = 0
0.00.364.908 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.909 I llama_new_context_with_model: freq_scale    = 1
0.00.364.910 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.025 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.040 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.135 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.417 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.423 I llama_new_context_with_model: graph nodes  = 601
0.00.382.424 I llama_new_context_with_model: graph splits = 1
0.00.382.427 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.565 I main: llama threadpool init, n_threads = 4
0.00.468.580 I 
0.00.468.654 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.468.657 I 
0.00.468.698 I sampler seed: 727576343
0.00.468.710 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.713 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.713 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.714 I 
 increasities in a variety of contexts. [end of text]


0.01.129.288 I llama_perf_sampler_print:    sampling time =       1.55 ms /    10 runs   (    0.16 ms per token,  6435.01 tokens per second)
0.01.129.290 I llama_perf_context_print:        load time =     467.71 ms
0.01.129.292 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.129.293 I llama_perf_context_print:        eval time =     654.29 ms /     9 runs   (   72.70 ms per token,    13.76 tokens per second)
0.01.129.294 I llama_perf_context_print:       total time =     660.73 ms /    10 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.559 I build: 4274 (7736837d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.318.465 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.318.478 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.318.485 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.318.494 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.318.495 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.318.500 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.318.500 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.318.501 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.318.502 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.318.502 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.318.503 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.318.507 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.318.508 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.318.508 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.318.509 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.318.510 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.346.348 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.425.070 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.431.994 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.432.001 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.432.002 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.432.003 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.432.003 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.432.005 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.432.006 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.432.009 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.432.010 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.432.012 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.432.012 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.432.013 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.432.018 I llama_model_loader: - type  f32:   37 tensors
0.00.432.019 I llama_model_loader: - type q8_0:  127 tensors
0.00.513.487 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.567.168 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.567.957 I llm_load_vocab: special tokens cache size = 5
0.00.589.455 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.475 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.476 I llm_load_print_meta: arch             = gemma
0.00.589.476 I llm_load_print_meta: vocab type       = SPM
0.00.589.477 I llm_load_print_meta: n_vocab          = 256000
0.00.589.477 I llm_load_print_meta: n_merges         = 0
0.00.589.478 I llm_load_print_meta: vocab_only       = 0
0.00.589.478 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.478 I llm_load_print_meta: n_embd           = 2048
0.00.589.478 I llm_load_print_meta: n_layer          = 18
0.00.589.492 I llm_load_print_meta: n_head           = 8
0.00.589.492 I llm_load_print_meta: n_head_kv        = 1
0.00.589.493 I llm_load_print_meta: n_rot            = 256
0.00.589.494 I llm_load_print_meta: n_swa            = 0
0.00.589.494 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.494 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.495 I llm_load_print_meta: n_gqa            = 8
0.00.589.496 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.497 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.498 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.499 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.500 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.500 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.501 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.503 I llm_load_print_meta: n_ff             = 16384
0.00.589.503 I llm_load_print_meta: n_expert         = 0
0.00.589.504 I llm_load_print_meta: n_expert_used    = 0
0.00.589.504 I llm_load_print_meta: causal attn      = 1
0.00.589.504 I llm_load_print_meta: pooling type     = 0
0.00.589.505 I llm_load_print_meta: rope type        = 2
0.00.589.506 I llm_load_print_meta: rope scaling     = linear
0.00.589.507 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.510 I llm_load_print_meta: freq_scale_train = 1
0.00.589.510 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.510 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.511 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.514 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.514 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.515 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.515 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.516 I llm_load_print_meta: model type       = 2B
0.00.589.516 I llm_load_print_meta: model ftype      = Q8_0
0.00.589.517 I llm_load_print_meta: model params     = 2.51 B
0.00.589.518 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.589.518 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.519 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.519 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.520 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.521 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.522 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.522 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.523 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.523 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.523 I llm_load_print_meta: max token length = 93
0.00.660.806 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.660.817 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.666.287 I llama_new_context_with_model: n_seq_max     = 1
0.00.666.294 I llama_new_context_with_model: n_ctx         = 4096
0.00.666.294 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.666.295 I llama_new_context_with_model: n_batch       = 2048
0.00.666.295 I llama_new_context_with_model: n_ubatch      = 512
0.00.666.296 I llama_new_context_with_model: flash_attn    = 0
0.00.666.299 I llama_new_context_with_model: freq_base     = 10000.0
0.00.666.300 I llama_new_context_with_model: freq_scale    = 1
0.00.666.301 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.682.212 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.682.228 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.682.322 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.683.611 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.683.618 I llama_new_context_with_model: graph nodes  = 601
0.00.683.618 I llama_new_context_with_model: graph splits = 1
0.00.683.620 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.780.204 I main: llama threadpool init, n_threads = 4
0.00.780.222 I 
0.00.780.297 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.780.301 I 
0.00.780.344 I sampler seed: 1238489633
0.00.780.355 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.780.367 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.780.370 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.780.371 I 
 increasels, and other colorful characters.

The characters are arranged in a circle, and each character is connected by a colorful ribbon.

**Goal:**


0.03.274.042 I llama_perf_sampler_print:    sampling time =       4.83 ms /    33 runs   (    0.15 ms per token,  6837.96 tokens per second)
0.03.274.044 I llama_perf_context_print:        load time =     779.42 ms
0.03.274.046 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.274.047 I llama_perf_context_print:        eval time =    2473.72 ms /    32 runs   (   77.30 ms per token,    12.94 tokens per second)
0.03.274.048 I llama_perf_context_print:       total time =    2493.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.747s
user	0m33.969s
sys	0m9.609s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4274 (7736837d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40264.89 ms
main:    total time = 40264.89 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.597 I build: 4274 (7736837d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.797 I main: llama backend init
0.00.000.804 I main: load the model and apply lora adapter, if any
0.00.021.326 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.337 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.346 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.351 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.353 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.357 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.358 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.359 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.360 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.360 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.361 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.365 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.366 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.366 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.367 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.367 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.741 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.492 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.386 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.393 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.394 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.394 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.395 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.396 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.396 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.399 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.399 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.400 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.401 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.401 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.406 I llama_model_loader: - type  f32:   37 tensors
0.00.131.407 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.408 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.170 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.263.002 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.716 I llm_load_vocab: special tokens cache size = 5
0.00.285.046 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.068 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.069 I llm_load_print_meta: arch             = gemma
0.00.285.069 I llm_load_print_meta: vocab type       = SPM
0.00.285.070 I llm_load_print_meta: n_vocab          = 256000
0.00.285.070 I llm_load_print_meta: n_merges         = 0
0.00.285.071 I llm_load_print_meta: vocab_only       = 0
0.00.285.071 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.071 I llm_load_print_meta: n_embd           = 2048
0.00.285.071 I llm_load_print_meta: n_layer          = 18
0.00.285.084 I llm_load_print_meta: n_head           = 8
0.00.285.085 I llm_load_print_meta: n_head_kv        = 1
0.00.285.085 I llm_load_print_meta: n_rot            = 256
0.00.285.085 I llm_load_print_meta: n_swa            = 0
0.00.285.086 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.086 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.087 I llm_load_print_meta: n_gqa            = 8
0.00.285.088 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.089 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.090 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.091 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.092 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.092 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.093 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.093 I llm_load_print_meta: n_ff             = 16384
0.00.285.094 I llm_load_print_meta: n_expert         = 0
0.00.285.094 I llm_load_print_meta: n_expert_used    = 0
0.00.285.094 I llm_load_print_meta: causal attn      = 1
0.00.285.094 I llm_load_print_meta: pooling type     = 0
0.00.285.095 I llm_load_print_meta: rope type        = 2
0.00.285.095 I llm_load_print_meta: rope scaling     = linear
0.00.285.097 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.098 I llm_load_print_meta: freq_scale_train = 1
0.00.285.098 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.098 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.099 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.099 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.099 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.100 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.100 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.100 I llm_load_print_meta: model type       = 2B
0.00.285.101 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.102 I llm_load_print_meta: model params     = 2.51 B
0.00.285.102 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.103 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.103 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.104 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.104 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.104 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.105 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.105 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.105 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.106 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.106 I llm_load_print_meta: max token length = 93
0.00.344.893 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.344.903 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.344.904 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.344.905 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.344.906 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.344.906 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.350.169 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.178 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.179 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.179 I llama_new_context_with_model: n_batch       = 2048
0.00.350.179 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.180 I llama_new_context_with_model: flash_attn    = 0
0.00.350.183 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.184 I llama_new_context_with_model: freq_scale    = 1
0.00.350.185 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.879 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.893 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.985 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.240 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.248 I llama_new_context_with_model: graph nodes  = 601
0.00.367.248 I llama_new_context_with_model: graph splits = 1
0.00.367.250 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.511 I main: llama threadpool init, n_threads = 4
0.00.444.527 I 
0.00.444.600 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.444.604 I 
0.00.444.650 I sampler seed: 3785991648
0.00.444.662 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.674 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.678 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.679 I 
 effeering through the spectral world. [end of text]


0.00.859.129 I llama_perf_sampler_print:    sampling time =       1.29 ms /     9 runs   (    0.14 ms per token,  6976.74 tokens per second)
0.00.859.133 I llama_perf_context_print:        load time =     443.69 ms
0.00.859.134 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.859.136 I llama_perf_context_print:        eval time =     408.61 ms /     8 runs   (   51.08 ms per token,    19.58 tokens per second)
0.00.859.138 I llama_perf_context_print:       total time =     414.63 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4274 (7736837d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40261.37 ms
main:    total time = 40261.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.542 I build: 4274 (7736837d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.738 I main: llama backend init
0.00.000.744 I main: load the model and apply lora adapter, if any
0.00.021.192 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.209 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.217 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.218 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.223 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.227 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.227 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.228 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.228 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.229 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.234 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.235 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.236 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.236 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.237 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.158 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.968 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.884 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.892 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.893 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.894 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.894 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.895 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.896 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.899 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.899 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.903 I llama_model_loader: - type  f32:   37 tensors
0.00.131.904 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.905 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.010 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.035 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.665 I llm_load_vocab: special tokens cache size = 5
0.00.290.872 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.892 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.893 I llm_load_print_meta: arch             = gemma
0.00.290.894 I llm_load_print_meta: vocab type       = SPM
0.00.290.894 I llm_load_print_meta: n_vocab          = 256000
0.00.290.895 I llm_load_print_meta: n_merges         = 0
0.00.290.895 I llm_load_print_meta: vocab_only       = 0
0.00.290.895 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.896 I llm_load_print_meta: n_embd           = 2048
0.00.290.896 I llm_load_print_meta: n_layer          = 18
0.00.290.909 I llm_load_print_meta: n_head           = 8
0.00.290.910 I llm_load_print_meta: n_head_kv        = 1
0.00.290.910 I llm_load_print_meta: n_rot            = 256
0.00.290.910 I llm_load_print_meta: n_swa            = 0
0.00.290.911 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.911 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.912 I llm_load_print_meta: n_gqa            = 8
0.00.290.913 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.914 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.914 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.916 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.917 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.917 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.917 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.918 I llm_load_print_meta: n_ff             = 16384
0.00.290.918 I llm_load_print_meta: n_expert         = 0
0.00.290.919 I llm_load_print_meta: n_expert_used    = 0
0.00.290.919 I llm_load_print_meta: causal attn      = 1
0.00.290.919 I llm_load_print_meta: pooling type     = 0
0.00.290.919 I llm_load_print_meta: rope type        = 2
0.00.290.920 I llm_load_print_meta: rope scaling     = linear
0.00.290.921 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.922 I llm_load_print_meta: freq_scale_train = 1
0.00.290.922 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.922 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.923 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.923 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.923 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.923 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.924 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.924 I llm_load_print_meta: model type       = 2B
0.00.290.925 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.290.926 I llm_load_print_meta: model params     = 2.51 B
0.00.290.927 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.290.927 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.928 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.928 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.928 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.929 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.929 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.929 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.930 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.930 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.930 I llm_load_print_meta: max token length = 93
0.00.347.028 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.352.137 I llama_new_context_with_model: n_seq_max     = 1
0.00.352.145 I llama_new_context_with_model: n_ctx         = 4096
0.00.352.146 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.352.147 I llama_new_context_with_model: n_batch       = 2048
0.00.352.147 I llama_new_context_with_model: n_ubatch      = 512
0.00.352.148 I llama_new_context_with_model: flash_attn    = 0
0.00.352.151 I llama_new_context_with_model: freq_base     = 10000.0
0.00.352.152 I llama_new_context_with_model: freq_scale    = 1
0.00.352.153 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.367.445 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.367.461 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.367.566 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.368.870 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.368.877 I llama_new_context_with_model: graph nodes  = 601
0.00.368.877 I llama_new_context_with_model: graph splits = 1
0.00.368.880 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.044 I main: llama threadpool init, n_threads = 4
0.00.446.064 I 
0.00.446.145 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.446.148 I 
0.00.446.192 I sampler seed: 2999750309
0.00.446.203 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.216 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.446.220 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.220 I 
 increasities are the first part of a process that leads to the formation of a biofilm. These are short-term, localized aggregations of bacteria that form on

0.02.125.042 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6662.63 tokens per second)
0.02.125.044 I llama_perf_context_print:        load time =     445.28 ms
0.02.125.045 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.125.046 I llama_perf_context_print:        eval time =    1659.63 ms /    32 runs   (   51.86 ms per token,    19.28 tokens per second)
0.02.125.047 I llama_perf_context_print:       total time =    1679.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.376s
user	10m20.230s
sys	0m7.346s
