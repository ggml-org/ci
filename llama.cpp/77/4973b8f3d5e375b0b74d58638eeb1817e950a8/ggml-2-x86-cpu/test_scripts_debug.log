+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.653 I build: 4888 (774973b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.085.605 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.622 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.721 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.742 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.750 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.752 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.754 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.756 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.758 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.760 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.768 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.769 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.771 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.773 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.775 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.310.759 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.411.983 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.434.783 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.434.796 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.434.798 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.434.800 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.434.801 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.434.804 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.434.806 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.434.810 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.434.812 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.434.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.434.816 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.434.818 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.434.826 I llama_model_loader: - type  f32:   37 tensors
0.00.434.828 I llama_model_loader: - type q8_0:  127 tensors
0.00.434.848 I print_info: file format = GGUF V3 (latest)
0.00.434.848 I print_info: file type   = Q8_0
0.00.434.851 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.720.363 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.872.878 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.873.925 I load: special tokens cache size = 5
0.01.110.727 I load: token to piece cache size = 1.6014 MB
0.01.110.812 I print_info: arch             = gemma
0.01.110.816 I print_info: vocab_only       = 0
0.01.110.816 I print_info: n_ctx_train      = 8192
0.01.110.817 I print_info: n_embd           = 2048
0.01.110.817 I print_info: n_layer          = 18
0.01.110.893 I print_info: n_head           = 8
0.01.110.903 I print_info: n_head_kv        = 1
0.01.110.905 I print_info: n_rot            = 256
0.01.110.905 I print_info: n_swa            = 0
0.01.110.906 I print_info: n_swa_pattern    = 1
0.01.110.906 I print_info: n_embd_head_k    = 256
0.01.110.907 I print_info: n_embd_head_v    = 256
0.01.110.912 I print_info: n_gqa            = 8
0.01.110.917 I print_info: n_embd_k_gqa     = 256
0.01.110.925 I print_info: n_embd_v_gqa     = 256
0.01.110.926 I print_info: f_norm_eps       = 0.0e+00
0.01.110.928 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.110.928 I print_info: f_clamp_kqv      = 0.0e+00
0.01.110.928 I print_info: f_max_alibi_bias = 0.0e+00
0.01.110.929 I print_info: f_logit_scale    = 0.0e+00
0.01.110.929 I print_info: f_attn_scale     = 0.0e+00
0.01.110.934 I print_info: n_ff             = 16384
0.01.110.935 I print_info: n_expert         = 0
0.01.110.937 I print_info: n_expert_used    = 0
0.01.110.938 I print_info: causal attn      = 1
0.01.110.940 I print_info: pooling type     = 0
0.01.110.940 I print_info: rope type        = 2
0.01.110.941 I print_info: rope scaling     = linear
0.01.110.942 I print_info: freq_base_train  = 10000.0
0.01.110.943 I print_info: freq_scale_train = 1
0.01.110.951 I print_info: n_ctx_orig_yarn  = 8192
0.01.110.952 I print_info: rope_finetuned   = unknown
0.01.110.952 I print_info: ssm_d_conv       = 0
0.01.110.952 I print_info: ssm_d_inner      = 0
0.01.110.953 I print_info: ssm_d_state      = 0
0.01.110.953 I print_info: ssm_dt_rank      = 0
0.01.110.954 I print_info: ssm_dt_b_c_rms   = 0
0.01.110.970 I print_info: model type       = 2B
0.01.110.971 I print_info: model params     = 2.51 B
0.01.110.972 I print_info: general.name     = gemma-1.1-2b-it
0.01.110.978 I print_info: vocab type       = SPM
0.01.110.980 I print_info: n_vocab          = 256000
0.01.110.983 I print_info: n_merges         = 0
0.01.110.984 I print_info: BOS token        = 2 '<bos>'
0.01.110.984 I print_info: EOS token        = 1 '<eos>'
0.01.110.985 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.110.986 I print_info: UNK token        = 3 '<unk>'
0.01.110.986 I print_info: PAD token        = 0 '<pad>'
0.01.110.987 I print_info: LF token         = 227 '<0x0A>'
0.01.110.993 I print_info: EOG token        = 1 '<eos>'
0.01.110.995 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.110.995 I print_info: max token length = 93
0.01.110.997 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.216.196 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.216.207 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.216.208 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.216.209 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.216.209 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.216.210 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.223.164 I llama_context: constructing llama_context
0.01.223.172 I llama_context: n_seq_max     = 1
0.01.223.173 I llama_context: n_ctx         = 4096
0.01.223.173 I llama_context: n_ctx_per_seq = 4096
0.01.223.173 I llama_context: n_batch       = 2048
0.01.223.174 I llama_context: n_ubatch      = 512
0.01.223.174 I llama_context: causal_attn   = 1
0.01.223.175 I llama_context: flash_attn    = 0
0.01.223.177 I llama_context: freq_base     = 10000.0
0.01.223.178 I llama_context: freq_scale    = 1
0.01.223.188 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.223.407 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.223.451 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.237.827 I init:        CPU KV buffer size =    72.00 MiB
0.01.237.870 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.247.302 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.247.308 I llama_context: graph nodes  = 601
0.01.247.308 I llama_context: graph splits = 1
0.01.247.323 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.247.323 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.879.423 I main: llama threadpool init, n_threads = 4
0.01.879.441 I 
0.01.879.538 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.879.542 I 
0.01.879.788 I sampler seed: 3688520095
0.01.879.801 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.879.813 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.879.813 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.879.814 I 
 increasities, a beautiful and mysterious woman, and a seductive sorcerer, all entangled in a web of magic and mystery.

Their paths cross at a crossroads,

0.15.309.412 I llama_perf_sampler_print:    sampling time =      49.88 ms /    33 runs   (    1.51 ms per token,   661.61 tokens per second)
0.15.309.432 I llama_perf_context_print:        load time =    1851.80 ms
0.15.309.434 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.309.435 I llama_perf_context_print:        eval time =   13344.09 ms /    32 runs   (  417.00 ms per token,     2.40 tokens per second)
0.15.309.437 I llama_perf_context_print:       total time =   13456.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.795 I build: 4888 (774973b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.012 I main: llama backend init
0.00.001.020 I main: load the model and apply lora adapter, if any
0.00.086.141 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.250 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.277 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.281 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.287 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.289 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.290 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.292 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.294 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.295 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.303 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.305 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.307 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.308 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.310 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.295.127 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.396.218 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.219 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.419.239 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.419.241 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.419.265 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.419.268 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.419.270 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.419.272 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.419.277 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.419.279 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.419.281 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.419.283 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.419.285 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.419.295 I llama_model_loader: - type  f32:   37 tensors
0.00.419.300 I llama_model_loader: - type q8_0:  127 tensors
0.00.419.320 I print_info: file format = GGUF V3 (latest)
0.00.419.323 I print_info: file type   = Q8_0
0.00.419.326 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.727.202 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.872.052 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.873.232 I load: special tokens cache size = 5
0.01.108.956 I load: token to piece cache size = 1.6014 MB
0.01.109.042 I print_info: arch             = gemma
0.01.109.044 I print_info: vocab_only       = 0
0.01.109.044 I print_info: n_ctx_train      = 8192
0.01.109.045 I print_info: n_embd           = 2048
0.01.109.045 I print_info: n_layer          = 18
0.01.109.119 I print_info: n_head           = 8
0.01.109.130 I print_info: n_head_kv        = 1
0.01.109.130 I print_info: n_rot            = 256
0.01.109.131 I print_info: n_swa            = 0
0.01.109.131 I print_info: n_swa_pattern    = 1
0.01.109.132 I print_info: n_embd_head_k    = 256
0.01.109.132 I print_info: n_embd_head_v    = 256
0.01.109.137 I print_info: n_gqa            = 8
0.01.109.144 I print_info: n_embd_k_gqa     = 256
0.01.109.150 I print_info: n_embd_v_gqa     = 256
0.01.109.152 I print_info: f_norm_eps       = 0.0e+00
0.01.109.153 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.109.153 I print_info: f_clamp_kqv      = 0.0e+00
0.01.109.153 I print_info: f_max_alibi_bias = 0.0e+00
0.01.109.154 I print_info: f_logit_scale    = 0.0e+00
0.01.109.155 I print_info: f_attn_scale     = 0.0e+00
0.01.109.160 I print_info: n_ff             = 16384
0.01.109.160 I print_info: n_expert         = 0
0.01.109.161 I print_info: n_expert_used    = 0
0.01.109.162 I print_info: causal attn      = 1
0.01.109.162 I print_info: pooling type     = 0
0.01.109.163 I print_info: rope type        = 2
0.01.109.164 I print_info: rope scaling     = linear
0.01.109.166 I print_info: freq_base_train  = 10000.0
0.01.109.166 I print_info: freq_scale_train = 1
0.01.109.167 I print_info: n_ctx_orig_yarn  = 8192
0.01.109.170 I print_info: rope_finetuned   = unknown
0.01.109.170 I print_info: ssm_d_conv       = 0
0.01.109.171 I print_info: ssm_d_inner      = 0
0.01.109.171 I print_info: ssm_d_state      = 0
0.01.109.171 I print_info: ssm_dt_rank      = 0
0.01.109.172 I print_info: ssm_dt_b_c_rms   = 0
0.01.109.173 I print_info: model type       = 2B
0.01.109.174 I print_info: model params     = 2.51 B
0.01.109.174 I print_info: general.name     = gemma-1.1-2b-it
0.01.109.178 I print_info: vocab type       = SPM
0.01.109.180 I print_info: n_vocab          = 256000
0.01.109.182 I print_info: n_merges         = 0
0.01.109.183 I print_info: BOS token        = 2 '<bos>'
0.01.109.184 I print_info: EOS token        = 1 '<eos>'
0.01.109.185 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.109.185 I print_info: UNK token        = 3 '<unk>'
0.01.109.186 I print_info: PAD token        = 0 '<pad>'
0.01.109.186 I print_info: LF token         = 227 '<0x0A>'
0.01.109.192 I print_info: EOG token        = 1 '<eos>'
0.01.109.194 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.109.195 I print_info: max token length = 93
0.01.109.198 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.199.022 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.205.834 I llama_context: constructing llama_context
0.01.205.843 I llama_context: n_seq_max     = 1
0.01.205.844 I llama_context: n_ctx         = 4096
0.01.205.844 I llama_context: n_ctx_per_seq = 4096
0.01.205.844 I llama_context: n_batch       = 2048
0.01.205.845 I llama_context: n_ubatch      = 512
0.01.205.845 I llama_context: causal_attn   = 1
0.01.205.845 I llama_context: flash_attn    = 0
0.01.205.848 I llama_context: freq_base     = 10000.0
0.01.205.849 I llama_context: freq_scale    = 1
0.01.205.851 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.206.057 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.206.100 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.220.931 I init:        CPU KV buffer size =    72.00 MiB
0.01.220.976 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.230.732 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.230.738 I llama_context: graph nodes  = 601
0.01.230.738 I llama_context: graph splits = 1
0.01.230.752 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.230.753 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.862.142 I main: llama threadpool init, n_threads = 4
0.01.862.161 I 
0.01.862.261 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.862.265 I 
0.01.862.514 I sampler seed: 1244397791
0.01.862.530 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.862.540 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.862.542 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.862.543 I 
 increasities for a captivating and emotional story that explores themes of loss, love, and longing.

**Synopsis:**

In the twilight of her life, Eleanor

0.15.551.016 I llama_perf_sampler_print:    sampling time =      50.16 ms /    33 runs   (    1.52 ms per token,   657.92 tokens per second)
0.15.551.035 I llama_perf_context_print:        load time =    1834.32 ms
0.15.551.037 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.551.039 I llama_perf_context_print:        eval time =   13601.70 ms /    32 runs   (  425.05 ms per token,     2.35 tokens per second)
0.15.551.040 I llama_perf_context_print:       total time =   13715.54 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.725 I build: 4888 (774973b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.932 I main: llama backend init
0.00.000.941 I main: load the model and apply lora adapter, if any
0.00.088.081 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.088.099 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.088.196 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.088.238 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.088.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.088.250 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.088.252 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.088.254 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.088.256 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.088.259 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.088.261 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.088.268 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.088.270 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.088.272 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.088.274 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.088.275 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.300.625 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.401.273 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.424.107 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.424.121 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.424.123 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.424.125 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.424.127 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.424.129 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.424.131 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.424.136 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.424.138 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.424.140 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.424.142 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.424.144 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.424.152 I llama_model_loader: - type  f32:   37 tensors
0.00.424.154 I llama_model_loader: - type q8_0:  127 tensors
0.00.424.174 I print_info: file format = GGUF V3 (latest)
0.00.424.174 I print_info: file type   = Q8_0
0.00.424.177 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.696.207 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.827.250 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.828.337 I load: special tokens cache size = 5
0.01.063.007 I load: token to piece cache size = 1.6014 MB
0.01.063.091 I print_info: arch             = gemma
0.01.063.093 I print_info: vocab_only       = 0
0.01.063.093 I print_info: n_ctx_train      = 8192
0.01.063.093 I print_info: n_embd           = 2048
0.01.063.094 I print_info: n_layer          = 18
0.01.063.172 I print_info: n_head           = 8
0.01.063.179 I print_info: n_head_kv        = 1
0.01.063.179 I print_info: n_rot            = 256
0.01.063.180 I print_info: n_swa            = 0
0.01.063.180 I print_info: n_swa_pattern    = 1
0.01.063.180 I print_info: n_embd_head_k    = 256
0.01.063.181 I print_info: n_embd_head_v    = 256
0.01.063.186 I print_info: n_gqa            = 8
0.01.063.191 I print_info: n_embd_k_gqa     = 256
0.01.063.197 I print_info: n_embd_v_gqa     = 256
0.01.063.202 I print_info: f_norm_eps       = 0.0e+00
0.01.063.203 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.063.205 I print_info: f_clamp_kqv      = 0.0e+00
0.01.063.205 I print_info: f_max_alibi_bias = 0.0e+00
0.01.063.206 I print_info: f_logit_scale    = 0.0e+00
0.01.063.207 I print_info: f_attn_scale     = 0.0e+00
0.01.063.213 I print_info: n_ff             = 16384
0.01.063.213 I print_info: n_expert         = 0
0.01.063.214 I print_info: n_expert_used    = 0
0.01.063.214 I print_info: causal attn      = 1
0.01.063.214 I print_info: pooling type     = 0
0.01.063.215 I print_info: rope type        = 2
0.01.063.216 I print_info: rope scaling     = linear
0.01.063.217 I print_info: freq_base_train  = 10000.0
0.01.063.219 I print_info: freq_scale_train = 1
0.01.063.219 I print_info: n_ctx_orig_yarn  = 8192
0.01.063.220 I print_info: rope_finetuned   = unknown
0.01.063.220 I print_info: ssm_d_conv       = 0
0.01.063.223 I print_info: ssm_d_inner      = 0
0.01.063.224 I print_info: ssm_d_state      = 0
0.01.063.224 I print_info: ssm_dt_rank      = 0
0.01.063.224 I print_info: ssm_dt_b_c_rms   = 0
0.01.063.225 I print_info: model type       = 2B
0.01.063.226 I print_info: model params     = 2.51 B
0.01.063.227 I print_info: general.name     = gemma-1.1-2b-it
0.01.063.231 I print_info: vocab type       = SPM
0.01.063.233 I print_info: n_vocab          = 256000
0.01.063.236 I print_info: n_merges         = 0
0.01.063.236 I print_info: BOS token        = 2 '<bos>'
0.01.063.237 I print_info: EOS token        = 1 '<eos>'
0.01.063.237 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.063.238 I print_info: UNK token        = 3 '<unk>'
0.01.063.238 I print_info: PAD token        = 0 '<pad>'
0.01.063.238 I print_info: LF token         = 227 '<0x0A>'
0.01.063.245 I print_info: EOG token        = 1 '<eos>'
0.01.063.248 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.063.248 I print_info: max token length = 93
0.01.063.250 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.137.532 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.137.541 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.137.542 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.137.542 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.137.543 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.137.544 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.146.111 I llama_context: constructing llama_context
0.01.146.119 I llama_context: n_seq_max     = 1
0.01.146.120 I llama_context: n_ctx         = 4096
0.01.146.120 I llama_context: n_ctx_per_seq = 4096
0.01.146.121 I llama_context: n_batch       = 2048
0.01.146.121 I llama_context: n_ubatch      = 512
0.01.146.122 I llama_context: causal_attn   = 1
0.01.146.122 I llama_context: flash_attn    = 0
0.01.146.125 I llama_context: freq_base     = 10000.0
0.01.146.137 I llama_context: freq_scale    = 1
0.01.146.139 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.146.356 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.146.398 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.161.235 I init:        CPU KV buffer size =    72.00 MiB
0.01.161.275 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.170.209 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.170.215 I llama_context: graph nodes  = 601
0.01.170.216 I llama_context: graph splits = 1
0.01.170.228 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.170.229 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.800.324 I main: llama threadpool init, n_threads = 4
0.01.800.341 I 
0.01.800.436 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.800.439 I 
0.01.800.682 I sampler seed: 52942040
0.01.800.695 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.800.706 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.800.707 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.800.707 I 
 increamically, a joyous symphony erupts from the depths of the heart. 

**Identify the literary device used in the given passage.**

The literary device

0.15.342.266 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.25 tokens per second)
0.15.342.283 I llama_perf_context_print:        load time =    1772.51 ms
0.15.342.285 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.342.287 I llama_perf_context_print:        eval time =   13455.46 ms /    32 runs   (  420.48 ms per token,     2.38 tokens per second)
0.15.342.289 I llama_perf_context_print:       total time =   13568.67 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.644 I build: 4888 (774973b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.085.402 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.416 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.519 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.543 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.549 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.556 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.558 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.560 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.561 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.563 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.565 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.572 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.575 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.579 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.581 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.294.164 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.395.173 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.418.095 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.418.110 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.418.112 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.418.113 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.418.115 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.418.117 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.119 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.124 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.126 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.418.128 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.418.130 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.418.132 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.418.140 I llama_model_loader: - type  f32:   37 tensors
0.00.418.143 I llama_model_loader: - type q8_0:  127 tensors
0.00.418.161 I print_info: file format = GGUF V3 (latest)
0.00.418.162 I print_info: file type   = Q8_0
0.00.418.166 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.703.116 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.854.194 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.855.243 I load: special tokens cache size = 5
0.01.097.548 I load: token to piece cache size = 1.6014 MB
0.01.097.635 I print_info: arch             = gemma
0.01.097.636 I print_info: vocab_only       = 0
0.01.097.637 I print_info: n_ctx_train      = 8192
0.01.097.637 I print_info: n_embd           = 2048
0.01.097.638 I print_info: n_layer          = 18
0.01.097.719 I print_info: n_head           = 8
0.01.097.730 I print_info: n_head_kv        = 1
0.01.097.731 I print_info: n_rot            = 256
0.01.097.731 I print_info: n_swa            = 0
0.01.097.731 I print_info: n_swa_pattern    = 1
0.01.097.732 I print_info: n_embd_head_k    = 256
0.01.097.733 I print_info: n_embd_head_v    = 256
0.01.097.738 I print_info: n_gqa            = 8
0.01.097.743 I print_info: n_embd_k_gqa     = 256
0.01.097.748 I print_info: n_embd_v_gqa     = 256
0.01.097.750 I print_info: f_norm_eps       = 0.0e+00
0.01.097.751 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.097.752 I print_info: f_clamp_kqv      = 0.0e+00
0.01.097.752 I print_info: f_max_alibi_bias = 0.0e+00
0.01.097.753 I print_info: f_logit_scale    = 0.0e+00
0.01.097.754 I print_info: f_attn_scale     = 0.0e+00
0.01.097.758 I print_info: n_ff             = 16384
0.01.097.759 I print_info: n_expert         = 0
0.01.097.760 I print_info: n_expert_used    = 0
0.01.097.760 I print_info: causal attn      = 1
0.01.097.763 I print_info: pooling type     = 0
0.01.097.763 I print_info: rope type        = 2
0.01.097.764 I print_info: rope scaling     = linear
0.01.097.765 I print_info: freq_base_train  = 10000.0
0.01.097.766 I print_info: freq_scale_train = 1
0.01.097.766 I print_info: n_ctx_orig_yarn  = 8192
0.01.097.766 I print_info: rope_finetuned   = unknown
0.01.097.767 I print_info: ssm_d_conv       = 0
0.01.097.767 I print_info: ssm_d_inner      = 0
0.01.097.767 I print_info: ssm_d_state      = 0
0.01.097.767 I print_info: ssm_dt_rank      = 0
0.01.097.768 I print_info: ssm_dt_b_c_rms   = 0
0.01.097.769 I print_info: model type       = 2B
0.01.097.770 I print_info: model params     = 2.51 B
0.01.097.770 I print_info: general.name     = gemma-1.1-2b-it
0.01.097.775 I print_info: vocab type       = SPM
0.01.097.777 I print_info: n_vocab          = 256000
0.01.097.782 I print_info: n_merges         = 0
0.01.097.783 I print_info: BOS token        = 2 '<bos>'
0.01.097.783 I print_info: EOS token        = 1 '<eos>'
0.01.097.784 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.097.784 I print_info: UNK token        = 3 '<unk>'
0.01.097.785 I print_info: PAD token        = 0 '<pad>'
0.01.097.795 I print_info: LF token         = 227 '<0x0A>'
0.01.097.801 I print_info: EOG token        = 1 '<eos>'
0.01.097.803 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.097.803 I print_info: max token length = 93
0.01.097.805 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.171.857 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.171.868 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.178.596 I llama_context: constructing llama_context
0.01.178.604 I llama_context: n_seq_max     = 1
0.01.178.605 I llama_context: n_ctx         = 4096
0.01.178.605 I llama_context: n_ctx_per_seq = 4096
0.01.178.606 I llama_context: n_batch       = 2048
0.01.178.606 I llama_context: n_ubatch      = 512
0.01.178.607 I llama_context: causal_attn   = 1
0.01.178.607 I llama_context: flash_attn    = 0
0.01.178.610 I llama_context: freq_base     = 10000.0
0.01.178.610 I llama_context: freq_scale    = 1
0.01.178.611 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.178.825 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.178.868 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.193.956 I init:        CPU KV buffer size =    72.00 MiB
0.01.193.995 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.203.168 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.203.174 I llama_context: graph nodes  = 601
0.01.203.174 I llama_context: graph splits = 1
0.01.203.188 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.203.188 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.835.276 I main: llama threadpool init, n_threads = 4
0.01.835.293 I 
0.01.835.390 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.835.394 I 
0.01.835.632 I sampler seed: 187821717
0.01.835.647 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.835.655 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.835.657 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.835.657 I 
 seconary school, Deekshabhoomi, imparts knowledge in a holistic manner. This includes:

**Academics:**
- Developing critical thinking skills
-

0.15.410.042 I llama_perf_sampler_print:    sampling time =      49.98 ms /    33 runs   (    1.51 ms per token,   660.28 tokens per second)
0.15.410.048 I llama_perf_context_print:        load time =    1807.66 ms
0.15.410.050 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.410.053 I llama_perf_context_print:        eval time =   13487.14 ms /    32 runs   (  421.47 ms per token,     2.37 tokens per second)
0.15.410.054 I llama_perf_context_print:       total time =   13601.43 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m13.794s
user	3m52.984s
sys	0m9.649s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4888 (774973b8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186730.08 ms
main:    total time = 186730.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.703 I build: 4888 (774973b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.907 I main: llama backend init
0.00.000.916 I main: load the model and apply lora adapter, if any
0.00.087.715 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.087.730 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.087.835 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.859 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.864 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.871 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.873 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.875 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.877 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.880 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.881 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.890 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.894 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.896 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.897 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.310.824 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.411.571 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.434.563 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.434.577 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.434.579 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.434.581 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.434.583 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.434.585 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.434.587 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.434.592 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.434.593 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.434.595 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.434.597 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.434.599 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.434.601 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.434.612 I llama_model_loader: - type  f32:   37 tensors
0.00.434.613 I llama_model_loader: - type q4_K:  108 tensors
0.00.434.614 I llama_model_loader: - type q6_K:   19 tensors
0.00.434.632 I print_info: file format = GGUF V3 (latest)
0.00.434.633 I print_info: file type   = Q4_K - Medium
0.00.434.635 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.707.753 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.838.600 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.839.592 I load: special tokens cache size = 5
0.01.069.604 I load: token to piece cache size = 1.6014 MB
0.01.069.691 I print_info: arch             = gemma
0.01.069.692 I print_info: vocab_only       = 0
0.01.069.692 I print_info: n_ctx_train      = 8192
0.01.069.693 I print_info: n_embd           = 2048
0.01.069.693 I print_info: n_layer          = 18
0.01.069.775 I print_info: n_head           = 8
0.01.069.782 I print_info: n_head_kv        = 1
0.01.069.782 I print_info: n_rot            = 256
0.01.069.783 I print_info: n_swa            = 0
0.01.069.783 I print_info: n_swa_pattern    = 1
0.01.069.784 I print_info: n_embd_head_k    = 256
0.01.069.784 I print_info: n_embd_head_v    = 256
0.01.069.789 I print_info: n_gqa            = 8
0.01.069.794 I print_info: n_embd_k_gqa     = 256
0.01.069.799 I print_info: n_embd_v_gqa     = 256
0.01.069.800 I print_info: f_norm_eps       = 0.0e+00
0.01.069.802 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.069.802 I print_info: f_clamp_kqv      = 0.0e+00
0.01.069.803 I print_info: f_max_alibi_bias = 0.0e+00
0.01.069.803 I print_info: f_logit_scale    = 0.0e+00
0.01.069.804 I print_info: f_attn_scale     = 0.0e+00
0.01.069.809 I print_info: n_ff             = 16384
0.01.069.838 I print_info: n_expert         = 0
0.01.069.839 I print_info: n_expert_used    = 0
0.01.069.840 I print_info: causal attn      = 1
0.01.069.840 I print_info: pooling type     = 0
0.01.069.849 I print_info: rope type        = 2
0.01.069.850 I print_info: rope scaling     = linear
0.01.069.852 I print_info: freq_base_train  = 10000.0
0.01.069.854 I print_info: freq_scale_train = 1
0.01.069.854 I print_info: n_ctx_orig_yarn  = 8192
0.01.069.855 I print_info: rope_finetuned   = unknown
0.01.069.855 I print_info: ssm_d_conv       = 0
0.01.069.856 I print_info: ssm_d_inner      = 0
0.01.069.856 I print_info: ssm_d_state      = 0
0.01.069.857 I print_info: ssm_dt_rank      = 0
0.01.069.858 I print_info: ssm_dt_b_c_rms   = 0
0.01.069.859 I print_info: model type       = 2B
0.01.069.860 I print_info: model params     = 2.51 B
0.01.069.861 I print_info: general.name     = gemma-1.1-2b-it
0.01.069.870 I print_info: vocab type       = SPM
0.01.069.872 I print_info: n_vocab          = 256000
0.01.069.875 I print_info: n_merges         = 0
0.01.069.875 I print_info: BOS token        = 2 '<bos>'
0.01.069.876 I print_info: EOS token        = 1 '<eos>'
0.01.069.880 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.069.880 I print_info: UNK token        = 3 '<unk>'
0.01.069.881 I print_info: PAD token        = 0 '<pad>'
0.01.069.881 I print_info: LF token         = 227 '<0x0A>'
0.01.069.887 I print_info: EOG token        = 1 '<eos>'
0.01.069.889 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.069.889 I print_info: max token length = 93
0.01.069.891 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.133.034 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.133.046 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.133.047 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.133.048 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.133.049 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.133.049 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.139.909 I llama_context: constructing llama_context
0.01.139.916 I llama_context: n_seq_max     = 1
0.01.139.917 I llama_context: n_ctx         = 4096
0.01.139.917 I llama_context: n_ctx_per_seq = 4096
0.01.139.918 I llama_context: n_batch       = 2048
0.01.139.918 I llama_context: n_ubatch      = 512
0.01.139.919 I llama_context: causal_attn   = 1
0.01.139.919 I llama_context: flash_attn    = 0
0.01.139.921 I llama_context: freq_base     = 10000.0
0.01.139.922 I llama_context: freq_scale    = 1
0.01.139.923 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.140.135 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.140.178 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.155.115 I init:        CPU KV buffer size =    72.00 MiB
0.01.155.155 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.164.552 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.164.558 I llama_context: graph nodes  = 601
0.01.164.558 I llama_context: graph splits = 1
0.01.164.572 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.164.573 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.769.198 I main: llama threadpool init, n_threads = 4
0.01.769.213 I 
0.01.769.308 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.769.311 I 
0.01.769.551 I sampler seed: 1723463352
0.01.769.564 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.769.574 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.769.575 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.769.575 I 
 increasities in the text. [end of text]


0.04.160.274 I llama_perf_sampler_print:    sampling time =      11.02 ms /     8 runs   (    1.38 ms per token,   726.28 tokens per second)
0.04.160.279 I llama_perf_context_print:        load time =    1741.53 ms
0.04.160.281 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.04.160.283 I llama_perf_context_print:        eval time =    2370.93 ms /     7 runs   (  338.70 ms per token,     2.95 tokens per second)
0.04.160.295 I llama_perf_context_print:       total time =    2417.69 ms /     8 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4888 (774973b8)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186626.82 ms
main:    total time = 186626.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.719 I build: 4888 (774973b8) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.922 I main: llama backend init
0.00.000.929 I main: load the model and apply lora adapter, if any
0.00.085.795 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.921 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.949 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.954 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.962 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.964 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.966 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.968 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.969 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.986 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.994 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.996 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.997 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.999 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.298.794 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.399.727 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.422.679 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.422.698 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.422.700 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.422.702 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.422.704 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.422.706 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.422.708 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.422.713 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.422.715 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.422.717 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.422.726 I llama_model_loader: - type  f32:   37 tensors
0.00.422.728 I llama_model_loader: - type q4_K:  108 tensors
0.00.422.729 I llama_model_loader: - type q6_K:   19 tensors
0.00.422.746 I print_info: file format = GGUF V3 (latest)
0.00.422.747 I print_info: file type   = Q4_K - Medium
0.00.422.749 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.717.856 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.848.056 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.849.084 I load: special tokens cache size = 5
0.01.089.727 I load: token to piece cache size = 1.6014 MB
0.01.089.816 I print_info: arch             = gemma
0.01.089.817 I print_info: vocab_only       = 0
0.01.089.818 I print_info: n_ctx_train      = 8192
0.01.089.819 I print_info: n_embd           = 2048
0.01.089.819 I print_info: n_layer          = 18
0.01.089.898 I print_info: n_head           = 8
0.01.089.905 I print_info: n_head_kv        = 1
0.01.089.906 I print_info: n_rot            = 256
0.01.089.906 I print_info: n_swa            = 0
0.01.089.907 I print_info: n_swa_pattern    = 1
0.01.089.907 I print_info: n_embd_head_k    = 256
0.01.089.907 I print_info: n_embd_head_v    = 256
0.01.089.912 I print_info: n_gqa            = 8
0.01.089.917 I print_info: n_embd_k_gqa     = 256
0.01.089.923 I print_info: n_embd_v_gqa     = 256
0.01.089.925 I print_info: f_norm_eps       = 0.0e+00
0.01.089.927 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.089.927 I print_info: f_clamp_kqv      = 0.0e+00
0.01.089.928 I print_info: f_max_alibi_bias = 0.0e+00
0.01.089.928 I print_info: f_logit_scale    = 0.0e+00
0.01.089.940 I print_info: f_attn_scale     = 0.0e+00
0.01.089.946 I print_info: n_ff             = 16384
0.01.089.947 I print_info: n_expert         = 0
0.01.089.947 I print_info: n_expert_used    = 0
0.01.089.947 I print_info: causal attn      = 1
0.01.089.948 I print_info: pooling type     = 0
0.01.089.948 I print_info: rope type        = 2
0.01.089.950 I print_info: rope scaling     = linear
0.01.089.951 I print_info: freq_base_train  = 10000.0
0.01.089.952 I print_info: freq_scale_train = 1
0.01.089.965 I print_info: n_ctx_orig_yarn  = 8192
0.01.089.966 I print_info: rope_finetuned   = unknown
0.01.089.976 I print_info: ssm_d_conv       = 0
0.01.089.977 I print_info: ssm_d_inner      = 0
0.01.089.977 I print_info: ssm_d_state      = 0
0.01.089.978 I print_info: ssm_dt_rank      = 0
0.01.089.978 I print_info: ssm_dt_b_c_rms   = 0
0.01.089.980 I print_info: model type       = 2B
0.01.089.980 I print_info: model params     = 2.51 B
0.01.089.981 I print_info: general.name     = gemma-1.1-2b-it
0.01.089.986 I print_info: vocab type       = SPM
0.01.089.987 I print_info: n_vocab          = 256000
0.01.089.994 I print_info: n_merges         = 0
0.01.089.995 I print_info: BOS token        = 2 '<bos>'
0.01.090.011 I print_info: EOS token        = 1 '<eos>'
0.01.090.012 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.090.013 I print_info: UNK token        = 3 '<unk>'
0.01.090.013 I print_info: PAD token        = 0 '<pad>'
0.01.090.014 I print_info: LF token         = 227 '<0x0A>'
0.01.090.020 I print_info: EOG token        = 1 '<eos>'
0.01.090.022 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.090.023 I print_info: max token length = 93
0.01.090.025 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.138.986 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.145.681 I llama_context: constructing llama_context
0.01.145.690 I llama_context: n_seq_max     = 1
0.01.145.690 I llama_context: n_ctx         = 4096
0.01.145.690 I llama_context: n_ctx_per_seq = 4096
0.01.145.691 I llama_context: n_batch       = 2048
0.01.145.691 I llama_context: n_ubatch      = 512
0.01.145.692 I llama_context: causal_attn   = 1
0.01.145.692 I llama_context: flash_attn    = 0
0.01.145.694 I llama_context: freq_base     = 10000.0
0.01.145.695 I llama_context: freq_scale    = 1
0.01.145.697 W llama_context: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.145.906 I llama_context:        CPU  output buffer size =     0.98 MiB
0.01.145.947 I init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.161.353 I init:        CPU KV buffer size =    72.00 MiB
0.01.161.396 I llama_context: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.170.710 I llama_context:        CPU compute buffer size =   509.01 MiB
0.01.170.716 I llama_context: graph nodes  = 601
0.01.170.716 I llama_context: graph splits = 1
0.01.170.729 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.170.730 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.773.792 I main: llama threadpool init, n_threads = 4
0.01.773.810 I 
0.01.773.898 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | BMI2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.773.902 I 
0.01.774.156 I sampler seed: 2406534983
0.01.774.168 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.774.178 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.774.179 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.774.180 I 
 fufilling and melodious music, coupled with a captivating narrative that transports the listener to a realm of wonder and possibility, will create a truly immersive and unforgettable experience.

0.12.800.760 I llama_perf_sampler_print:    sampling time =      49.78 ms /    33 runs   (    1.51 ms per token,   662.92 tokens per second)
0.12.800.765 I llama_perf_context_print:        load time =    1745.92 ms
0.12.800.767 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.800.768 I llama_perf_context_print:        eval time =   10941.13 ms /    32 runs   (  341.91 ms per token,     2.92 tokens per second)
0.12.800.769 I llama_perf_context_print:       total time =   11053.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m33.934s
user	46m17.764s
sys	0m6.498s
