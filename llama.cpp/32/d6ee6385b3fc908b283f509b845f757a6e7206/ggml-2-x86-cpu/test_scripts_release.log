+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.584 I build: 4385 (32d6ee63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.000.792 I main: load the model and apply lora adapter, if any
0.00.021.677 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.688 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.700 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.706 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.707 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.711 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.712 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.713 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.714 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.715 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.715 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.720 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.721 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.721 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.722 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.722 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.408 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.610 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.457 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.465 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.466 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.467 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.468 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.469 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.471 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.473 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.473 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.474 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.474 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.475 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.479 I llama_model_loader: - type  f32:   37 tensors
0.00.131.480 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.645 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.679 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.279 I llm_load_vocab: special tokens cache size = 5
0.00.287.191 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.211 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.211 I llm_load_print_meta: arch             = gemma
0.00.287.212 I llm_load_print_meta: vocab type       = SPM
0.00.287.213 I llm_load_print_meta: n_vocab          = 256000
0.00.287.213 I llm_load_print_meta: n_merges         = 0
0.00.287.214 I llm_load_print_meta: vocab_only       = 0
0.00.287.214 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.214 I llm_load_print_meta: n_embd           = 2048
0.00.287.215 I llm_load_print_meta: n_layer          = 18
0.00.287.226 I llm_load_print_meta: n_head           = 8
0.00.287.227 I llm_load_print_meta: n_head_kv        = 1
0.00.287.228 I llm_load_print_meta: n_rot            = 256
0.00.287.228 I llm_load_print_meta: n_swa            = 0
0.00.287.229 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.229 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.230 I llm_load_print_meta: n_gqa            = 8
0.00.287.231 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.232 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.233 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.234 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.234 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.235 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.235 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.236 I llm_load_print_meta: n_ff             = 16384
0.00.287.236 I llm_load_print_meta: n_expert         = 0
0.00.287.237 I llm_load_print_meta: n_expert_used    = 0
0.00.287.237 I llm_load_print_meta: causal attn      = 1
0.00.287.237 I llm_load_print_meta: pooling type     = 0
0.00.287.238 I llm_load_print_meta: rope type        = 2
0.00.287.238 I llm_load_print_meta: rope scaling     = linear
0.00.287.239 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.240 I llm_load_print_meta: freq_scale_train = 1
0.00.287.240 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.241 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.241 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.241 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.242 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.242 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.242 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.242 I llm_load_print_meta: model type       = 2B
0.00.287.243 I llm_load_print_meta: model ftype      = Q8_0
0.00.287.244 I llm_load_print_meta: model params     = 2.51 B
0.00.287.245 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.287.245 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.245 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.246 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.246 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.246 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.247 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.247 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.248 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.248 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.248 I llm_load_print_meta: max token length = 93
0.00.388.165 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.388.174 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.388.175 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.388.176 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.388.176 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.388.177 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.393.464 I llama_new_context_with_model: n_seq_max     = 1
0.00.393.471 I llama_new_context_with_model: n_ctx         = 4096
0.00.393.471 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.393.472 I llama_new_context_with_model: n_batch       = 2048
0.00.393.472 I llama_new_context_with_model: n_ubatch      = 512
0.00.393.473 I llama_new_context_with_model: flash_attn    = 0
0.00.393.475 I llama_new_context_with_model: freq_base     = 10000.0
0.00.393.476 I llama_new_context_with_model: freq_scale    = 1
0.00.393.477 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.498 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.408.104 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.408.116 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.408.209 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.409.521 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.409.527 I llama_new_context_with_model: graph nodes  = 601
0.00.409.528 I llama_new_context_with_model: graph splits = 1
0.00.409.531 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.409.531 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.676 I main: llama threadpool init, n_threads = 4
0.00.495.692 I 
0.00.495.769 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.495.772 I 
0.00.495.814 I sampler seed: 2767255278
0.00.495.824 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.833 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.833 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.834 I 
 increasities, a form of high-level artificial intelligence that combines symbolic reasoning and natural language processing.

**Symbolic Reasoning:**

- Enables reasoning about abstract concepts

0.02.774.624 I llama_perf_sampler_print:    sampling time =       5.68 ms /    33 runs   (    0.17 ms per token,  5813.95 tokens per second)
0.02.774.627 I llama_perf_context_print:        load time =     494.87 ms
0.02.774.628 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.774.630 I llama_perf_context_print:        eval time =    2258.16 ms /    32 runs   (   70.57 ms per token,    14.17 tokens per second)
0.02.774.631 I llama_perf_context_print:       total time =    2278.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.168 I build: 4385 (32d6ee63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.352 I main: llama backend init
0.00.000.359 I main: load the model and apply lora adapter, if any
0.00.020.475 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.489 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.499 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.500 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.504 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.507 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.508 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.508 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.509 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.509 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.514 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.514 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.515 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.515 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.516 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.695 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.643 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.478 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.484 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.485 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.486 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.486 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.487 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.488 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.491 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.491 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.492 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.492 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.493 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.499 I llama_model_loader: - type  f32:   37 tensors
0.00.129.499 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.894 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.809 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.558 I llm_load_vocab: special tokens cache size = 5
0.00.286.805 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.828 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.829 I llm_load_print_meta: arch             = gemma
0.00.286.829 I llm_load_print_meta: vocab type       = SPM
0.00.286.830 I llm_load_print_meta: n_vocab          = 256000
0.00.286.831 I llm_load_print_meta: n_merges         = 0
0.00.286.831 I llm_load_print_meta: vocab_only       = 0
0.00.286.831 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.832 I llm_load_print_meta: n_embd           = 2048
0.00.286.832 I llm_load_print_meta: n_layer          = 18
0.00.286.843 I llm_load_print_meta: n_head           = 8
0.00.286.844 I llm_load_print_meta: n_head_kv        = 1
0.00.286.845 I llm_load_print_meta: n_rot            = 256
0.00.286.845 I llm_load_print_meta: n_swa            = 0
0.00.286.846 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.846 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.847 I llm_load_print_meta: n_gqa            = 8
0.00.286.848 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.849 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.850 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.852 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.852 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.853 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.853 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.854 I llm_load_print_meta: n_ff             = 16384
0.00.286.854 I llm_load_print_meta: n_expert         = 0
0.00.286.854 I llm_load_print_meta: n_expert_used    = 0
0.00.286.854 I llm_load_print_meta: causal attn      = 1
0.00.286.855 I llm_load_print_meta: pooling type     = 0
0.00.286.855 I llm_load_print_meta: rope type        = 2
0.00.286.855 I llm_load_print_meta: rope scaling     = linear
0.00.286.857 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.858 I llm_load_print_meta: freq_scale_train = 1
0.00.286.858 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.858 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.859 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.859 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.859 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.859 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.859 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.860 I llm_load_print_meta: model type       = 2B
0.00.286.861 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.861 I llm_load_print_meta: model params     = 2.51 B
0.00.286.862 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.863 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.863 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.863 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.864 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.864 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.865 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.865 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.865 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.866 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.866 I llm_load_print_meta: max token length = 93
0.00.381.534 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.386.648 I llama_new_context_with_model: n_seq_max     = 1
0.00.386.654 I llama_new_context_with_model: n_ctx         = 4096
0.00.386.655 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.386.655 I llama_new_context_with_model: n_batch       = 2048
0.00.386.656 I llama_new_context_with_model: n_ubatch      = 512
0.00.386.657 I llama_new_context_with_model: flash_attn    = 0
0.00.386.659 I llama_new_context_with_model: freq_base     = 10000.0
0.00.386.661 I llama_new_context_with_model: freq_scale    = 1
0.00.386.662 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.682 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.401.599 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.401.614 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.401.711 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.402.943 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.402.950 I llama_new_context_with_model: graph nodes  = 601
0.00.402.950 I llama_new_context_with_model: graph splits = 1
0.00.402.953 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.402.953 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.881 I main: llama threadpool init, n_threads = 4
0.00.485.896 I 
0.00.485.971 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.485.974 I 
0.00.486.020 I sampler seed: 2706489583
0.00.486.031 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.035 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.486.037 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.037 I 
 increasities and the potential for unintended consequences.

## The Ethical Dilemma of Medical Imaging

**Medical imaging** plays a crucial role in healthcare, allowing for diagnosis

0.02.699.212 I llama_perf_sampler_print:    sampling time =       5.66 ms /    33 runs   (    0.17 ms per token,  5833.48 tokens per second)
0.02.699.215 I llama_perf_context_print:        load time =     485.50 ms
0.02.699.216 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.699.217 I llama_perf_context_print:        eval time =    2193.09 ms /    32 runs   (   68.53 ms per token,    14.59 tokens per second)
0.02.699.218 I llama_perf_context_print:       total time =    2213.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.169 I build: 4385 (32d6ee63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.453 I main: llama backend init
0.00.000.463 I main: load the model and apply lora adapter, if any
0.00.020.785 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.797 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.804 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.809 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.810 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.816 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.817 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.818 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.819 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.820 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.821 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.827 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.828 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.829 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.830 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.831 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.063 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.003 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.862 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.871 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.871 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.872 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.873 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.874 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.874 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.877 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.878 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.879 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.879 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.880 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.885 I llama_model_loader: - type  f32:   37 tensors
0.00.135.886 I llama_model_loader: - type q8_0:  127 tensors
0.00.218.688 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.268.986 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.269.663 I llm_load_vocab: special tokens cache size = 5
0.00.290.895 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.290.915 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.290.916 I llm_load_print_meta: arch             = gemma
0.00.290.916 I llm_load_print_meta: vocab type       = SPM
0.00.290.917 I llm_load_print_meta: n_vocab          = 256000
0.00.290.917 I llm_load_print_meta: n_merges         = 0
0.00.290.917 I llm_load_print_meta: vocab_only       = 0
0.00.290.918 I llm_load_print_meta: n_ctx_train      = 8192
0.00.290.918 I llm_load_print_meta: n_embd           = 2048
0.00.290.919 I llm_load_print_meta: n_layer          = 18
0.00.290.930 I llm_load_print_meta: n_head           = 8
0.00.290.930 I llm_load_print_meta: n_head_kv        = 1
0.00.290.931 I llm_load_print_meta: n_rot            = 256
0.00.290.931 I llm_load_print_meta: n_swa            = 0
0.00.290.932 I llm_load_print_meta: n_embd_head_k    = 256
0.00.290.932 I llm_load_print_meta: n_embd_head_v    = 256
0.00.290.933 I llm_load_print_meta: n_gqa            = 8
0.00.290.934 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.290.935 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.290.936 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.290.937 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.290.937 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.290.938 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.290.938 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.290.939 I llm_load_print_meta: n_ff             = 16384
0.00.290.939 I llm_load_print_meta: n_expert         = 0
0.00.290.939 I llm_load_print_meta: n_expert_used    = 0
0.00.290.940 I llm_load_print_meta: causal attn      = 1
0.00.290.940 I llm_load_print_meta: pooling type     = 0
0.00.290.940 I llm_load_print_meta: rope type        = 2
0.00.290.941 I llm_load_print_meta: rope scaling     = linear
0.00.290.942 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.290.943 I llm_load_print_meta: freq_scale_train = 1
0.00.290.943 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.290.943 I llm_load_print_meta: rope_finetuned   = unknown
0.00.290.944 I llm_load_print_meta: ssm_d_conv       = 0
0.00.290.944 I llm_load_print_meta: ssm_d_inner      = 0
0.00.290.944 I llm_load_print_meta: ssm_d_state      = 0
0.00.290.944 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.290.945 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.290.945 I llm_load_print_meta: model type       = 2B
0.00.290.946 I llm_load_print_meta: model ftype      = Q8_0
0.00.290.946 I llm_load_print_meta: model params     = 2.51 B
0.00.290.947 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.290.948 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.290.948 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.290.948 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.290.949 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.290.950 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.290.950 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.290.950 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.290.951 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.290.951 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.290.952 I llm_load_print_meta: max token length = 93
0.00.367.709 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.367.717 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.367.718 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.367.719 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.367.719 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.367.720 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.372.896 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.903 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.903 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.904 I llama_new_context_with_model: n_batch       = 2048
0.00.372.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.905 I llama_new_context_with_model: flash_attn    = 0
0.00.372.907 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.909 I llama_new_context_with_model: freq_scale    = 1
0.00.372.910 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.372.930 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.387.968 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.981 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.076 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.382 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.386 I llama_new_context_with_model: graph nodes  = 601
0.00.389.387 I llama_new_context_with_model: graph splits = 1
0.00.389.389 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.390 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.515 I main: llama threadpool init, n_threads = 4
0.00.477.531 I 
0.00.477.620 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.623 I 
0.00.477.670 I sampler seed: 1248834843
0.00.477.684 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.695 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.699 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.699 I 
 increably, with the boundless potential of the internet to connect the minds of men.

This statement expresses optimism about the future of online communication, highlighting the potential

0.02.772.194 I llama_perf_sampler_print:    sampling time =       5.67 ms /    33 runs   (    0.17 ms per token,  5817.03 tokens per second)
0.02.772.196 I llama_perf_context_print:        load time =     477.03 ms
0.02.772.197 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.772.199 I llama_perf_context_print:        eval time =    2274.53 ms /    32 runs   (   71.08 ms per token,    14.07 tokens per second)
0.02.772.199 I llama_perf_context_print:       total time =    2294.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.168 I build: 4385 (32d6ee63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.367 I main: llama backend init
0.00.000.373 I main: load the model and apply lora adapter, if any
0.00.020.520 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.528 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.537 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.545 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.546 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.549 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.550 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.551 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.552 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.552 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.553 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.556 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.557 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.557 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.558 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.558 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.962 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.678 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.582 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.589 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.590 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.591 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.591 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.592 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.593 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.596 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.597 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.597 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.598 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.130.599 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.603 I llama_model_loader: - type  f32:   37 tensors
0.00.130.604 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.596 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.667 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.252 I llm_load_vocab: special tokens cache size = 5
0.00.280.003 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.021 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.022 I llm_load_print_meta: arch             = gemma
0.00.280.022 I llm_load_print_meta: vocab type       = SPM
0.00.280.023 I llm_load_print_meta: n_vocab          = 256000
0.00.280.023 I llm_load_print_meta: n_merges         = 0
0.00.280.024 I llm_load_print_meta: vocab_only       = 0
0.00.280.024 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.024 I llm_load_print_meta: n_embd           = 2048
0.00.280.025 I llm_load_print_meta: n_layer          = 18
0.00.280.036 I llm_load_print_meta: n_head           = 8
0.00.280.037 I llm_load_print_meta: n_head_kv        = 1
0.00.280.038 I llm_load_print_meta: n_rot            = 256
0.00.280.038 I llm_load_print_meta: n_swa            = 0
0.00.280.038 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.038 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.039 I llm_load_print_meta: n_gqa            = 8
0.00.280.040 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.041 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.042 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.043 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.044 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.044 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.044 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.045 I llm_load_print_meta: n_ff             = 16384
0.00.280.045 I llm_load_print_meta: n_expert         = 0
0.00.280.046 I llm_load_print_meta: n_expert_used    = 0
0.00.280.046 I llm_load_print_meta: causal attn      = 1
0.00.280.046 I llm_load_print_meta: pooling type     = 0
0.00.280.046 I llm_load_print_meta: rope type        = 2
0.00.280.047 I llm_load_print_meta: rope scaling     = linear
0.00.280.048 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.049 I llm_load_print_meta: freq_scale_train = 1
0.00.280.049 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.049 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.050 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.050 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.050 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.050 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.051 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.051 I llm_load_print_meta: model type       = 2B
0.00.280.051 I llm_load_print_meta: model ftype      = Q8_0
0.00.280.052 I llm_load_print_meta: model params     = 2.51 B
0.00.280.053 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.280.053 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.054 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.054 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.054 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.055 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.055 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.055 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.056 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.056 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.056 I llm_load_print_meta: max token length = 93
0.00.350.874 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.350.882 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.355.909 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.916 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.917 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.917 I llama_new_context_with_model: n_batch       = 2048
0.00.355.917 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.918 I llama_new_context_with_model: flash_attn    = 0
0.00.355.920 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.921 I llama_new_context_with_model: freq_scale    = 1
0.00.355.922 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.941 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.370.164 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.179 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.270 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.529 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.535 I llama_new_context_with_model: graph nodes  = 601
0.00.371.536 I llama_new_context_with_model: graph splits = 1
0.00.371.538 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.538 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.836 I main: llama threadpool init, n_threads = 4
0.00.461.853 I 
0.00.461.928 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.461.932 I 
0.00.461.975 I sampler seed: 1057091443
0.00.461.986 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.997 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.001 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.001 I 
 increasels.  

I am unable to complete this task as it involves sexually suggestive content. [end of text]


0.01.991.746 I llama_perf_sampler_print:    sampling time =       3.68 ms /    21 runs   (    0.18 ms per token,  5703.42 tokens per second)
0.01.991.748 I llama_perf_context_print:        load time =     461.45 ms
0.01.991.749 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.991.750 I llama_perf_context_print:        eval time =    1516.48 ms /    20 runs   (   75.82 ms per token,    13.19 tokens per second)
0.01.991.751 I llama_perf_context_print:       total time =    1529.92 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.059s
user	0m36.258s
sys	0m9.525s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4385 (32d6ee63)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40281.04 ms
main:    total time = 40281.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.553 I build: 4385 (32d6ee63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.021.092 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.103 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.112 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.122 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.123 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.128 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.128 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.129 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.130 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.130 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.131 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.136 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.137 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.137 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.138 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.139 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.142 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.095 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.965 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.971 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.972 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.972 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.973 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.974 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.974 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.977 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.978 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.978 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.979 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.980 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.983 I llama_model_loader: - type  f32:   37 tensors
0.00.131.984 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.985 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.013 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.651 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.268 I llm_load_vocab: special tokens cache size = 5
0.00.286.271 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.290 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.291 I llm_load_print_meta: arch             = gemma
0.00.286.291 I llm_load_print_meta: vocab type       = SPM
0.00.286.292 I llm_load_print_meta: n_vocab          = 256000
0.00.286.292 I llm_load_print_meta: n_merges         = 0
0.00.286.292 I llm_load_print_meta: vocab_only       = 0
0.00.286.293 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.293 I llm_load_print_meta: n_embd           = 2048
0.00.286.293 I llm_load_print_meta: n_layer          = 18
0.00.286.305 I llm_load_print_meta: n_head           = 8
0.00.286.306 I llm_load_print_meta: n_head_kv        = 1
0.00.286.307 I llm_load_print_meta: n_rot            = 256
0.00.286.307 I llm_load_print_meta: n_swa            = 0
0.00.286.307 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.308 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.309 I llm_load_print_meta: n_gqa            = 8
0.00.286.310 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.311 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.312 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.313 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.313 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.313 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.314 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.314 I llm_load_print_meta: n_ff             = 16384
0.00.286.315 I llm_load_print_meta: n_expert         = 0
0.00.286.315 I llm_load_print_meta: n_expert_used    = 0
0.00.286.315 I llm_load_print_meta: causal attn      = 1
0.00.286.315 I llm_load_print_meta: pooling type     = 0
0.00.286.316 I llm_load_print_meta: rope type        = 2
0.00.286.316 I llm_load_print_meta: rope scaling     = linear
0.00.286.317 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.318 I llm_load_print_meta: freq_scale_train = 1
0.00.286.318 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.318 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.319 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.319 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.319 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.319 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.320 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.320 I llm_load_print_meta: model type       = 2B
0.00.286.321 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.286.321 I llm_load_print_meta: model params     = 2.51 B
0.00.286.322 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.286.323 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.323 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.323 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.324 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.324 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.324 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.324 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.325 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.325 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.325 I llm_load_print_meta: max token length = 93
0.00.346.787 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.346.795 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.346.795 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.346.796 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.346.797 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.346.797 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.351.970 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.978 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.978 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.978 I llama_new_context_with_model: n_batch       = 2048
0.00.351.979 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.980 I llama_new_context_with_model: flash_attn    = 0
0.00.351.982 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.983 I llama_new_context_with_model: freq_scale    = 1
0.00.351.984 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.005 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.366.411 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.366.423 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.515 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.768 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.775 I llama_new_context_with_model: graph nodes  = 601
0.00.367.775 I llama_new_context_with_model: graph splits = 1
0.00.367.778 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.778 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.192 I main: llama threadpool init, n_threads = 4
0.00.444.208 I 
0.00.444.280 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.444.284 I 
0.00.444.329 I sampler seed: 1645230186
0.00.444.340 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.352 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.356 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.356 I 
 encompates the process of taking a picture with a camera that uses interchangeable lenses. The steps involved are:

**1. Setting the camera to the desired focal

0.02.104.138 I llama_perf_sampler_print:    sampling time =       5.55 ms /    33 runs   (    0.17 ms per token,  5943.80 tokens per second)
0.02.104.141 I llama_perf_context_print:        load time =     443.40 ms
0.02.104.142 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.104.143 I llama_perf_context_print:        eval time =    1639.90 ms /    32 runs   (   51.25 ms per token,    19.51 tokens per second)
0.02.104.144 I llama_perf_context_print:       total time =    1659.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4385 (32d6ee63)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40252.20 ms
main:    total time = 40252.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.540 I build: 4385 (32d6ee63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.749 I main: load the model and apply lora adapter, if any
0.00.021.075 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.094 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.102 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.103 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.109 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.109 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.110 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.111 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.111 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.116 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.117 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.118 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.118 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.119 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.829 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.786 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.705 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.712 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.714 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.714 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.715 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.716 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.717 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.720 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.721 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.725 I llama_model_loader: - type  f32:   37 tensors
0.00.130.726 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.727 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.785 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.413 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.104 I llm_load_vocab: special tokens cache size = 5
0.00.281.140 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.156 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.157 I llm_load_print_meta: arch             = gemma
0.00.281.157 I llm_load_print_meta: vocab type       = SPM
0.00.281.159 I llm_load_print_meta: n_vocab          = 256000
0.00.281.160 I llm_load_print_meta: n_merges         = 0
0.00.281.160 I llm_load_print_meta: vocab_only       = 0
0.00.281.160 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.161 I llm_load_print_meta: n_embd           = 2048
0.00.281.161 I llm_load_print_meta: n_layer          = 18
0.00.281.173 I llm_load_print_meta: n_head           = 8
0.00.281.174 I llm_load_print_meta: n_head_kv        = 1
0.00.281.174 I llm_load_print_meta: n_rot            = 256
0.00.281.174 I llm_load_print_meta: n_swa            = 0
0.00.281.175 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.175 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.176 I llm_load_print_meta: n_gqa            = 8
0.00.281.177 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.178 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.179 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.181 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.182 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.182 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.183 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.184 I llm_load_print_meta: n_ff             = 16384
0.00.281.184 I llm_load_print_meta: n_expert         = 0
0.00.281.184 I llm_load_print_meta: n_expert_used    = 0
0.00.281.185 I llm_load_print_meta: causal attn      = 1
0.00.281.185 I llm_load_print_meta: pooling type     = 0
0.00.281.185 I llm_load_print_meta: rope type        = 2
0.00.281.186 I llm_load_print_meta: rope scaling     = linear
0.00.281.187 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.188 I llm_load_print_meta: freq_scale_train = 1
0.00.281.189 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.192 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.192 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.192 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.192 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.193 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.193 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.194 I llm_load_print_meta: model type       = 2B
0.00.281.194 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.195 I llm_load_print_meta: model params     = 2.51 B
0.00.281.196 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.196 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.196 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.197 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.197 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.197 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.198 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.198 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.199 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.199 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.199 I llm_load_print_meta: max token length = 93
0.00.339.131 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.344.182 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.188 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.188 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.189 I llama_new_context_with_model: n_batch       = 2048
0.00.344.189 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.190 I llama_new_context_with_model: flash_attn    = 0
0.00.344.192 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.193 I llama_new_context_with_model: freq_scale    = 1
0.00.344.194 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.213 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.358.865 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.879 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.970 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.239 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.244 I llama_new_context_with_model: graph nodes  = 601
0.00.360.244 I llama_new_context_with_model: graph splits = 1
0.00.360.247 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.360.247 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.015 I main: llama threadpool init, n_threads = 4
0.00.436.030 I 
0.00.436.106 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.436.109 I 
0.00.436.150 I sampler seed: 843611758
0.00.436.161 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.164 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.165 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.165 I 
 encompases, but does not provide the information necessary to calculate the duration of the experience.

**What information is needed to calculate the duration of the experience?

0.02.094.427 I llama_perf_sampler_print:    sampling time =       5.84 ms /    33 runs   (    0.18 ms per token,  5648.75 tokens per second)
0.02.094.430 I llama_perf_context_print:        load time =     435.25 ms
0.02.094.432 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.094.433 I llama_perf_context_print:        eval time =    1637.58 ms /    32 runs   (   51.17 ms per token,    19.54 tokens per second)
0.02.094.435 I llama_perf_context_print:       total time =    1658.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.604s
user	10m24.943s
sys	0m7.052s
