+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.712 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.917 I main: llama backend init
0.00.002.868 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.926 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.136 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.223 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.235 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.236 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.241 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.243 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.244 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.245 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.248 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.255 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.256 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.257 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.259 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.260 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.735 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.630 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.625 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.635 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.636 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.637 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.638 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.639 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.644 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.645 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.646 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.647 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.277.648 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.656 I llama_model_loader: - type  f32:   37 tensors
0.00.277.660 I llama_model_loader: - type q8_0:  127 tensors
0.00.432.770 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.454.893 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.455.952 I llm_load_vocab: special tokens cache size = 5
0.00.553.974 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.554.036 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.554.037 I llm_load_print_meta: arch             = gemma
0.00.554.038 I llm_load_print_meta: vocab type       = SPM
0.00.554.038 I llm_load_print_meta: n_vocab          = 256000
0.00.554.040 I llm_load_print_meta: n_merges         = 0
0.00.554.041 I llm_load_print_meta: vocab_only       = 0
0.00.554.041 I llm_load_print_meta: n_ctx_train      = 8192
0.00.554.042 I llm_load_print_meta: n_embd           = 2048
0.00.554.042 I llm_load_print_meta: n_layer          = 18
0.00.554.106 I llm_load_print_meta: n_head           = 8
0.00.554.113 I llm_load_print_meta: n_head_kv        = 1
0.00.554.114 I llm_load_print_meta: n_rot            = 256
0.00.554.114 I llm_load_print_meta: n_swa            = 0
0.00.554.115 I llm_load_print_meta: n_embd_head_k    = 256
0.00.554.115 I llm_load_print_meta: n_embd_head_v    = 256
0.00.554.120 I llm_load_print_meta: n_gqa            = 8
0.00.554.124 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.554.129 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.554.130 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.554.132 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.554.132 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.554.133 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.554.133 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.554.138 I llm_load_print_meta: n_ff             = 16384
0.00.554.138 I llm_load_print_meta: n_expert         = 0
0.00.554.139 I llm_load_print_meta: n_expert_used    = 0
0.00.554.139 I llm_load_print_meta: causal attn      = 1
0.00.554.139 I llm_load_print_meta: pooling type     = 0
0.00.554.139 I llm_load_print_meta: rope type        = 2
0.00.554.140 I llm_load_print_meta: rope scaling     = linear
0.00.554.141 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.554.142 I llm_load_print_meta: freq_scale_train = 1
0.00.554.142 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.554.142 I llm_load_print_meta: rope_finetuned   = unknown
0.00.554.143 I llm_load_print_meta: ssm_d_conv       = 0
0.00.554.143 I llm_load_print_meta: ssm_d_inner      = 0
0.00.554.143 I llm_load_print_meta: ssm_d_state      = 0
0.00.554.144 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.554.144 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.554.145 I llm_load_print_meta: model type       = 2B
0.00.554.145 I llm_load_print_meta: model ftype      = Q8_0
0.00.554.146 I llm_load_print_meta: model params     = 2.51 B
0.00.554.147 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.554.147 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.554.148 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.554.148 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.554.148 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.554.149 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.554.149 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.554.150 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.554.156 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.554.158 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.554.159 I llm_load_print_meta: max token length = 93
0.00.554.326 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.653.690 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.653.701 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.653.702 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.653.703 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.653.703 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.653.704 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.659.327 I llama_new_context_with_model: n_ctx      = 8192
0.00.659.335 I llama_new_context_with_model: n_batch    = 2048
0.00.659.336 I llama_new_context_with_model: n_ubatch   = 512
0.00.659.336 I llama_new_context_with_model: flash_attn = 0
0.00.659.338 I llama_new_context_with_model: freq_base  = 10000.0
0.00.659.339 I llama_new_context_with_model: freq_scale = 1
0.00.688.297 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.688.339 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.688.451 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.689.834 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.689.840 I llama_new_context_with_model: graph nodes  = 601
0.00.689.841 I llama_new_context_with_model: graph splits = 1
0.00.689.856 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.301.247 I main: llama threadpool init, n_threads = 4
0.01.301.258 I 
0.01.301.363 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.301.367 I 
0.01.301.530 I sampler seed: 184225841
0.01.301.541 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.301.549 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.301.550 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.301.551 I 
 increasities, and other romantic entanglements unfold in the enchanting world of "The Enchanted Garden."

**Prompt:** Describe the role of the enchanted garden in

0.14.837.451 I llama_perf_sampler_print:    sampling time =      48.01 ms /    33 runs   (    1.45 ms per token,   687.34 tokens per second)
0.14.837.456 I llama_perf_context_print:        load time =    1298.20 ms
0.14.837.458 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.837.460 I llama_perf_context_print:        eval time =   13455.32 ms /    32 runs   (  420.48 ms per token,     2.38 tokens per second)
0.14.837.461 I llama_perf_context_print:       total time =   13536.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.627 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.997 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.091 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.104 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.105 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.109 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.111 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.113 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.114 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.117 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.118 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.125 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.126 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.127 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.128 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.130 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.402 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.291 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.735 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.742 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.744 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.745 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.746 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.747 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.748 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.751 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.752 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.754 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.755 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.756 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.764 I llama_model_loader: - type  f32:   37 tensors
0.00.269.768 I llama_model_loader: - type q8_0:  127 tensors
0.00.430.991 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.452.746 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.453.736 I llm_load_vocab: special tokens cache size = 5
0.00.551.161 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.551.227 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.551.228 I llm_load_print_meta: arch             = gemma
0.00.551.229 I llm_load_print_meta: vocab type       = SPM
0.00.551.230 I llm_load_print_meta: n_vocab          = 256000
0.00.551.233 I llm_load_print_meta: n_merges         = 0
0.00.551.233 I llm_load_print_meta: vocab_only       = 0
0.00.551.234 I llm_load_print_meta: n_ctx_train      = 8192
0.00.551.234 I llm_load_print_meta: n_embd           = 2048
0.00.551.234 I llm_load_print_meta: n_layer          = 18
0.00.551.300 I llm_load_print_meta: n_head           = 8
0.00.551.307 I llm_load_print_meta: n_head_kv        = 1
0.00.551.308 I llm_load_print_meta: n_rot            = 256
0.00.551.308 I llm_load_print_meta: n_swa            = 0
0.00.551.308 I llm_load_print_meta: n_embd_head_k    = 256
0.00.551.309 I llm_load_print_meta: n_embd_head_v    = 256
0.00.551.313 I llm_load_print_meta: n_gqa            = 8
0.00.551.318 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.551.323 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.551.324 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.551.325 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.551.326 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.551.326 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.551.326 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.551.331 I llm_load_print_meta: n_ff             = 16384
0.00.551.332 I llm_load_print_meta: n_expert         = 0
0.00.551.332 I llm_load_print_meta: n_expert_used    = 0
0.00.551.332 I llm_load_print_meta: causal attn      = 1
0.00.551.333 I llm_load_print_meta: pooling type     = 0
0.00.551.333 I llm_load_print_meta: rope type        = 2
0.00.551.333 I llm_load_print_meta: rope scaling     = linear
0.00.551.334 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.551.335 I llm_load_print_meta: freq_scale_train = 1
0.00.551.335 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.551.336 I llm_load_print_meta: rope_finetuned   = unknown
0.00.551.336 I llm_load_print_meta: ssm_d_conv       = 0
0.00.551.336 I llm_load_print_meta: ssm_d_inner      = 0
0.00.551.337 I llm_load_print_meta: ssm_d_state      = 0
0.00.551.337 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.551.337 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.551.338 I llm_load_print_meta: model type       = 2B
0.00.551.339 I llm_load_print_meta: model ftype      = Q8_0
0.00.551.339 I llm_load_print_meta: model params     = 2.51 B
0.00.551.340 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.551.340 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.551.341 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.551.342 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.551.342 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.551.342 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.551.343 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.551.344 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.551.349 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.551.350 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.551.351 I llm_load_print_meta: max token length = 93
0.00.551.519 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.646.711 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.652.628 I llama_new_context_with_model: n_ctx      = 8192
0.00.652.637 I llama_new_context_with_model: n_batch    = 2048
0.00.652.637 I llama_new_context_with_model: n_ubatch   = 512
0.00.652.638 I llama_new_context_with_model: flash_attn = 0
0.00.652.643 I llama_new_context_with_model: freq_base  = 10000.0
0.00.652.643 I llama_new_context_with_model: freq_scale = 1
0.00.683.504 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.683.548 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.683.657 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.685.021 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.685.027 I llama_new_context_with_model: graph nodes  = 601
0.00.685.027 I llama_new_context_with_model: graph splits = 1
0.00.685.042 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.178 I main: llama threadpool init, n_threads = 4
0.01.297.188 I 
0.01.297.294 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.297 I 
0.01.297.464 I sampler seed: 181858689
0.01.297.473 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.480 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.297.481 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.481 I 
 increably.

I am unable to answer this question as it requires me to generate creative text, which is beyond my capabilities. [end of text]


0.12.625.402 I llama_perf_sampler_print:    sampling time =      40.16 ms /    28 runs   (    1.43 ms per token,   697.25 tokens per second)
0.12.625.406 I llama_perf_context_print:        load time =    1294.21 ms
0.12.625.407 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.625.409 I llama_perf_context_print:        eval time =   11260.34 ms /    27 runs   (  417.05 ms per token,     2.40 tokens per second)
0.12.625.423 I llama_perf_context_print:       total time =   11328.24 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.759 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.958 I main: llama backend init
0.00.002.913 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.025.175 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.384 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.479 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.492 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.495 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.499 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.505 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.506 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.508 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.509 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.510 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.518 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.519 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.534 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.535 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.536 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.514 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.399 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.875 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.884 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.886 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.887 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.888 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.889 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.890 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.894 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.895 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.896 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.897 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.898 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.905 I llama_model_loader: - type  f32:   37 tensors
0.00.270.909 I llama_model_loader: - type q8_0:  127 tensors
0.00.426.763 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.450.685 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.451.734 I llm_load_vocab: special tokens cache size = 5
0.00.553.120 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.553.178 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.553.179 I llm_load_print_meta: arch             = gemma
0.00.553.180 I llm_load_print_meta: vocab type       = SPM
0.00.553.181 I llm_load_print_meta: n_vocab          = 256000
0.00.553.184 I llm_load_print_meta: n_merges         = 0
0.00.553.184 I llm_load_print_meta: vocab_only       = 0
0.00.553.185 I llm_load_print_meta: n_ctx_train      = 8192
0.00.553.185 I llm_load_print_meta: n_embd           = 2048
0.00.553.185 I llm_load_print_meta: n_layer          = 18
0.00.553.247 I llm_load_print_meta: n_head           = 8
0.00.553.254 I llm_load_print_meta: n_head_kv        = 1
0.00.553.254 I llm_load_print_meta: n_rot            = 256
0.00.553.255 I llm_load_print_meta: n_swa            = 0
0.00.553.255 I llm_load_print_meta: n_embd_head_k    = 256
0.00.553.256 I llm_load_print_meta: n_embd_head_v    = 256
0.00.553.260 I llm_load_print_meta: n_gqa            = 8
0.00.553.265 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.553.270 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.553.271 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.553.272 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.553.273 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.553.273 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.553.274 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.553.279 I llm_load_print_meta: n_ff             = 16384
0.00.553.280 I llm_load_print_meta: n_expert         = 0
0.00.553.280 I llm_load_print_meta: n_expert_used    = 0
0.00.553.282 I llm_load_print_meta: causal attn      = 1
0.00.553.282 I llm_load_print_meta: pooling type     = 0
0.00.553.282 I llm_load_print_meta: rope type        = 2
0.00.553.283 I llm_load_print_meta: rope scaling     = linear
0.00.553.284 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.553.284 I llm_load_print_meta: freq_scale_train = 1
0.00.553.285 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.553.285 I llm_load_print_meta: rope_finetuned   = unknown
0.00.553.294 I llm_load_print_meta: ssm_d_conv       = 0
0.00.553.295 I llm_load_print_meta: ssm_d_inner      = 0
0.00.553.295 I llm_load_print_meta: ssm_d_state      = 0
0.00.553.308 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.553.308 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.553.316 I llm_load_print_meta: model type       = 2B
0.00.553.318 I llm_load_print_meta: model ftype      = Q8_0
0.00.553.319 I llm_load_print_meta: model params     = 2.51 B
0.00.553.320 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.553.329 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.553.330 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.553.338 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.553.339 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.553.339 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.553.340 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.553.341 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.553.346 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.553.347 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.553.347 I llm_load_print_meta: max token length = 93
0.00.553.513 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.630.318 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.630.326 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.630.327 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.630.327 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.630.328 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.630.329 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.636.193 I llama_new_context_with_model: n_ctx      = 8192
0.00.636.200 I llama_new_context_with_model: n_batch    = 2048
0.00.636.201 I llama_new_context_with_model: n_ubatch   = 512
0.00.636.201 I llama_new_context_with_model: flash_attn = 0
0.00.636.204 I llama_new_context_with_model: freq_base  = 10000.0
0.00.636.205 I llama_new_context_with_model: freq_scale = 1
0.00.665.078 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.665.126 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.665.240 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.666.607 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.666.613 I llama_new_context_with_model: graph nodes  = 601
0.00.666.614 I llama_new_context_with_model: graph splits = 1
0.00.666.630 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.443 I main: llama threadpool init, n_threads = 4
0.01.311.455 I 
0.01.311.557 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.561 I 
0.01.311.721 I sampler seed: 1454854634
0.01.311.732 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.739 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.311.740 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.311.740 I 
 increasities:

**a) Give an example of a chemical reaction that occurs during the process of respiration.**

**b) Describe how the Krebs cycle is

0.14.982.667 I llama_perf_sampler_print:    sampling time =      47.93 ms /    33 runs   (    1.45 ms per token,   688.48 tokens per second)
0.14.982.670 I llama_perf_context_print:        load time =    1308.32 ms
0.14.982.671 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.982.673 I llama_perf_context_print:        eval time =   13590.80 ms /    32 runs   (  424.71 ms per token,     2.35 tokens per second)
0.14.982.696 I llama_perf_context_print:       total time =   13671.23 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.644 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.843 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.652 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.864 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.953 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.964 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.966 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.970 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.971 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.973 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.975 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.977 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.978 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.987 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.993 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.994 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.997 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.998 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.842 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.801 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.230 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.239 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.240 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.241 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.242 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.243 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.244 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.249 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.250 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.251 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.252 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.261 I llama_model_loader: - type  f32:   37 tensors
0.00.269.265 I llama_model_loader: - type q8_0:  127 tensors
0.00.417.787 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.439.220 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.440.225 I llm_load_vocab: special tokens cache size = 5
0.00.535.781 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.535.842 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.535.844 I llm_load_print_meta: arch             = gemma
0.00.535.844 I llm_load_print_meta: vocab type       = SPM
0.00.535.845 I llm_load_print_meta: n_vocab          = 256000
0.00.535.847 I llm_load_print_meta: n_merges         = 0
0.00.535.848 I llm_load_print_meta: vocab_only       = 0
0.00.535.848 I llm_load_print_meta: n_ctx_train      = 8192
0.00.535.849 I llm_load_print_meta: n_embd           = 2048
0.00.535.849 I llm_load_print_meta: n_layer          = 18
0.00.535.911 I llm_load_print_meta: n_head           = 8
0.00.535.919 I llm_load_print_meta: n_head_kv        = 1
0.00.535.919 I llm_load_print_meta: n_rot            = 256
0.00.535.920 I llm_load_print_meta: n_swa            = 0
0.00.535.920 I llm_load_print_meta: n_embd_head_k    = 256
0.00.535.920 I llm_load_print_meta: n_embd_head_v    = 256
0.00.535.925 I llm_load_print_meta: n_gqa            = 8
0.00.535.930 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.535.935 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.535.956 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.535.958 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.535.959 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.535.959 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.535.960 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.535.965 I llm_load_print_meta: n_ff             = 16384
0.00.535.966 I llm_load_print_meta: n_expert         = 0
0.00.535.966 I llm_load_print_meta: n_expert_used    = 0
0.00.535.974 I llm_load_print_meta: causal attn      = 1
0.00.535.981 I llm_load_print_meta: pooling type     = 0
0.00.535.982 I llm_load_print_meta: rope type        = 2
0.00.535.982 I llm_load_print_meta: rope scaling     = linear
0.00.535.984 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.535.984 I llm_load_print_meta: freq_scale_train = 1
0.00.535.985 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.535.986 I llm_load_print_meta: rope_finetuned   = unknown
0.00.535.986 I llm_load_print_meta: ssm_d_conv       = 0
0.00.535.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.535.987 I llm_load_print_meta: ssm_d_state      = 0
0.00.535.987 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.535.988 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.535.989 I llm_load_print_meta: model type       = 2B
0.00.535.990 I llm_load_print_meta: model ftype      = Q8_0
0.00.535.990 I llm_load_print_meta: model params     = 2.51 B
0.00.535.991 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.535.992 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.535.992 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.535.993 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.535.993 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.535.994 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.535.994 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.535.995 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.536.001 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.536.003 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.536.004 I llm_load_print_meta: max token length = 93
0.00.536.177 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.608.783 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.608.793 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.614.674 I llama_new_context_with_model: n_ctx      = 8192
0.00.614.682 I llama_new_context_with_model: n_batch    = 2048
0.00.614.683 I llama_new_context_with_model: n_ubatch   = 512
0.00.614.683 I llama_new_context_with_model: flash_attn = 0
0.00.614.686 I llama_new_context_with_model: freq_base  = 10000.0
0.00.614.687 I llama_new_context_with_model: freq_scale = 1
0.00.643.884 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.643.926 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.644.037 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.645.410 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.645.418 I llama_new_context_with_model: graph nodes  = 601
0.00.645.419 I llama_new_context_with_model: graph splits = 1
0.00.645.439 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.255.727 I main: llama threadpool init, n_threads = 4
0.01.255.741 I 
0.01.255.857 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.255.861 I 
0.01.256.031 I sampler seed: 2697474555
0.01.256.042 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.256.049 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.256.050 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.256.051 I 
 increably and with a flourish.

I am not sure how to punctuate this sentence.

a) A flourishing crescendo of sound and light.
b

0.14.892.709 I llama_perf_sampler_print:    sampling time =      47.85 ms /    33 runs   (    1.45 ms per token,   689.70 tokens per second)
0.14.892.713 I llama_perf_context_print:        load time =    1252.68 ms
0.14.892.716 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.892.718 I llama_perf_context_print:        eval time =   13555.99 ms /    32 runs   (  423.62 ms per token,     2.36 tokens per second)
0.14.892.720 I llama_perf_context_print:       total time =   13636.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m6.930s
user	3m41.286s
sys	0m9.328s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3897 (32295866)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199526.86 ms
main:    total time = 199526.86 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.641 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.776 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.742 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.965 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.055 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.066 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.067 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.072 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.073 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.074 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.075 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.076 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.077 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.083 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.085 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.087 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.094 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.096 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.344 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.256.744 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.276.324 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.276.331 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.276.333 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.276.334 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.276.335 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.276.336 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.276.337 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.276.341 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.276.342 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.276.343 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.276.344 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.276.345 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.276.352 I llama_model_loader: - type  f32:   37 tensors
0.00.276.356 I llama_model_loader: - type q4_K:  108 tensors
0.00.276.357 I llama_model_loader: - type q6_K:   19 tensors
0.00.428.481 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.450.064 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.451.039 I llm_load_vocab: special tokens cache size = 5
0.00.548.050 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.548.104 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.548.105 I llm_load_print_meta: arch             = gemma
0.00.548.106 I llm_load_print_meta: vocab type       = SPM
0.00.548.107 I llm_load_print_meta: n_vocab          = 256000
0.00.548.110 I llm_load_print_meta: n_merges         = 0
0.00.548.110 I llm_load_print_meta: vocab_only       = 0
0.00.548.111 I llm_load_print_meta: n_ctx_train      = 8192
0.00.548.111 I llm_load_print_meta: n_embd           = 2048
0.00.548.112 I llm_load_print_meta: n_layer          = 18
0.00.548.173 I llm_load_print_meta: n_head           = 8
0.00.548.180 I llm_load_print_meta: n_head_kv        = 1
0.00.548.182 I llm_load_print_meta: n_rot            = 256
0.00.548.182 I llm_load_print_meta: n_swa            = 0
0.00.548.183 I llm_load_print_meta: n_embd_head_k    = 256
0.00.548.194 I llm_load_print_meta: n_embd_head_v    = 256
0.00.548.199 I llm_load_print_meta: n_gqa            = 8
0.00.548.204 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.548.209 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.548.211 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.548.213 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.548.213 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.548.214 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.548.215 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.548.220 I llm_load_print_meta: n_ff             = 16384
0.00.548.221 I llm_load_print_meta: n_expert         = 0
0.00.548.221 I llm_load_print_meta: n_expert_used    = 0
0.00.548.222 I llm_load_print_meta: causal attn      = 1
0.00.548.222 I llm_load_print_meta: pooling type     = 0
0.00.548.222 I llm_load_print_meta: rope type        = 2
0.00.548.222 I llm_load_print_meta: rope scaling     = linear
0.00.548.224 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.548.224 I llm_load_print_meta: freq_scale_train = 1
0.00.548.225 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.548.225 I llm_load_print_meta: rope_finetuned   = unknown
0.00.548.226 I llm_load_print_meta: ssm_d_conv       = 0
0.00.548.227 I llm_load_print_meta: ssm_d_inner      = 0
0.00.548.228 I llm_load_print_meta: ssm_d_state      = 0
0.00.548.228 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.548.228 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.548.229 I llm_load_print_meta: model type       = 2B
0.00.548.230 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.548.231 I llm_load_print_meta: model params     = 2.51 B
0.00.548.231 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.548.232 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.548.233 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.548.233 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.548.234 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.548.234 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.548.235 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.548.236 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.548.241 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.548.243 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.548.243 I llm_load_print_meta: max token length = 93
0.00.548.409 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.608.512 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.608.524 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.608.525 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.608.525 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.608.526 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.608.527 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.614.085 I llama_new_context_with_model: n_ctx      = 8192
0.00.614.092 I llama_new_context_with_model: n_batch    = 2048
0.00.614.092 I llama_new_context_with_model: n_ubatch   = 512
0.00.614.093 I llama_new_context_with_model: flash_attn = 0
0.00.614.095 I llama_new_context_with_model: freq_base  = 10000.0
0.00.614.096 I llama_new_context_with_model: freq_scale = 1
0.00.643.165 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.643.207 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.643.327 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.644.755 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.644.761 I llama_new_context_with_model: graph nodes  = 601
0.00.644.762 I llama_new_context_with_model: graph splits = 1
0.00.644.777 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.223.147 I main: llama threadpool init, n_threads = 4
0.01.223.159 I 
0.01.223.265 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.223.269 I 
0.01.223.431 I sampler seed: 4246142352
0.01.223.442 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.223.448 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.223.451 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.223.452 I 
 seconally in the third person.

**Assistant**

The assistant should:

1. Understand the context and purpose of the question.
2. Provide

0.12.193.751 I llama_perf_sampler_print:    sampling time =      47.74 ms /    33 runs   (    1.45 ms per token,   691.19 tokens per second)
0.12.193.765 I llama_perf_context_print:        load time =    1220.20 ms
0.12.193.767 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.193.769 I llama_perf_context_print:        eval time =   10890.07 ms /    32 runs   (  340.31 ms per token,     2.94 tokens per second)
0.12.193.771 I llama_perf_context_print:       total time =   10970.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3897 (32295866)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199518.03 ms
main:    total time = 199518.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.629 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.821 I main: llama backend init
0.00.002.763 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.024.669 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.759 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.771 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.773 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.778 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.779 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.780 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.781 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.783 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.783 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.789 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.790 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.791 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.792 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.793 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.159.980 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.259.646 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.278.044 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.278.052 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.278.053 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.278.055 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.278.056 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.278.057 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.278.059 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.278.062 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.278.063 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.278.071 I llama_model_loader: - type  f32:   37 tensors
0.00.278.075 I llama_model_loader: - type q4_K:  108 tensors
0.00.278.076 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.944 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.458.377 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.459.351 I llm_load_vocab: special tokens cache size = 5
0.00.561.118 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.561.178 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.561.182 I llm_load_print_meta: arch             = gemma
0.00.561.183 I llm_load_print_meta: vocab type       = SPM
0.00.561.184 I llm_load_print_meta: n_vocab          = 256000
0.00.561.186 I llm_load_print_meta: n_merges         = 0
0.00.561.187 I llm_load_print_meta: vocab_only       = 0
0.00.561.187 I llm_load_print_meta: n_ctx_train      = 8192
0.00.561.187 I llm_load_print_meta: n_embd           = 2048
0.00.561.188 I llm_load_print_meta: n_layer          = 18
0.00.561.251 I llm_load_print_meta: n_head           = 8
0.00.561.260 I llm_load_print_meta: n_head_kv        = 1
0.00.561.261 I llm_load_print_meta: n_rot            = 256
0.00.561.261 I llm_load_print_meta: n_swa            = 0
0.00.561.263 I llm_load_print_meta: n_embd_head_k    = 256
0.00.561.263 I llm_load_print_meta: n_embd_head_v    = 256
0.00.561.268 I llm_load_print_meta: n_gqa            = 8
0.00.561.273 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.561.278 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.561.282 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.561.283 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.561.284 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.561.284 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.561.284 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.561.290 I llm_load_print_meta: n_ff             = 16384
0.00.561.290 I llm_load_print_meta: n_expert         = 0
0.00.561.291 I llm_load_print_meta: n_expert_used    = 0
0.00.561.291 I llm_load_print_meta: causal attn      = 1
0.00.561.291 I llm_load_print_meta: pooling type     = 0
0.00.561.292 I llm_load_print_meta: rope type        = 2
0.00.561.292 I llm_load_print_meta: rope scaling     = linear
0.00.561.293 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.561.294 I llm_load_print_meta: freq_scale_train = 1
0.00.561.294 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.561.295 I llm_load_print_meta: rope_finetuned   = unknown
0.00.561.296 I llm_load_print_meta: ssm_d_conv       = 0
0.00.561.296 I llm_load_print_meta: ssm_d_inner      = 0
0.00.561.296 I llm_load_print_meta: ssm_d_state      = 0
0.00.561.297 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.561.298 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.561.298 I llm_load_print_meta: model type       = 2B
0.00.561.299 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.561.300 I llm_load_print_meta: model params     = 2.51 B
0.00.561.300 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.561.301 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.561.302 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.561.303 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.561.303 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.561.303 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.561.304 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.561.305 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.561.310 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.561.312 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.561.312 I llm_load_print_meta: max token length = 93
0.00.561.475 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.619.465 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.625.393 I llama_new_context_with_model: n_ctx      = 8192
0.00.625.398 I llama_new_context_with_model: n_batch    = 2048
0.00.625.398 I llama_new_context_with_model: n_ubatch   = 512
0.00.625.399 I llama_new_context_with_model: flash_attn = 0
0.00.625.401 I llama_new_context_with_model: freq_base  = 10000.0
0.00.625.402 I llama_new_context_with_model: freq_scale = 1
0.00.656.112 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.656.153 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.656.268 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.657.625 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.657.630 I llama_new_context_with_model: graph nodes  = 601
0.00.657.630 I llama_new_context_with_model: graph splits = 1
0.00.657.645 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.236.614 I main: llama threadpool init, n_threads = 4
0.01.236.626 I 
0.01.236.735 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.236.739 I 
0.01.236.908 I sampler seed: 1004726997
0.01.236.918 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.236.925 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.236.926 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.236.929 I 
 stricking the weather and wind direction, a meteorologist issued a weather bulletin that warned of a severe thunderstorm with intense winds and hail. The meteorologist emphasized that

0.12.152.442 I llama_perf_sampler_print:    sampling time =      47.81 ms /    33 runs   (    1.45 ms per token,   690.25 tokens per second)
0.12.152.447 I llama_perf_context_print:        load time =    1233.67 ms
0.12.152.448 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.152.450 I llama_perf_context_print:        eval time =   10835.65 ms /    32 runs   (  338.61 ms per token,     2.95 tokens per second)
0.12.152.452 I llama_perf_context_print:       total time =   10915.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.256s
user	50m13.732s
sys	0m6.383s
