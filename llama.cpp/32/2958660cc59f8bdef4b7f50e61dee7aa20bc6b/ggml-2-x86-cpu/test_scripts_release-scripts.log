+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.547 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.001.857 I main: load the model and apply lora adapter, if any
0.00.021.703 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.749 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.756 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.761 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.762 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.765 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.766 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.766 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.768 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.768 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.769 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.772 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.773 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.773 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.774 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.774 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.105 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.136 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.141 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.142 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.142 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.143 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.143 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.144 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.146 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.147 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.148 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.148 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.149 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.152 I llama_model_loader: - type  f32:   37 tensors
0.00.131.155 I llama_model_loader: - type q8_0:  127 tensors
0.00.185.960 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.206 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.199.866 I llm_load_vocab: special tokens cache size = 5
0.00.220.655 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.668 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.669 I llm_load_print_meta: arch             = gemma
0.00.220.669 I llm_load_print_meta: vocab type       = SPM
0.00.220.670 I llm_load_print_meta: n_vocab          = 256000
0.00.220.670 I llm_load_print_meta: n_merges         = 0
0.00.220.671 I llm_load_print_meta: vocab_only       = 0
0.00.220.671 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.671 I llm_load_print_meta: n_embd           = 2048
0.00.220.672 I llm_load_print_meta: n_layer          = 18
0.00.220.683 I llm_load_print_meta: n_head           = 8
0.00.220.684 I llm_load_print_meta: n_head_kv        = 1
0.00.220.684 I llm_load_print_meta: n_rot            = 256
0.00.220.685 I llm_load_print_meta: n_swa            = 0
0.00.220.685 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.685 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.686 I llm_load_print_meta: n_gqa            = 8
0.00.220.687 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.688 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.689 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.690 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.690 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.691 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.691 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.692 I llm_load_print_meta: n_ff             = 16384
0.00.220.693 I llm_load_print_meta: n_expert         = 0
0.00.220.693 I llm_load_print_meta: n_expert_used    = 0
0.00.220.693 I llm_load_print_meta: causal attn      = 1
0.00.220.693 I llm_load_print_meta: pooling type     = 0
0.00.220.694 I llm_load_print_meta: rope type        = 2
0.00.220.694 I llm_load_print_meta: rope scaling     = linear
0.00.220.695 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.696 I llm_load_print_meta: freq_scale_train = 1
0.00.220.696 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.697 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.697 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.697 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.697 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.698 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.698 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.698 I llm_load_print_meta: model type       = 2B
0.00.220.699 I llm_load_print_meta: model ftype      = Q8_0
0.00.220.700 I llm_load_print_meta: model params     = 2.51 B
0.00.220.700 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.220.701 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.701 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.701 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.701 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.702 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.702 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.703 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.703 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.220.704 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.220.704 I llm_load_print_meta: max token length = 93
0.00.220.730 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.320.443 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.320.449 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.320.450 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.320.450 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.320.451 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.320.451 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.325.598 I llama_new_context_with_model: n_ctx      = 8192
0.00.325.603 I llama_new_context_with_model: n_batch    = 2048
0.00.325.603 I llama_new_context_with_model: n_ubatch   = 512
0.00.325.604 I llama_new_context_with_model: flash_attn = 0
0.00.325.606 I llama_new_context_with_model: freq_base  = 10000.0
0.00.325.607 I llama_new_context_with_model: freq_scale = 1
0.00.354.045 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.354.059 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.354.156 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.033 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.355.041 I llama_new_context_with_model: graph nodes  = 601
0.00.355.041 I llama_new_context_with_model: graph splits = 1
0.00.355.043 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.446.174 I main: llama threadpool init, n_threads = 4
0.00.446.186 I 
0.00.446.260 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.446.264 I 
0.00.446.300 I sampler seed: 22821720
0.00.446.309 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.446.311 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.446.312 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.446.312 I 
 increasities!

I cannot answer this question as it contains sexually suggestive content and is not appropriate for me to provide responses that may be harmful or inappropriate. [end of text]


0.02.689.446 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6863.56 tokens per second)
0.02.689.449 I llama_perf_context_print:        load time =     444.25 ms
0.02.689.450 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.689.452 I llama_perf_context_print:        eval time =    2225.34 ms /    32 runs   (   69.54 ms per token,    14.38 tokens per second)
0.02.689.455 I llama_perf_context_print:       total time =    2243.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.664 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.871 I main: llama backend init
0.00.001.957 I main: load the model and apply lora adapter, if any
0.00.022.641 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.652 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.660 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.661 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.664 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.665 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.666 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.667 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.668 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.668 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.673 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.674 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.674 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.674 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.675 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.289 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.146 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.028 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.034 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.035 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.036 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.036 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.037 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.038 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.041 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.042 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.043 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.044 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.044 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.048 I llama_model_loader: - type  f32:   37 tensors
0.00.133.051 I llama_model_loader: - type q8_0:  127 tensors
0.00.190.430 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.204.642 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.205.441 I llm_load_vocab: special tokens cache size = 5
0.00.226.344 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.226.358 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.226.358 I llm_load_print_meta: arch             = gemma
0.00.226.359 I llm_load_print_meta: vocab type       = SPM
0.00.226.359 I llm_load_print_meta: n_vocab          = 256000
0.00.226.360 I llm_load_print_meta: n_merges         = 0
0.00.226.360 I llm_load_print_meta: vocab_only       = 0
0.00.226.360 I llm_load_print_meta: n_ctx_train      = 8192
0.00.226.361 I llm_load_print_meta: n_embd           = 2048
0.00.226.361 I llm_load_print_meta: n_layer          = 18
0.00.226.373 I llm_load_print_meta: n_head           = 8
0.00.226.374 I llm_load_print_meta: n_head_kv        = 1
0.00.226.374 I llm_load_print_meta: n_rot            = 256
0.00.226.374 I llm_load_print_meta: n_swa            = 0
0.00.226.375 I llm_load_print_meta: n_embd_head_k    = 256
0.00.226.375 I llm_load_print_meta: n_embd_head_v    = 256
0.00.226.376 I llm_load_print_meta: n_gqa            = 8
0.00.226.377 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.226.378 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.226.379 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.226.380 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.226.380 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.226.381 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.226.381 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.226.382 I llm_load_print_meta: n_ff             = 16384
0.00.226.382 I llm_load_print_meta: n_expert         = 0
0.00.226.383 I llm_load_print_meta: n_expert_used    = 0
0.00.226.383 I llm_load_print_meta: causal attn      = 1
0.00.226.383 I llm_load_print_meta: pooling type     = 0
0.00.226.383 I llm_load_print_meta: rope type        = 2
0.00.226.384 I llm_load_print_meta: rope scaling     = linear
0.00.226.385 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.226.386 I llm_load_print_meta: freq_scale_train = 1
0.00.226.386 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.226.387 I llm_load_print_meta: rope_finetuned   = unknown
0.00.226.387 I llm_load_print_meta: ssm_d_conv       = 0
0.00.226.387 I llm_load_print_meta: ssm_d_inner      = 0
0.00.226.388 I llm_load_print_meta: ssm_d_state      = 0
0.00.226.388 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.226.388 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.226.389 I llm_load_print_meta: model type       = 2B
0.00.226.389 I llm_load_print_meta: model ftype      = Q8_0
0.00.226.390 I llm_load_print_meta: model params     = 2.51 B
0.00.226.391 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.226.391 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.226.392 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.226.392 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.226.392 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.226.392 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.226.393 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.226.394 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.226.394 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.226.395 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.226.395 I llm_load_print_meta: max token length = 93
0.00.226.419 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.318.261 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.323.297 I llama_new_context_with_model: n_ctx      = 8192
0.00.323.313 I llama_new_context_with_model: n_batch    = 2048
0.00.323.313 I llama_new_context_with_model: n_ubatch   = 512
0.00.323.314 I llama_new_context_with_model: flash_attn = 0
0.00.323.317 I llama_new_context_with_model: freq_base  = 10000.0
0.00.323.318 I llama_new_context_with_model: freq_scale = 1
0.00.353.180 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.353.195 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.353.283 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.148 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.354.156 I llama_new_context_with_model: graph nodes  = 601
0.00.354.156 I llama_new_context_with_model: graph splits = 1
0.00.354.158 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.255 I main: llama threadpool init, n_threads = 4
0.00.442.267 I 
0.00.442.345 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.348 I 
0.00.442.385 I sampler seed: 1034645877
0.00.442.395 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.398 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.442.398 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.398 I 
 increadibly fast.

I am not sure if I should stay or go.

I am at a crossroads in my life. I have two paths before me

0.02.616.376 I llama_perf_sampler_print:    sampling time =       4.58 ms /    33 runs   (    0.14 ms per token,  7203.67 tokens per second)
0.02.616.379 I llama_perf_context_print:        load time =     440.23 ms
0.02.616.380 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.616.382 I llama_perf_context_print:        eval time =    2156.55 ms /    32 runs   (   67.39 ms per token,    14.84 tokens per second)
0.02.616.383 I llama_perf_context_print:       total time =    2174.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.544 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.001.896 I main: load the model and apply lora adapter, if any
0.00.022.676 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.750 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.761 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.768 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.772 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.777 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.778 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.780 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.782 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.783 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.784 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.790 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.791 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.792 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.793 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.794 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.381 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.918 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.756 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.762 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.763 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.763 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.764 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.765 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.765 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.767 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.768 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.769 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.769 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.770 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.773 I llama_model_loader: - type  f32:   37 tensors
0.00.132.776 I llama_model_loader: - type q8_0:  127 tensors
0.00.187.123 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.107 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.200.748 I llm_load_vocab: special tokens cache size = 5
0.00.221.656 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.221.670 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.221.670 I llm_load_print_meta: arch             = gemma
0.00.221.671 I llm_load_print_meta: vocab type       = SPM
0.00.221.672 I llm_load_print_meta: n_vocab          = 256000
0.00.221.672 I llm_load_print_meta: n_merges         = 0
0.00.221.673 I llm_load_print_meta: vocab_only       = 0
0.00.221.673 I llm_load_print_meta: n_ctx_train      = 8192
0.00.221.673 I llm_load_print_meta: n_embd           = 2048
0.00.221.674 I llm_load_print_meta: n_layer          = 18
0.00.221.688 I llm_load_print_meta: n_head           = 8
0.00.221.689 I llm_load_print_meta: n_head_kv        = 1
0.00.221.690 I llm_load_print_meta: n_rot            = 256
0.00.221.690 I llm_load_print_meta: n_swa            = 0
0.00.221.691 I llm_load_print_meta: n_embd_head_k    = 256
0.00.221.691 I llm_load_print_meta: n_embd_head_v    = 256
0.00.221.692 I llm_load_print_meta: n_gqa            = 8
0.00.221.694 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.221.695 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.221.697 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.221.699 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.221.699 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.221.700 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.221.701 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.221.703 I llm_load_print_meta: n_ff             = 16384
0.00.221.703 I llm_load_print_meta: n_expert         = 0
0.00.221.704 I llm_load_print_meta: n_expert_used    = 0
0.00.221.704 I llm_load_print_meta: causal attn      = 1
0.00.221.705 I llm_load_print_meta: pooling type     = 0
0.00.221.705 I llm_load_print_meta: rope type        = 2
0.00.221.706 I llm_load_print_meta: rope scaling     = linear
0.00.221.707 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.221.708 I llm_load_print_meta: freq_scale_train = 1
0.00.221.711 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.221.712 I llm_load_print_meta: rope_finetuned   = unknown
0.00.221.712 I llm_load_print_meta: ssm_d_conv       = 0
0.00.221.713 I llm_load_print_meta: ssm_d_inner      = 0
0.00.221.713 I llm_load_print_meta: ssm_d_state      = 0
0.00.221.714 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.221.714 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.221.715 I llm_load_print_meta: model type       = 2B
0.00.221.716 I llm_load_print_meta: model ftype      = Q8_0
0.00.221.717 I llm_load_print_meta: model params     = 2.51 B
0.00.221.719 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.221.719 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.221.720 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.221.721 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.221.721 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.221.722 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.221.722 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.221.723 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.221.724 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.221.725 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.221.726 I llm_load_print_meta: max token length = 93
0.00.221.748 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.297.206 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.297.213 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.297.214 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.297.215 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.297.216 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.297.216 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.302.327 I llama_new_context_with_model: n_ctx      = 8192
0.00.302.333 I llama_new_context_with_model: n_batch    = 2048
0.00.302.333 I llama_new_context_with_model: n_ubatch   = 512
0.00.302.334 I llama_new_context_with_model: flash_attn = 0
0.00.302.336 I llama_new_context_with_model: freq_base  = 10000.0
0.00.302.337 I llama_new_context_with_model: freq_scale = 1
0.00.331.802 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.331.820 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.331.912 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.332.822 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.332.830 I llama_new_context_with_model: graph nodes  = 601
0.00.332.831 I llama_new_context_with_model: graph splits = 1
0.00.332.832 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.710 I main: llama threadpool init, n_threads = 4
0.00.426.724 I 
0.00.426.813 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.426.816 I 
0.00.426.858 I sampler seed: 2810307760
0.00.426.868 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.871 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.426.872 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.872 I 
 increasities and their potential consequences.

**Answer:**

**What are the clinical implications of increasities and their potential consequences?**

**Clinical implications of

0.02.700.406 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6916.79 tokens per second)
0.02.700.410 I llama_perf_context_print:        load time =     424.75 ms
0.02.700.411 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.700.413 I llama_perf_context_print:        eval time =    2255.44 ms /    32 runs   (   70.48 ms per token,    14.19 tokens per second)
0.02.700.414 I llama_perf_context_print:       total time =    2273.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.534 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.771 I main: llama backend init
0.00.001.915 I main: load the model and apply lora adapter, if any
0.00.021.941 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.995 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.010 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.019 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.021 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.027 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.029 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.029 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.037 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.038 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.038 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.039 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.040 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.489 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.913 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.804 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.810 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.812 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.812 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.813 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.814 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.815 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.819 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.820 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.821 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.822 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.823 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.828 I llama_model_loader: - type  f32:   37 tensors
0.00.131.831 I llama_model_loader: - type q8_0:  127 tensors
0.00.189.443 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.208.850 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.209.778 I llm_load_vocab: special tokens cache size = 5
0.00.231.094 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.231.109 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.231.109 I llm_load_print_meta: arch             = gemma
0.00.231.110 I llm_load_print_meta: vocab type       = SPM
0.00.231.111 I llm_load_print_meta: n_vocab          = 256000
0.00.231.112 I llm_load_print_meta: n_merges         = 0
0.00.231.112 I llm_load_print_meta: vocab_only       = 0
0.00.231.112 I llm_load_print_meta: n_ctx_train      = 8192
0.00.231.112 I llm_load_print_meta: n_embd           = 2048
0.00.231.113 I llm_load_print_meta: n_layer          = 18
0.00.231.127 I llm_load_print_meta: n_head           = 8
0.00.231.128 I llm_load_print_meta: n_head_kv        = 1
0.00.231.128 I llm_load_print_meta: n_rot            = 256
0.00.231.129 I llm_load_print_meta: n_swa            = 0
0.00.231.129 I llm_load_print_meta: n_embd_head_k    = 256
0.00.231.130 I llm_load_print_meta: n_embd_head_v    = 256
0.00.231.131 I llm_load_print_meta: n_gqa            = 8
0.00.231.132 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.231.134 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.231.135 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.231.137 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.231.138 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.231.138 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.231.140 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.231.141 I llm_load_print_meta: n_ff             = 16384
0.00.231.142 I llm_load_print_meta: n_expert         = 0
0.00.231.143 I llm_load_print_meta: n_expert_used    = 0
0.00.231.143 I llm_load_print_meta: causal attn      = 1
0.00.231.144 I llm_load_print_meta: pooling type     = 0
0.00.231.144 I llm_load_print_meta: rope type        = 2
0.00.231.145 I llm_load_print_meta: rope scaling     = linear
0.00.231.148 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.231.149 I llm_load_print_meta: freq_scale_train = 1
0.00.231.149 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.231.150 I llm_load_print_meta: rope_finetuned   = unknown
0.00.231.150 I llm_load_print_meta: ssm_d_conv       = 0
0.00.231.151 I llm_load_print_meta: ssm_d_inner      = 0
0.00.231.154 I llm_load_print_meta: ssm_d_state      = 0
0.00.231.155 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.231.155 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.231.156 I llm_load_print_meta: model type       = 2B
0.00.231.157 I llm_load_print_meta: model ftype      = Q8_0
0.00.231.158 I llm_load_print_meta: model params     = 2.51 B
0.00.231.159 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.231.159 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.231.160 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.231.161 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.231.162 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.231.162 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.231.163 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.231.163 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.231.164 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.231.165 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.231.165 I llm_load_print_meta: max token length = 93
0.00.231.191 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.301.787 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.301.795 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.306.905 I llama_new_context_with_model: n_ctx      = 8192
0.00.306.911 I llama_new_context_with_model: n_batch    = 2048
0.00.306.912 I llama_new_context_with_model: n_ubatch   = 512
0.00.306.912 I llama_new_context_with_model: flash_attn = 0
0.00.306.915 I llama_new_context_with_model: freq_base  = 10000.0
0.00.306.915 I llama_new_context_with_model: freq_scale = 1
0.00.335.653 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.335.667 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.335.776 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.336.639 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.336.647 I llama_new_context_with_model: graph nodes  = 601
0.00.336.647 I llama_new_context_with_model: graph splits = 1
0.00.336.649 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.032 I main: llama threadpool init, n_threads = 4
0.00.431.043 I 
0.00.431.138 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.141 I 
0.00.431.184 I sampler seed: 343714185
0.00.431.194 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.197 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.197 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.431.198 I 
 increamically, but inconsistently, throughout the entire set.

The pattern appears to be a random sequence of high and low values, with no discernible underlying structure

0.02.857.768 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6845.05 tokens per second)
0.02.857.770 I llama_perf_context_print:        load time =     429.05 ms
0.02.857.771 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.857.772 I llama_perf_context_print:        eval time =    2408.59 ms /    32 runs   (   75.27 ms per token,    13.29 tokens per second)
0.02.857.773 I llama_perf_context_print:       total time =    2426.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.288s
user	0m39.107s
sys	0m9.431s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3897 (32295866)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31999.22 ms
main:    total time = 31999.22 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.558 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.001.864 I main: load the model and apply lora adapter, if any
0.00.021.988 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.034 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.045 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.050 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.051 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.054 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.055 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.056 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.056 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.057 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.057 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.060 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.061 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.061 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.062 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.062 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.838 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.210 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.031 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.037 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.039 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.040 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.041 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.043 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.044 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.045 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.045 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.047 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.049 I llama_model_loader: - type  f32:   37 tensors
0.00.132.051 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.052 I llama_model_loader: - type q6_K:   19 tensors
0.00.187.366 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.861 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.201.481 I llm_load_vocab: special tokens cache size = 5
0.00.222.313 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.325 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.326 I llm_load_print_meta: arch             = gemma
0.00.222.326 I llm_load_print_meta: vocab type       = SPM
0.00.222.327 I llm_load_print_meta: n_vocab          = 256000
0.00.222.327 I llm_load_print_meta: n_merges         = 0
0.00.222.328 I llm_load_print_meta: vocab_only       = 0
0.00.222.328 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.328 I llm_load_print_meta: n_embd           = 2048
0.00.222.329 I llm_load_print_meta: n_layer          = 18
0.00.222.342 I llm_load_print_meta: n_head           = 8
0.00.222.342 I llm_load_print_meta: n_head_kv        = 1
0.00.222.343 I llm_load_print_meta: n_rot            = 256
0.00.222.343 I llm_load_print_meta: n_swa            = 0
0.00.222.343 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.343 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.344 I llm_load_print_meta: n_gqa            = 8
0.00.222.345 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.346 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.347 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.348 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.349 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.349 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.350 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.350 I llm_load_print_meta: n_ff             = 16384
0.00.222.351 I llm_load_print_meta: n_expert         = 0
0.00.222.351 I llm_load_print_meta: n_expert_used    = 0
0.00.222.351 I llm_load_print_meta: causal attn      = 1
0.00.222.351 I llm_load_print_meta: pooling type     = 0
0.00.222.352 I llm_load_print_meta: rope type        = 2
0.00.222.352 I llm_load_print_meta: rope scaling     = linear
0.00.222.353 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.354 I llm_load_print_meta: freq_scale_train = 1
0.00.222.355 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.355 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.355 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.356 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.356 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.356 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.356 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.357 I llm_load_print_meta: model type       = 2B
0.00.222.357 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.222.358 I llm_load_print_meta: model params     = 2.51 B
0.00.222.359 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.222.359 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.360 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.360 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.360 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.361 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.361 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.361 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.362 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.222.363 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.222.363 I llm_load_print_meta: max token length = 93
0.00.222.380 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.280.979 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.280.985 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.280.986 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.280.987 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.280.987 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.280.988 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.285.931 I llama_new_context_with_model: n_ctx      = 8192
0.00.285.937 I llama_new_context_with_model: n_batch    = 2048
0.00.285.938 I llama_new_context_with_model: n_ubatch   = 512
0.00.285.938 I llama_new_context_with_model: flash_attn = 0
0.00.285.940 I llama_new_context_with_model: freq_base  = 10000.0
0.00.285.941 I llama_new_context_with_model: freq_scale = 1
0.00.315.287 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.315.301 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.315.387 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.316.259 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.316.267 I llama_new_context_with_model: graph nodes  = 601
0.00.316.267 I llama_new_context_with_model: graph splits = 1
0.00.316.269 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.397.081 I main: llama threadpool init, n_threads = 4
0.00.397.094 I 
0.00.397.168 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.397.172 I 
0.00.397.207 I sampler seed: 3527939504
0.00.397.216 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.397.219 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.397.219 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.397.220 I 
 maneutables

The question is asking for a list of "troubleshoot" issues and solutions for a "repetitive task".

**Task:**

-

0.01.970.238 I llama_perf_sampler_print:    sampling time =       4.73 ms /    33 runs   (    0.14 ms per token,  6972.32 tokens per second)
0.01.970.240 I llama_perf_context_print:        load time =     395.16 ms
0.01.970.241 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.970.243 I llama_perf_context_print:        eval time =    1555.70 ms /    32 runs   (   48.62 ms per token,    20.57 tokens per second)
0.01.970.244 I llama_perf_context_print:       total time =    1573.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3897 (32295866)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32030.03 ms
main:    total time = 32030.03 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.545 I build: 3897 (32295866) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.001.858 I main: load the model and apply lora adapter, if any
0.00.022.219 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.022.234 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.241 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.248 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.249 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.249 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.250 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.251 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.252 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.255 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.256 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.257 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.258 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.258 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.020 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.073 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.978 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.984 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.985 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.986 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.986 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.987 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.988 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.991 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.991 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.995 I llama_model_loader: - type  f32:   37 tensors
0.00.131.997 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.998 I llama_model_loader: - type q6_K:   19 tensors
0.00.187.784 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.200.503 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.201.174 I llm_load_vocab: special tokens cache size = 5
0.00.222.026 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.222.039 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.222.039 I llm_load_print_meta: arch             = gemma
0.00.222.040 I llm_load_print_meta: vocab type       = SPM
0.00.222.041 I llm_load_print_meta: n_vocab          = 256000
0.00.222.041 I llm_load_print_meta: n_merges         = 0
0.00.222.041 I llm_load_print_meta: vocab_only       = 0
0.00.222.042 I llm_load_print_meta: n_ctx_train      = 8192
0.00.222.042 I llm_load_print_meta: n_embd           = 2048
0.00.222.042 I llm_load_print_meta: n_layer          = 18
0.00.222.055 I llm_load_print_meta: n_head           = 8
0.00.222.056 I llm_load_print_meta: n_head_kv        = 1
0.00.222.056 I llm_load_print_meta: n_rot            = 256
0.00.222.056 I llm_load_print_meta: n_swa            = 0
0.00.222.057 I llm_load_print_meta: n_embd_head_k    = 256
0.00.222.057 I llm_load_print_meta: n_embd_head_v    = 256
0.00.222.058 I llm_load_print_meta: n_gqa            = 8
0.00.222.059 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.222.060 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.222.060 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.222.061 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.222.062 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.222.062 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.222.062 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.222.063 I llm_load_print_meta: n_ff             = 16384
0.00.222.064 I llm_load_print_meta: n_expert         = 0
0.00.222.064 I llm_load_print_meta: n_expert_used    = 0
0.00.222.065 I llm_load_print_meta: causal attn      = 1
0.00.222.065 I llm_load_print_meta: pooling type     = 0
0.00.222.065 I llm_load_print_meta: rope type        = 2
0.00.222.065 I llm_load_print_meta: rope scaling     = linear
0.00.222.067 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.222.068 I llm_load_print_meta: freq_scale_train = 1
0.00.222.068 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.222.068 I llm_load_print_meta: rope_finetuned   = unknown
0.00.222.068 I llm_load_print_meta: ssm_d_conv       = 0
0.00.222.069 I llm_load_print_meta: ssm_d_inner      = 0
0.00.222.069 I llm_load_print_meta: ssm_d_state      = 0
0.00.222.069 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.222.070 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.222.070 I llm_load_print_meta: model type       = 2B
0.00.222.071 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.222.071 I llm_load_print_meta: model params     = 2.51 B
0.00.222.072 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.222.072 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.222.073 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.222.073 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.222.073 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.222.074 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.222.074 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.222.074 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.222.075 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.222.075 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.222.076 I llm_load_print_meta: max token length = 93
0.00.222.092 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.279.642 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.284.535 I llama_new_context_with_model: n_ctx      = 8192
0.00.284.541 I llama_new_context_with_model: n_batch    = 2048
0.00.284.541 I llama_new_context_with_model: n_ubatch   = 512
0.00.284.541 I llama_new_context_with_model: flash_attn = 0
0.00.284.543 I llama_new_context_with_model: freq_base  = 10000.0
0.00.284.544 I llama_new_context_with_model: freq_scale = 1
0.00.313.158 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.313.173 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.313.262 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.314.094 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.314.103 I llama_new_context_with_model: graph nodes  = 601
0.00.314.103 I llama_new_context_with_model: graph splits = 1
0.00.314.105 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.393.914 I main: llama threadpool init, n_threads = 4
0.00.393.925 I 
0.00.394.001 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.394.005 I 
0.00.394.039 I sampler seed: 415900005
0.00.394.049 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.394.051 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.394.052 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.394.052 I 
 increasities can occur in a variety of settings, including healthcare, education, and workplaces.

**Healthcare:**

* Medical errors
* Patient neglect
*

0.01.992.007 I llama_perf_sampler_print:    sampling time =       4.84 ms /    33 runs   (    0.15 ms per token,  6818.18 tokens per second)
0.01.992.010 I llama_perf_context_print:        load time =     391.99 ms
0.01.992.011 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.992.012 I llama_perf_context_print:        eval time =    1580.25 ms /    32 runs   (   49.38 ms per token,    20.25 tokens per second)
0.01.992.013 I llama_perf_context_print:       total time =    1598.10 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.741s
user	8m14.335s
sys	0m6.695s
