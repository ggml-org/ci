+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.451 I build: 4244 (328ded35) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.670 I main: llama backend init
0.00.000.677 I main: load the model and apply lora adapter, if any
0.00.021.333 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.343 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.350 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.354 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.355 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.359 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.360 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.361 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.362 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.363 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.364 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.368 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.369 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.369 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.370 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.370 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.767 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.587 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.397 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.403 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.404 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.404 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.405 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.406 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.407 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.410 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.411 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.412 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.413 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.413 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.418 I llama_model_loader: - type  f32:   37 tensors
0.00.131.419 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.136 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.288 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.866 I llm_load_vocab: special tokens cache size = 5
0.00.267.948 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.965 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.966 I llm_load_print_meta: arch             = gemma
0.00.267.966 I llm_load_print_meta: vocab type       = SPM
0.00.267.967 I llm_load_print_meta: n_vocab          = 256000
0.00.267.968 I llm_load_print_meta: n_merges         = 0
0.00.267.968 I llm_load_print_meta: vocab_only       = 0
0.00.267.969 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.969 I llm_load_print_meta: n_embd           = 2048
0.00.267.970 I llm_load_print_meta: n_layer          = 18
0.00.267.980 I llm_load_print_meta: n_head           = 8
0.00.267.981 I llm_load_print_meta: n_head_kv        = 1
0.00.267.982 I llm_load_print_meta: n_rot            = 256
0.00.267.982 I llm_load_print_meta: n_swa            = 0
0.00.267.982 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.982 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.983 I llm_load_print_meta: n_gqa            = 8
0.00.267.984 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.985 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.986 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.988 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.988 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.989 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.989 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.990 I llm_load_print_meta: n_ff             = 16384
0.00.267.990 I llm_load_print_meta: n_expert         = 0
0.00.267.991 I llm_load_print_meta: n_expert_used    = 0
0.00.267.991 I llm_load_print_meta: causal attn      = 1
0.00.267.991 I llm_load_print_meta: pooling type     = 0
0.00.267.991 I llm_load_print_meta: rope type        = 2
0.00.267.992 I llm_load_print_meta: rope scaling     = linear
0.00.267.993 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.993 I llm_load_print_meta: freq_scale_train = 1
0.00.267.994 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.994 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.994 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.995 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.995 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.995 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.995 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.996 I llm_load_print_meta: model type       = 2B
0.00.267.996 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.997 I llm_load_print_meta: model params     = 2.51 B
0.00.267.998 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.998 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.999 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.999 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.999 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.000 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.000 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.000 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.001 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.001 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.002 I llm_load_print_meta: max token length = 93
0.00.368.576 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.368.583 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.368.583 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.368.584 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.368.585 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.368.585 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.373.830 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.836 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.836 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.837 I llama_new_context_with_model: n_batch       = 2048
0.00.373.837 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.837 I llama_new_context_with_model: flash_attn    = 0
0.00.373.840 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.841 I llama_new_context_with_model: freq_scale    = 1
0.00.373.842 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.388.201 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.388.214 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.388.303 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.542 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.548 I llama_new_context_with_model: graph nodes  = 601
0.00.389.549 I llama_new_context_with_model: graph splits = 1
0.00.389.551 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.107 I main: llama threadpool init, n_threads = 4
0.00.474.122 I 
0.00.474.193 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.474.196 I 
0.00.474.243 I sampler seed: 1228336732
0.00.474.253 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.265 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.268 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.269 I 
 increadibly.

I am unable to generate a response as the prompt contains inappropriate language. My purpose is to assist with tasks that comply with ethical guidelines. [end of text]


0.02.715.617 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7004.88 tokens per second)
0.02.715.620 I llama_perf_context_print:        load time =     473.41 ms
0.02.715.622 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.715.623 I llama_perf_context_print:        eval time =    2222.10 ms /    32 runs   (   69.44 ms per token,    14.40 tokens per second)
0.02.715.624 I llama_perf_context_print:       total time =    2241.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.527 I build: 4244 (328ded35) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.714 I main: llama backend init
0.00.000.721 I main: load the model and apply lora adapter, if any
0.00.021.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.012 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.024 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.027 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.031 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.032 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.033 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.033 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.034 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.034 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.038 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.039 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.039 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.040 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.040 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.121 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.716 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.558 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.563 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.565 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.566 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.567 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.568 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.569 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.572 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.573 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.574 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.575 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.576 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.579 I llama_model_loader: - type  f32:   37 tensors
0.00.131.580 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.669 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.859 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.517 I llm_load_vocab: special tokens cache size = 5
0.00.272.462 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.480 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.481 I llm_load_print_meta: arch             = gemma
0.00.272.482 I llm_load_print_meta: vocab type       = SPM
0.00.272.483 I llm_load_print_meta: n_vocab          = 256000
0.00.272.483 I llm_load_print_meta: n_merges         = 0
0.00.272.483 I llm_load_print_meta: vocab_only       = 0
0.00.272.484 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.484 I llm_load_print_meta: n_embd           = 2048
0.00.272.485 I llm_load_print_meta: n_layer          = 18
0.00.272.496 I llm_load_print_meta: n_head           = 8
0.00.272.497 I llm_load_print_meta: n_head_kv        = 1
0.00.272.497 I llm_load_print_meta: n_rot            = 256
0.00.272.498 I llm_load_print_meta: n_swa            = 0
0.00.272.498 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.498 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.499 I llm_load_print_meta: n_gqa            = 8
0.00.272.500 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.501 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.502 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.504 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.504 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.505 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.505 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.506 I llm_load_print_meta: n_ff             = 16384
0.00.272.506 I llm_load_print_meta: n_expert         = 0
0.00.272.507 I llm_load_print_meta: n_expert_used    = 0
0.00.272.507 I llm_load_print_meta: causal attn      = 1
0.00.272.507 I llm_load_print_meta: pooling type     = 0
0.00.272.507 I llm_load_print_meta: rope type        = 2
0.00.272.507 I llm_load_print_meta: rope scaling     = linear
0.00.272.509 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.510 I llm_load_print_meta: freq_scale_train = 1
0.00.272.510 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.510 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.511 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.511 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.512 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.512 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.512 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.513 I llm_load_print_meta: model type       = 2B
0.00.272.513 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.514 I llm_load_print_meta: model params     = 2.51 B
0.00.272.515 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.515 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.516 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.516 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.516 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.517 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.517 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.517 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.518 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.518 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.519 I llm_load_print_meta: max token length = 93
0.00.367.189 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.372.313 I llama_new_context_with_model: n_seq_max     = 1
0.00.372.319 I llama_new_context_with_model: n_ctx         = 4096
0.00.372.320 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.372.320 I llama_new_context_with_model: n_batch       = 2048
0.00.372.321 I llama_new_context_with_model: n_ubatch      = 512
0.00.372.322 I llama_new_context_with_model: flash_attn    = 0
0.00.372.324 I llama_new_context_with_model: freq_base     = 10000.0
0.00.372.325 I llama_new_context_with_model: freq_scale    = 1
0.00.372.326 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.386.917 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.386.931 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.022 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.261 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.267 I llama_new_context_with_model: graph nodes  = 601
0.00.388.267 I llama_new_context_with_model: graph splits = 1
0.00.388.269 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.842 I main: llama threadpool init, n_threads = 4
0.00.468.857 I 
0.00.468.931 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.468.934 I 
0.00.468.979 I sampler seed: 209830497
0.00.468.990 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.993 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.003 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.005 I 
 increably.

I am unable to access the content of the page due to a technical issue. Please try again later. [end of text]


0.02.241.898 I llama_perf_sampler_print:    sampling time =       4.00 ms /    27 runs   (    0.15 ms per token,  6756.76 tokens per second)
0.02.241.901 I llama_perf_context_print:        load time =     468.10 ms
0.02.241.902 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.241.904 I llama_perf_context_print:        eval time =    1756.95 ms /    26 runs   (   67.58 ms per token,    14.80 tokens per second)
0.02.241.905 I llama_perf_context_print:       total time =    1773.07 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.557 I build: 4244 (328ded35) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.216 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.226 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.233 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.238 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.239 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.243 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.243 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.244 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.244 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.245 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.246 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.250 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.251 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.252 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.253 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.253 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.851 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.852 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.623 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.628 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.629 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.630 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.631 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.631 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.632 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.634 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.635 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.636 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.637 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.638 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.640 I llama_model_loader: - type  f32:   37 tensors
0.00.131.642 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.324 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.938 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.489 I llm_load_vocab: special tokens cache size = 5
0.00.262.530 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.546 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.547 I llm_load_print_meta: arch             = gemma
0.00.262.548 I llm_load_print_meta: vocab type       = SPM
0.00.262.548 I llm_load_print_meta: n_vocab          = 256000
0.00.262.549 I llm_load_print_meta: n_merges         = 0
0.00.262.549 I llm_load_print_meta: vocab_only       = 0
0.00.262.549 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.550 I llm_load_print_meta: n_embd           = 2048
0.00.262.550 I llm_load_print_meta: n_layer          = 18
0.00.262.562 I llm_load_print_meta: n_head           = 8
0.00.262.563 I llm_load_print_meta: n_head_kv        = 1
0.00.262.564 I llm_load_print_meta: n_rot            = 256
0.00.262.564 I llm_load_print_meta: n_swa            = 0
0.00.262.564 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.565 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.565 I llm_load_print_meta: n_gqa            = 8
0.00.262.566 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.567 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.568 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.570 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.571 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.572 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.572 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.574 I llm_load_print_meta: n_ff             = 16384
0.00.262.574 I llm_load_print_meta: n_expert         = 0
0.00.262.575 I llm_load_print_meta: n_expert_used    = 0
0.00.262.575 I llm_load_print_meta: causal attn      = 1
0.00.262.576 I llm_load_print_meta: pooling type     = 0
0.00.262.576 I llm_load_print_meta: rope type        = 2
0.00.262.576 I llm_load_print_meta: rope scaling     = linear
0.00.262.578 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.579 I llm_load_print_meta: freq_scale_train = 1
0.00.262.579 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.580 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.581 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.581 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.581 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.582 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.582 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.583 I llm_load_print_meta: model type       = 2B
0.00.262.584 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.585 I llm_load_print_meta: model params     = 2.51 B
0.00.262.586 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.586 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.587 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.587 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.588 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.588 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.588 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.589 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.589 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.589 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.590 I llm_load_print_meta: max token length = 93
0.00.337.711 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.337.717 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.337.718 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.337.718 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.337.719 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.337.720 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.342.731 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.738 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.738 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.739 I llama_new_context_with_model: n_batch       = 2048
0.00.342.739 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.740 I llama_new_context_with_model: flash_attn    = 0
0.00.342.742 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.743 I llama_new_context_with_model: freq_scale    = 1
0.00.342.744 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.841 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.855 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.943 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.213 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.219 I llama_new_context_with_model: graph nodes  = 601
0.00.358.219 I llama_new_context_with_model: graph splits = 1
0.00.358.221 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.443.529 I main: llama threadpool init, n_threads = 4
0.00.443.547 I 
0.00.443.622 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.443.625 I 
0.00.443.670 I sampler seed: 1275423240
0.00.443.681 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.443.693 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.443.696 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.443.696 I 
 increamically. 

**Assistant**

I understand. I will ensure to provide you with accurate and timely information in a clear and concise manner. [end of text]


0.02.666.135 I llama_perf_sampler_print:    sampling time =       4.89 ms /    32 runs   (    0.15 ms per token,  6542.63 tokens per second)
0.02.666.138 I llama_perf_context_print:        load time =     442.75 ms
0.02.666.139 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.666.140 I llama_perf_context_print:        eval time =    2203.88 ms /    31 runs   (   71.09 ms per token,    14.07 tokens per second)
0.02.666.141 I llama_perf_context_print:       total time =    2222.61 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.613 I build: 4244 (328ded35) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.834 I main: llama backend init
0.00.000.842 I main: load the model and apply lora adapter, if any
0.00.021.043 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.053 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.061 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.070 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.072 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.075 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.076 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.077 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.077 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.078 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.079 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.085 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.087 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.088 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.089 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.090 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.076 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.104 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.993 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.999 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.000 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.002 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.004 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.005 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.008 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.009 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.011 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.012 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.013 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.018 I llama_model_loader: - type  f32:   37 tensors
0.00.132.019 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.045 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.251.628 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.253 I llm_load_vocab: special tokens cache size = 5
0.00.273.307 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.324 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.325 I llm_load_print_meta: arch             = gemma
0.00.273.326 I llm_load_print_meta: vocab type       = SPM
0.00.273.326 I llm_load_print_meta: n_vocab          = 256000
0.00.273.327 I llm_load_print_meta: n_merges         = 0
0.00.273.327 I llm_load_print_meta: vocab_only       = 0
0.00.273.328 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.328 I llm_load_print_meta: n_embd           = 2048
0.00.273.328 I llm_load_print_meta: n_layer          = 18
0.00.273.340 I llm_load_print_meta: n_head           = 8
0.00.273.341 I llm_load_print_meta: n_head_kv        = 1
0.00.273.341 I llm_load_print_meta: n_rot            = 256
0.00.273.341 I llm_load_print_meta: n_swa            = 0
0.00.273.341 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.342 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.342 I llm_load_print_meta: n_gqa            = 8
0.00.273.343 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.344 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.345 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.346 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.347 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.348 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.349 I llm_load_print_meta: n_ff             = 16384
0.00.273.349 I llm_load_print_meta: n_expert         = 0
0.00.273.349 I llm_load_print_meta: n_expert_used    = 0
0.00.273.350 I llm_load_print_meta: causal attn      = 1
0.00.273.350 I llm_load_print_meta: pooling type     = 0
0.00.273.350 I llm_load_print_meta: rope type        = 2
0.00.273.350 I llm_load_print_meta: rope scaling     = linear
0.00.273.352 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.352 I llm_load_print_meta: freq_scale_train = 1
0.00.273.352 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.353 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.354 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.354 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.354 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.354 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.355 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.355 I llm_load_print_meta: model type       = 2B
0.00.273.356 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.357 I llm_load_print_meta: model params     = 2.51 B
0.00.273.358 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.358 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.358 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.358 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.359 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.359 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.359 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.360 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.360 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.361 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.361 I llm_load_print_meta: max token length = 93
0.00.346.016 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.346.024 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.351.126 I llama_new_context_with_model: n_seq_max     = 1
0.00.351.134 I llama_new_context_with_model: n_ctx         = 4096
0.00.351.134 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.351.134 I llama_new_context_with_model: n_batch       = 2048
0.00.351.135 I llama_new_context_with_model: n_ubatch      = 512
0.00.351.136 I llama_new_context_with_model: flash_attn    = 0
0.00.351.138 I llama_new_context_with_model: freq_base     = 10000.0
0.00.351.139 I llama_new_context_with_model: freq_scale    = 1
0.00.351.140 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.479 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.495 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.585 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.855 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.862 I llama_new_context_with_model: graph nodes  = 601
0.00.366.863 I llama_new_context_with_model: graph splits = 1
0.00.366.865 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.571 I main: llama threadpool init, n_threads = 4
0.00.455.588 I 
0.00.455.669 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.455.673 I 
0.00.455.725 I sampler seed: 1743354672
0.00.455.735 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.455.738 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.455.739 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.455.740 I 
 increasities by saying that the sentence is nonsensical and illogical. [end of text]


0.01.521.766 I llama_perf_sampler_print:    sampling time =       2.13 ms /    15 runs   (    0.14 ms per token,  7029.05 tokens per second)
0.01.521.769 I llama_perf_context_print:        load time =     454.71 ms
0.01.521.770 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.521.772 I llama_perf_context_print:        eval time =    1057.29 ms /    14 runs   (   75.52 ms per token,    13.24 tokens per second)
0.01.521.774 I llama_perf_context_print:       total time =    1066.20 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.709s
user	0m32.025s
sys	0m9.380s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4244 (328ded35)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40202.71 ms
main:    total time = 40202.71 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.531 I build: 4244 (328ded35) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.730 I main: load the model and apply lora adapter, if any
0.00.021.222 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.231 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.239 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.244 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.248 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.249 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.249 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.250 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.251 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.251 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.255 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.255 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.256 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.256 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.257 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.542 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.169 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.990 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.997 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.998 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.999 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.001 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.001 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.005 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.006 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.007 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.008 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.009 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.013 I llama_model_loader: - type  f32:   37 tensors
0.00.131.015 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.016 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.505 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.293 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.023 I llm_load_vocab: special tokens cache size = 5
0.00.274.160 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.181 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.182 I llm_load_print_meta: arch             = gemma
0.00.274.182 I llm_load_print_meta: vocab type       = SPM
0.00.274.183 I llm_load_print_meta: n_vocab          = 256000
0.00.274.184 I llm_load_print_meta: n_merges         = 0
0.00.274.184 I llm_load_print_meta: vocab_only       = 0
0.00.274.184 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.185 I llm_load_print_meta: n_embd           = 2048
0.00.274.185 I llm_load_print_meta: n_layer          = 18
0.00.274.198 I llm_load_print_meta: n_head           = 8
0.00.274.199 I llm_load_print_meta: n_head_kv        = 1
0.00.274.199 I llm_load_print_meta: n_rot            = 256
0.00.274.199 I llm_load_print_meta: n_swa            = 0
0.00.274.200 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.200 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.201 I llm_load_print_meta: n_gqa            = 8
0.00.274.202 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.203 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.204 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.205 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.206 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.206 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.206 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.207 I llm_load_print_meta: n_ff             = 16384
0.00.274.207 I llm_load_print_meta: n_expert         = 0
0.00.274.208 I llm_load_print_meta: n_expert_used    = 0
0.00.274.208 I llm_load_print_meta: causal attn      = 1
0.00.274.208 I llm_load_print_meta: pooling type     = 0
0.00.274.208 I llm_load_print_meta: rope type        = 2
0.00.274.209 I llm_load_print_meta: rope scaling     = linear
0.00.274.210 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.211 I llm_load_print_meta: freq_scale_train = 1
0.00.274.211 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.212 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.212 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.212 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.212 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.213 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.213 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.214 I llm_load_print_meta: model type       = 2B
0.00.274.214 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.215 I llm_load_print_meta: model params     = 2.51 B
0.00.274.215 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.216 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.216 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.216 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.217 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.217 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.218 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.218 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.218 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.219 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.219 I llm_load_print_meta: max token length = 93
0.00.334.249 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.334.256 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.334.257 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.334.257 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.334.258 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.334.259 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.339.456 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.461 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.461 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.462 I llama_new_context_with_model: n_batch       = 2048
0.00.339.462 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.463 I llama_new_context_with_model: flash_attn    = 0
0.00.339.465 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.465 I llama_new_context_with_model: freq_scale    = 1
0.00.339.469 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.660 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.672 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.757 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.969 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.975 I llama_new_context_with_model: graph nodes  = 601
0.00.354.976 I llama_new_context_with_model: graph splits = 1
0.00.354.977 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.186 I main: llama threadpool init, n_threads = 4
0.00.429.203 I 
0.00.429.276 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.429.279 I 
0.00.429.324 I sampler seed: 2509530438
0.00.429.336 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.343 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.347 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.347 I 
 squaRED by JASON HANSON.

Jason Hanson's Squashed is a hilarious and heartwarming story about a small-town preacher's unexpected journey to

0.02.018.527 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6730.57 tokens per second)
0.02.018.529 I llama_perf_context_print:        load time =     428.44 ms
0.02.018.531 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.018.532 I llama_perf_context_print:        eval time =    1570.88 ms /    32 runs   (   49.09 ms per token,    20.37 tokens per second)
0.02.018.533 I llama_perf_context_print:       total time =    1589.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4244 (328ded35)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40175.27 ms
main:    total time = 40175.27 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.569 I build: 4244 (328ded35) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.777 I main: load the model and apply lora adapter, if any
0.00.021.388 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.403 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.410 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.411 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.414 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.415 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.415 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.416 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.417 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.417 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.421 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.421 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.422 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.423 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.423 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.054 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.431 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.250 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.255 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.256 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.256 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.257 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.258 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.259 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.261 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.262 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.265 I llama_model_loader: - type  f32:   37 tensors
0.00.131.266 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.267 I llama_model_loader: - type q6_K:   19 tensors
0.00.203.304 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.129 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.736 I llm_load_vocab: special tokens cache size = 5
0.00.269.602 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.618 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.618 I llm_load_print_meta: arch             = gemma
0.00.269.619 I llm_load_print_meta: vocab type       = SPM
0.00.269.619 I llm_load_print_meta: n_vocab          = 256000
0.00.269.620 I llm_load_print_meta: n_merges         = 0
0.00.269.620 I llm_load_print_meta: vocab_only       = 0
0.00.269.621 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.621 I llm_load_print_meta: n_embd           = 2048
0.00.269.621 I llm_load_print_meta: n_layer          = 18
0.00.269.631 I llm_load_print_meta: n_head           = 8
0.00.269.632 I llm_load_print_meta: n_head_kv        = 1
0.00.269.632 I llm_load_print_meta: n_rot            = 256
0.00.269.633 I llm_load_print_meta: n_swa            = 0
0.00.269.633 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.633 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.634 I llm_load_print_meta: n_gqa            = 8
0.00.269.635 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.636 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.637 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.638 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.638 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.639 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.639 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.640 I llm_load_print_meta: n_ff             = 16384
0.00.269.640 I llm_load_print_meta: n_expert         = 0
0.00.269.641 I llm_load_print_meta: n_expert_used    = 0
0.00.269.641 I llm_load_print_meta: causal attn      = 1
0.00.269.641 I llm_load_print_meta: pooling type     = 0
0.00.269.641 I llm_load_print_meta: rope type        = 2
0.00.269.642 I llm_load_print_meta: rope scaling     = linear
0.00.269.644 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.644 I llm_load_print_meta: freq_scale_train = 1
0.00.269.644 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.645 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.645 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.645 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.645 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.646 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.646 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.646 I llm_load_print_meta: model type       = 2B
0.00.269.647 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.648 I llm_load_print_meta: model params     = 2.51 B
0.00.269.648 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.649 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.649 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.649 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.650 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.650 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.650 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.650 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.651 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.652 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.652 I llm_load_print_meta: max token length = 93
0.00.324.731 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.329.883 I llama_new_context_with_model: n_seq_max     = 1
0.00.329.891 I llama_new_context_with_model: n_ctx         = 4096
0.00.329.891 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.329.892 I llama_new_context_with_model: n_batch       = 2048
0.00.329.892 I llama_new_context_with_model: n_ubatch      = 512
0.00.329.893 I llama_new_context_with_model: flash_attn    = 0
0.00.329.896 I llama_new_context_with_model: freq_base     = 10000.0
0.00.329.897 I llama_new_context_with_model: freq_scale    = 1
0.00.329.898 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.345.360 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.345.377 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.345.474 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.346.773 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.346.780 I llama_new_context_with_model: graph nodes  = 601
0.00.346.781 I llama_new_context_with_model: graph splits = 1
0.00.346.782 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.110 I main: llama threadpool init, n_threads = 4
0.00.421.126 I 
0.00.421.198 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.421.202 I 
0.00.421.246 I sampler seed: 1747441228
0.00.421.257 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.269 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.272 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.272 I 
 seconally with your eyes closed.

I am unable to complete this task as it requires physical interaction. [end of text]


0.01.494.802 I llama_perf_sampler_print:    sampling time =       3.52 ms /    23 runs   (    0.15 ms per token,  6534.09 tokens per second)
0.01.494.804 I llama_perf_context_print:        load time =     420.31 ms
0.01.494.805 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.494.807 I llama_perf_context_print:        eval time =    1060.18 ms /    22 runs   (   48.19 ms per token,    20.75 tokens per second)
0.01.494.807 I llama_perf_context_print:       total time =    1073.70 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.647s
user	10m22.349s
sys	0m6.778s
