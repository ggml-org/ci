+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4356 (d4b12591) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.374 I main: llama backend init
0.00.000.381 I main: load the model and apply lora adapter, if any
0.00.020.708 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.720 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.732 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.738 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.742 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.746 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.748 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.748 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.749 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.749 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.750 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.754 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.755 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.755 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.756 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.757 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.881 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.897 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.916 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.924 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.924 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.925 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.926 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.928 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.929 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.932 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.934 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.935 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.936 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.937 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.941 I llama_model_loader: - type  f32:   37 tensors
0.00.131.943 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.894 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.157 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.773 I llm_load_vocab: special tokens cache size = 5
0.00.288.169 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.288.189 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.288.189 I llm_load_print_meta: arch             = gemma
0.00.288.190 I llm_load_print_meta: vocab type       = SPM
0.00.288.191 I llm_load_print_meta: n_vocab          = 256000
0.00.288.191 I llm_load_print_meta: n_merges         = 0
0.00.288.192 I llm_load_print_meta: vocab_only       = 0
0.00.288.192 I llm_load_print_meta: n_ctx_train      = 8192
0.00.288.192 I llm_load_print_meta: n_embd           = 2048
0.00.288.193 I llm_load_print_meta: n_layer          = 18
0.00.288.206 I llm_load_print_meta: n_head           = 8
0.00.288.207 I llm_load_print_meta: n_head_kv        = 1
0.00.288.207 I llm_load_print_meta: n_rot            = 256
0.00.288.208 I llm_load_print_meta: n_swa            = 0
0.00.288.208 I llm_load_print_meta: n_embd_head_k    = 256
0.00.288.208 I llm_load_print_meta: n_embd_head_v    = 256
0.00.288.209 I llm_load_print_meta: n_gqa            = 8
0.00.288.210 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.288.211 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.288.211 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.288.213 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.288.213 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.288.213 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.288.214 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.288.215 I llm_load_print_meta: n_ff             = 16384
0.00.288.215 I llm_load_print_meta: n_expert         = 0
0.00.288.215 I llm_load_print_meta: n_expert_used    = 0
0.00.288.215 I llm_load_print_meta: causal attn      = 1
0.00.288.216 I llm_load_print_meta: pooling type     = 0
0.00.288.216 I llm_load_print_meta: rope type        = 2
0.00.288.216 I llm_load_print_meta: rope scaling     = linear
0.00.288.218 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.219 I llm_load_print_meta: freq_scale_train = 1
0.00.288.219 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.219 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.219 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.220 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.220 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.221 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.221 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.222 I llm_load_print_meta: model type       = 2B
0.00.288.223 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.223 I llm_load_print_meta: model params     = 2.51 B
0.00.288.224 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.225 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.225 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.225 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.225 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.226 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.226 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.226 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.227 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.227 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.228 I llm_load_print_meta: max token length = 93
0.00.388.163 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.388.171 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.388.172 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.388.173 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.388.173 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.388.174 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.393.287 I llama_new_context_with_model: n_seq_max     = 1
0.00.393.293 I llama_new_context_with_model: n_ctx         = 4096
0.00.393.294 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.393.294 I llama_new_context_with_model: n_batch       = 2048
0.00.393.294 I llama_new_context_with_model: n_ubatch      = 512
0.00.393.295 I llama_new_context_with_model: flash_attn    = 0
0.00.393.297 I llama_new_context_with_model: freq_base     = 10000.0
0.00.393.298 I llama_new_context_with_model: freq_scale    = 1
0.00.393.299 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.407.679 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.407.694 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.407.783 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.409.108 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.409.115 I llama_new_context_with_model: graph nodes  = 601
0.00.409.116 I llama_new_context_with_model: graph splits = 1
0.00.409.118 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.409.119 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.501.622 I main: llama threadpool init, n_threads = 4
0.00.501.639 I 
0.00.501.717 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.501.723 I 
0.00.501.769 I sampler seed: 1949046766
0.00.501.781 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.501.783 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.501.784 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.501.784 I 
 increasities

I am unable to answer the question as it contains inappropriate content. My purpose is to assist with tasks and questions that adhere to ethical and legal guidelines

0.02.790.071 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6899.44 tokens per second)
0.02.790.073 I llama_perf_context_print:        load time =     501.23 ms
0.02.790.074 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.790.076 I llama_perf_context_print:        eval time =    2269.37 ms /    32 runs   (   70.92 ms per token,    14.10 tokens per second)
0.02.790.077 I llama_perf_context_print:       total time =    2288.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.536 I build: 4356 (d4b12591) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.021.220 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.237 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.244 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.246 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.250 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.251 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.251 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.253 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.254 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.258 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.259 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.260 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.261 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.262 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.022 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.068 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.035 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.042 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.043 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.043 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.044 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.045 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.046 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.048 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.049 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.050 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.051 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.051 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.055 I llama_model_loader: - type  f32:   37 tensors
0.00.132.056 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.722 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.263 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.879 I llm_load_vocab: special tokens cache size = 5
0.00.276.249 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.267 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.268 I llm_load_print_meta: arch             = gemma
0.00.276.268 I llm_load_print_meta: vocab type       = SPM
0.00.276.269 I llm_load_print_meta: n_vocab          = 256000
0.00.276.269 I llm_load_print_meta: n_merges         = 0
0.00.276.270 I llm_load_print_meta: vocab_only       = 0
0.00.276.270 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.271 I llm_load_print_meta: n_embd           = 2048
0.00.276.271 I llm_load_print_meta: n_layer          = 18
0.00.276.284 I llm_load_print_meta: n_head           = 8
0.00.276.285 I llm_load_print_meta: n_head_kv        = 1
0.00.276.285 I llm_load_print_meta: n_rot            = 256
0.00.276.285 I llm_load_print_meta: n_swa            = 0
0.00.276.285 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.286 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.287 I llm_load_print_meta: n_gqa            = 8
0.00.276.288 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.289 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.289 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.291 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.291 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.291 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.292 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.293 I llm_load_print_meta: n_ff             = 16384
0.00.276.293 I llm_load_print_meta: n_expert         = 0
0.00.276.293 I llm_load_print_meta: n_expert_used    = 0
0.00.276.294 I llm_load_print_meta: causal attn      = 1
0.00.276.294 I llm_load_print_meta: pooling type     = 0
0.00.276.294 I llm_load_print_meta: rope type        = 2
0.00.276.295 I llm_load_print_meta: rope scaling     = linear
0.00.276.296 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.296 I llm_load_print_meta: freq_scale_train = 1
0.00.276.297 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.297 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.297 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.297 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.298 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.298 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.298 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.299 I llm_load_print_meta: model type       = 2B
0.00.276.299 I llm_load_print_meta: model ftype      = Q8_0
0.00.276.300 I llm_load_print_meta: model params     = 2.51 B
0.00.276.301 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.276.302 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.302 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.302 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.303 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.303 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.303 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.304 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.304 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.305 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.305 I llm_load_print_meta: max token length = 93
0.00.373.669 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.378.936 I llama_new_context_with_model: n_seq_max     = 1
0.00.378.943 I llama_new_context_with_model: n_ctx         = 4096
0.00.378.943 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.378.944 I llama_new_context_with_model: n_batch       = 2048
0.00.378.944 I llama_new_context_with_model: n_ubatch      = 512
0.00.378.946 I llama_new_context_with_model: flash_attn    = 0
0.00.378.948 I llama_new_context_with_model: freq_base     = 10000.0
0.00.378.949 I llama_new_context_with_model: freq_scale    = 1
0.00.378.950 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.393.561 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.393.577 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.393.664 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.394.944 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.394.952 I llama_new_context_with_model: graph nodes  = 601
0.00.394.952 I llama_new_context_with_model: graph splits = 1
0.00.394.955 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.394.955 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.477.595 I main: llama threadpool init, n_threads = 4
0.00.477.612 I 
0.00.477.695 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.477.700 I 
0.00.477.749 I sampler seed: 24198091
0.00.477.765 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.477.785 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.477.789 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.477.790 I 
 increably. [end of text]


0.00.760.103 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8196.72 tokens per second)
0.00.760.106 I llama_perf_context_print:        load time =     476.80 ms
0.00.760.107 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.760.108 I llama_perf_context_print:        eval time =     278.95 ms /     4 runs   (   69.74 ms per token,    14.34 tokens per second)
0.00.760.109 I llama_perf_context_print:       total time =     282.52 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.562 I build: 4356 (d4b12591) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.764 I main: load the model and apply lora adapter, if any
0.00.021.670 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.681 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.692 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.702 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.705 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.709 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.710 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.711 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.712 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.712 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.713 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.719 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.720 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.720 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.721 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.300 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.140 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.126 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.133 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.134 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.135 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.135 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.136 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.137 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.139 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.140 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.141 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.142 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.145 I llama_model_loader: - type  f32:   37 tensors
0.00.132.146 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.513 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.429 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.037 I llm_load_vocab: special tokens cache size = 5
0.00.272.423 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.439 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.440 I llm_load_print_meta: arch             = gemma
0.00.272.440 I llm_load_print_meta: vocab type       = SPM
0.00.272.441 I llm_load_print_meta: n_vocab          = 256000
0.00.272.441 I llm_load_print_meta: n_merges         = 0
0.00.272.442 I llm_load_print_meta: vocab_only       = 0
0.00.272.442 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.442 I llm_load_print_meta: n_embd           = 2048
0.00.272.443 I llm_load_print_meta: n_layer          = 18
0.00.272.455 I llm_load_print_meta: n_head           = 8
0.00.272.456 I llm_load_print_meta: n_head_kv        = 1
0.00.272.456 I llm_load_print_meta: n_rot            = 256
0.00.272.456 I llm_load_print_meta: n_swa            = 0
0.00.272.457 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.457 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.458 I llm_load_print_meta: n_gqa            = 8
0.00.272.459 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.460 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.460 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.461 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.462 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.462 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.463 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.463 I llm_load_print_meta: n_ff             = 16384
0.00.272.464 I llm_load_print_meta: n_expert         = 0
0.00.272.464 I llm_load_print_meta: n_expert_used    = 0
0.00.272.464 I llm_load_print_meta: causal attn      = 1
0.00.272.464 I llm_load_print_meta: pooling type     = 0
0.00.272.465 I llm_load_print_meta: rope type        = 2
0.00.272.465 I llm_load_print_meta: rope scaling     = linear
0.00.272.466 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.467 I llm_load_print_meta: freq_scale_train = 1
0.00.272.467 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.467 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.467 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.468 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.468 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.469 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.469 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.469 I llm_load_print_meta: model type       = 2B
0.00.272.470 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.471 I llm_load_print_meta: model params     = 2.51 B
0.00.272.472 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.472 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.472 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.473 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.473 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.473 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.473 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.474 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.474 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.475 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.475 I llm_load_print_meta: max token length = 93
0.00.349.545 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.551 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.552 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.553 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.553 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.554 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.354.763 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.770 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.770 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.771 I llama_new_context_with_model: n_batch       = 2048
0.00.354.771 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.772 I llama_new_context_with_model: flash_attn    = 0
0.00.354.774 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.775 I llama_new_context_with_model: freq_scale    = 1
0.00.354.776 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.306 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.321 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.413 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.662 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.669 I llama_new_context_with_model: graph nodes  = 601
0.00.370.669 I llama_new_context_with_model: graph splits = 1
0.00.370.672 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.370.672 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.213 I main: llama threadpool init, n_threads = 4
0.00.459.228 I 
0.00.459.307 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.310 I 
0.00.459.352 I sampler seed: 3081766829
0.00.459.362 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.364 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.365 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.365 I 
 increasels and the surrounding forest, a dark and ominous place. [end of text]


0.01.485.883 I llama_perf_sampler_print:    sampling time =       2.50 ms /    15 runs   (    0.17 ms per token,  6007.21 tokens per second)
0.01.485.886 I llama_perf_context_print:        load time =     458.43 ms
0.01.485.887 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.485.888 I llama_perf_context_print:        eval time =    1017.45 ms /    14 runs   (   72.67 ms per token,    13.76 tokens per second)
0.01.485.889 I llama_perf_context_print:       total time =    1026.68 ms /    15 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.165 I build: 4356 (d4b12591) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.370 I main: llama backend init
0.00.000.376 I main: load the model and apply lora adapter, if any
0.00.020.490 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.020.500 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.507 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.516 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.520 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.524 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.525 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.525 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.526 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.526 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.527 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.531 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.531 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.532 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.532 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.533 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.922 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.292 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.259 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.267 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.268 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.269 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.270 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.271 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.272 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.276 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.277 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.278 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.279 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.280 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.284 I llama_model_loader: - type  f32:   37 tensors
0.00.131.285 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.615 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.279 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.843 I llm_load_vocab: special tokens cache size = 5
0.00.271.869 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.888 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.888 I llm_load_print_meta: arch             = gemma
0.00.271.889 I llm_load_print_meta: vocab type       = SPM
0.00.271.889 I llm_load_print_meta: n_vocab          = 256000
0.00.271.890 I llm_load_print_meta: n_merges         = 0
0.00.271.890 I llm_load_print_meta: vocab_only       = 0
0.00.271.890 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.891 I llm_load_print_meta: n_embd           = 2048
0.00.271.891 I llm_load_print_meta: n_layer          = 18
0.00.271.901 I llm_load_print_meta: n_head           = 8
0.00.271.903 I llm_load_print_meta: n_head_kv        = 1
0.00.271.903 I llm_load_print_meta: n_rot            = 256
0.00.271.903 I llm_load_print_meta: n_swa            = 0
0.00.271.904 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.904 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.905 I llm_load_print_meta: n_gqa            = 8
0.00.271.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.907 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.908 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.909 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.910 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.912 I llm_load_print_meta: n_ff             = 16384
0.00.271.912 I llm_load_print_meta: n_expert         = 0
0.00.271.912 I llm_load_print_meta: n_expert_used    = 0
0.00.271.913 I llm_load_print_meta: causal attn      = 1
0.00.271.913 I llm_load_print_meta: pooling type     = 0
0.00.271.913 I llm_load_print_meta: rope type        = 2
0.00.271.914 I llm_load_print_meta: rope scaling     = linear
0.00.271.915 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.915 I llm_load_print_meta: freq_scale_train = 1
0.00.271.916 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.916 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.916 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.917 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.917 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.917 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.918 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.918 I llm_load_print_meta: model type       = 2B
0.00.271.919 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.920 I llm_load_print_meta: model params     = 2.51 B
0.00.271.921 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.921 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.921 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.921 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.922 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.922 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.923 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.923 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.924 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.924 I llm_load_print_meta: max token length = 93
0.00.342.850 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.342.858 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.347.957 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.963 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.963 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.964 I llama_new_context_with_model: n_batch       = 2048
0.00.347.964 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.964 I llama_new_context_with_model: flash_attn    = 0
0.00.347.967 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.968 I llama_new_context_with_model: freq_scale    = 1
0.00.347.969 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.362.970 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.362.985 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.084 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.371 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.378 I llama_new_context_with_model: graph nodes  = 601
0.00.364.378 I llama_new_context_with_model: graph splits = 1
0.00.364.380 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.364.380 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.744 I main: llama threadpool init, n_threads = 4
0.00.453.761 I 
0.00.453.835 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.453.838 I 
0.00.453.879 I sampler seed: 277572281
0.00.453.890 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.903 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.907 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.907 I 
 increably. The following individuals were involved in the conspiracy:

- Barack Obama
- Hillary Clinton
- George W. Bush
- Rudy Giuliani
-

0.02.906.685 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6346.15 tokens per second)
0.02.906.687 I llama_perf_context_print:        load time =     453.35 ms
0.02.906.688 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.906.690 I llama_perf_context_print:        eval time =    2433.38 ms /    32 runs   (   76.04 ms per token,    13.15 tokens per second)
0.02.906.690 I llama_perf_context_print:       total time =    2452.95 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.576s
user	0m27.151s
sys	0m9.555s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4356 (d4b12591)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40302.87 ms
main:    total time = 40302.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4356 (d4b12591) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.378 I main: llama backend init
0.00.000.385 I main: load the model and apply lora adapter, if any
0.00.021.541 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.554 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.563 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.569 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.570 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.575 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.576 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.577 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.578 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.579 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.580 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.585 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.586 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.586 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.587 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.587 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.774 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.574 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.749 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.755 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.755 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.756 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.756 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.757 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.758 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.761 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.761 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.762 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.763 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.764 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.768 I llama_model_loader: - type  f32:   37 tensors
0.00.132.769 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.770 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.890 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.568 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.177 I llm_load_vocab: special tokens cache size = 5
0.00.281.659 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.677 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.677 I llm_load_print_meta: arch             = gemma
0.00.281.678 I llm_load_print_meta: vocab type       = SPM
0.00.281.678 I llm_load_print_meta: n_vocab          = 256000
0.00.281.679 I llm_load_print_meta: n_merges         = 0
0.00.281.679 I llm_load_print_meta: vocab_only       = 0
0.00.281.679 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.680 I llm_load_print_meta: n_embd           = 2048
0.00.281.680 I llm_load_print_meta: n_layer          = 18
0.00.281.690 I llm_load_print_meta: n_head           = 8
0.00.281.691 I llm_load_print_meta: n_head_kv        = 1
0.00.281.691 I llm_load_print_meta: n_rot            = 256
0.00.281.692 I llm_load_print_meta: n_swa            = 0
0.00.281.692 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.692 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.693 I llm_load_print_meta: n_gqa            = 8
0.00.281.694 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.695 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.696 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.697 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.698 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.698 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.698 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.699 I llm_load_print_meta: n_ff             = 16384
0.00.281.699 I llm_load_print_meta: n_expert         = 0
0.00.281.700 I llm_load_print_meta: n_expert_used    = 0
0.00.281.700 I llm_load_print_meta: causal attn      = 1
0.00.281.700 I llm_load_print_meta: pooling type     = 0
0.00.281.700 I llm_load_print_meta: rope type        = 2
0.00.281.701 I llm_load_print_meta: rope scaling     = linear
0.00.281.702 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.703 I llm_load_print_meta: freq_scale_train = 1
0.00.281.703 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.704 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.704 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.704 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.704 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.705 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.705 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.705 I llm_load_print_meta: model type       = 2B
0.00.281.706 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.707 I llm_load_print_meta: model params     = 2.51 B
0.00.281.708 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.708 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.708 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.708 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.709 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.709 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.709 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.710 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.710 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.711 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.711 I llm_load_print_meta: max token length = 93
0.00.340.915 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.340.923 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.340.924 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.340.925 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.340.925 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.340.926 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.346.091 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.099 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.099 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.100 I llama_new_context_with_model: n_batch       = 2048
0.00.346.100 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.101 I llama_new_context_with_model: flash_attn    = 0
0.00.346.103 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.104 I llama_new_context_with_model: freq_scale    = 1
0.00.346.105 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.275 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.290 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.390 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.723 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.729 I llama_new_context_with_model: graph nodes  = 601
0.00.362.730 I llama_new_context_with_model: graph splits = 1
0.00.362.732 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.362.733 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.438.991 I main: llama threadpool init, n_threads = 4
0.00.439.007 I 
0.00.439.083 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.439.086 I 
0.00.439.133 I sampler seed: 1836372986
0.00.439.143 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.155 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.158 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.159 I 
 increasities, and the resulting changes in the dynamics of the relationship between the partners. [end of text]


0.01.361.947 I llama_perf_sampler_print:    sampling time =       2.75 ms /    19 runs   (    0.14 ms per token,  6896.55 tokens per second)
0.01.361.949 I llama_perf_context_print:        load time =     438.59 ms
0.01.361.951 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.361.953 I llama_perf_context_print:        eval time =     911.58 ms /    18 runs   (   50.64 ms per token,    19.75 tokens per second)
0.01.361.953 I llama_perf_context_print:       total time =     922.96 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4356 (d4b12591)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40265.66 ms
main:    total time = 40265.66 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.544 I build: 4356 (d4b12591) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.736 I main: llama backend init
0.00.000.743 I main: load the model and apply lora adapter, if any
0.00.021.517 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.533 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.540 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.541 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.546 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.546 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.547 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.548 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.548 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.549 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.554 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.555 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.555 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.556 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.561 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.302 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.411 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.419 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.427 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.427 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.428 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.429 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.429 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.430 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.432 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.433 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.437 I llama_model_loader: - type  f32:   37 tensors
0.00.132.438 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.438 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.438 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.856 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.524 I llm_load_vocab: special tokens cache size = 5
0.00.277.864 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.881 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.882 I llm_load_print_meta: arch             = gemma
0.00.277.883 I llm_load_print_meta: vocab type       = SPM
0.00.277.884 I llm_load_print_meta: n_vocab          = 256000
0.00.277.884 I llm_load_print_meta: n_merges         = 0
0.00.277.884 I llm_load_print_meta: vocab_only       = 0
0.00.277.885 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.885 I llm_load_print_meta: n_embd           = 2048
0.00.277.885 I llm_load_print_meta: n_layer          = 18
0.00.277.897 I llm_load_print_meta: n_head           = 8
0.00.277.898 I llm_load_print_meta: n_head_kv        = 1
0.00.277.898 I llm_load_print_meta: n_rot            = 256
0.00.277.899 I llm_load_print_meta: n_swa            = 0
0.00.277.899 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.899 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.900 I llm_load_print_meta: n_gqa            = 8
0.00.277.901 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.902 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.903 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.904 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.905 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.905 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.905 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.906 I llm_load_print_meta: n_ff             = 16384
0.00.277.906 I llm_load_print_meta: n_expert         = 0
0.00.277.907 I llm_load_print_meta: n_expert_used    = 0
0.00.277.907 I llm_load_print_meta: causal attn      = 1
0.00.277.908 I llm_load_print_meta: pooling type     = 0
0.00.277.908 I llm_load_print_meta: rope type        = 2
0.00.277.908 I llm_load_print_meta: rope scaling     = linear
0.00.277.910 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.910 I llm_load_print_meta: freq_scale_train = 1
0.00.277.910 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.911 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.911 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.911 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.912 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.912 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.912 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.913 I llm_load_print_meta: model type       = 2B
0.00.277.913 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.914 I llm_load_print_meta: model params     = 2.51 B
0.00.277.915 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.915 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.915 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.915 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.916 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.916 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.916 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.916 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.917 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.917 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.917 I llm_load_print_meta: max token length = 93
0.00.335.846 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.341.227 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.235 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.235 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.236 I llama_new_context_with_model: n_batch       = 2048
0.00.341.236 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.237 I llama_new_context_with_model: flash_attn    = 0
0.00.341.240 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.241 I llama_new_context_with_model: freq_scale    = 1
0.00.341.241 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.805 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.820 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.918 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.189 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.195 I llama_new_context_with_model: graph nodes  = 601
0.00.358.196 I llama_new_context_with_model: graph splits = 1
0.00.358.198 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.358.199 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.098 I main: llama threadpool init, n_threads = 4
0.00.433.115 I 
0.00.433.190 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.433.193 I 
0.00.433.239 I sampler seed: 3148971902
0.00.433.249 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.252 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.253 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.253 I 
 increasities and a penchant for mischief.

**Personality:**

- Energetic and enthusiastic
- Quick-witted and witty
- Intelligent and curious


0.02.058.341 I llama_perf_sampler_print:    sampling time =       5.38 ms /    33 runs   (    0.16 ms per token,  6133.83 tokens per second)
0.02.058.343 I llama_perf_context_print:        load time =     432.34 ms
0.02.058.345 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.058.346 I llama_perf_context_print:        eval time =    1605.65 ms /    32 runs   (   50.18 ms per token,    19.93 tokens per second)
0.02.058.347 I llama_perf_context_print:       total time =    1625.25 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.845s
user	10m22.268s
sys	0m7.063s
