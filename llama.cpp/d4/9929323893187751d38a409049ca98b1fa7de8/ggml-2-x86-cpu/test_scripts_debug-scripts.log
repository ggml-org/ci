+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.694 I build: 3930 (d4992932) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.899 I main: llama backend init
0.00.002.831 I main: load the model and apply lora adapter, if any
0.00.025.506 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.718 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.817 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.829 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.831 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.835 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.839 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.840 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.842 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.844 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.845 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.862 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.867 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.869 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.870 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.872 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.377 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.508 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.267 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.277 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.278 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.280 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.280 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.282 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.283 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.286 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.287 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.288 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.289 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.273.290 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.299 I llama_model_loader: - type  f32:   37 tensors
0.00.273.303 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.093 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.538.903 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.539.924 I llm_load_vocab: special tokens cache size = 5
0.00.638.733 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.638.809 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.638.810 I llm_load_print_meta: arch             = gemma
0.00.638.811 I llm_load_print_meta: vocab type       = SPM
0.00.638.812 I llm_load_print_meta: n_vocab          = 256000
0.00.638.815 I llm_load_print_meta: n_merges         = 0
0.00.638.815 I llm_load_print_meta: vocab_only       = 0
0.00.638.816 I llm_load_print_meta: n_ctx_train      = 8192
0.00.638.816 I llm_load_print_meta: n_embd           = 2048
0.00.638.816 I llm_load_print_meta: n_layer          = 18
0.00.638.880 I llm_load_print_meta: n_head           = 8
0.00.638.887 I llm_load_print_meta: n_head_kv        = 1
0.00.638.888 I llm_load_print_meta: n_rot            = 256
0.00.638.888 I llm_load_print_meta: n_swa            = 0
0.00.638.888 I llm_load_print_meta: n_embd_head_k    = 256
0.00.638.889 I llm_load_print_meta: n_embd_head_v    = 256
0.00.638.894 I llm_load_print_meta: n_gqa            = 8
0.00.638.898 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.638.903 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.638.904 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.638.923 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.638.924 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.638.924 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.638.925 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.638.929 I llm_load_print_meta: n_ff             = 16384
0.00.638.930 I llm_load_print_meta: n_expert         = 0
0.00.638.931 I llm_load_print_meta: n_expert_used    = 0
0.00.638.931 I llm_load_print_meta: causal attn      = 1
0.00.638.931 I llm_load_print_meta: pooling type     = 0
0.00.638.932 I llm_load_print_meta: rope type        = 2
0.00.638.932 I llm_load_print_meta: rope scaling     = linear
0.00.638.934 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.638.934 I llm_load_print_meta: freq_scale_train = 1
0.00.638.935 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.638.935 I llm_load_print_meta: rope_finetuned   = unknown
0.00.638.935 I llm_load_print_meta: ssm_d_conv       = 0
0.00.638.936 I llm_load_print_meta: ssm_d_inner      = 0
0.00.638.936 I llm_load_print_meta: ssm_d_state      = 0
0.00.638.941 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.638.946 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.638.947 I llm_load_print_meta: model type       = 2B
0.00.638.949 I llm_load_print_meta: model ftype      = Q8_0
0.00.638.949 I llm_load_print_meta: model params     = 2.51 B
0.00.638.950 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.638.951 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.638.952 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.638.952 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.638.953 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.638.954 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.638.954 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.638.955 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.638.977 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.638.978 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.638.979 I llm_load_print_meta: max token length = 93
0.00.639.157 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.740.603 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.740.611 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.740.612 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.740.612 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.740.613 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.740.614 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.746.545 I llama_new_context_with_model: n_ctx      = 8192
0.00.746.552 I llama_new_context_with_model: n_batch    = 2048
0.00.746.552 I llama_new_context_with_model: n_ubatch   = 512
0.00.746.553 I llama_new_context_with_model: flash_attn = 0
0.00.746.556 I llama_new_context_with_model: freq_base  = 10000.0
0.00.746.556 I llama_new_context_with_model: freq_scale = 1
0.00.777.252 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.777.298 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.777.411 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.778.833 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.778.842 I llama_new_context_with_model: graph nodes  = 601
0.00.778.843 I llama_new_context_with_model: graph splits = 1
0.00.778.861 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.392.211 I main: llama threadpool init, n_threads = 4
0.01.392.224 I 
0.01.392.351 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.392.359 I 
0.01.392.577 I sampler seed: 571952542
0.01.392.589 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.392.595 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.392.596 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.392.604 I 
 increably.

I am unable to access the internet or other online resources to retrieve information, so I am turning to my knowledge and experience to navigate this situation

0.14.960.669 I llama_perf_sampler_print:    sampling time =      48.02 ms /    33 runs   (    1.46 ms per token,   687.26 tokens per second)
0.14.960.672 I llama_perf_context_print:        load time =    1389.28 ms
0.14.960.674 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.960.675 I llama_perf_context_print:        eval time =   13484.65 ms /    32 runs   (  421.40 ms per token,     2.37 tokens per second)
0.14.960.676 I llama_perf_context_print:       total time =   13568.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 3930 (d4992932) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.837 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
0.00.025.125 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.238 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.254 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.255 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.260 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.264 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.265 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.266 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.267 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.268 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.276 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.277 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.278 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.280 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.967 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.464 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.092 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.102 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.104 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.105 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.106 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.108 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.109 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.127 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.131 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.132 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.133 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.272.135 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.143 I llama_model_loader: - type  f32:   37 tensors
0.00.272.147 I llama_model_loader: - type q8_0:  127 tensors
0.00.479.801 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.544.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.545.624 I llm_load_vocab: special tokens cache size = 5
0.00.648.152 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.648.224 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.648.225 I llm_load_print_meta: arch             = gemma
0.00.648.226 I llm_load_print_meta: vocab type       = SPM
0.00.648.226 I llm_load_print_meta: n_vocab          = 256000
0.00.648.229 I llm_load_print_meta: n_merges         = 0
0.00.648.229 I llm_load_print_meta: vocab_only       = 0
0.00.648.230 I llm_load_print_meta: n_ctx_train      = 8192
0.00.648.230 I llm_load_print_meta: n_embd           = 2048
0.00.648.230 I llm_load_print_meta: n_layer          = 18
0.00.648.297 I llm_load_print_meta: n_head           = 8
0.00.648.304 I llm_load_print_meta: n_head_kv        = 1
0.00.648.304 I llm_load_print_meta: n_rot            = 256
0.00.648.305 I llm_load_print_meta: n_swa            = 0
0.00.648.305 I llm_load_print_meta: n_embd_head_k    = 256
0.00.648.305 I llm_load_print_meta: n_embd_head_v    = 256
0.00.648.310 I llm_load_print_meta: n_gqa            = 8
0.00.648.314 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.648.319 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.648.320 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.648.322 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.648.322 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.648.322 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.648.323 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.648.328 I llm_load_print_meta: n_ff             = 16384
0.00.648.328 I llm_load_print_meta: n_expert         = 0
0.00.648.329 I llm_load_print_meta: n_expert_used    = 0
0.00.648.329 I llm_load_print_meta: causal attn      = 1
0.00.648.329 I llm_load_print_meta: pooling type     = 0
0.00.648.330 I llm_load_print_meta: rope type        = 2
0.00.648.331 I llm_load_print_meta: rope scaling     = linear
0.00.648.334 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.648.335 I llm_load_print_meta: freq_scale_train = 1
0.00.648.335 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.648.335 I llm_load_print_meta: rope_finetuned   = unknown
0.00.648.336 I llm_load_print_meta: ssm_d_conv       = 0
0.00.648.337 I llm_load_print_meta: ssm_d_inner      = 0
0.00.648.337 I llm_load_print_meta: ssm_d_state      = 0
0.00.648.337 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.648.338 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.648.350 I llm_load_print_meta: model type       = 2B
0.00.648.352 I llm_load_print_meta: model ftype      = Q8_0
0.00.648.352 I llm_load_print_meta: model params     = 2.51 B
0.00.648.353 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.648.354 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.648.355 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.648.369 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.648.370 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.648.370 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.648.379 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.648.380 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.648.387 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.648.389 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.648.389 I llm_load_print_meta: max token length = 93
0.00.648.555 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.749.638 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.758.786 I llama_new_context_with_model: n_ctx      = 8192
0.00.758.795 I llama_new_context_with_model: n_batch    = 2048
0.00.758.795 I llama_new_context_with_model: n_ubatch   = 512
0.00.758.796 I llama_new_context_with_model: flash_attn = 0
0.00.758.799 I llama_new_context_with_model: freq_base  = 10000.0
0.00.758.800 I llama_new_context_with_model: freq_scale = 1
0.00.789.296 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.789.338 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.789.456 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.790.819 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.790.825 I llama_new_context_with_model: graph nodes  = 601
0.00.790.826 I llama_new_context_with_model: graph splits = 1
0.00.790.842 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.420.693 I main: llama threadpool init, n_threads = 4
0.01.420.706 I 
0.01.420.812 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.420.816 I 
0.01.420.983 I sampler seed: 1504809120
0.01.420.993 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.420.999 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.421.000 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.421.000 I 
 increasities. [end of text]


0.03.109.131 I llama_perf_sampler_print:    sampling time =       6.10 ms /     5 runs   (    1.22 ms per token,   820.08 tokens per second)
0.03.109.134 I llama_perf_context_print:        load time =    1417.82 ms
0.03.109.136 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.109.151 I llama_perf_context_print:        eval time =    1676.88 ms /     4 runs   (  419.22 ms per token,     2.39 tokens per second)
0.03.109.152 I llama_perf_context_print:       total time =    1688.45 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3930 (d4992932) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.789 I main: load the model and apply lora adapter, if any
0.00.024.835 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.050 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.156 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.170 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.172 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.178 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.185 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.186 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.187 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.188 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.189 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.197 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.198 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.211 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.212 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.214 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.159.367 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.263.427 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.284.151 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.284.165 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.284.166 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.284.167 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.284.168 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.284.170 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.284.171 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.284.174 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.284.175 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.284.190 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.284.192 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.284.194 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.284.204 I llama_model_loader: - type  f32:   37 tensors
0.00.284.219 I llama_model_loader: - type q8_0:  127 tensors
0.00.480.500 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.543.562 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.544.669 I llm_load_vocab: special tokens cache size = 5
0.00.639.875 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.639.949 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.639.950 I llm_load_print_meta: arch             = gemma
0.00.639.951 I llm_load_print_meta: vocab type       = SPM
0.00.639.952 I llm_load_print_meta: n_vocab          = 256000
0.00.639.954 I llm_load_print_meta: n_merges         = 0
0.00.639.955 I llm_load_print_meta: vocab_only       = 0
0.00.639.955 I llm_load_print_meta: n_ctx_train      = 8192
0.00.639.956 I llm_load_print_meta: n_embd           = 2048
0.00.639.956 I llm_load_print_meta: n_layer          = 18
0.00.640.018 I llm_load_print_meta: n_head           = 8
0.00.640.024 I llm_load_print_meta: n_head_kv        = 1
0.00.640.025 I llm_load_print_meta: n_rot            = 256
0.00.640.025 I llm_load_print_meta: n_swa            = 0
0.00.640.026 I llm_load_print_meta: n_embd_head_k    = 256
0.00.640.026 I llm_load_print_meta: n_embd_head_v    = 256
0.00.640.032 I llm_load_print_meta: n_gqa            = 8
0.00.640.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.640.042 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.640.043 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.640.044 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.640.045 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.640.045 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.640.046 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.640.050 I llm_load_print_meta: n_ff             = 16384
0.00.640.051 I llm_load_print_meta: n_expert         = 0
0.00.640.051 I llm_load_print_meta: n_expert_used    = 0
0.00.640.052 I llm_load_print_meta: causal attn      = 1
0.00.640.052 I llm_load_print_meta: pooling type     = 0
0.00.640.052 I llm_load_print_meta: rope type        = 2
0.00.640.053 I llm_load_print_meta: rope scaling     = linear
0.00.640.054 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.640.055 I llm_load_print_meta: freq_scale_train = 1
0.00.640.055 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.640.056 I llm_load_print_meta: rope_finetuned   = unknown
0.00.640.062 I llm_load_print_meta: ssm_d_conv       = 0
0.00.640.062 I llm_load_print_meta: ssm_d_inner      = 0
0.00.640.062 I llm_load_print_meta: ssm_d_state      = 0
0.00.640.063 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.640.063 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.640.064 I llm_load_print_meta: model type       = 2B
0.00.640.065 I llm_load_print_meta: model ftype      = Q8_0
0.00.640.065 I llm_load_print_meta: model params     = 2.51 B
0.00.640.066 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.640.066 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.640.067 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.640.068 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.640.068 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.640.077 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.640.080 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.640.080 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.640.098 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.640.100 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.640.100 I llm_load_print_meta: max token length = 93
0.00.640.274 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.718.832 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.718.840 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.718.841 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.718.842 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.718.842 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.718.843 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.724.890 I llama_new_context_with_model: n_ctx      = 8192
0.00.724.898 I llama_new_context_with_model: n_batch    = 2048
0.00.724.899 I llama_new_context_with_model: n_ubatch   = 512
0.00.724.899 I llama_new_context_with_model: flash_attn = 0
0.00.724.901 I llama_new_context_with_model: freq_base  = 10000.0
0.00.724.902 I llama_new_context_with_model: freq_scale = 1
0.00.754.944 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.754.987 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.755.102 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.756.496 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.756.504 I llama_new_context_with_model: graph nodes  = 601
0.00.756.505 I llama_new_context_with_model: graph splits = 1
0.00.756.523 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.370.441 I main: llama threadpool init, n_threads = 4
0.01.370.452 I 
0.01.370.589 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.370.593 I 
0.01.370.771 I sampler seed: 3933147879
0.01.370.782 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.370.789 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.370.790 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.370.790 I 
 increasively to the following:

A man is standing in a field. A bird flies over him. The bird lands on a tree nearby.

The man

0.15.032.175 I llama_perf_sampler_print:    sampling time =      47.72 ms /    33 runs   (    1.45 ms per token,   691.58 tokens per second)
0.15.032.178 I llama_perf_context_print:        load time =    1367.57 ms
0.15.032.180 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.032.192 I llama_perf_context_print:        eval time =   13580.88 ms /    32 runs   (  424.40 ms per token,     2.36 tokens per second)
0.15.032.194 I llama_perf_context_print:       total time =   13661.74 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.659 I build: 3930 (d4992932) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.883 I main: llama backend init
0.00.002.845 I main: load the model and apply lora adapter, if any
0.00.024.894 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.113 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.215 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.227 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.229 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.234 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.239 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.240 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.242 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.244 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.245 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.257 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.262 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.264 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.266 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.267 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.266 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.063 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.072 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.074 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.075 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.076 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.078 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.079 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.083 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.084 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.085 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.086 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.272.087 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.095 I llama_model_loader: - type  f32:   37 tensors
0.00.272.101 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.577 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.523.930 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.524.994 I llm_load_vocab: special tokens cache size = 5
0.00.620.242 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.315 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.316 I llm_load_print_meta: arch             = gemma
0.00.620.317 I llm_load_print_meta: vocab type       = SPM
0.00.620.318 I llm_load_print_meta: n_vocab          = 256000
0.00.620.320 I llm_load_print_meta: n_merges         = 0
0.00.620.321 I llm_load_print_meta: vocab_only       = 0
0.00.620.321 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.322 I llm_load_print_meta: n_embd           = 2048
0.00.620.322 I llm_load_print_meta: n_layer          = 18
0.00.620.387 I llm_load_print_meta: n_head           = 8
0.00.620.394 I llm_load_print_meta: n_head_kv        = 1
0.00.620.395 I llm_load_print_meta: n_rot            = 256
0.00.620.395 I llm_load_print_meta: n_swa            = 0
0.00.620.396 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.396 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.400 I llm_load_print_meta: n_gqa            = 8
0.00.620.405 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.410 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.411 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.414 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.415 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.416 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.416 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.421 I llm_load_print_meta: n_ff             = 16384
0.00.620.421 I llm_load_print_meta: n_expert         = 0
0.00.620.422 I llm_load_print_meta: n_expert_used    = 0
0.00.620.422 I llm_load_print_meta: causal attn      = 1
0.00.620.423 I llm_load_print_meta: pooling type     = 0
0.00.620.423 I llm_load_print_meta: rope type        = 2
0.00.620.423 I llm_load_print_meta: rope scaling     = linear
0.00.620.425 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.426 I llm_load_print_meta: freq_scale_train = 1
0.00.620.427 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.428 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.428 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.429 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.430 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.430 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.430 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.431 I llm_load_print_meta: model type       = 2B
0.00.620.432 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.433 I llm_load_print_meta: model params     = 2.51 B
0.00.620.435 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.460 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.462 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.462 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.463 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.464 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.464 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.464 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.470 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.471 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.472 I llm_load_print_meta: max token length = 93
0.00.620.653 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.691.708 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.691.720 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.697.446 I llama_new_context_with_model: n_ctx      = 8192
0.00.697.454 I llama_new_context_with_model: n_batch    = 2048
0.00.697.454 I llama_new_context_with_model: n_ubatch   = 512
0.00.697.455 I llama_new_context_with_model: flash_attn = 0
0.00.697.458 I llama_new_context_with_model: freq_base  = 10000.0
0.00.697.459 I llama_new_context_with_model: freq_scale = 1
0.00.726.897 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.726.942 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.727.053 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.728.448 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.728.455 I llama_new_context_with_model: graph nodes  = 601
0.00.728.456 I llama_new_context_with_model: graph splits = 1
0.00.728.475 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.339.807 I main: llama threadpool init, n_threads = 4
0.01.339.818 I 
0.01.339.948 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.339.953 I 
0.01.340.130 I sampler seed: 1765627708
0.01.340.140 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.148 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.340.149 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.158 I 
 increasels and dragons!

**Answer:**

A dragon and a troll are having a fight. The troll is using its strength to push the dragon back,

0.14.888.998 I llama_perf_sampler_print:    sampling time =      48.31 ms /    33 runs   (    1.46 ms per token,   683.05 tokens per second)
0.14.889.001 I llama_perf_context_print:        load time =    1336.87 ms
0.14.889.002 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.889.004 I llama_perf_context_print:        eval time =   13467.51 ms /    32 runs   (  420.86 ms per token,     2.38 tokens per second)
0.14.889.005 I llama_perf_context_print:       total time =   13549.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.792s
user	3m2.686s
sys	0m9.664s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3930 (d4992932)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199623.36 ms
main:    total time = 199623.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.686 I build: 3930 (d4992932) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.882 I main: llama backend init
0.00.002.826 I main: load the model and apply lora adapter, if any
0.00.024.866 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.067 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.157 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.168 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.169 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.174 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.178 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.179 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.180 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.181 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.181 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.187 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.188 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.190 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.191 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.192 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.877 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.725 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.418 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.440 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.441 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.442 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.443 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.445 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.446 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.450 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.451 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.452 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.453 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.455 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.462 I llama_model_loader: - type  f32:   37 tensors
0.00.271.467 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.469 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.765 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.210 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.293 I llm_load_vocab: special tokens cache size = 5
0.00.624.576 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.624.644 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.624.645 I llm_load_print_meta: arch             = gemma
0.00.624.646 I llm_load_print_meta: vocab type       = SPM
0.00.624.646 I llm_load_print_meta: n_vocab          = 256000
0.00.624.649 I llm_load_print_meta: n_merges         = 0
0.00.624.649 I llm_load_print_meta: vocab_only       = 0
0.00.624.650 I llm_load_print_meta: n_ctx_train      = 8192
0.00.624.650 I llm_load_print_meta: n_embd           = 2048
0.00.624.650 I llm_load_print_meta: n_layer          = 18
0.00.624.714 I llm_load_print_meta: n_head           = 8
0.00.624.721 I llm_load_print_meta: n_head_kv        = 1
0.00.624.721 I llm_load_print_meta: n_rot            = 256
0.00.624.722 I llm_load_print_meta: n_swa            = 0
0.00.624.722 I llm_load_print_meta: n_embd_head_k    = 256
0.00.624.722 I llm_load_print_meta: n_embd_head_v    = 256
0.00.624.727 I llm_load_print_meta: n_gqa            = 8
0.00.624.731 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.624.736 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.624.737 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.624.739 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.624.740 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.624.741 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.624.741 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.624.746 I llm_load_print_meta: n_ff             = 16384
0.00.624.747 I llm_load_print_meta: n_expert         = 0
0.00.624.748 I llm_load_print_meta: n_expert_used    = 0
0.00.624.748 I llm_load_print_meta: causal attn      = 1
0.00.624.764 I llm_load_print_meta: pooling type     = 0
0.00.624.765 I llm_load_print_meta: rope type        = 2
0.00.624.772 I llm_load_print_meta: rope scaling     = linear
0.00.624.774 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.624.774 I llm_load_print_meta: freq_scale_train = 1
0.00.624.775 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.624.775 I llm_load_print_meta: rope_finetuned   = unknown
0.00.624.775 I llm_load_print_meta: ssm_d_conv       = 0
0.00.624.776 I llm_load_print_meta: ssm_d_inner      = 0
0.00.624.776 I llm_load_print_meta: ssm_d_state      = 0
0.00.624.776 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.624.776 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.624.777 I llm_load_print_meta: model type       = 2B
0.00.624.778 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.624.779 I llm_load_print_meta: model params     = 2.51 B
0.00.624.780 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.624.780 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.624.781 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.624.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.624.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.624.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.624.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.624.785 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.624.791 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.624.792 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.624.793 I llm_load_print_meta: max token length = 93
0.00.624.961 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.683.482 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.683.490 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.683.491 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.683.491 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.683.492 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.683.493 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.689.171 I llama_new_context_with_model: n_ctx      = 8192
0.00.689.179 I llama_new_context_with_model: n_batch    = 2048
0.00.689.179 I llama_new_context_with_model: n_ubatch   = 512
0.00.689.180 I llama_new_context_with_model: flash_attn = 0
0.00.689.183 I llama_new_context_with_model: freq_base  = 10000.0
0.00.689.183 I llama_new_context_with_model: freq_scale = 1
0.00.718.764 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.718.811 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.718.924 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.720.344 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.351 I llama_new_context_with_model: graph nodes  = 601
0.00.720.351 I llama_new_context_with_model: graph splits = 1
0.00.720.366 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.297.442 I main: llama threadpool init, n_threads = 4
0.01.297.453 I 
0.01.297.558 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.297.562 I 
0.01.297.724 I sampler seed: 3589885162
0.01.297.734 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.297.740 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.297.741 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.297.741 I 
 increasities in the media?

**Answer:**

**Media coverage of narcissistic personality disorder (NPD) has been a growing concern due to its significant impact on

0.12.186.289 I llama_perf_sampler_print:    sampling time =      48.05 ms /    33 runs   (    1.46 ms per token,   686.80 tokens per second)
0.12.186.306 I llama_perf_context_print:        load time =    1294.53 ms
0.12.186.308 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.186.310 I llama_perf_context_print:        eval time =   10808.11 ms /    32 runs   (  337.75 ms per token,     2.96 tokens per second)
0.12.186.311 I llama_perf_context_print:       total time =   10888.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3930 (d4992932)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199500.92 ms
main:    total time = 199500.92 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.683 I build: 3930 (d4992932) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.837 I main: load the model and apply lora adapter, if any
0.00.024.945 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.046 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.066 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.070 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.072 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.073 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.074 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.075 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.076 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.084 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.085 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.086 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.087 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.088 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.083 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.296 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.018 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.028 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.029 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.030 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.031 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.032 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.033 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.037 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.038 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.047 I llama_model_loader: - type  f32:   37 tensors
0.00.271.050 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.051 I llama_model_loader: - type q6_K:   19 tensors
0.00.462.845 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.844 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.864 I llm_load_vocab: special tokens cache size = 5
0.00.622.472 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.543 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.544 I llm_load_print_meta: arch             = gemma
0.00.622.544 I llm_load_print_meta: vocab type       = SPM
0.00.622.545 I llm_load_print_meta: n_vocab          = 256000
0.00.622.548 I llm_load_print_meta: n_merges         = 0
0.00.622.548 I llm_load_print_meta: vocab_only       = 0
0.00.622.548 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.549 I llm_load_print_meta: n_embd           = 2048
0.00.622.549 I llm_load_print_meta: n_layer          = 18
0.00.622.615 I llm_load_print_meta: n_head           = 8
0.00.622.622 I llm_load_print_meta: n_head_kv        = 1
0.00.622.623 I llm_load_print_meta: n_rot            = 256
0.00.622.623 I llm_load_print_meta: n_swa            = 0
0.00.622.623 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.624 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.629 I llm_load_print_meta: n_gqa            = 8
0.00.622.633 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.639 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.640 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.641 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.642 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.643 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.643 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.648 I llm_load_print_meta: n_ff             = 16384
0.00.622.649 I llm_load_print_meta: n_expert         = 0
0.00.622.649 I llm_load_print_meta: n_expert_used    = 0
0.00.622.649 I llm_load_print_meta: causal attn      = 1
0.00.622.650 I llm_load_print_meta: pooling type     = 0
0.00.622.650 I llm_load_print_meta: rope type        = 2
0.00.622.650 I llm_load_print_meta: rope scaling     = linear
0.00.622.651 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.652 I llm_load_print_meta: freq_scale_train = 1
0.00.622.653 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.654 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.654 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.654 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.654 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.655 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.660 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.661 I llm_load_print_meta: model type       = 2B
0.00.622.662 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.622.663 I llm_load_print_meta: model params     = 2.51 B
0.00.622.664 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.622.664 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.665 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.666 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.667 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.667 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.668 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.668 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.674 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.675 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.676 I llm_load_print_meta: max token length = 93
0.00.622.841 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.681.212 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.686.875 I llama_new_context_with_model: n_ctx      = 8192
0.00.686.882 I llama_new_context_with_model: n_batch    = 2048
0.00.686.883 I llama_new_context_with_model: n_ubatch   = 512
0.00.686.883 I llama_new_context_with_model: flash_attn = 0
0.00.686.886 I llama_new_context_with_model: freq_base  = 10000.0
0.00.686.887 I llama_new_context_with_model: freq_scale = 1
0.00.717.058 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.717.101 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.717.212 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.718.608 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.718.615 I llama_new_context_with_model: graph nodes  = 601
0.00.718.616 I llama_new_context_with_model: graph splits = 1
0.00.718.632 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.140 I main: llama threadpool init, n_threads = 4
0.01.294.152 I 
0.01.294.261 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.265 I 
0.01.294.446 I sampler seed: 999785897
0.01.294.456 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.462 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.294.463 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.294.463 I 
 fufilling with a delightful giggle.

This is the first time I've encountered such a peculiar sight. A creature with feathers like dandelion fluff and eyes that

0.12.272.914 I llama_perf_sampler_print:    sampling time =      47.78 ms /    33 runs   (    1.45 ms per token,   690.67 tokens per second)
0.12.272.918 I llama_perf_context_print:        load time =    1291.21 ms
0.12.272.919 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.272.921 I llama_perf_context_print:        eval time =   10898.31 ms /    32 runs   (  340.57 ms per token,     2.94 tokens per second)
0.12.272.935 I llama_perf_context_print:       total time =   10978.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.512s
user	50m17.285s
sys	0m6.474s
