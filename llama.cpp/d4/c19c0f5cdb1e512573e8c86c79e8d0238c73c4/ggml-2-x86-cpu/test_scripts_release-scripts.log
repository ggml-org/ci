+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.526 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.001.874 I main: load the model and apply lora adapter, if any
0.00.022.477 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.527 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.543 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.545 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.549 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.549 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.551 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.552 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.552 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.553 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.557 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.557 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.558 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.558 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.559 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.815 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.632 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.547 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.555 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.556 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.557 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.558 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.558 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.561 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.561 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.562 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.563 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.564 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.568 I llama_model_loader: - type  f32:   37 tensors
0.00.133.571 I llama_model_loader: - type q8_0:  127 tensors
0.00.210.449 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.925 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.240.132 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.243.789 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.251.589 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.186 I llm_load_vocab: special tokens cache size = 5
0.00.273.058 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.073 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.074 I llm_load_print_meta: arch             = gemma
0.00.273.075 I llm_load_print_meta: vocab type       = SPM
0.00.273.075 I llm_load_print_meta: n_vocab          = 256000
0.00.273.075 I llm_load_print_meta: n_merges         = 0
0.00.273.076 I llm_load_print_meta: vocab_only       = 0
0.00.273.076 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.076 I llm_load_print_meta: n_embd           = 2048
0.00.273.077 I llm_load_print_meta: n_layer          = 18
0.00.273.088 I llm_load_print_meta: n_head           = 8
0.00.273.089 I llm_load_print_meta: n_head_kv        = 1
0.00.273.089 I llm_load_print_meta: n_rot            = 256
0.00.273.090 I llm_load_print_meta: n_swa            = 0
0.00.273.090 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.090 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.091 I llm_load_print_meta: n_gqa            = 8
0.00.273.092 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.093 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.094 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.095 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.095 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.095 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.096 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.097 I llm_load_print_meta: n_ff             = 16384
0.00.273.097 I llm_load_print_meta: n_expert         = 0
0.00.273.097 I llm_load_print_meta: n_expert_used    = 0
0.00.273.098 I llm_load_print_meta: causal attn      = 1
0.00.273.098 I llm_load_print_meta: pooling type     = 0
0.00.273.098 I llm_load_print_meta: rope type        = 2
0.00.273.099 I llm_load_print_meta: rope scaling     = linear
0.00.273.101 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.101 I llm_load_print_meta: freq_scale_train = 1
0.00.273.102 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.102 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.102 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.102 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.103 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.103 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.103 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.103 I llm_load_print_meta: model type       = 2B
0.00.273.104 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.105 I llm_load_print_meta: model params     = 2.51 B
0.00.273.106 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.106 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.106 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.107 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.107 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.107 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.108 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.108 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.108 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.109 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.109 I llm_load_print_meta: max token length = 93
0.00.273.128 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.373.110 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.373.117 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.373.118 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.373.118 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.373.119 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.373.119 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.378.234 I llama_new_context_with_model: n_ctx      = 8192
0.00.378.240 I llama_new_context_with_model: n_batch    = 2048
0.00.378.240 I llama_new_context_with_model: n_ubatch   = 512
0.00.378.241 I llama_new_context_with_model: flash_attn = 0
0.00.378.243 I llama_new_context_with_model: freq_base  = 10000.0
0.00.378.244 I llama_new_context_with_model: freq_scale = 1
0.00.406.663 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.676 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.406.767 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.616 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.624 I llama_new_context_with_model: graph nodes  = 601
0.00.407.624 I llama_new_context_with_model: graph splits = 1
0.00.407.626 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.498.278 I main: llama threadpool init, n_threads = 4
0.00.498.290 I 
0.00.498.366 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.498.369 I 
0.00.498.406 I sampler seed: 775391313
0.00.498.415 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.498.422 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.498.424 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.498.424 I 
 increasities, the two are in a relationship.

**What is the relationship status of the two?**

The relationship status of the two is in a

0.02.740.588 I llama_perf_sampler_print:    sampling time =       4.76 ms /    33 runs   (    0.14 ms per token,  6938.60 tokens per second)
0.02.740.590 I llama_perf_context_print:        load time =     496.38 ms
0.02.740.591 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.740.593 I llama_perf_context_print:        eval time =    2223.72 ms /    32 runs   (   69.49 ms per token,    14.39 tokens per second)
0.02.740.593 I llama_perf_context_print:       total time =    2242.32 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.528 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.001.849 I main: load the model and apply lora adapter, if any
0.00.022.389 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.402 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.409 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.411 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.417 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.418 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.419 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.420 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.421 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.421 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.426 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.427 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.428 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.428 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.429 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.875 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.708 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.505 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.512 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.513 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.514 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.514 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.515 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.516 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.520 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.520 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.521 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.521 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.522 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.526 I llama_model_loader: - type  f32:   37 tensors
0.00.133.529 I llama_model_loader: - type q8_0:  127 tensors
0.00.208.771 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.383 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.469 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.240.753 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.247.367 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.894 I llm_load_vocab: special tokens cache size = 5
0.00.268.705 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.722 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.722 I llm_load_print_meta: arch             = gemma
0.00.268.723 I llm_load_print_meta: vocab type       = SPM
0.00.268.724 I llm_load_print_meta: n_vocab          = 256000
0.00.268.724 I llm_load_print_meta: n_merges         = 0
0.00.268.724 I llm_load_print_meta: vocab_only       = 0
0.00.268.725 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.725 I llm_load_print_meta: n_embd           = 2048
0.00.268.725 I llm_load_print_meta: n_layer          = 18
0.00.268.737 I llm_load_print_meta: n_head           = 8
0.00.268.737 I llm_load_print_meta: n_head_kv        = 1
0.00.268.738 I llm_load_print_meta: n_rot            = 256
0.00.268.738 I llm_load_print_meta: n_swa            = 0
0.00.268.738 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.739 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.740 I llm_load_print_meta: n_gqa            = 8
0.00.268.741 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.742 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.742 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.744 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.744 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.745 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.745 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.746 I llm_load_print_meta: n_ff             = 16384
0.00.268.746 I llm_load_print_meta: n_expert         = 0
0.00.268.746 I llm_load_print_meta: n_expert_used    = 0
0.00.268.747 I llm_load_print_meta: causal attn      = 1
0.00.268.747 I llm_load_print_meta: pooling type     = 0
0.00.268.747 I llm_load_print_meta: rope type        = 2
0.00.268.748 I llm_load_print_meta: rope scaling     = linear
0.00.268.749 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.750 I llm_load_print_meta: freq_scale_train = 1
0.00.268.750 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.751 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.751 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.751 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.751 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.751 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.752 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.752 I llm_load_print_meta: model type       = 2B
0.00.268.753 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.754 I llm_load_print_meta: model params     = 2.51 B
0.00.268.755 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.755 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.756 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.756 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.757 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.757 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.757 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.757 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.758 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.758 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.759 I llm_load_print_meta: max token length = 93
0.00.268.777 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.363.850 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.368.925 I llama_new_context_with_model: n_ctx      = 8192
0.00.368.931 I llama_new_context_with_model: n_batch    = 2048
0.00.368.932 I llama_new_context_with_model: n_ubatch   = 512
0.00.368.933 I llama_new_context_with_model: flash_attn = 0
0.00.368.935 I llama_new_context_with_model: freq_base  = 10000.0
0.00.368.936 I llama_new_context_with_model: freq_scale = 1
0.00.397.629 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.397.645 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.397.736 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.586 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.398.594 I llama_new_context_with_model: graph nodes  = 601
0.00.398.595 I llama_new_context_with_model: graph splits = 1
0.00.398.597 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.951 I main: llama threadpool init, n_threads = 4
0.00.485.964 I 
0.00.486.063 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.486.066 I 
0.00.486.102 I sampler seed: 2029281950
0.00.486.111 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.486.114 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.486.115 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.486.115 I 
 increasities and the allure of the forbidden.

This is a complex and evocative description of human sexuality that acknowledges the multifaceted nature of human desire and the power of

0.02.647.366 I llama_perf_sampler_print:    sampling time =       5.06 ms /    33 runs   (    0.15 ms per token,  6524.32 tokens per second)
0.02.647.368 I llama_perf_context_print:        load time =     484.08 ms
0.02.647.371 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.647.373 I llama_perf_context_print:        eval time =    2142.75 ms /    32 runs   (   66.96 ms per token,    14.93 tokens per second)
0.02.647.374 I llama_perf_context_print:       total time =    2161.42 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.541 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.001.889 I main: load the model and apply lora adapter, if any
0.00.021.950 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.007 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.012 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.013 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.016 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.017 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.018 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.018 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.019 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.019 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.023 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.023 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.024 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.024 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.025 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.052.067 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.131.100 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.139.429 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.139.437 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.139.437 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.139.438 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.139.439 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.139.439 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.139.440 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.139.442 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.139.443 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.139.443 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.139.445 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.139.446 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.139.449 I llama_model_loader: - type  f32:   37 tensors
0.00.139.451 I llama_model_loader: - type q8_0:  127 tensors
0.00.216.496 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.437 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.248.625 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.252.183 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.259.531 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.116 I llm_load_vocab: special tokens cache size = 5
0.00.282.618 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.638 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.638 I llm_load_print_meta: arch             = gemma
0.00.282.639 I llm_load_print_meta: vocab type       = SPM
0.00.282.640 I llm_load_print_meta: n_vocab          = 256000
0.00.282.640 I llm_load_print_meta: n_merges         = 0
0.00.282.642 I llm_load_print_meta: vocab_only       = 0
0.00.282.642 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.642 I llm_load_print_meta: n_embd           = 2048
0.00.282.643 I llm_load_print_meta: n_layer          = 18
0.00.282.655 I llm_load_print_meta: n_head           = 8
0.00.282.655 I llm_load_print_meta: n_head_kv        = 1
0.00.282.656 I llm_load_print_meta: n_rot            = 256
0.00.282.656 I llm_load_print_meta: n_swa            = 0
0.00.282.656 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.657 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.658 I llm_load_print_meta: n_gqa            = 8
0.00.282.659 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.661 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.662 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.664 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.674 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.675 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.677 I llm_load_print_meta: n_ff             = 16384
0.00.282.677 I llm_load_print_meta: n_expert         = 0
0.00.282.678 I llm_load_print_meta: n_expert_used    = 0
0.00.282.678 I llm_load_print_meta: causal attn      = 1
0.00.282.679 I llm_load_print_meta: pooling type     = 0
0.00.282.679 I llm_load_print_meta: rope type        = 2
0.00.282.679 I llm_load_print_meta: rope scaling     = linear
0.00.282.681 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.682 I llm_load_print_meta: freq_scale_train = 1
0.00.282.683 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.683 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.683 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.684 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.684 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.685 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.688 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.689 I llm_load_print_meta: model type       = 2B
0.00.282.689 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.690 I llm_load_print_meta: model params     = 2.51 B
0.00.282.691 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.692 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.692 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.692 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.693 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.693 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.693 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.694 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.694 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.695 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.695 I llm_load_print_meta: max token length = 93
0.00.282.728 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.360.107 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.360.115 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.360.116 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.360.117 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.360.117 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.360.118 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.365.162 I llama_new_context_with_model: n_ctx      = 8192
0.00.365.168 I llama_new_context_with_model: n_batch    = 2048
0.00.365.169 I llama_new_context_with_model: n_ubatch   = 512
0.00.365.169 I llama_new_context_with_model: flash_attn = 0
0.00.365.171 I llama_new_context_with_model: freq_base  = 10000.0
0.00.365.172 I llama_new_context_with_model: freq_scale = 1
0.00.395.115 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.395.132 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.395.226 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.088 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.396.096 I llama_new_context_with_model: graph nodes  = 601
0.00.396.096 I llama_new_context_with_model: graph splits = 1
0.00.396.099 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.489.211 I main: llama threadpool init, n_threads = 4
0.00.489.222 I 
0.00.489.300 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.489.303 I 
0.00.489.339 I sampler seed: 3693547206
0.00.489.349 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.489.352 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.489.353 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.489.353 I 
 increasities in the human body.

**Answer:**

**Muscular spasms** are involuntary contractions of skeletal muscle that can occur in response to various stimuli,

0.02.737.922 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  6998.94 tokens per second)
0.02.737.924 I llama_perf_context_print:        load time =     487.30 ms
0.02.737.925 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.737.927 I llama_perf_context_print:        eval time =    2231.24 ms /    32 runs   (   69.73 ms per token,    14.34 tokens per second)
0.02.737.928 I llama_perf_context_print:       total time =    2248.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.537 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.021.765 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.810 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.821 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.825 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.829 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.832 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.833 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.833 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.834 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.835 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.835 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.839 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.840 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.840 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.841 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.841 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.297 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.590 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.406 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.413 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.414 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.416 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.417 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.418 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.420 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.421 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.422 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.422 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.423 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.425 I llama_model_loader: - type  f32:   37 tensors
0.00.132.428 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.200 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.002 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.236.151 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.239.624 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.246.528 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.048 I llm_load_vocab: special tokens cache size = 5
0.00.267.834 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.851 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.852 I llm_load_print_meta: arch             = gemma
0.00.267.852 I llm_load_print_meta: vocab type       = SPM
0.00.267.853 I llm_load_print_meta: n_vocab          = 256000
0.00.267.853 I llm_load_print_meta: n_merges         = 0
0.00.267.853 I llm_load_print_meta: vocab_only       = 0
0.00.267.854 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.854 I llm_load_print_meta: n_embd           = 2048
0.00.267.854 I llm_load_print_meta: n_layer          = 18
0.00.267.868 I llm_load_print_meta: n_head           = 8
0.00.267.869 I llm_load_print_meta: n_head_kv        = 1
0.00.267.869 I llm_load_print_meta: n_rot            = 256
0.00.267.869 I llm_load_print_meta: n_swa            = 0
0.00.267.869 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.870 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.871 I llm_load_print_meta: n_gqa            = 8
0.00.267.872 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.873 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.874 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.875 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.875 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.876 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.876 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.877 I llm_load_print_meta: n_ff             = 16384
0.00.267.877 I llm_load_print_meta: n_expert         = 0
0.00.267.877 I llm_load_print_meta: n_expert_used    = 0
0.00.267.878 I llm_load_print_meta: causal attn      = 1
0.00.267.878 I llm_load_print_meta: pooling type     = 0
0.00.267.878 I llm_load_print_meta: rope type        = 2
0.00.267.879 I llm_load_print_meta: rope scaling     = linear
0.00.267.880 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.881 I llm_load_print_meta: freq_scale_train = 1
0.00.267.881 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.881 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.882 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.882 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.882 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.882 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.883 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.883 I llm_load_print_meta: model type       = 2B
0.00.267.884 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.884 I llm_load_print_meta: model params     = 2.51 B
0.00.267.885 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.886 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.886 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.887 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.887 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.887 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.888 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.888 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.888 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.889 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.889 I llm_load_print_meta: max token length = 93
0.00.267.908 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.338.748 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.338.754 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.343.736 I llama_new_context_with_model: n_ctx      = 8192
0.00.343.742 I llama_new_context_with_model: n_batch    = 2048
0.00.343.743 I llama_new_context_with_model: n_ubatch   = 512
0.00.343.743 I llama_new_context_with_model: flash_attn = 0
0.00.343.746 I llama_new_context_with_model: freq_base  = 10000.0
0.00.343.747 I llama_new_context_with_model: freq_scale = 1
0.00.372.599 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.372.616 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.372.709 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.563 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.373.570 I llama_new_context_with_model: graph nodes  = 601
0.00.373.570 I llama_new_context_with_model: graph splits = 1
0.00.373.573 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.226 I main: llama threadpool init, n_threads = 4
0.00.468.237 I 
0.00.468.316 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.319 I 
0.00.468.356 I sampler seed: 1241791311
0.00.468.364 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.367 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.468.367 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.368 I 
 increasements with an asterisk (*) where necessary.

**Assistant**

* Provide a concise description of the task.
* Identify the key requirements and deliverables.

0.02.898.902 I llama_perf_sampler_print:    sampling time =       4.71 ms /    33 runs   (    0.14 ms per token,  7000.42 tokens per second)
0.02.898.905 I llama_perf_context_print:        load time =     466.36 ms
0.02.898.906 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.898.909 I llama_perf_context_print:        eval time =    2412.84 ms /    32 runs   (   75.40 ms per token,    13.26 tokens per second)
0.02.898.911 I llama_perf_context_print:       total time =    2430.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.390s
user	0m39.227s
sys	0m9.299s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3915 (d4c19c0f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31985.60 ms
main:    total time = 31985.60 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.538 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.739 I main: llama backend init
0.00.001.853 I main: load the model and apply lora adapter, if any
0.00.023.261 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.310 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.317 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.323 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.324 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.327 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.328 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.329 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.330 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.331 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.331 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.334 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.335 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.336 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.336 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.337 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.852 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.170 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.956 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.962 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.963 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.964 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.964 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.965 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.966 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.968 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.969 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.969 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.970 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.971 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.974 I llama_model_loader: - type  f32:   37 tensors
0.00.133.976 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.977 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.715 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.235.944 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.236.991 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.240.206 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.246.602 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.078 I llm_load_vocab: special tokens cache size = 5
0.00.267.812 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.828 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.828 I llm_load_print_meta: arch             = gemma
0.00.267.829 I llm_load_print_meta: vocab type       = SPM
0.00.267.829 I llm_load_print_meta: n_vocab          = 256000
0.00.267.830 I llm_load_print_meta: n_merges         = 0
0.00.267.830 I llm_load_print_meta: vocab_only       = 0
0.00.267.830 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.830 I llm_load_print_meta: n_embd           = 2048
0.00.267.831 I llm_load_print_meta: n_layer          = 18
0.00.267.842 I llm_load_print_meta: n_head           = 8
0.00.267.844 I llm_load_print_meta: n_head_kv        = 1
0.00.267.844 I llm_load_print_meta: n_rot            = 256
0.00.267.844 I llm_load_print_meta: n_swa            = 0
0.00.267.845 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.845 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.846 I llm_load_print_meta: n_gqa            = 8
0.00.267.847 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.848 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.848 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.850 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.850 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.850 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.851 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.852 I llm_load_print_meta: n_ff             = 16384
0.00.267.852 I llm_load_print_meta: n_expert         = 0
0.00.267.853 I llm_load_print_meta: n_expert_used    = 0
0.00.267.853 I llm_load_print_meta: causal attn      = 1
0.00.267.853 I llm_load_print_meta: pooling type     = 0
0.00.267.853 I llm_load_print_meta: rope type        = 2
0.00.267.854 I llm_load_print_meta: rope scaling     = linear
0.00.267.855 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.856 I llm_load_print_meta: freq_scale_train = 1
0.00.267.856 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.857 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.857 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.857 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.857 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.858 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.858 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.859 I llm_load_print_meta: model type       = 2B
0.00.267.859 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.860 I llm_load_print_meta: model params     = 2.51 B
0.00.267.861 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.861 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.862 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.862 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.862 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.863 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.863 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.863 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.864 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.864 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.864 I llm_load_print_meta: max token length = 93
0.00.267.888 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.325.587 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.325.594 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.325.595 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.325.595 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.325.596 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.325.596 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.330.634 I llama_new_context_with_model: n_ctx      = 8192
0.00.330.652 I llama_new_context_with_model: n_batch    = 2048
0.00.330.653 I llama_new_context_with_model: n_ubatch   = 512
0.00.330.654 I llama_new_context_with_model: flash_attn = 0
0.00.330.656 I llama_new_context_with_model: freq_base  = 10000.0
0.00.330.658 I llama_new_context_with_model: freq_scale = 1
0.00.359.890 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.359.907 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.360.000 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.874 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.360.883 I llama_new_context_with_model: graph nodes  = 601
0.00.360.884 I llama_new_context_with_model: graph splits = 1
0.00.360.886 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.383 I main: llama threadpool init, n_threads = 4
0.00.442.396 I 
0.00.442.474 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.477 I 
0.00.442.514 I sampler seed: 1323006007
0.00.442.523 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.526 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.442.527 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.527 I 
 squaRED FOR YOU!

I am unable to access or process the provided text. Please ensure that you have provided the correct or updated text. [end of text]


0.01.948.996 I llama_perf_sampler_print:    sampling time =       4.46 ms /    31 runs   (    0.14 ms per token,  6949.11 tokens per second)
0.01.948.998 I llama_perf_context_print:        load time =     440.50 ms
0.01.949.000 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.949.002 I llama_perf_context_print:        eval time =    1490.21 ms /    30 runs   (   49.67 ms per token,    20.13 tokens per second)
0.01.949.003 I llama_perf_context_print:       total time =    1506.62 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3915 (d4c19c0f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32075.74 ms
main:    total time = 32075.74 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.553 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.001.869 I main: load the model and apply lora adapter, if any
0.00.021.681 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.698 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.706 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.706 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.711 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.712 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.713 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.714 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.714 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.715 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.719 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.719 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.720 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.721 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.722 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.499 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.303 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.093 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.100 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.101 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.101 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.102 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.103 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.103 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.106 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.111 I llama_model_loader: - type  f32:   37 tensors
0.00.133.113 I llama_model_loader: - type q4_K:  108 tensors
0.00.133.114 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.838 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.236.643 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.237.753 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.241.152 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.248.214 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.768 I llm_load_vocab: special tokens cache size = 5
0.00.269.861 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.877 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.878 I llm_load_print_meta: arch             = gemma
0.00.269.878 I llm_load_print_meta: vocab type       = SPM
0.00.269.879 I llm_load_print_meta: n_vocab          = 256000
0.00.269.879 I llm_load_print_meta: n_merges         = 0
0.00.269.893 I llm_load_print_meta: vocab_only       = 0
0.00.269.894 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.894 I llm_load_print_meta: n_embd           = 2048
0.00.269.895 I llm_load_print_meta: n_layer          = 18
0.00.269.906 I llm_load_print_meta: n_head           = 8
0.00.269.907 I llm_load_print_meta: n_head_kv        = 1
0.00.269.908 I llm_load_print_meta: n_rot            = 256
0.00.269.908 I llm_load_print_meta: n_swa            = 0
0.00.269.908 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.909 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.911 I llm_load_print_meta: n_gqa            = 8
0.00.269.912 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.915 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.916 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.917 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.918 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.918 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.918 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.919 I llm_load_print_meta: n_ff             = 16384
0.00.269.919 I llm_load_print_meta: n_expert         = 0
0.00.269.920 I llm_load_print_meta: n_expert_used    = 0
0.00.269.923 I llm_load_print_meta: causal attn      = 1
0.00.269.923 I llm_load_print_meta: pooling type     = 0
0.00.269.924 I llm_load_print_meta: rope type        = 2
0.00.269.924 I llm_load_print_meta: rope scaling     = linear
0.00.269.925 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.926 I llm_load_print_meta: freq_scale_train = 1
0.00.269.926 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.927 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.927 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.927 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.927 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.928 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.928 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.928 I llm_load_print_meta: model type       = 2B
0.00.269.929 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.269.930 I llm_load_print_meta: model params     = 2.51 B
0.00.269.931 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.269.931 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.931 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.932 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.933 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.933 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.934 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.934 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.934 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.935 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.936 I llm_load_print_meta: max token length = 93
0.00.269.955 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.327.628 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.332.450 I llama_new_context_with_model: n_ctx      = 8192
0.00.332.456 I llama_new_context_with_model: n_batch    = 2048
0.00.332.456 I llama_new_context_with_model: n_ubatch   = 512
0.00.332.457 I llama_new_context_with_model: flash_attn = 0
0.00.332.459 I llama_new_context_with_model: freq_base  = 10000.0
0.00.332.460 I llama_new_context_with_model: freq_scale = 1
0.00.361.357 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.361.373 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.361.462 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.281 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.362.288 I llama_new_context_with_model: graph nodes  = 601
0.00.362.289 I llama_new_context_with_model: graph splits = 1
0.00.362.291 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.327 I main: llama threadpool init, n_threads = 4
0.00.442.339 I 
0.00.442.434 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.442.437 I 
0.00.442.474 I sampler seed: 1488784619
0.00.442.483 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.492 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.442.493 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.493 I 
 increasities in the workplace have led to increased absenteeism, productivity losses, and a decline in overall employee morale.

To address this issue, a company has

0.02.049.066 I llama_perf_sampler_print:    sampling time =       4.81 ms /    33 runs   (    0.15 ms per token,  6864.99 tokens per second)
0.02.049.068 I llama_perf_context_print:        load time =     440.44 ms
0.02.049.069 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.049.070 I llama_perf_context_print:        eval time =    1589.12 ms /    32 runs   (   49.66 ms per token,    20.14 tokens per second)
0.02.049.071 I llama_perf_context_print:       total time =    1606.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.835s
user	8m14.380s
sys	0m6.837s
