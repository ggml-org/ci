+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.782 I main: load the model and apply lora adapter, if any
0.00.024.623 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.820 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.901 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.911 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.913 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.917 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.919 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.920 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.921 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.922 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.923 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.929 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.934 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.935 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.937 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.938 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.155.807 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.255.165 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.290 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.299 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.300 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.301 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.302 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.304 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.305 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.308 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.309 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.310 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.311 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.273.312 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.321 I llama_model_loader: - type  f32:   37 tensors
0.00.273.325 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.328 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.128 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.494.924 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.500.358 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.511.713 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.658 I llm_load_vocab: special tokens cache size = 5
0.00.612.266 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.337 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.338 I llm_load_print_meta: arch             = gemma
0.00.612.338 I llm_load_print_meta: vocab type       = SPM
0.00.612.339 I llm_load_print_meta: n_vocab          = 256000
0.00.612.341 I llm_load_print_meta: n_merges         = 0
0.00.612.342 I llm_load_print_meta: vocab_only       = 0
0.00.612.342 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.343 I llm_load_print_meta: n_embd           = 2048
0.00.612.343 I llm_load_print_meta: n_layer          = 18
0.00.612.409 I llm_load_print_meta: n_head           = 8
0.00.612.417 I llm_load_print_meta: n_head_kv        = 1
0.00.612.417 I llm_load_print_meta: n_rot            = 256
0.00.612.418 I llm_load_print_meta: n_swa            = 0
0.00.612.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.419 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.424 I llm_load_print_meta: n_gqa            = 8
0.00.612.430 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.435 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.437 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.439 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.439 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.439 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.440 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.445 I llm_load_print_meta: n_ff             = 16384
0.00.612.446 I llm_load_print_meta: n_expert         = 0
0.00.612.451 I llm_load_print_meta: n_expert_used    = 0
0.00.612.452 I llm_load_print_meta: causal attn      = 1
0.00.612.452 I llm_load_print_meta: pooling type     = 0
0.00.612.452 I llm_load_print_meta: rope type        = 2
0.00.612.453 I llm_load_print_meta: rope scaling     = linear
0.00.612.455 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.455 I llm_load_print_meta: freq_scale_train = 1
0.00.612.459 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.459 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.460 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.460 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.460 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.460 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.461 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.461 I llm_load_print_meta: model type       = 2B
0.00.612.462 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.463 I llm_load_print_meta: model params     = 2.51 B
0.00.612.464 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.464 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.465 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.466 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.466 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.467 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.495 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.496 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.503 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.505 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.505 I llm_load_print_meta: max token length = 93
0.00.612.676 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.713.271 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.713.280 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.713.281 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.713.282 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.713.283 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.713.284 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.718.881 I llama_new_context_with_model: n_ctx      = 8192
0.00.718.887 I llama_new_context_with_model: n_batch    = 2048
0.00.718.888 I llama_new_context_with_model: n_ubatch   = 512
0.00.718.888 I llama_new_context_with_model: flash_attn = 0
0.00.718.891 I llama_new_context_with_model: freq_base  = 10000.0
0.00.718.891 I llama_new_context_with_model: freq_scale = 1
0.00.748.272 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.748.314 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.748.425 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.749.778 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.749.783 I llama_new_context_with_model: graph nodes  = 601
0.00.749.783 I llama_new_context_with_model: graph splits = 1
0.00.749.799 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.362.027 I main: llama threadpool init, n_threads = 4
0.01.362.038 I 
0.01.362.142 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.362.146 I 
0.01.362.309 I sampler seed: 3686168570
0.01.362.319 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.362.326 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.362.327 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.362.329 I 
 increasels, and other playful creatures.

**Verse 1:**
Beneath a willow tree, a ladybug gleams,
Its scarlet wings a feast for

0.14.958.834 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.57 tokens per second)
0.14.958.838 I llama_perf_context_print:        load time =    1359.16 ms
0.14.958.839 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.958.841 I llama_perf_context_print:        eval time =   13515.05 ms /    32 runs   (  422.35 ms per token,     2.37 tokens per second)
0.14.958.842 I llama_perf_context_print:       total time =   13596.82 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.645 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
0.00.024.819 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.910 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.925 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.929 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.934 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.935 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.937 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.938 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.940 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.941 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.948 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.952 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.953 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.954 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.955 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.259 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.253 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.136 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.144 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.145 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.146 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.147 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.148 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.149 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.153 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.154 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.155 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.156 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.158 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.166 I llama_model_loader: - type  f32:   37 tensors
0.00.268.169 I llama_model_loader: - type q8_0:  127 tensors
0.00.456.927 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.772 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.505.609 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.510.989 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.521.971 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.885 I llm_load_vocab: special tokens cache size = 5
0.00.625.860 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.625.923 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.625.924 I llm_load_print_meta: arch             = gemma
0.00.625.925 I llm_load_print_meta: vocab type       = SPM
0.00.625.926 I llm_load_print_meta: n_vocab          = 256000
0.00.625.928 I llm_load_print_meta: n_merges         = 0
0.00.625.928 I llm_load_print_meta: vocab_only       = 0
0.00.625.929 I llm_load_print_meta: n_ctx_train      = 8192
0.00.625.929 I llm_load_print_meta: n_embd           = 2048
0.00.625.929 I llm_load_print_meta: n_layer          = 18
0.00.626.015 I llm_load_print_meta: n_head           = 8
0.00.626.025 I llm_load_print_meta: n_head_kv        = 1
0.00.626.026 I llm_load_print_meta: n_rot            = 256
0.00.626.034 I llm_load_print_meta: n_swa            = 0
0.00.626.035 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.036 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.041 I llm_load_print_meta: n_gqa            = 8
0.00.626.047 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.056 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.057 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.058 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.059 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.060 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.060 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.065 I llm_load_print_meta: n_ff             = 16384
0.00.626.067 I llm_load_print_meta: n_expert         = 0
0.00.626.067 I llm_load_print_meta: n_expert_used    = 0
0.00.626.067 I llm_load_print_meta: causal attn      = 1
0.00.626.068 I llm_load_print_meta: pooling type     = 0
0.00.626.069 I llm_load_print_meta: rope type        = 2
0.00.626.069 I llm_load_print_meta: rope scaling     = linear
0.00.626.071 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.075 I llm_load_print_meta: freq_scale_train = 1
0.00.626.075 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.076 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.076 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.076 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.077 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.077 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.077 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.078 I llm_load_print_meta: model type       = 2B
0.00.626.079 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.080 I llm_load_print_meta: model params     = 2.51 B
0.00.626.081 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.081 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.082 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.090 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.091 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.092 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.092 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.100 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.106 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.108 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.115 I llm_load_print_meta: max token length = 93
0.00.626.284 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.722.039 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.727.597 I llama_new_context_with_model: n_ctx      = 8192
0.00.727.605 I llama_new_context_with_model: n_batch    = 2048
0.00.727.605 I llama_new_context_with_model: n_ubatch   = 512
0.00.727.606 I llama_new_context_with_model: flash_attn = 0
0.00.727.609 I llama_new_context_with_model: freq_base  = 10000.0
0.00.727.609 I llama_new_context_with_model: freq_scale = 1
0.00.758.041 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.758.085 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.758.198 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.759.578 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.759.582 I llama_new_context_with_model: graph nodes  = 601
0.00.759.583 I llama_new_context_with_model: graph splits = 1
0.00.759.599 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.373.234 I main: llama threadpool init, n_threads = 4
0.01.373.245 I 
0.01.373.348 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.373.351 I 
0.01.373.518 I sampler seed: 650422985
0.01.373.529 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.373.536 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.373.539 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.373.539 I 
 increasities and tragedies, and the ways in which these events shape the lives of individuals and communities.

**Answer:**

**The Impact of Historical Events on

0.15.045.483 I llama_perf_sampler_print:    sampling time =      48.98 ms /    33 runs   (    1.48 ms per token,   673.79 tokens per second)
0.15.045.497 I llama_perf_context_print:        load time =    1370.36 ms
0.15.045.499 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.045.502 I llama_perf_context_print:        eval time =   13590.01 ms /    32 runs   (  424.69 ms per token,     2.35 tokens per second)
0.15.045.506 I llama_perf_context_print:       total time =   13672.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.024.498 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.694 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.778 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.788 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.791 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.795 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.796 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.798 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.799 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.800 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.800 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.807 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.808 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.809 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.811 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.811 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.139 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.042 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.955 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.964 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.965 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.966 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.967 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.969 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.973 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.974 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.975 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.976 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.977 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.985 I llama_model_loader: - type  f32:   37 tensors
0.00.267.990 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.984 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.484.723 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.486.357 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.491.209 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.501.472 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.387 I llm_load_vocab: special tokens cache size = 5
0.00.595.952 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.016 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.017 I llm_load_print_meta: arch             = gemma
0.00.596.018 I llm_load_print_meta: vocab type       = SPM
0.00.596.018 I llm_load_print_meta: n_vocab          = 256000
0.00.596.020 I llm_load_print_meta: n_merges         = 0
0.00.596.021 I llm_load_print_meta: vocab_only       = 0
0.00.596.021 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.022 I llm_load_print_meta: n_embd           = 2048
0.00.596.022 I llm_load_print_meta: n_layer          = 18
0.00.596.087 I llm_load_print_meta: n_head           = 8
0.00.596.094 I llm_load_print_meta: n_head_kv        = 1
0.00.596.095 I llm_load_print_meta: n_rot            = 256
0.00.596.096 I llm_load_print_meta: n_swa            = 0
0.00.596.096 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.097 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.102 I llm_load_print_meta: n_gqa            = 8
0.00.596.107 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.112 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.114 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.116 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.127 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.128 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.130 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.136 I llm_load_print_meta: n_ff             = 16384
0.00.596.147 I llm_load_print_meta: n_expert         = 0
0.00.596.148 I llm_load_print_meta: n_expert_used    = 0
0.00.596.149 I llm_load_print_meta: causal attn      = 1
0.00.596.154 I llm_load_print_meta: pooling type     = 0
0.00.596.154 I llm_load_print_meta: rope type        = 2
0.00.596.155 I llm_load_print_meta: rope scaling     = linear
0.00.596.157 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.158 I llm_load_print_meta: freq_scale_train = 1
0.00.596.159 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.159 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.159 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.160 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.160 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.160 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.160 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.170 I llm_load_print_meta: model type       = 2B
0.00.596.171 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.172 I llm_load_print_meta: model params     = 2.51 B
0.00.596.173 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.173 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.174 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.174 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.174 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.175 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.183 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.183 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.189 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.190 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.198 I llm_load_print_meta: max token length = 93
0.00.596.363 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.673.795 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.673.805 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.673.806 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.673.807 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.673.807 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.673.808 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.679.531 I llama_new_context_with_model: n_ctx      = 8192
0.00.679.538 I llama_new_context_with_model: n_batch    = 2048
0.00.679.539 I llama_new_context_with_model: n_ubatch   = 512
0.00.679.539 I llama_new_context_with_model: flash_attn = 0
0.00.679.542 I llama_new_context_with_model: freq_base  = 10000.0
0.00.679.542 I llama_new_context_with_model: freq_scale = 1
0.00.708.084 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.708.127 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.708.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.709.594 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.709.599 I llama_new_context_with_model: graph nodes  = 601
0.00.709.600 I llama_new_context_with_model: graph splits = 1
0.00.709.617 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.320.659 I main: llama threadpool init, n_threads = 4
0.01.320.670 I 
0.01.320.781 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.320.786 I 
0.01.320.960 I sampler seed: 3222624316
0.01.320.970 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.980 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.320.981 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.981 I 
 increasively.

The question is: Explain the differences between the two methods of calculating the expected value in a probability distribution.

**Method 1: Simple

0.14.910.642 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.15 tokens per second)
0.14.910.645 I llama_perf_context_print:        load time =    1317.81 ms
0.14.910.647 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.910.649 I llama_perf_context_print:        eval time =   13506.30 ms /    32 runs   (  422.07 ms per token,     2.37 tokens per second)
0.14.910.651 I llama_perf_context_print:       total time =   13589.99 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.668 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.002.840 I main: load the model and apply lora adapter, if any
0.00.024.524 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.736 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.823 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.833 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.835 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.840 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.845 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.847 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.849 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.852 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.858 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.859 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.861 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.862 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.864 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.527 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.512 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.512 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.522 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.523 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.525 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.526 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.541 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.546 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.555 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.558 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.560 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.570 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.268.573 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.584 I llama_model_loader: - type  f32:   37 tensors
0.00.268.591 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.109 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.485.600 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.487.253 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.492.265 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.502.554 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.471 I llm_load_vocab: special tokens cache size = 5
0.00.596.779 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.851 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.852 I llm_load_print_meta: arch             = gemma
0.00.596.852 I llm_load_print_meta: vocab type       = SPM
0.00.596.853 I llm_load_print_meta: n_vocab          = 256000
0.00.596.855 I llm_load_print_meta: n_merges         = 0
0.00.596.856 I llm_load_print_meta: vocab_only       = 0
0.00.596.856 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.857 I llm_load_print_meta: n_embd           = 2048
0.00.596.857 I llm_load_print_meta: n_layer          = 18
0.00.596.922 I llm_load_print_meta: n_head           = 8
0.00.596.931 I llm_load_print_meta: n_head_kv        = 1
0.00.596.936 I llm_load_print_meta: n_rot            = 256
0.00.596.936 I llm_load_print_meta: n_swa            = 0
0.00.596.937 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.937 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.944 I llm_load_print_meta: n_gqa            = 8
0.00.596.951 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.958 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.963 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.964 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.966 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.967 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.974 I llm_load_print_meta: n_ff             = 16384
0.00.596.975 I llm_load_print_meta: n_expert         = 0
0.00.596.976 I llm_load_print_meta: n_expert_used    = 0
0.00.596.979 I llm_load_print_meta: causal attn      = 1
0.00.596.979 I llm_load_print_meta: pooling type     = 0
0.00.596.980 I llm_load_print_meta: rope type        = 2
0.00.596.981 I llm_load_print_meta: rope scaling     = linear
0.00.596.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.984 I llm_load_print_meta: freq_scale_train = 1
0.00.596.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.985 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.986 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.987 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.987 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.989 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.991 I llm_load_print_meta: model type       = 2B
0.00.596.993 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.994 I llm_load_print_meta: model params     = 2.51 B
0.00.596.997 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.997 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.998 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.999 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.001 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.001 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.002 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.003 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.009 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.011 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.012 I llm_load_print_meta: max token length = 93
0.00.597.196 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.668.335 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.668.344 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.674.178 I llama_new_context_with_model: n_ctx      = 8192
0.00.674.186 I llama_new_context_with_model: n_batch    = 2048
0.00.674.186 I llama_new_context_with_model: n_ubatch   = 512
0.00.674.187 I llama_new_context_with_model: flash_attn = 0
0.00.674.189 I llama_new_context_with_model: freq_base  = 10000.0
0.00.674.190 I llama_new_context_with_model: freq_scale = 1
0.00.702.788 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.702.834 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.702.967 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.704.377 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.704.382 I llama_new_context_with_model: graph nodes  = 601
0.00.704.382 I llama_new_context_with_model: graph splits = 1
0.00.704.400 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.317.866 I main: llama threadpool init, n_threads = 4
0.01.317.878 I 
0.01.318.000 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.318.004 I 
0.01.318.180 I sampler seed: 400079341
0.01.318.191 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.318.198 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.318.199 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.318.199 I 
 seconally, using the given format.

The correct answer is:

(a) 2/3
(b) 3/2
(

0.14.951.881 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.15 tokens per second)
0.14.951.885 I llama_perf_context_print:        load time =    1314.93 ms
0.14.951.887 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.951.889 I llama_perf_context_print:        eval time =   13551.10 ms /    32 runs   (  423.47 ms per token,     2.36 tokens per second)
0.14.951.891 I llama_perf_context_print:       total time =   13634.03 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m10.756s
user	3m50.640s
sys	0m9.410s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3915 (d4c19c0f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199324.81 ms
main:    total time = 199324.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.002.763 I main: load the model and apply lora adapter, if any
0.00.024.660 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.951 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.962 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.964 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.969 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.973 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.977 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.978 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.979 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.981 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.987 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.988 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.989 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.997 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.999 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.171 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.178 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.061 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.069 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.070 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.072 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.073 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.074 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.075 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.079 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.080 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.081 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.083 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.094 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.117 I llama_model_loader: - type  f32:   37 tensors
0.00.269.121 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.122 I llama_model_loader: - type q6_K:   19 tensors
0.00.446.442 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.487.980 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.489.593 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.494.456 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.504.826 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.709 I llm_load_vocab: special tokens cache size = 5
0.00.599.228 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.298 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.299 I llm_load_print_meta: arch             = gemma
0.00.599.300 I llm_load_print_meta: vocab type       = SPM
0.00.599.300 I llm_load_print_meta: n_vocab          = 256000
0.00.599.302 I llm_load_print_meta: n_merges         = 0
0.00.599.303 I llm_load_print_meta: vocab_only       = 0
0.00.599.303 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.303 I llm_load_print_meta: n_embd           = 2048
0.00.599.304 I llm_load_print_meta: n_layer          = 18
0.00.599.366 I llm_load_print_meta: n_head           = 8
0.00.599.383 I llm_load_print_meta: n_head_kv        = 1
0.00.599.384 I llm_load_print_meta: n_rot            = 256
0.00.599.384 I llm_load_print_meta: n_swa            = 0
0.00.599.385 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.385 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.390 I llm_load_print_meta: n_gqa            = 8
0.00.599.395 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.401 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.402 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.405 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.406 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.406 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.407 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.412 I llm_load_print_meta: n_ff             = 16384
0.00.599.417 I llm_load_print_meta: n_expert         = 0
0.00.599.417 I llm_load_print_meta: n_expert_used    = 0
0.00.599.417 I llm_load_print_meta: causal attn      = 1
0.00.599.418 I llm_load_print_meta: pooling type     = 0
0.00.599.418 I llm_load_print_meta: rope type        = 2
0.00.599.418 I llm_load_print_meta: rope scaling     = linear
0.00.599.420 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.421 I llm_load_print_meta: freq_scale_train = 1
0.00.599.421 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.421 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.422 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.430 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.431 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.431 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.436 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.438 I llm_load_print_meta: model type       = 2B
0.00.599.442 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.599.442 I llm_load_print_meta: model params     = 2.51 B
0.00.599.444 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.599.444 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.445 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.445 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.447 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.447 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.453 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.455 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.456 I llm_load_print_meta: max token length = 93
0.00.599.622 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.849 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.658.859 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.658.860 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.658.861 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.658.861 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.658.862 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.664.438 I llama_new_context_with_model: n_ctx      = 8192
0.00.664.445 I llama_new_context_with_model: n_batch    = 2048
0.00.664.445 I llama_new_context_with_model: n_ubatch   = 512
0.00.664.446 I llama_new_context_with_model: flash_attn = 0
0.00.664.448 I llama_new_context_with_model: freq_base  = 10000.0
0.00.664.449 I llama_new_context_with_model: freq_scale = 1
0.00.693.699 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.693.743 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.861 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.255 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.261 I llama_new_context_with_model: graph nodes  = 601
0.00.695.261 I llama_new_context_with_model: graph splits = 1
0.00.695.277 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.274.619 I main: llama threadpool init, n_threads = 4
0.01.274.630 I 
0.01.274.733 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.274.737 I 
0.01.274.907 I sampler seed: 3762610658
0.01.274.917 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.274.923 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.274.924 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.274.924 I 
 fufilling, and other forms of vocal distortion that can be achieved through modulation and compression.

## Modulation and Compression as Tools for Vocal Distortion

Modulation and

0.12.195.874 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.45 tokens per second)
0.12.195.877 I llama_perf_context_print:        load time =    1271.77 ms
0.12.195.878 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.195.880 I llama_perf_context_print:        eval time =   10839.76 ms /    32 runs   (  338.74 ms per token,     2.95 tokens per second)
0.12.195.894 I llama_perf_context_print:       total time =   10921.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3915 (d4c19c0f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199177.72 ms
main:    total time = 199177.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 3915 (d4c19c0f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.870 I main: llama backend init
0.00.002.835 I main: load the model and apply lora adapter, if any
0.00.024.517 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.614 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.629 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.632 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.637 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.638 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.639 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.640 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.640 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.641 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.648 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.649 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.650 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.651 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.652 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.764 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.493 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.413 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.421 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.422 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.423 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.424 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.425 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.427 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.431 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.432 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.441 I llama_model_loader: - type  f32:   37 tensors
0.00.267.445 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.446 I llama_model_loader: - type q6_K:   19 tensors
0.00.431.016 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.472.366 W llm_load_vocab: control token:      2 '<bos>' is not marked as EOG
0.00.473.999 W llm_load_vocab: control token:      0 '<pad>' is not marked as EOG
0.00.478.897 W llm_load_vocab: control token:      1 '<eos>' is not marked as EOG
0.00.489.017 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.489.874 I llm_load_vocab: special tokens cache size = 5
0.00.583.213 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.583.279 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.583.280 I llm_load_print_meta: arch             = gemma
0.00.583.281 I llm_load_print_meta: vocab type       = SPM
0.00.583.282 I llm_load_print_meta: n_vocab          = 256000
0.00.583.284 I llm_load_print_meta: n_merges         = 0
0.00.583.284 I llm_load_print_meta: vocab_only       = 0
0.00.583.285 I llm_load_print_meta: n_ctx_train      = 8192
0.00.583.285 I llm_load_print_meta: n_embd           = 2048
0.00.583.285 I llm_load_print_meta: n_layer          = 18
0.00.583.350 I llm_load_print_meta: n_head           = 8
0.00.583.357 I llm_load_print_meta: n_head_kv        = 1
0.00.583.357 I llm_load_print_meta: n_rot            = 256
0.00.583.358 I llm_load_print_meta: n_swa            = 0
0.00.583.358 I llm_load_print_meta: n_embd_head_k    = 256
0.00.583.358 I llm_load_print_meta: n_embd_head_v    = 256
0.00.583.363 I llm_load_print_meta: n_gqa            = 8
0.00.583.368 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.583.373 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.583.373 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.583.375 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.583.375 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.583.376 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.583.376 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.583.381 I llm_load_print_meta: n_ff             = 16384
0.00.583.382 I llm_load_print_meta: n_expert         = 0
0.00.583.383 I llm_load_print_meta: n_expert_used    = 0
0.00.583.383 I llm_load_print_meta: causal attn      = 1
0.00.583.384 I llm_load_print_meta: pooling type     = 0
0.00.583.385 I llm_load_print_meta: rope type        = 2
0.00.583.386 I llm_load_print_meta: rope scaling     = linear
0.00.583.387 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.583.388 I llm_load_print_meta: freq_scale_train = 1
0.00.583.388 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.583.389 I llm_load_print_meta: rope_finetuned   = unknown
0.00.583.389 I llm_load_print_meta: ssm_d_conv       = 0
0.00.583.390 I llm_load_print_meta: ssm_d_inner      = 0
0.00.583.390 I llm_load_print_meta: ssm_d_state      = 0
0.00.583.390 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.583.391 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.583.392 I llm_load_print_meta: model type       = 2B
0.00.583.393 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.583.401 I llm_load_print_meta: model params     = 2.51 B
0.00.583.403 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.583.403 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.583.404 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.583.417 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.583.426 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.583.427 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.583.434 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.583.435 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.583.448 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.583.449 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.583.450 I llm_load_print_meta: max token length = 93
0.00.583.614 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.642.877 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.648.311 I llama_new_context_with_model: n_ctx      = 8192
0.00.648.318 I llama_new_context_with_model: n_batch    = 2048
0.00.648.318 I llama_new_context_with_model: n_ubatch   = 512
0.00.648.319 I llama_new_context_with_model: flash_attn = 0
0.00.648.321 I llama_new_context_with_model: freq_base  = 10000.0
0.00.648.322 I llama_new_context_with_model: freq_scale = 1
0.00.677.311 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.677.353 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.677.468 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.678.837 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.678.842 I llama_new_context_with_model: graph nodes  = 601
0.00.678.842 I llama_new_context_with_model: graph splits = 1
0.00.678.858 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.256.512 I main: llama threadpool init, n_threads = 4
0.01.256.523 I 
0.01.256.629 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.256.633 I 
0.01.256.802 I sampler seed: 837127299
0.01.256.812 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.256.819 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.256.820 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.256.820 I 
 seconary information is given below:

The study investigated the effect of a new educational program on student performance in mathematics.

- The program was delivered in two

0.12.296.515 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.84 tokens per second)
0.12.296.518 I llama_perf_context_print:        load time =    1253.59 ms
0.12.296.519 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.296.520 I llama_perf_context_print:        eval time =   10958.13 ms /    32 runs   (  342.44 ms per token,     2.92 tokens per second)
0.12.296.521 I llama_perf_context_print:       total time =   11040.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.865s
user	50m9.226s
sys	0m6.264s
