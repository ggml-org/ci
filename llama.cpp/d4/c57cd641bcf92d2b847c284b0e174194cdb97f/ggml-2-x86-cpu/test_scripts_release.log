+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.569 I build: 3829 (d4c57cd6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.767 I main: llama backend init
0.00.001.854 I main: load the model and apply lora adapter, if any
0.00.022.084 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.129 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.144 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.151 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.154 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.158 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.159 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.160 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.160 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.161 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.162 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.166 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.166 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.167 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.167 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.169 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.759 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.144 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.219 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.228 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.228 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.229 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.230 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.231 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.231 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.234 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.235 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.236 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.237 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.238 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.241 I llama_model_loader: - type  f32:   37 tensors
0.00.134.244 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.215 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.215.989 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.216.761 I llm_load_vocab: special tokens cache size = 5
0.00.234.771 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.234.786 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.234.786 I llm_load_print_meta: arch             = gemma
0.00.234.787 I llm_load_print_meta: vocab type       = SPM
0.00.234.787 I llm_load_print_meta: n_vocab          = 256000
0.00.234.788 I llm_load_print_meta: n_merges         = 0
0.00.234.788 I llm_load_print_meta: vocab_only       = 0
0.00.234.788 I llm_load_print_meta: n_ctx_train      = 8192
0.00.234.789 I llm_load_print_meta: n_embd           = 2048
0.00.234.789 I llm_load_print_meta: n_layer          = 18
0.00.234.802 I llm_load_print_meta: n_head           = 8
0.00.234.803 I llm_load_print_meta: n_head_kv        = 1
0.00.234.803 I llm_load_print_meta: n_rot            = 256
0.00.234.804 I llm_load_print_meta: n_swa            = 0
0.00.234.804 I llm_load_print_meta: n_embd_head_k    = 256
0.00.234.804 I llm_load_print_meta: n_embd_head_v    = 256
0.00.234.805 I llm_load_print_meta: n_gqa            = 8
0.00.234.806 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.234.807 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.234.808 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.234.809 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.234.810 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.234.810 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.234.810 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.234.811 I llm_load_print_meta: n_ff             = 16384
0.00.234.811 I llm_load_print_meta: n_expert         = 0
0.00.234.812 I llm_load_print_meta: n_expert_used    = 0
0.00.234.812 I llm_load_print_meta: causal attn      = 1
0.00.234.812 I llm_load_print_meta: pooling type     = 0
0.00.234.813 I llm_load_print_meta: rope type        = 2
0.00.234.813 I llm_load_print_meta: rope scaling     = linear
0.00.234.814 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.234.815 I llm_load_print_meta: freq_scale_train = 1
0.00.234.815 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.234.815 I llm_load_print_meta: rope_finetuned   = unknown
0.00.234.816 I llm_load_print_meta: ssm_d_conv       = 0
0.00.234.816 I llm_load_print_meta: ssm_d_inner      = 0
0.00.234.816 I llm_load_print_meta: ssm_d_state      = 0
0.00.234.816 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.234.817 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.234.817 I llm_load_print_meta: model type       = 2B
0.00.234.818 I llm_load_print_meta: model ftype      = Q8_0
0.00.234.819 I llm_load_print_meta: model params     = 2.51 B
0.00.234.819 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.234.820 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.234.820 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.234.820 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.234.821 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.234.821 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.234.821 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.234.822 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.234.822 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.234.822 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.234.823 I llm_load_print_meta: max token length = 93
0.00.234.840 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.332.002 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.332.017 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.332.018 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.332.018 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.332.019 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.332.019 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.337.101 I llama_new_context_with_model: n_ctx      = 8192
0.00.337.106 I llama_new_context_with_model: n_batch    = 2048
0.00.337.107 I llama_new_context_with_model: n_ubatch   = 512
0.00.337.107 I llama_new_context_with_model: flash_attn = 0
0.00.337.109 I llama_new_context_with_model: freq_base  = 10000.0
0.00.337.110 I llama_new_context_with_model: freq_scale = 1
0.00.366.183 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.366.198 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.366.289 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.173 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.367.180 I llama_new_context_with_model: graph nodes  = 601
0.00.367.181 I llama_new_context_with_model: graph splits = 1
0.00.367.183 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.515 I main: llama threadpool init, n_threads = 4
0.00.458.528 I 
0.00.458.600 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.458.604 I 
0.00.458.642 I sampler seed: 2299654795
0.00.458.651 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.653 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.458.654 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.654 I 
 increasities by using the provided context.

I cannot answer this question as it contains inappropriate and sexually suggestive content. [end of text]


0.02.165.770 I llama_perf_sampler_print:    sampling time =       3.64 ms /    25 runs   (    0.15 ms per token,  6860.59 tokens per second)
0.02.165.772 I llama_perf_context_print:        load time =     456.64 ms
0.02.165.773 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.165.774 I llama_perf_context_print:        eval time =    1692.57 ms /    24 runs   (   70.52 ms per token,    14.18 tokens per second)
0.02.165.775 I llama_perf_context_print:       total time =    1707.26 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.577 I build: 3829 (d4c57cd6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.778 I main: llama backend init
0.00.001.872 I main: load the model and apply lora adapter, if any
0.00.021.916 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.931 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.941 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.945 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.948 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.949 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.950 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.951 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.951 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.952 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.956 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.956 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.957 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.958 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.958 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.209 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.046 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.052 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.053 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.054 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.054 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.055 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.056 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.059 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.060 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.061 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.061 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.133.062 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.066 I llama_model_loader: - type  f32:   37 tensors
0.00.133.069 I llama_model_loader: - type q8_0:  127 tensors
0.00.197.761 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.210.927 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.211.596 I llm_load_vocab: special tokens cache size = 5
0.00.229.950 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.229.964 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.229.965 I llm_load_print_meta: arch             = gemma
0.00.229.966 I llm_load_print_meta: vocab type       = SPM
0.00.229.966 I llm_load_print_meta: n_vocab          = 256000
0.00.229.967 I llm_load_print_meta: n_merges         = 0
0.00.229.967 I llm_load_print_meta: vocab_only       = 0
0.00.229.967 I llm_load_print_meta: n_ctx_train      = 8192
0.00.229.968 I llm_load_print_meta: n_embd           = 2048
0.00.229.968 I llm_load_print_meta: n_layer          = 18
0.00.229.979 I llm_load_print_meta: n_head           = 8
0.00.229.980 I llm_load_print_meta: n_head_kv        = 1
0.00.229.980 I llm_load_print_meta: n_rot            = 256
0.00.229.981 I llm_load_print_meta: n_swa            = 0
0.00.229.981 I llm_load_print_meta: n_embd_head_k    = 256
0.00.229.982 I llm_load_print_meta: n_embd_head_v    = 256
0.00.229.982 I llm_load_print_meta: n_gqa            = 8
0.00.229.983 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.229.984 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.229.985 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.229.987 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.229.987 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.229.987 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.229.988 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.229.988 I llm_load_print_meta: n_ff             = 16384
0.00.229.989 I llm_load_print_meta: n_expert         = 0
0.00.229.989 I llm_load_print_meta: n_expert_used    = 0
0.00.229.989 I llm_load_print_meta: causal attn      = 1
0.00.229.990 I llm_load_print_meta: pooling type     = 0
0.00.229.990 I llm_load_print_meta: rope type        = 2
0.00.229.990 I llm_load_print_meta: rope scaling     = linear
0.00.229.992 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.229.992 I llm_load_print_meta: freq_scale_train = 1
0.00.229.993 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.229.993 I llm_load_print_meta: rope_finetuned   = unknown
0.00.229.993 I llm_load_print_meta: ssm_d_conv       = 0
0.00.229.994 I llm_load_print_meta: ssm_d_inner      = 0
0.00.229.994 I llm_load_print_meta: ssm_d_state      = 0
0.00.229.994 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.229.994 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.229.995 I llm_load_print_meta: model type       = 2B
0.00.229.995 I llm_load_print_meta: model ftype      = Q8_0
0.00.229.996 I llm_load_print_meta: model params     = 2.51 B
0.00.229.997 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.229.998 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.229.998 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.229.998 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.229.999 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.229.999 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.229.999 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.230.000 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.230.000 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.230.001 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.230.001 I llm_load_print_meta: max token length = 93
0.00.230.017 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.323.396 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.328.419 I llama_new_context_with_model: n_ctx      = 8192
0.00.328.425 I llama_new_context_with_model: n_batch    = 2048
0.00.328.426 I llama_new_context_with_model: n_ubatch   = 512
0.00.328.426 I llama_new_context_with_model: flash_attn = 0
0.00.328.428 I llama_new_context_with_model: freq_base  = 10000.0
0.00.328.429 I llama_new_context_with_model: freq_scale = 1
0.00.358.774 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.358.790 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.358.883 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.761 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.359.769 I llama_new_context_with_model: graph nodes  = 601
0.00.359.769 I llama_new_context_with_model: graph splits = 1
0.00.359.771 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.850 I main: llama threadpool init, n_threads = 4
0.00.449.863 I 
0.00.449.938 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.449.941 I 
0.00.449.980 I sampler seed: 2177057333
0.00.449.989 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.992 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.449.992 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.992 I 
 increasities in the modern world.

**Answer:**

**The modern world has witnessed a proliferation of narcissistic and narcissistic behaviors, leading to a rise in psychological

0.02.639.034 I llama_perf_sampler_print:    sampling time =       5.00 ms /    33 runs   (    0.15 ms per token,  6606.61 tokens per second)
0.02.639.036 I llama_perf_context_print:        load time =     447.96 ms
0.02.639.037 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.639.039 I llama_perf_context_print:        eval time =    2170.79 ms /    32 runs   (   67.84 ms per token,    14.74 tokens per second)
0.02.639.039 I llama_perf_context_print:       total time =    2189.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.550 I build: 3829 (d4c57cd6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.001.878 I main: load the model and apply lora adapter, if any
0.00.022.331 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.381 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.389 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.394 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.395 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.399 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.400 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.401 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.401 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.402 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.402 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.406 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.407 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.408 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.409 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.409 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.064 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.128.036 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.135.036 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.135.043 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.135.044 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.135.045 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.135.046 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.135.047 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.135.048 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.135.052 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.135.053 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.135.054 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.135.055 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.135.056 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.135.060 I llama_model_loader: - type  f32:   37 tensors
0.00.135.064 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.739 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.220.237 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.221.022 I llm_load_vocab: special tokens cache size = 5
0.00.239.902 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.239.916 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.239.916 I llm_load_print_meta: arch             = gemma
0.00.239.917 I llm_load_print_meta: vocab type       = SPM
0.00.239.917 I llm_load_print_meta: n_vocab          = 256000
0.00.239.918 I llm_load_print_meta: n_merges         = 0
0.00.239.918 I llm_load_print_meta: vocab_only       = 0
0.00.239.919 I llm_load_print_meta: n_ctx_train      = 8192
0.00.239.919 I llm_load_print_meta: n_embd           = 2048
0.00.239.919 I llm_load_print_meta: n_layer          = 18
0.00.239.933 I llm_load_print_meta: n_head           = 8
0.00.239.934 I llm_load_print_meta: n_head_kv        = 1
0.00.239.934 I llm_load_print_meta: n_rot            = 256
0.00.239.935 I llm_load_print_meta: n_swa            = 0
0.00.239.935 I llm_load_print_meta: n_embd_head_k    = 256
0.00.239.935 I llm_load_print_meta: n_embd_head_v    = 256
0.00.239.936 I llm_load_print_meta: n_gqa            = 8
0.00.239.937 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.239.938 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.239.939 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.239.940 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.239.940 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.239.940 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.239.941 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.239.941 I llm_load_print_meta: n_ff             = 16384
0.00.239.942 I llm_load_print_meta: n_expert         = 0
0.00.239.942 I llm_load_print_meta: n_expert_used    = 0
0.00.239.943 I llm_load_print_meta: causal attn      = 1
0.00.239.943 I llm_load_print_meta: pooling type     = 0
0.00.239.943 I llm_load_print_meta: rope type        = 2
0.00.239.943 I llm_load_print_meta: rope scaling     = linear
0.00.239.945 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.239.945 I llm_load_print_meta: freq_scale_train = 1
0.00.239.945 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.239.946 I llm_load_print_meta: rope_finetuned   = unknown
0.00.239.946 I llm_load_print_meta: ssm_d_conv       = 0
0.00.239.946 I llm_load_print_meta: ssm_d_inner      = 0
0.00.239.947 I llm_load_print_meta: ssm_d_state      = 0
0.00.239.947 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.239.947 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.239.948 I llm_load_print_meta: model type       = 2B
0.00.239.949 I llm_load_print_meta: model ftype      = Q8_0
0.00.239.949 I llm_load_print_meta: model params     = 2.51 B
0.00.239.950 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.239.950 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.239.951 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.239.951 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.239.952 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.239.952 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.239.952 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.239.953 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.239.953 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.239.954 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.239.954 I llm_load_print_meta: max token length = 93
0.00.239.982 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.316.702 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.316.710 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.316.711 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.316.712 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.316.712 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.316.713 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.322.152 I llama_new_context_with_model: n_ctx      = 8192
0.00.322.159 I llama_new_context_with_model: n_batch    = 2048
0.00.322.159 I llama_new_context_with_model: n_ubatch   = 512
0.00.322.160 I llama_new_context_with_model: flash_attn = 0
0.00.322.164 I llama_new_context_with_model: freq_base  = 10000.0
0.00.322.165 I llama_new_context_with_model: freq_scale = 1
0.00.351.465 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.351.481 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.351.572 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.444 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.352.452 I llama_new_context_with_model: graph nodes  = 601
0.00.352.452 I llama_new_context_with_model: graph splits = 1
0.00.352.455 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.334 I main: llama threadpool init, n_threads = 4
0.00.444.345 I 
0.00.444.419 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.422 I 
0.00.444.450 I sampler seed: 2772342332
0.00.444.458 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.469 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.444.470 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.470 I 
 increasements with the following steps:

1. Add the given number to the variable `x`
2. Check if the variable `x` is greater

0.02.729.562 I llama_perf_sampler_print:    sampling time =       5.02 ms /    33 runs   (    0.15 ms per token,  6577.64 tokens per second)
0.02.729.565 I llama_perf_context_print:        load time =     442.44 ms
0.02.729.567 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.729.569 I llama_perf_context_print:        eval time =    2266.66 ms /    32 runs   (   70.83 ms per token,    14.12 tokens per second)
0.02.729.569 I llama_perf_context_print:       total time =    2285.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.444 I build: 3829 (d4c57cd6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.648 I main: llama backend init
0.00.001.811 I main: load the model and apply lora adapter, if any
0.00.021.939 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.983 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.996 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.000 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.001 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.005 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.007 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.007 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.008 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.008 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.009 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.013 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.013 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.014 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.015 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.015 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.766 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.569 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.402 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.409 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.410 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.411 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.411 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.412 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.413 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.416 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.416 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.417 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.418 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.420 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.423 I llama_model_loader: - type  f32:   37 tensors
0.00.133.426 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.307 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.224.817 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.225.576 I llm_load_vocab: special tokens cache size = 5
0.00.243.818 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.243.830 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.243.831 I llm_load_print_meta: arch             = gemma
0.00.243.831 I llm_load_print_meta: vocab type       = SPM
0.00.243.832 I llm_load_print_meta: n_vocab          = 256000
0.00.243.834 I llm_load_print_meta: n_merges         = 0
0.00.243.834 I llm_load_print_meta: vocab_only       = 0
0.00.243.835 I llm_load_print_meta: n_ctx_train      = 8192
0.00.243.835 I llm_load_print_meta: n_embd           = 2048
0.00.243.835 I llm_load_print_meta: n_layer          = 18
0.00.243.848 I llm_load_print_meta: n_head           = 8
0.00.243.849 I llm_load_print_meta: n_head_kv        = 1
0.00.243.850 I llm_load_print_meta: n_rot            = 256
0.00.243.850 I llm_load_print_meta: n_swa            = 0
0.00.243.851 I llm_load_print_meta: n_embd_head_k    = 256
0.00.243.851 I llm_load_print_meta: n_embd_head_v    = 256
0.00.243.853 I llm_load_print_meta: n_gqa            = 8
0.00.243.854 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.243.855 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.243.856 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.243.857 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.243.857 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.243.858 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.243.858 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.243.859 I llm_load_print_meta: n_ff             = 16384
0.00.243.860 I llm_load_print_meta: n_expert         = 0
0.00.243.861 I llm_load_print_meta: n_expert_used    = 0
0.00.243.861 I llm_load_print_meta: causal attn      = 1
0.00.243.861 I llm_load_print_meta: pooling type     = 0
0.00.243.862 I llm_load_print_meta: rope type        = 2
0.00.243.862 I llm_load_print_meta: rope scaling     = linear
0.00.243.864 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.243.864 I llm_load_print_meta: freq_scale_train = 1
0.00.243.865 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.243.865 I llm_load_print_meta: rope_finetuned   = unknown
0.00.243.865 I llm_load_print_meta: ssm_d_conv       = 0
0.00.243.866 I llm_load_print_meta: ssm_d_inner      = 0
0.00.243.866 I llm_load_print_meta: ssm_d_state      = 0
0.00.243.866 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.243.867 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.243.868 I llm_load_print_meta: model type       = 2B
0.00.243.868 I llm_load_print_meta: model ftype      = Q8_0
0.00.243.869 I llm_load_print_meta: model params     = 2.51 B
0.00.243.870 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.243.871 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.243.871 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.243.872 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.243.872 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.243.873 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.243.873 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.243.874 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.243.874 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.243.875 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.243.875 I llm_load_print_meta: max token length = 93
0.00.243.892 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.314.848 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.314.854 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.319.863 I llama_new_context_with_model: n_ctx      = 8192
0.00.319.870 I llama_new_context_with_model: n_batch    = 2048
0.00.319.870 I llama_new_context_with_model: n_ubatch   = 512
0.00.319.871 I llama_new_context_with_model: flash_attn = 0
0.00.319.873 I llama_new_context_with_model: freq_base  = 10000.0
0.00.319.874 I llama_new_context_with_model: freq_scale = 1
0.00.350.041 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.350.058 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.350.156 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.019 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.351.027 I llama_new_context_with_model: graph nodes  = 601
0.00.351.028 I llama_new_context_with_model: graph splits = 1
0.00.351.030 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.348 I main: llama threadpool init, n_threads = 4
0.00.445.360 I 
0.00.445.432 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.435 I 
0.00.445.473 I sampler seed: 557623067
0.00.445.482 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.485 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.445.486 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.486 I 
 maneupher, a character from the Dragon Ball franchise.

The Dragon Ball franchise is owned by Bandai Namco Entertainment.

**Appearance:**

- Tall

0.02.902.986 I llama_perf_sampler_print:    sampling time =       5.19 ms /    33 runs   (    0.16 ms per token,  6355.93 tokens per second)
0.02.902.989 I llama_perf_context_print:        load time =     443.52 ms
0.02.902.990 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.902.992 I llama_perf_context_print:        eval time =    2438.43 ms /    32 runs   (   76.20 ms per token,    13.12 tokens per second)
0.02.902.993 I llama_perf_context_print:       total time =    2457.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.002s
user	0m37.292s
sys	0m9.503s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3829 (d4c57cd6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32040.00 ms
main:    total time = 32040.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.545 I build: 3829 (d4c57cd6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.001.852 I main: load the model and apply lora adapter, if any
0.00.021.879 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.928 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.941 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.947 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.951 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.955 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.955 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.956 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.957 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.957 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.958 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.962 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.962 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.964 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.964 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.965 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.932 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.344 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.182 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.188 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.189 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.189 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.190 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.191 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.191 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.195 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.196 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.197 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.197 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.198 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.203 I llama_model_loader: - type  f32:   37 tensors
0.00.134.205 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.206 I llama_model_loader: - type q6_K:   19 tensors
0.00.214.050 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.233.021 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.233.795 I llm_load_vocab: special tokens cache size = 5
0.00.251.935 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.251.948 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.251.949 I llm_load_print_meta: arch             = gemma
0.00.251.949 I llm_load_print_meta: vocab type       = SPM
0.00.251.950 I llm_load_print_meta: n_vocab          = 256000
0.00.251.950 I llm_load_print_meta: n_merges         = 0
0.00.251.951 I llm_load_print_meta: vocab_only       = 0
0.00.251.951 I llm_load_print_meta: n_ctx_train      = 8192
0.00.251.951 I llm_load_print_meta: n_embd           = 2048
0.00.251.952 I llm_load_print_meta: n_layer          = 18
0.00.251.964 I llm_load_print_meta: n_head           = 8
0.00.251.965 I llm_load_print_meta: n_head_kv        = 1
0.00.251.965 I llm_load_print_meta: n_rot            = 256
0.00.251.966 I llm_load_print_meta: n_swa            = 0
0.00.251.966 I llm_load_print_meta: n_embd_head_k    = 256
0.00.251.967 I llm_load_print_meta: n_embd_head_v    = 256
0.00.251.967 I llm_load_print_meta: n_gqa            = 8
0.00.251.968 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.251.969 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.251.970 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.251.971 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.251.972 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.251.972 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.251.973 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.251.973 I llm_load_print_meta: n_ff             = 16384
0.00.251.974 I llm_load_print_meta: n_expert         = 0
0.00.251.974 I llm_load_print_meta: n_expert_used    = 0
0.00.251.974 I llm_load_print_meta: causal attn      = 1
0.00.251.975 I llm_load_print_meta: pooling type     = 0
0.00.251.975 I llm_load_print_meta: rope type        = 2
0.00.251.975 I llm_load_print_meta: rope scaling     = linear
0.00.251.977 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.251.977 I llm_load_print_meta: freq_scale_train = 1
0.00.251.977 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.251.978 I llm_load_print_meta: rope_finetuned   = unknown
0.00.251.978 I llm_load_print_meta: ssm_d_conv       = 0
0.00.251.978 I llm_load_print_meta: ssm_d_inner      = 0
0.00.251.978 I llm_load_print_meta: ssm_d_state      = 0
0.00.251.979 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.251.979 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.251.979 I llm_load_print_meta: model type       = 2B
0.00.251.980 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.251.980 I llm_load_print_meta: model params     = 2.51 B
0.00.251.981 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.251.981 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.251.982 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.251.982 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.251.982 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.251.983 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.251.983 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.251.983 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.251.983 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.251.984 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.251.984 I llm_load_print_meta: max token length = 93
0.00.252.011 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.309.421 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.309.430 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.309.431 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.309.431 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.309.432 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.309.432 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.314.430 I llama_new_context_with_model: n_ctx      = 8192
0.00.314.436 I llama_new_context_with_model: n_batch    = 2048
0.00.314.437 I llama_new_context_with_model: n_ubatch   = 512
0.00.314.437 I llama_new_context_with_model: flash_attn = 0
0.00.314.439 I llama_new_context_with_model: freq_base  = 10000.0
0.00.314.440 I llama_new_context_with_model: freq_scale = 1
0.00.343.355 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.343.371 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.343.457 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.344.320 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.344.328 I llama_new_context_with_model: graph nodes  = 601
0.00.344.328 I llama_new_context_with_model: graph splits = 1
0.00.344.331 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.550 I main: llama threadpool init, n_threads = 4
0.00.427.563 I 
0.00.427.640 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.427.643 I 
0.00.427.672 I sampler seed: 577250469
0.00.427.681 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.683 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.427.684 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.685 I 
 increasities can have a variety of effects, including:

**Increased risk of infection:** The increased production of prostaglandins can irritate the mucous membranes and make them

0.02.113.424 I llama_perf_sampler_print:    sampling time =       4.79 ms /    33 runs   (    0.15 ms per token,  6890.79 tokens per second)
0.02.113.426 I llama_perf_context_print:        load time =     425.68 ms
0.02.113.427 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.113.428 I llama_perf_context_print:        eval time =    1666.95 ms /    32 runs   (   52.09 ms per token,    19.20 tokens per second)
0.02.113.429 I llama_perf_context_print:       total time =    1685.88 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3829 (d4c57cd6)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32129.64 ms
main:    total time = 32129.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.542 I build: 3829 (d4c57cd6) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.765 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.021.936 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.952 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.960 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.961 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.964 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.965 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.966 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.967 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.968 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.968 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.973 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.973 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.974 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.975 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.975 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.846 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.286 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.125 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.132 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.132 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.133 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.134 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.134 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.135 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.138 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.138 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.142 I llama_model_loader: - type  f32:   37 tensors
0.00.134.144 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.145 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.937 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.223.095 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.223.934 I llm_load_vocab: special tokens cache size = 5
0.00.242.351 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.242.368 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.242.369 I llm_load_print_meta: arch             = gemma
0.00.242.369 I llm_load_print_meta: vocab type       = SPM
0.00.242.370 I llm_load_print_meta: n_vocab          = 256000
0.00.242.370 I llm_load_print_meta: n_merges         = 0
0.00.242.371 I llm_load_print_meta: vocab_only       = 0
0.00.242.371 I llm_load_print_meta: n_ctx_train      = 8192
0.00.242.371 I llm_load_print_meta: n_embd           = 2048
0.00.242.372 I llm_load_print_meta: n_layer          = 18
0.00.242.386 I llm_load_print_meta: n_head           = 8
0.00.242.387 I llm_load_print_meta: n_head_kv        = 1
0.00.242.388 I llm_load_print_meta: n_rot            = 256
0.00.242.388 I llm_load_print_meta: n_swa            = 0
0.00.242.389 I llm_load_print_meta: n_embd_head_k    = 256
0.00.242.389 I llm_load_print_meta: n_embd_head_v    = 256
0.00.242.391 I llm_load_print_meta: n_gqa            = 8
0.00.242.392 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.242.393 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.242.394 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.242.395 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.242.396 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.242.396 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.242.396 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.242.397 I llm_load_print_meta: n_ff             = 16384
0.00.242.398 I llm_load_print_meta: n_expert         = 0
0.00.242.398 I llm_load_print_meta: n_expert_used    = 0
0.00.242.398 I llm_load_print_meta: causal attn      = 1
0.00.242.399 I llm_load_print_meta: pooling type     = 0
0.00.242.399 I llm_load_print_meta: rope type        = 2
0.00.242.399 I llm_load_print_meta: rope scaling     = linear
0.00.242.401 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.242.401 I llm_load_print_meta: freq_scale_train = 1
0.00.242.402 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.242.403 I llm_load_print_meta: rope_finetuned   = unknown
0.00.242.404 I llm_load_print_meta: ssm_d_conv       = 0
0.00.242.404 I llm_load_print_meta: ssm_d_inner      = 0
0.00.242.404 I llm_load_print_meta: ssm_d_state      = 0
0.00.242.405 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.242.405 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.242.406 I llm_load_print_meta: model type       = 2B
0.00.242.407 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.242.408 I llm_load_print_meta: model params     = 2.51 B
0.00.242.408 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.242.409 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.242.410 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.242.410 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.242.410 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.242.411 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.242.411 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.242.414 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.242.414 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.242.415 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.242.415 I llm_load_print_meta: max token length = 93
0.00.242.437 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.299.774 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.304.887 I llama_new_context_with_model: n_ctx      = 8192
0.00.304.894 I llama_new_context_with_model: n_batch    = 2048
0.00.304.894 I llama_new_context_with_model: n_ubatch   = 512
0.00.304.894 I llama_new_context_with_model: flash_attn = 0
0.00.304.897 I llama_new_context_with_model: freq_base  = 10000.0
0.00.304.898 I llama_new_context_with_model: freq_scale = 1
0.00.334.677 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.334.693 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.334.790 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.335.662 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.335.670 I llama_new_context_with_model: graph nodes  = 601
0.00.335.671 I llama_new_context_with_model: graph splits = 1
0.00.335.672 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.417.980 I main: llama threadpool init, n_threads = 4
0.00.417.995 I 
0.00.418.074 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.078 I 
0.00.418.124 I sampler seed: 2210317692
0.00.418.134 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.137 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.418.137 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.137 I 
 strick the following sentence:

"I am unable to provide medical advice or diagnose medical conditions."

This sentence is inappropriate for a medical professional because it limits the

0.02.104.040 I llama_perf_sampler_print:    sampling time =       5.40 ms /    33 runs   (    0.16 ms per token,  6116.77 tokens per second)
0.02.104.043 I llama_perf_context_print:        load time =     416.10 ms
0.02.104.044 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.104.045 I llama_perf_context_print:        eval time =    1666.31 ms /    32 runs   (   52.07 ms per token,    19.20 tokens per second)
0.02.104.046 I llama_perf_context_print:       total time =    1686.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.259s
user	8m15.531s
sys	0m7.185s
