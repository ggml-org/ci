+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.556 I build: 4296 (a05e2afc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.761 I main: llama backend init
0.00.000.767 I main: load the model and apply lora adapter, if any
0.00.021.414 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.424 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.432 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.437 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.439 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.442 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.447 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.447 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.448 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.448 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.449 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.454 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.454 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.455 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.455 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.456 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.057.452 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.142.671 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.149.494 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.149.501 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.149.502 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.149.503 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.149.504 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.149.505 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.149.506 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.149.509 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.149.510 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.149.511 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.149.512 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.149.515 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.149.518 I llama_model_loader: - type  f32:   37 tensors
0.00.149.520 I llama_model_loader: - type q8_0:  127 tensors
0.00.220.077 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.261.899 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.262.458 I llm_load_vocab: special tokens cache size = 5
0.00.283.012 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.283.029 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.283.030 I llm_load_print_meta: arch             = gemma
0.00.283.030 I llm_load_print_meta: vocab type       = SPM
0.00.283.031 I llm_load_print_meta: n_vocab          = 256000
0.00.283.031 I llm_load_print_meta: n_merges         = 0
0.00.283.032 I llm_load_print_meta: vocab_only       = 0
0.00.283.032 I llm_load_print_meta: n_ctx_train      = 8192
0.00.283.033 I llm_load_print_meta: n_embd           = 2048
0.00.283.033 I llm_load_print_meta: n_layer          = 18
0.00.283.045 I llm_load_print_meta: n_head           = 8
0.00.283.046 I llm_load_print_meta: n_head_kv        = 1
0.00.283.046 I llm_load_print_meta: n_rot            = 256
0.00.283.046 I llm_load_print_meta: n_swa            = 0
0.00.283.047 I llm_load_print_meta: n_embd_head_k    = 256
0.00.283.047 I llm_load_print_meta: n_embd_head_v    = 256
0.00.283.048 I llm_load_print_meta: n_gqa            = 8
0.00.283.049 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.283.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.283.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.283.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.283.053 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.283.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.283.053 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.283.054 I llm_load_print_meta: n_ff             = 16384
0.00.283.054 I llm_load_print_meta: n_expert         = 0
0.00.283.055 I llm_load_print_meta: n_expert_used    = 0
0.00.283.055 I llm_load_print_meta: causal attn      = 1
0.00.283.055 I llm_load_print_meta: pooling type     = 0
0.00.283.056 I llm_load_print_meta: rope type        = 2
0.00.283.056 I llm_load_print_meta: rope scaling     = linear
0.00.283.057 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.283.058 I llm_load_print_meta: freq_scale_train = 1
0.00.283.058 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.283.058 I llm_load_print_meta: rope_finetuned   = unknown
0.00.283.059 I llm_load_print_meta: ssm_d_conv       = 0
0.00.283.059 I llm_load_print_meta: ssm_d_inner      = 0
0.00.283.059 I llm_load_print_meta: ssm_d_state      = 0
0.00.283.059 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.283.059 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.283.060 I llm_load_print_meta: model type       = 2B
0.00.283.060 I llm_load_print_meta: model ftype      = Q8_0
0.00.283.061 I llm_load_print_meta: model params     = 2.51 B
0.00.283.062 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.283.062 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.283.063 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.283.063 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.283.064 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.283.064 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.283.064 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.283.064 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.283.065 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.283.065 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.283.065 I llm_load_print_meta: max token length = 93
0.00.386.851 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.386.858 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.386.859 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.386.860 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.386.860 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.386.861 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.392.222 I llama_new_context_with_model: n_seq_max     = 1
0.00.392.228 I llama_new_context_with_model: n_ctx         = 4096
0.00.392.228 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.392.229 I llama_new_context_with_model: n_batch       = 2048
0.00.392.229 I llama_new_context_with_model: n_ubatch      = 512
0.00.392.229 I llama_new_context_with_model: flash_attn    = 0
0.00.392.232 I llama_new_context_with_model: freq_base     = 10000.0
0.00.392.233 I llama_new_context_with_model: freq_scale    = 1
0.00.392.234 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.406.308 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.406.323 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.406.412 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.642 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.407.649 I llama_new_context_with_model: graph nodes  = 601
0.00.407.649 I llama_new_context_with_model: graph splits = 1
0.00.407.652 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.492.991 I main: llama threadpool init, n_threads = 4
0.00.493.007 I 
0.00.493.097 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.493.100 I 
0.00.493.151 I sampler seed: 43199695
0.00.493.162 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.493.166 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.493.166 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.493.167 I 
 increably!

I am unable to generate an answer because the provided context does not contain any information regarding a specific task or problem that requires an answer. [end of text]


0.02.776.948 I llama_perf_sampler_print:    sampling time =       5.71 ms /    33 runs   (    0.17 ms per token,  5781.36 tokens per second)
0.02.776.950 I llama_perf_context_print:        load time =     492.21 ms
0.02.776.951 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.776.953 I llama_perf_context_print:        eval time =    2263.42 ms /    32 runs   (   70.73 ms per token,    14.14 tokens per second)
0.02.776.954 I llama_perf_context_print:       total time =    2283.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.182 I build: 4296 (a05e2afc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.389 I main: llama backend init
0.00.000.398 I main: load the model and apply lora adapter, if any
0.00.020.645 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.661 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.672 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.676 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.681 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.681 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.682 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.683 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.684 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.685 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.691 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.692 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.693 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.693 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.695 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.850 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.109 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.965 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.971 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.972 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.972 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.973 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.974 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.974 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.977 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.977 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.979 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.980 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.981 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.984 I llama_model_loader: - type  f32:   37 tensors
0.00.129.985 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.247 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.875 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.442 I llm_load_vocab: special tokens cache size = 5
0.00.261.147 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.163 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.164 I llm_load_print_meta: arch             = gemma
0.00.261.165 I llm_load_print_meta: vocab type       = SPM
0.00.261.165 I llm_load_print_meta: n_vocab          = 256000
0.00.261.166 I llm_load_print_meta: n_merges         = 0
0.00.261.166 I llm_load_print_meta: vocab_only       = 0
0.00.261.166 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.167 I llm_load_print_meta: n_embd           = 2048
0.00.261.167 I llm_load_print_meta: n_layer          = 18
0.00.261.177 I llm_load_print_meta: n_head           = 8
0.00.261.178 I llm_load_print_meta: n_head_kv        = 1
0.00.261.178 I llm_load_print_meta: n_rot            = 256
0.00.261.179 I llm_load_print_meta: n_swa            = 0
0.00.261.179 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.179 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.180 I llm_load_print_meta: n_gqa            = 8
0.00.261.182 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.182 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.183 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.184 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.185 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.185 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.185 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.186 I llm_load_print_meta: n_ff             = 16384
0.00.261.186 I llm_load_print_meta: n_expert         = 0
0.00.261.187 I llm_load_print_meta: n_expert_used    = 0
0.00.261.187 I llm_load_print_meta: causal attn      = 1
0.00.261.187 I llm_load_print_meta: pooling type     = 0
0.00.261.187 I llm_load_print_meta: rope type        = 2
0.00.261.188 I llm_load_print_meta: rope scaling     = linear
0.00.261.189 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.190 I llm_load_print_meta: freq_scale_train = 1
0.00.261.190 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.191 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.191 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.191 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.191 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.192 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.192 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.192 I llm_load_print_meta: model type       = 2B
0.00.261.193 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.193 I llm_load_print_meta: model params     = 2.51 B
0.00.261.194 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.195 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.195 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.195 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.196 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.196 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.196 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.197 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.197 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.197 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.197 I llm_load_print_meta: max token length = 93
0.00.355.978 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.131 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.138 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.138 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.139 I llama_new_context_with_model: n_batch       = 2048
0.00.361.139 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.140 I llama_new_context_with_model: flash_attn    = 0
0.00.361.142 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.143 I llama_new_context_with_model: freq_scale    = 1
0.00.361.144 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.154 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.167 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.259 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.530 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.537 I llama_new_context_with_model: graph nodes  = 601
0.00.377.537 I llama_new_context_with_model: graph splits = 1
0.00.377.540 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.758 I main: llama threadpool init, n_threads = 4
0.00.459.775 I 
0.00.459.859 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.863 I 
0.00.459.922 I sampler seed: 420710654
0.00.459.933 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.947 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.951 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.951 I 
 increasities:

I. What is the main theme of the passage?
II. What are the two main ideas discussed in the passage?
III.

0.02.694.400 I llama_perf_sampler_print:    sampling time =       5.55 ms /    33 runs   (    0.17 ms per token,  5950.23 tokens per second)
0.02.694.403 I llama_perf_context_print:        load time =     459.34 ms
0.02.694.404 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.694.405 I llama_perf_context_print:        eval time =    2214.83 ms /    32 runs   (   69.21 ms per token,    14.45 tokens per second)
0.02.694.406 I llama_perf_context_print:       total time =    2234.65 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.585 I build: 4296 (a05e2afc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.219 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.229 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.237 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.246 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.249 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.253 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.254 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.254 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.255 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.256 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.256 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.261 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.262 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.263 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.263 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.264 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.544 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.064 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.920 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.928 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.929 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.929 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.930 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.931 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.932 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.934 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.935 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.936 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.937 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.938 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.942 I llama_model_loader: - type  f32:   37 tensors
0.00.131.942 I llama_model_loader: - type q8_0:  127 tensors
0.00.219.850 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.640 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.267.155 I llm_load_vocab: special tokens cache size = 5
0.00.287.956 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.972 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.973 I llm_load_print_meta: arch             = gemma
0.00.287.974 I llm_load_print_meta: vocab type       = SPM
0.00.287.974 I llm_load_print_meta: n_vocab          = 256000
0.00.287.975 I llm_load_print_meta: n_merges         = 0
0.00.287.975 I llm_load_print_meta: vocab_only       = 0
0.00.287.975 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.976 I llm_load_print_meta: n_embd           = 2048
0.00.287.976 I llm_load_print_meta: n_layer          = 18
0.00.287.988 I llm_load_print_meta: n_head           = 8
0.00.287.989 I llm_load_print_meta: n_head_kv        = 1
0.00.287.989 I llm_load_print_meta: n_rot            = 256
0.00.287.990 I llm_load_print_meta: n_swa            = 0
0.00.287.990 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.990 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.991 I llm_load_print_meta: n_gqa            = 8
0.00.287.992 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.993 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.994 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.995 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.996 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.996 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.996 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.997 I llm_load_print_meta: n_ff             = 16384
0.00.287.998 I llm_load_print_meta: n_expert         = 0
0.00.287.998 I llm_load_print_meta: n_expert_used    = 0
0.00.287.998 I llm_load_print_meta: causal attn      = 1
0.00.287.998 I llm_load_print_meta: pooling type     = 0
0.00.287.999 I llm_load_print_meta: rope type        = 2
0.00.287.999 I llm_load_print_meta: rope scaling     = linear
0.00.288.001 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.288.001 I llm_load_print_meta: freq_scale_train = 1
0.00.288.001 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.288.002 I llm_load_print_meta: rope_finetuned   = unknown
0.00.288.002 I llm_load_print_meta: ssm_d_conv       = 0
0.00.288.002 I llm_load_print_meta: ssm_d_inner      = 0
0.00.288.002 I llm_load_print_meta: ssm_d_state      = 0
0.00.288.003 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.288.003 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.288.003 I llm_load_print_meta: model type       = 2B
0.00.288.004 I llm_load_print_meta: model ftype      = Q8_0
0.00.288.005 I llm_load_print_meta: model params     = 2.51 B
0.00.288.006 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.288.006 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.288.006 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.288.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.288.007 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.288.007 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.288.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.288.008 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.288.008 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.288.008 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.288.009 I llm_load_print_meta: max token length = 93
0.00.365.120 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.365.130 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.365.131 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.365.132 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.365.132 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.365.133 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.370.229 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.235 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.235 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.236 I llama_new_context_with_model: n_batch       = 2048
0.00.370.236 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.237 I llama_new_context_with_model: flash_attn    = 0
0.00.370.239 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.240 I llama_new_context_with_model: freq_scale    = 1
0.00.370.242 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.322 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.337 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.424 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.733 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.737 I llama_new_context_with_model: graph nodes  = 601
0.00.385.737 I llama_new_context_with_model: graph splits = 1
0.00.385.740 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.678 I main: llama threadpool init, n_threads = 4
0.00.469.693 I 
0.00.469.766 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.469.769 I 
0.00.469.812 I sampler seed: 4117381760
0.00.469.823 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.835 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.839 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.839 I 
 increasities on Twitter.

I am unable to access the Twitter interface due to technical difficulties. Therefore, I am unable to directly observe the content of the tweets

0.02.733.484 I llama_perf_sampler_print:    sampling time =       5.51 ms /    33 runs   (    0.17 ms per token,  5992.37 tokens per second)
0.02.733.487 I llama_perf_context_print:        load time =     468.87 ms
0.02.733.488 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.733.490 I llama_perf_context_print:        eval time =    2243.11 ms /    32 runs   (   70.10 ms per token,    14.27 tokens per second)
0.02.733.490 I llama_perf_context_print:       total time =    2263.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.551 I build: 4296 (a05e2afc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.746 I main: llama backend init
0.00.000.753 I main: load the model and apply lora adapter, if any
0.00.021.131 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.139 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.148 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.154 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.158 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.158 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.159 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.160 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.160 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.161 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.165 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.165 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.166 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.166 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.166 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.741 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.177 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.025 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.033 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.033 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.034 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.034 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.035 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.036 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.038 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.039 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.040 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.041 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.042 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.045 I llama_model_loader: - type  f32:   37 tensors
0.00.131.046 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.680 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.124 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.726 I llm_load_vocab: special tokens cache size = 5
0.00.268.357 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.373 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.374 I llm_load_print_meta: arch             = gemma
0.00.268.374 I llm_load_print_meta: vocab type       = SPM
0.00.268.375 I llm_load_print_meta: n_vocab          = 256000
0.00.268.375 I llm_load_print_meta: n_merges         = 0
0.00.268.375 I llm_load_print_meta: vocab_only       = 0
0.00.268.376 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.376 I llm_load_print_meta: n_embd           = 2048
0.00.268.376 I llm_load_print_meta: n_layer          = 18
0.00.268.388 I llm_load_print_meta: n_head           = 8
0.00.268.389 I llm_load_print_meta: n_head_kv        = 1
0.00.268.389 I llm_load_print_meta: n_rot            = 256
0.00.268.389 I llm_load_print_meta: n_swa            = 0
0.00.268.390 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.390 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.391 I llm_load_print_meta: n_gqa            = 8
0.00.268.392 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.393 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.394 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.395 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.396 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.396 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.396 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.397 I llm_load_print_meta: n_ff             = 16384
0.00.268.397 I llm_load_print_meta: n_expert         = 0
0.00.268.398 I llm_load_print_meta: n_expert_used    = 0
0.00.268.398 I llm_load_print_meta: causal attn      = 1
0.00.268.398 I llm_load_print_meta: pooling type     = 0
0.00.268.398 I llm_load_print_meta: rope type        = 2
0.00.268.399 I llm_load_print_meta: rope scaling     = linear
0.00.268.401 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.401 I llm_load_print_meta: freq_scale_train = 1
0.00.268.402 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.402 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.402 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.403 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.403 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.403 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.403 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.404 I llm_load_print_meta: model type       = 2B
0.00.268.404 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.405 I llm_load_print_meta: model params     = 2.51 B
0.00.268.406 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.407 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.407 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.408 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.408 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.408 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.409 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.409 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.409 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.410 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.410 I llm_load_print_meta: max token length = 93
0.00.339.496 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.339.503 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.635 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.641 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.642 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.642 I llama_new_context_with_model: n_batch       = 2048
0.00.344.643 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.643 I llama_new_context_with_model: flash_attn    = 0
0.00.344.646 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.646 I llama_new_context_with_model: freq_scale    = 1
0.00.344.647 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.836 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.849 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.939 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.287 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.294 I llama_new_context_with_model: graph nodes  = 601
0.00.360.294 I llama_new_context_with_model: graph splits = 1
0.00.360.296 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.449.666 I main: llama threadpool init, n_threads = 4
0.00.449.684 I 
0.00.449.765 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.449.768 I 
0.00.449.816 I sampler seed: 2481823800
0.00.449.829 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.449.832 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.449.833 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.449.835 I 
 increably, reaching a crescendo of excitement that culminated in a grand finale that left audiences breathless. [end of text]


0.01.949.519 I llama_perf_sampler_print:    sampling time =       3.51 ms /    21 runs   (    0.17 ms per token,  5989.73 tokens per second)
0.01.949.522 I llama_perf_context_print:        load time =     448.89 ms
0.01.949.524 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.949.525 I llama_perf_context_print:        eval time =    1486.86 ms /    20 runs   (   74.34 ms per token,    13.45 tokens per second)
0.01.949.526 I llama_perf_context_print:       total time =    1499.86 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.745s
user	0m36.043s
sys	0m9.431s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4296 (a05e2afc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40268.13 ms
main:    total time = 40268.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4296 (a05e2afc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.357 I main: llama backend init
0.00.000.363 I main: load the model and apply lora adapter, if any
0.00.020.589 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.599 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.608 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.613 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.614 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.618 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.619 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.620 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.620 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.621 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.621 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.625 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.626 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.626 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.626 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.627 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.916 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.648 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.566 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.572 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.572 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.573 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.574 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.575 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.576 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.578 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.578 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.579 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.580 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.129.581 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.584 I llama_model_loader: - type  f32:   37 tensors
0.00.129.585 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.586 I llama_model_loader: - type q6_K:   19 tensors
0.00.209.838 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.193 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.780 I llm_load_vocab: special tokens cache size = 5
0.00.275.567 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.587 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.588 I llm_load_print_meta: arch             = gemma
0.00.275.588 I llm_load_print_meta: vocab type       = SPM
0.00.275.589 I llm_load_print_meta: n_vocab          = 256000
0.00.275.589 I llm_load_print_meta: n_merges         = 0
0.00.275.590 I llm_load_print_meta: vocab_only       = 0
0.00.275.590 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.590 I llm_load_print_meta: n_embd           = 2048
0.00.275.590 I llm_load_print_meta: n_layer          = 18
0.00.275.603 I llm_load_print_meta: n_head           = 8
0.00.275.604 I llm_load_print_meta: n_head_kv        = 1
0.00.275.604 I llm_load_print_meta: n_rot            = 256
0.00.275.605 I llm_load_print_meta: n_swa            = 0
0.00.275.605 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.605 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.606 I llm_load_print_meta: n_gqa            = 8
0.00.275.607 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.608 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.609 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.610 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.610 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.611 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.611 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.612 I llm_load_print_meta: n_ff             = 16384
0.00.275.612 I llm_load_print_meta: n_expert         = 0
0.00.275.613 I llm_load_print_meta: n_expert_used    = 0
0.00.275.613 I llm_load_print_meta: causal attn      = 1
0.00.275.613 I llm_load_print_meta: pooling type     = 0
0.00.275.614 I llm_load_print_meta: rope type        = 2
0.00.275.614 I llm_load_print_meta: rope scaling     = linear
0.00.275.615 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.616 I llm_load_print_meta: freq_scale_train = 1
0.00.275.616 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.616 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.617 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.617 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.617 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.618 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.618 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.618 I llm_load_print_meta: model type       = 2B
0.00.275.619 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.620 I llm_load_print_meta: model params     = 2.51 B
0.00.275.620 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.621 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.621 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.621 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.622 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.622 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.623 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.623 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.624 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.624 I llm_load_print_meta: max token length = 93
0.00.335.379 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.335.389 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.335.390 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.335.390 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.335.391 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.335.392 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.559 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.567 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.567 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.568 I llama_new_context_with_model: n_batch       = 2048
0.00.340.568 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.568 I llama_new_context_with_model: flash_attn    = 0
0.00.340.572 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.573 I llama_new_context_with_model: freq_scale    = 1
0.00.340.574 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.961 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.976 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.356.074 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.357.330 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.357.336 I llama_new_context_with_model: graph nodes  = 601
0.00.357.336 I llama_new_context_with_model: graph splits = 1
0.00.357.338 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.368 I main: llama threadpool init, n_threads = 4
0.00.434.383 I 
0.00.434.458 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.434.462 I 
0.00.434.506 I sampler seed: 1416297513
0.00.434.519 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.526 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.530 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.530 I 
 effe

**Assistant**

I am unable to generate responses that are sexually suggestive in nature. My purpose is to provide safe and appropriate information and assistance. [end of text]


0.02.043.857 I llama_perf_sampler_print:    sampling time =       5.45 ms /    33 runs   (    0.17 ms per token,  6052.82 tokens per second)
0.02.043.859 I llama_perf_context_print:        load time =     433.99 ms
0.02.043.860 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.043.861 I llama_perf_context_print:        eval time =    1590.31 ms /    32 runs   (   49.70 ms per token,    20.12 tokens per second)
0.02.043.862 I llama_perf_context_print:       total time =    1609.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4296 (a05e2afc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40195.04 ms
main:    total time = 40195.04 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.552 I build: 4296 (a05e2afc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.038 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.054 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.061 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.062 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.066 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.067 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.068 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.069 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.070 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.071 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.075 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.075 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.076 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.076 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.076 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.125 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.702 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.556 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.563 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.564 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.564 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.565 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.566 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.567 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.571 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.572 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.576 I llama_model_loader: - type  f32:   37 tensors
0.00.131.578 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.579 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.078 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.334 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.932 I llm_load_vocab: special tokens cache size = 5
0.00.271.548 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.565 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.566 I llm_load_print_meta: arch             = gemma
0.00.271.566 I llm_load_print_meta: vocab type       = SPM
0.00.271.567 I llm_load_print_meta: n_vocab          = 256000
0.00.271.568 I llm_load_print_meta: n_merges         = 0
0.00.271.568 I llm_load_print_meta: vocab_only       = 0
0.00.271.568 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.569 I llm_load_print_meta: n_embd           = 2048
0.00.271.569 I llm_load_print_meta: n_layer          = 18
0.00.271.580 I llm_load_print_meta: n_head           = 8
0.00.271.582 I llm_load_print_meta: n_head_kv        = 1
0.00.271.582 I llm_load_print_meta: n_rot            = 256
0.00.271.582 I llm_load_print_meta: n_swa            = 0
0.00.271.583 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.583 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.584 I llm_load_print_meta: n_gqa            = 8
0.00.271.585 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.586 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.587 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.588 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.588 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.589 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.589 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.590 I llm_load_print_meta: n_ff             = 16384
0.00.271.590 I llm_load_print_meta: n_expert         = 0
0.00.271.591 I llm_load_print_meta: n_expert_used    = 0
0.00.271.591 I llm_load_print_meta: causal attn      = 1
0.00.271.591 I llm_load_print_meta: pooling type     = 0
0.00.271.591 I llm_load_print_meta: rope type        = 2
0.00.271.592 I llm_load_print_meta: rope scaling     = linear
0.00.271.593 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.594 I llm_load_print_meta: freq_scale_train = 1
0.00.271.595 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.595 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.596 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.596 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.596 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.596 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.597 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.597 I llm_load_print_meta: model type       = 2B
0.00.271.598 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.599 I llm_load_print_meta: model params     = 2.51 B
0.00.271.599 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.600 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.600 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.600 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.601 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.601 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.602 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.602 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.603 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.603 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.603 I llm_load_print_meta: max token length = 93
0.00.330.557 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.645 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.651 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.652 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.652 I llama_new_context_with_model: n_batch       = 2048
0.00.335.652 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.653 I llama_new_context_with_model: flash_attn    = 0
0.00.335.655 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.656 I llama_new_context_with_model: freq_scale    = 1
0.00.335.657 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.351.323 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.338 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.432 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.710 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.716 I llama_new_context_with_model: graph nodes  = 601
0.00.352.717 I llama_new_context_with_model: graph splits = 1
0.00.352.719 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.429.549 I main: llama threadpool init, n_threads = 4
0.00.429.567 I 
0.00.429.652 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.429.655 I 
0.00.429.706 I sampler seed: 2755802630
0.00.429.717 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.429.721 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.429.722 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.429.731 I 
 increasities and vulnerabilities in the supply chain.

**Answer the following questions:**

1. What is the main cause of supply chain vulnerabilities?
2.

0.02.027.113 I llama_perf_sampler_print:    sampling time =       5.49 ms /    33 runs   (    0.17 ms per token,  6007.65 tokens per second)
0.02.027.115 I llama_perf_context_print:        load time =     428.77 ms
0.02.027.117 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.027.118 I llama_perf_context_print:        eval time =    1578.06 ms /    32 runs   (   49.31 ms per token,    20.28 tokens per second)
0.02.027.119 I llama_perf_context_print:       total time =    1597.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.322s
user	10m24.065s
sys	0m7.127s
