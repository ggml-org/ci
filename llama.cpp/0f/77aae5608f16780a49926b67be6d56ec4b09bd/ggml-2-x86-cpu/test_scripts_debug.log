+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.629 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.023.546 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.557 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.641 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.652 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.657 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.662 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.664 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.666 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.668 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.677 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.679 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.685 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.689 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.690 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.691 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.693 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.401 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.082 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.823 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.831 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.832 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.833 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.835 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.836 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.837 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.842 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.844 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.845 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.349.846 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.349.848 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.349.856 I llama_model_loader: - type  f32:   37 tensors
0.00.349.858 I llama_model_loader: - type q8_0:  127 tensors
0.00.571.490 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.641.626 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.642.707 I llm_load_vocab: special tokens cache size = 5
0.00.837.252 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.837.325 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.837.327 I llm_load_print_meta: arch             = gemma
0.00.837.327 I llm_load_print_meta: vocab type       = SPM
0.00.837.328 I llm_load_print_meta: n_vocab          = 256000
0.00.837.331 I llm_load_print_meta: n_merges         = 0
0.00.837.331 I llm_load_print_meta: vocab_only       = 0
0.00.837.331 I llm_load_print_meta: n_ctx_train      = 8192
0.00.837.332 I llm_load_print_meta: n_embd           = 2048
0.00.837.333 I llm_load_print_meta: n_layer          = 18
0.00.837.399 I llm_load_print_meta: n_head           = 8
0.00.837.407 I llm_load_print_meta: n_head_kv        = 1
0.00.837.408 I llm_load_print_meta: n_rot            = 256
0.00.837.408 I llm_load_print_meta: n_swa            = 0
0.00.837.408 I llm_load_print_meta: n_embd_head_k    = 256
0.00.837.409 I llm_load_print_meta: n_embd_head_v    = 256
0.00.837.413 I llm_load_print_meta: n_gqa            = 8
0.00.837.418 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.837.423 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.837.428 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.837.429 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.837.430 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.837.430 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.837.430 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.837.435 I llm_load_print_meta: n_ff             = 16384
0.00.837.436 I llm_load_print_meta: n_expert         = 0
0.00.837.438 I llm_load_print_meta: n_expert_used    = 0
0.00.837.438 I llm_load_print_meta: causal attn      = 1
0.00.837.451 I llm_load_print_meta: pooling type     = 0
0.00.837.463 I llm_load_print_meta: rope type        = 2
0.00.837.466 I llm_load_print_meta: rope scaling     = linear
0.00.837.468 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.837.469 I llm_load_print_meta: freq_scale_train = 1
0.00.837.469 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.837.469 I llm_load_print_meta: rope_finetuned   = unknown
0.00.837.470 I llm_load_print_meta: ssm_d_conv       = 0
0.00.837.470 I llm_load_print_meta: ssm_d_inner      = 0
0.00.837.470 I llm_load_print_meta: ssm_d_state      = 0
0.00.837.471 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.837.471 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.837.472 I llm_load_print_meta: model type       = 2B
0.00.837.473 I llm_load_print_meta: model ftype      = Q8_0
0.00.837.474 I llm_load_print_meta: model params     = 2.51 B
0.00.837.483 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.837.483 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.837.485 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.837.485 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.837.486 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.837.488 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.837.489 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.837.489 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.837.495 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.837.497 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.837.498 I llm_load_print_meta: max token length = 93
0.00.940.207 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.940.218 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.940.219 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.940.219 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.940.220 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.940.221 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.946.317 I llama_new_context_with_model: n_seq_max     = 1
0.00.946.323 I llama_new_context_with_model: n_ctx         = 4096
0.00.946.324 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.946.324 I llama_new_context_with_model: n_batch       = 2048
0.00.946.325 I llama_new_context_with_model: n_ubatch      = 512
0.00.946.325 I llama_new_context_with_model: flash_attn    = 0
0.00.946.328 I llama_new_context_with_model: freq_base     = 10000.0
0.00.946.328 I llama_new_context_with_model: freq_scale    = 1
0.00.946.329 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.961.084 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.961.126 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.961.260 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.963.780 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.963.784 I llama_new_context_with_model: graph nodes  = 601
0.00.963.784 I llama_new_context_with_model: graph splits = 1
0.00.963.807 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.571.515 I main: llama threadpool init, n_threads = 4
0.01.571.533 I 
0.01.571.650 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.571.655 I 
0.01.571.894 I sampler seed: 3307957751
0.01.571.908 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.571.917 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.571.921 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.571.921 I 
 increadibly. The man who was once a simple fisherman is now a renowned oceanographer.

What does this passage tell us about the transformative power of education?

0.15.137.516 I llama_perf_sampler_print:    sampling time =      48.67 ms /    33 runs   (    1.47 ms per token,   678.02 tokens per second)
0.15.137.534 I llama_perf_context_print:        load time =    1570.54 ms
0.15.137.535 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.137.537 I llama_perf_context_print:        eval time =   13478.12 ms /    32 runs   (  421.19 ms per token,     2.37 tokens per second)
0.15.137.538 I llama_perf_context_print:       total time =   13566.01 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.000.852 I main: load the model and apply lora adapter, if any
0.00.023.382 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.525 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.541 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.546 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.552 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.554 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.555 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.582 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.591 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.593 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.602 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.603 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.604 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.605 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.607 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.271 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.202 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.350.982 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.350.992 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.350.993 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.350.994 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.003 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.005 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.006 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.024 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.026 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.028 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.029 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.351.033 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.042 I llama_model_loader: - type  f32:   37 tensors
0.00.351.044 I llama_model_loader: - type q8_0:  127 tensors
0.00.591.400 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.650.827 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.651.749 I llm_load_vocab: special tokens cache size = 5
0.00.842.932 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.843.005 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.843.006 I llm_load_print_meta: arch             = gemma
0.00.843.007 I llm_load_print_meta: vocab type       = SPM
0.00.843.008 I llm_load_print_meta: n_vocab          = 256000
0.00.843.010 I llm_load_print_meta: n_merges         = 0
0.00.843.011 I llm_load_print_meta: vocab_only       = 0
0.00.843.011 I llm_load_print_meta: n_ctx_train      = 8192
0.00.843.012 I llm_load_print_meta: n_embd           = 2048
0.00.843.012 I llm_load_print_meta: n_layer          = 18
0.00.843.079 I llm_load_print_meta: n_head           = 8
0.00.843.087 I llm_load_print_meta: n_head_kv        = 1
0.00.843.088 I llm_load_print_meta: n_rot            = 256
0.00.843.089 I llm_load_print_meta: n_swa            = 0
0.00.843.090 I llm_load_print_meta: n_embd_head_k    = 256
0.00.843.091 I llm_load_print_meta: n_embd_head_v    = 256
0.00.843.096 I llm_load_print_meta: n_gqa            = 8
0.00.843.121 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.843.127 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.843.128 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.843.130 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.843.131 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.843.131 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.843.132 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.843.137 I llm_load_print_meta: n_ff             = 16384
0.00.843.138 I llm_load_print_meta: n_expert         = 0
0.00.843.138 I llm_load_print_meta: n_expert_used    = 0
0.00.843.139 I llm_load_print_meta: causal attn      = 1
0.00.843.139 I llm_load_print_meta: pooling type     = 0
0.00.843.140 I llm_load_print_meta: rope type        = 2
0.00.843.141 I llm_load_print_meta: rope scaling     = linear
0.00.843.143 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.843.144 I llm_load_print_meta: freq_scale_train = 1
0.00.843.152 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.843.156 I llm_load_print_meta: rope_finetuned   = unknown
0.00.843.157 I llm_load_print_meta: ssm_d_conv       = 0
0.00.843.157 I llm_load_print_meta: ssm_d_inner      = 0
0.00.843.158 I llm_load_print_meta: ssm_d_state      = 0
0.00.843.158 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.843.158 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.843.166 I llm_load_print_meta: model type       = 2B
0.00.843.167 I llm_load_print_meta: model ftype      = Q8_0
0.00.843.175 I llm_load_print_meta: model params     = 2.51 B
0.00.843.184 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.843.192 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.843.193 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.843.200 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.843.201 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.843.208 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.843.209 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.843.210 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.843.216 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.843.217 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.843.217 I llm_load_print_meta: max token length = 93
0.00.942.072 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.948.107 I llama_new_context_with_model: n_seq_max     = 1
0.00.948.114 I llama_new_context_with_model: n_ctx         = 4096
0.00.948.114 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.948.114 I llama_new_context_with_model: n_batch       = 2048
0.00.948.115 I llama_new_context_with_model: n_ubatch      = 512
0.00.948.115 I llama_new_context_with_model: flash_attn    = 0
0.00.948.117 I llama_new_context_with_model: freq_base     = 10000.0
0.00.948.118 I llama_new_context_with_model: freq_scale    = 1
0.00.948.119 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.963.152 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.963.196 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.963.322 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.965.898 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.965.903 I llama_new_context_with_model: graph nodes  = 601
0.00.965.903 I llama_new_context_with_model: graph splits = 1
0.00.965.926 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.572.843 I main: llama threadpool init, n_threads = 4
0.01.572.858 I 
0.01.572.980 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.572.984 I 
0.01.573.224 I sampler seed: 2199646250
0.01.573.238 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.573.249 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.573.250 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.573.250 I 
 maneuvres.

I cannot find any information on this phrase in any dictionary. [end of text]


0.08.813.703 I llama_perf_sampler_print:    sampling time =      25.76 ms /    18 runs   (    1.43 ms per token,   698.65 tokens per second)
0.08.813.727 I llama_perf_context_print:        load time =    1571.89 ms
0.08.813.729 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.813.733 I llama_perf_context_print:        eval time =    7192.94 ms /    17 runs   (  423.11 ms per token,     2.36 tokens per second)
0.08.813.734 I llama_perf_context_print:       total time =    7240.87 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.023.112 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.123 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.211 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.223 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.225 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.230 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.232 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.233 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.235 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.236 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.237 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.246 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.247 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.248 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.250 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.251 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.227.234 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.929 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.664 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.673 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.674 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.676 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.677 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.680 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.681 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.685 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.687 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.689 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.691 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.352.692 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.702 I llama_model_loader: - type  f32:   37 tensors
0.00.352.704 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.691 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.642.805 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.643.823 I llm_load_vocab: special tokens cache size = 5
0.00.834.757 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.834.830 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.834.834 I llm_load_print_meta: arch             = gemma
0.00.834.834 I llm_load_print_meta: vocab type       = SPM
0.00.834.835 I llm_load_print_meta: n_vocab          = 256000
0.00.834.838 I llm_load_print_meta: n_merges         = 0
0.00.834.838 I llm_load_print_meta: vocab_only       = 0
0.00.834.838 I llm_load_print_meta: n_ctx_train      = 8192
0.00.834.839 I llm_load_print_meta: n_embd           = 2048
0.00.834.839 I llm_load_print_meta: n_layer          = 18
0.00.834.905 I llm_load_print_meta: n_head           = 8
0.00.834.912 I llm_load_print_meta: n_head_kv        = 1
0.00.834.912 I llm_load_print_meta: n_rot            = 256
0.00.834.913 I llm_load_print_meta: n_swa            = 0
0.00.834.913 I llm_load_print_meta: n_embd_head_k    = 256
0.00.834.914 I llm_load_print_meta: n_embd_head_v    = 256
0.00.834.918 I llm_load_print_meta: n_gqa            = 8
0.00.834.923 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.834.928 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.834.929 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.834.931 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.834.931 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.834.931 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.834.932 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.834.936 I llm_load_print_meta: n_ff             = 16384
0.00.834.937 I llm_load_print_meta: n_expert         = 0
0.00.834.938 I llm_load_print_meta: n_expert_used    = 0
0.00.834.938 I llm_load_print_meta: causal attn      = 1
0.00.834.938 I llm_load_print_meta: pooling type     = 0
0.00.834.939 I llm_load_print_meta: rope type        = 2
0.00.834.939 I llm_load_print_meta: rope scaling     = linear
0.00.834.940 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.834.941 I llm_load_print_meta: freq_scale_train = 1
0.00.834.941 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.834.942 I llm_load_print_meta: rope_finetuned   = unknown
0.00.834.942 I llm_load_print_meta: ssm_d_conv       = 0
0.00.834.942 I llm_load_print_meta: ssm_d_inner      = 0
0.00.834.943 I llm_load_print_meta: ssm_d_state      = 0
0.00.834.943 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.834.943 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.834.944 I llm_load_print_meta: model type       = 2B
0.00.834.945 I llm_load_print_meta: model ftype      = Q8_0
0.00.834.945 I llm_load_print_meta: model params     = 2.51 B
0.00.834.953 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.834.953 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.834.954 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.834.954 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.834.955 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.834.955 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.834.956 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.834.956 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.834.963 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.834.964 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.834.964 I llm_load_print_meta: max token length = 93
0.00.911.268 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.911.275 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.911.276 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.911.276 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.911.277 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.911.278 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.917.015 I llama_new_context_with_model: n_seq_max     = 1
0.00.917.023 I llama_new_context_with_model: n_ctx         = 4096
0.00.917.023 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.917.024 I llama_new_context_with_model: n_batch       = 2048
0.00.917.024 I llama_new_context_with_model: n_ubatch      = 512
0.00.917.025 I llama_new_context_with_model: flash_attn    = 0
0.00.917.028 I llama_new_context_with_model: freq_base     = 10000.0
0.00.917.029 I llama_new_context_with_model: freq_scale    = 1
0.00.917.029 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.932.059 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.932.104 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.932.238 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.934.824 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.934.829 I llama_new_context_with_model: graph nodes  = 601
0.00.934.829 I llama_new_context_with_model: graph splits = 1
0.00.934.853 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.576.042 I main: llama threadpool init, n_threads = 4
0.01.576.059 I 
0.01.576.172 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.576.175 I 
0.01.576.408 I sampler seed: 60060386
0.01.576.421 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.576.431 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.576.434 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.576.435 I 
 increadibly! [end of text]


0.03.289.760 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.41 tokens per second)
0.03.289.765 I llama_perf_context_print:        load time =    1575.11 ms
0.03.289.767 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.289.769 I llama_perf_context_print:        eval time =    1701.02 ms /     4 runs   (  425.25 ms per token,     2.35 tokens per second)
0.03.289.770 I llama_perf_context_print:       total time =    1713.73 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.000.887 I main: load the model and apply lora adapter, if any
0.00.023.503 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.513 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.603 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.615 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.617 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.622 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.627 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.628 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.629 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.631 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.632 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.640 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.641 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.642 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.644 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.645 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.066 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.121 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.025 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.037 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.039 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.040 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.043 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.045 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.049 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.052 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.053 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.351.055 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.064 I llama_model_loader: - type  f32:   37 tensors
0.00.351.066 I llama_model_loader: - type q8_0:  127 tensors
0.00.570.806 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.628.136 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.629.016 I llm_load_vocab: special tokens cache size = 5
0.00.831.850 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.831.922 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.831.924 I llm_load_print_meta: arch             = gemma
0.00.831.924 I llm_load_print_meta: vocab type       = SPM
0.00.831.925 I llm_load_print_meta: n_vocab          = 256000
0.00.831.928 I llm_load_print_meta: n_merges         = 0
0.00.831.928 I llm_load_print_meta: vocab_only       = 0
0.00.831.929 I llm_load_print_meta: n_ctx_train      = 8192
0.00.831.929 I llm_load_print_meta: n_embd           = 2048
0.00.831.930 I llm_load_print_meta: n_layer          = 18
0.00.831.995 I llm_load_print_meta: n_head           = 8
0.00.832.004 I llm_load_print_meta: n_head_kv        = 1
0.00.832.008 I llm_load_print_meta: n_rot            = 256
0.00.832.009 I llm_load_print_meta: n_swa            = 0
0.00.832.009 I llm_load_print_meta: n_embd_head_k    = 256
0.00.832.009 I llm_load_print_meta: n_embd_head_v    = 256
0.00.832.015 I llm_load_print_meta: n_gqa            = 8
0.00.832.020 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.832.026 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.832.027 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.832.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.832.029 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.832.030 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.832.032 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.832.037 I llm_load_print_meta: n_ff             = 16384
0.00.832.038 I llm_load_print_meta: n_expert         = 0
0.00.832.038 I llm_load_print_meta: n_expert_used    = 0
0.00.832.039 I llm_load_print_meta: causal attn      = 1
0.00.832.039 I llm_load_print_meta: pooling type     = 0
0.00.832.040 I llm_load_print_meta: rope type        = 2
0.00.832.040 I llm_load_print_meta: rope scaling     = linear
0.00.832.041 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.832.042 I llm_load_print_meta: freq_scale_train = 1
0.00.832.043 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.832.044 I llm_load_print_meta: rope_finetuned   = unknown
0.00.832.044 I llm_load_print_meta: ssm_d_conv       = 0
0.00.832.044 I llm_load_print_meta: ssm_d_inner      = 0
0.00.832.055 I llm_load_print_meta: ssm_d_state      = 0
0.00.832.056 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.832.058 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.832.059 I llm_load_print_meta: model type       = 2B
0.00.832.060 I llm_load_print_meta: model ftype      = Q8_0
0.00.832.061 I llm_load_print_meta: model params     = 2.51 B
0.00.832.070 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.832.071 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.832.072 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.832.072 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.832.073 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.832.074 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.832.075 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.832.075 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.832.081 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.832.082 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.832.083 I llm_load_print_meta: max token length = 93
0.00.905.747 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.905.760 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.911.632 I llama_new_context_with_model: n_seq_max     = 1
0.00.911.639 I llama_new_context_with_model: n_ctx         = 4096
0.00.911.639 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.911.640 I llama_new_context_with_model: n_batch       = 2048
0.00.911.640 I llama_new_context_with_model: n_ubatch      = 512
0.00.911.641 I llama_new_context_with_model: flash_attn    = 0
0.00.911.644 I llama_new_context_with_model: freq_base     = 10000.0
0.00.911.644 I llama_new_context_with_model: freq_scale    = 1
0.00.911.645 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.926.807 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.926.852 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.926.986 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.929.622 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.929.627 I llama_new_context_with_model: graph nodes  = 601
0.00.929.627 I llama_new_context_with_model: graph splits = 1
0.00.929.649 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.548.436 I main: llama threadpool init, n_threads = 4
0.01.548.453 I 
0.01.548.573 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.548.577 I 
0.01.548.812 I sampler seed: 3245414489
0.01.548.826 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.548.838 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.548.839 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.548.839 I 
 increably!

I am unable to provide a response that includes potentially offensive or inappropriate language. [end of text]


0.10.035.554 I llama_perf_sampler_print:    sampling time =      30.21 ms /    21 runs   (    1.44 ms per token,   695.04 tokens per second)
0.10.035.580 I llama_perf_context_print:        load time =    1547.45 ms
0.10.035.582 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.035.583 I llama_perf_context_print:        eval time =    8431.28 ms /    20 runs   (  421.56 ms per token,     2.37 tokens per second)
0.10.035.584 I llama_perf_context_print:       total time =    8487.13 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m46.883s
user	2m17.735s
sys	0m9.426s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4220 (0f77aae5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185391.82 ms
main:    total time = 185391.82 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.880 I main: llama backend init
0.00.000.890 I main: load the model and apply lora adapter, if any
0.00.023.505 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.520 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.636 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.650 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.652 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.660 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.664 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.666 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.667 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.668 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.669 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.681 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.682 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.685 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.686 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.688 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.083 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.086 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.023 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.037 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.042 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.044 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.049 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.050 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.051 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.053 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.054 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.063 I llama_model_loader: - type  f32:   37 tensors
0.00.351.066 I llama_model_loader: - type q4_K:  108 tensors
0.00.351.067 I llama_model_loader: - type q6_K:   19 tensors
0.00.584.253 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.643.298 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.644.272 I llm_load_vocab: special tokens cache size = 5
0.00.836.487 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.836.557 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.836.558 I llm_load_print_meta: arch             = gemma
0.00.836.558 I llm_load_print_meta: vocab type       = SPM
0.00.836.560 I llm_load_print_meta: n_vocab          = 256000
0.00.836.562 I llm_load_print_meta: n_merges         = 0
0.00.836.563 I llm_load_print_meta: vocab_only       = 0
0.00.836.563 I llm_load_print_meta: n_ctx_train      = 8192
0.00.836.564 I llm_load_print_meta: n_embd           = 2048
0.00.836.564 I llm_load_print_meta: n_layer          = 18
0.00.836.630 I llm_load_print_meta: n_head           = 8
0.00.836.638 I llm_load_print_meta: n_head_kv        = 1
0.00.836.639 I llm_load_print_meta: n_rot            = 256
0.00.836.640 I llm_load_print_meta: n_swa            = 0
0.00.836.640 I llm_load_print_meta: n_embd_head_k    = 256
0.00.836.640 I llm_load_print_meta: n_embd_head_v    = 256
0.00.836.645 I llm_load_print_meta: n_gqa            = 8
0.00.836.650 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.836.655 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.836.656 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.836.657 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.836.658 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.836.659 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.836.659 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.836.664 I llm_load_print_meta: n_ff             = 16384
0.00.836.665 I llm_load_print_meta: n_expert         = 0
0.00.836.666 I llm_load_print_meta: n_expert_used    = 0
0.00.836.667 I llm_load_print_meta: causal attn      = 1
0.00.836.667 I llm_load_print_meta: pooling type     = 0
0.00.836.671 I llm_load_print_meta: rope type        = 2
0.00.836.671 I llm_load_print_meta: rope scaling     = linear
0.00.836.673 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.836.673 I llm_load_print_meta: freq_scale_train = 1
0.00.836.674 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.836.674 I llm_load_print_meta: rope_finetuned   = unknown
0.00.836.674 I llm_load_print_meta: ssm_d_conv       = 0
0.00.836.675 I llm_load_print_meta: ssm_d_inner      = 0
0.00.836.675 I llm_load_print_meta: ssm_d_state      = 0
0.00.836.675 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.836.675 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.836.684 I llm_load_print_meta: model type       = 2B
0.00.836.686 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.836.687 I llm_load_print_meta: model params     = 2.51 B
0.00.836.696 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.836.696 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.836.697 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.836.697 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.836.698 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.836.698 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.836.700 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.836.701 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.836.706 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.836.708 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.836.708 I llm_load_print_meta: max token length = 93
0.00.899.245 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.899.254 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.899.255 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.899.256 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.899.257 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.899.258 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.905.683 I llama_new_context_with_model: n_seq_max     = 1
0.00.905.690 I llama_new_context_with_model: n_ctx         = 4096
0.00.905.691 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.905.691 I llama_new_context_with_model: n_batch       = 2048
0.00.905.691 I llama_new_context_with_model: n_ubatch      = 512
0.00.905.692 I llama_new_context_with_model: flash_attn    = 0
0.00.905.694 I llama_new_context_with_model: freq_base     = 10000.0
0.00.905.695 I llama_new_context_with_model: freq_scale    = 1
0.00.905.695 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.920.313 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.920.354 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.920.480 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.922.977 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.922.981 I llama_new_context_with_model: graph nodes  = 601
0.00.922.982 I llama_new_context_with_model: graph splits = 1
0.00.923.004 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.503.401 I main: llama threadpool init, n_threads = 4
0.01.503.417 I 
0.01.503.531 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.503.535 I 
0.01.503.786 I sampler seed: 3956241631
0.01.503.799 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.503.810 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.503.811 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.503.812 I 
 seconally and the last syllable is omitted. 

What is the missing word?

Hear me out.

The missing word is "know".

The

0.12.610.586 I llama_perf_sampler_print:    sampling time =      48.25 ms /    33 runs   (    1.46 ms per token,   683.88 tokens per second)
0.12.610.589 I llama_perf_context_print:        load time =    1502.40 ms
0.12.610.591 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.610.592 I llama_perf_context_print:        eval time =   11019.21 ms /    32 runs   (  344.35 ms per token,     2.90 tokens per second)
0.12.610.593 I llama_perf_context_print:       total time =   11107.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4220 (0f77aae5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185706.33 ms
main:    total time = 185706.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.682 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.000.891 I main: load the model and apply lora adapter, if any
0.00.023.441 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.544 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.561 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.563 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.573 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.577 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.579 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.580 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.581 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.582 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.590 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.591 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.592 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.594 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.595 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.224.481 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.326.048 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.349.774 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.349.782 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.349.783 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.349.784 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.349.786 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.349.787 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.349.788 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.349.793 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.349.794 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.349.804 I llama_model_loader: - type  f32:   37 tensors
0.00.349.806 I llama_model_loader: - type q4_K:  108 tensors
0.00.349.807 I llama_model_loader: - type q6_K:   19 tensors
0.00.563.251 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.618.509 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.619.399 I llm_load_vocab: special tokens cache size = 5
0.00.812.559 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.812.634 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.812.636 I llm_load_print_meta: arch             = gemma
0.00.812.636 I llm_load_print_meta: vocab type       = SPM
0.00.812.637 I llm_load_print_meta: n_vocab          = 256000
0.00.812.640 I llm_load_print_meta: n_merges         = 0
0.00.812.640 I llm_load_print_meta: vocab_only       = 0
0.00.812.641 I llm_load_print_meta: n_ctx_train      = 8192
0.00.812.641 I llm_load_print_meta: n_embd           = 2048
0.00.812.642 I llm_load_print_meta: n_layer          = 18
0.00.812.710 I llm_load_print_meta: n_head           = 8
0.00.812.717 I llm_load_print_meta: n_head_kv        = 1
0.00.812.719 I llm_load_print_meta: n_rot            = 256
0.00.812.720 I llm_load_print_meta: n_swa            = 0
0.00.812.720 I llm_load_print_meta: n_embd_head_k    = 256
0.00.812.720 I llm_load_print_meta: n_embd_head_v    = 256
0.00.812.725 I llm_load_print_meta: n_gqa            = 8
0.00.812.730 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.812.735 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.812.736 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.812.739 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.812.739 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.812.740 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.812.740 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.812.745 I llm_load_print_meta: n_ff             = 16384
0.00.812.746 I llm_load_print_meta: n_expert         = 0
0.00.812.756 I llm_load_print_meta: n_expert_used    = 0
0.00.812.775 I llm_load_print_meta: causal attn      = 1
0.00.812.779 I llm_load_print_meta: pooling type     = 0
0.00.812.779 I llm_load_print_meta: rope type        = 2
0.00.812.780 I llm_load_print_meta: rope scaling     = linear
0.00.812.781 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.812.782 I llm_load_print_meta: freq_scale_train = 1
0.00.812.782 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.812.783 I llm_load_print_meta: rope_finetuned   = unknown
0.00.812.783 I llm_load_print_meta: ssm_d_conv       = 0
0.00.812.783 I llm_load_print_meta: ssm_d_inner      = 0
0.00.812.784 I llm_load_print_meta: ssm_d_state      = 0
0.00.812.784 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.812.784 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.812.785 I llm_load_print_meta: model type       = 2B
0.00.812.786 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.812.794 I llm_load_print_meta: model params     = 2.51 B
0.00.812.806 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.812.807 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.812.807 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.812.808 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.812.808 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.812.809 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.812.810 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.812.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.812.816 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.812.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.812.819 I llm_load_print_meta: max token length = 93
0.00.870.000 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.875.670 I llama_new_context_with_model: n_seq_max     = 1
0.00.875.677 I llama_new_context_with_model: n_ctx         = 4096
0.00.875.677 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.875.677 I llama_new_context_with_model: n_batch       = 2048
0.00.875.678 I llama_new_context_with_model: n_ubatch      = 512
0.00.875.678 I llama_new_context_with_model: flash_attn    = 0
0.00.875.681 I llama_new_context_with_model: freq_base     = 10000.0
0.00.875.681 I llama_new_context_with_model: freq_scale    = 1
0.00.875.682 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.890.895 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.890.938 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.891.065 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.893.692 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.893.697 I llama_new_context_with_model: graph nodes  = 601
0.00.893.697 I llama_new_context_with_model: graph splits = 1
0.00.893.721 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.478.086 I main: llama threadpool init, n_threads = 4
0.01.478.103 I 
0.01.478.227 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.01.478.233 I 
0.01.478.484 I sampler seed: 252273370
0.01.478.500 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.478.520 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.478.524 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.478.524 I 
 squaRED: The journey of an AI assistant

**Part 1: Awakening**

- Introduce Sophia, an AI assistant designed to enhance human productivity.


0.12.613.013 I llama_perf_sampler_print:    sampling time =      48.56 ms /    33 runs   (    1.47 ms per token,   679.53 tokens per second)
0.12.613.025 I llama_perf_context_print:        load time =    1477.09 ms
0.12.613.028 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.613.030 I llama_perf_context_print:        eval time =   11046.19 ms /    32 runs   (  345.19 ms per token,     2.90 tokens per second)
0.12.613.031 I llama_perf_context_print:       total time =   11134.94 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.166s
user	46m42.317s
sys	0m6.299s
