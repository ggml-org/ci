+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.537 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.735 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.021.292 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.301 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.309 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.313 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.315 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.318 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.319 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.320 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.320 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.321 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.325 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.325 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.326 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.326 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.327 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.542 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.308 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.099 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.105 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.106 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.107 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.108 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.109 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.110 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.114 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.115 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.116 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.117 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.118 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.122 I llama_model_loader: - type  f32:   37 tensors
0.00.130.123 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.438 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.530 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.058 I llm_load_vocab: special tokens cache size = 5
0.00.264.220 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.237 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.238 I llm_load_print_meta: arch             = gemma
0.00.264.238 I llm_load_print_meta: vocab type       = SPM
0.00.264.239 I llm_load_print_meta: n_vocab          = 256000
0.00.264.239 I llm_load_print_meta: n_merges         = 0
0.00.264.239 I llm_load_print_meta: vocab_only       = 0
0.00.264.240 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.240 I llm_load_print_meta: n_embd           = 2048
0.00.264.240 I llm_load_print_meta: n_layer          = 18
0.00.264.253 I llm_load_print_meta: n_head           = 8
0.00.264.254 I llm_load_print_meta: n_head_kv        = 1
0.00.264.254 I llm_load_print_meta: n_rot            = 256
0.00.264.255 I llm_load_print_meta: n_swa            = 0
0.00.264.255 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.255 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.256 I llm_load_print_meta: n_gqa            = 8
0.00.264.257 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.258 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.259 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.260 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.261 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.261 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.261 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.262 I llm_load_print_meta: n_ff             = 16384
0.00.264.262 I llm_load_print_meta: n_expert         = 0
0.00.264.263 I llm_load_print_meta: n_expert_used    = 0
0.00.264.263 I llm_load_print_meta: causal attn      = 1
0.00.264.263 I llm_load_print_meta: pooling type     = 0
0.00.264.263 I llm_load_print_meta: rope type        = 2
0.00.264.264 I llm_load_print_meta: rope scaling     = linear
0.00.264.265 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.266 I llm_load_print_meta: freq_scale_train = 1
0.00.264.266 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.266 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.267 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.267 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.268 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.268 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.268 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.269 I llm_load_print_meta: model type       = 2B
0.00.264.269 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.270 I llm_load_print_meta: model params     = 2.51 B
0.00.264.271 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.271 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.272 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.272 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.272 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.273 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.273 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.273 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.274 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.274 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.274 I llm_load_print_meta: max token length = 93
0.00.364.392 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.400 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.401 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.402 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.402 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.403 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.672 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.678 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.678 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.678 I llama_new_context_with_model: n_batch       = 2048
0.00.369.679 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.679 I llama_new_context_with_model: flash_attn    = 0
0.00.369.681 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.682 I llama_new_context_with_model: freq_scale    = 1
0.00.369.683 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.030 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.042 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.132 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.444 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.448 I llama_new_context_with_model: graph nodes  = 601
0.00.385.448 I llama_new_context_with_model: graph splits = 1
0.00.385.450 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.469.808 I main: llama threadpool init, n_threads = 4
0.00.469.822 I 
0.00.469.892 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.469.895 I 
0.00.469.937 I sampler seed: 997201718
0.00.469.948 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.469.959 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.469.963 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.469.963 I 
 seconary data. [end of text]


0.00.825.297 I llama_perf_sampler_print:    sampling time =       0.79 ms /     6 runs   (    0.13 ms per token,  7623.89 tokens per second)
0.00.825.300 I llama_perf_context_print:        load time =     469.05 ms
0.00.825.301 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.825.303 I llama_perf_context_print:        eval time =     351.81 ms /     5 runs   (   70.36 ms per token,    14.21 tokens per second)
0.00.825.304 I llama_perf_context_print:       total time =     355.50 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.469 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.663 I main: llama backend init
0.00.000.669 I main: load the model and apply lora adapter, if any
0.00.020.953 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.968 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.975 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.976 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.980 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.983 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.984 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.984 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.985 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.985 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.989 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.990 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.991 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.991 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.992 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.320 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.749 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.523 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.528 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.529 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.530 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.530 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.531 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.532 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.534 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.535 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.535 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.536 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.537 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.540 I llama_model_loader: - type  f32:   37 tensors
0.00.129.541 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.040 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.393 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.947 I llm_load_vocab: special tokens cache size = 5
0.00.262.894 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.909 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.910 I llm_load_print_meta: arch             = gemma
0.00.262.910 I llm_load_print_meta: vocab type       = SPM
0.00.262.911 I llm_load_print_meta: n_vocab          = 256000
0.00.262.911 I llm_load_print_meta: n_merges         = 0
0.00.262.912 I llm_load_print_meta: vocab_only       = 0
0.00.262.912 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.912 I llm_load_print_meta: n_embd           = 2048
0.00.262.913 I llm_load_print_meta: n_layer          = 18
0.00.262.924 I llm_load_print_meta: n_head           = 8
0.00.262.925 I llm_load_print_meta: n_head_kv        = 1
0.00.262.925 I llm_load_print_meta: n_rot            = 256
0.00.262.925 I llm_load_print_meta: n_swa            = 0
0.00.262.925 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.926 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.926 I llm_load_print_meta: n_gqa            = 8
0.00.262.927 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.928 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.929 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.930 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.931 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.931 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.931 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.932 I llm_load_print_meta: n_ff             = 16384
0.00.262.933 I llm_load_print_meta: n_expert         = 0
0.00.262.933 I llm_load_print_meta: n_expert_used    = 0
0.00.262.933 I llm_load_print_meta: causal attn      = 1
0.00.262.933 I llm_load_print_meta: pooling type     = 0
0.00.262.934 I llm_load_print_meta: rope type        = 2
0.00.262.934 I llm_load_print_meta: rope scaling     = linear
0.00.262.936 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.936 I llm_load_print_meta: freq_scale_train = 1
0.00.262.937 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.937 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.937 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.938 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.938 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.938 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.938 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.939 I llm_load_print_meta: model type       = 2B
0.00.262.939 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.940 I llm_load_print_meta: model params     = 2.51 B
0.00.262.941 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.942 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.942 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.942 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.943 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.943 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.943 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.944 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.944 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.945 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.945 I llm_load_print_meta: max token length = 93
0.00.356.286 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.380 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.387 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.388 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.388 I llama_new_context_with_model: n_batch       = 2048
0.00.361.389 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.389 I llama_new_context_with_model: flash_attn    = 0
0.00.361.392 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.393 I llama_new_context_with_model: freq_scale    = 1
0.00.361.394 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.097 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.113 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.206 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.480 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.486 I llama_new_context_with_model: graph nodes  = 601
0.00.377.486 I llama_new_context_with_model: graph splits = 1
0.00.377.488 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.198 I main: llama threadpool init, n_threads = 4
0.00.458.212 I 
0.00.458.283 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.287 I 
0.00.458.333 I sampler seed: 3339816189
0.00.458.344 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.356 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.360 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.360 I 
 increasities by the court.

I am unable to access the requested content.

I am unable to access the requested content because it appears to be restricted or

0.02.641.896 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6609.25 tokens per second)
0.02.641.898 I llama_perf_context_print:        load time =     457.51 ms
0.02.641.899 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.641.901 I llama_perf_context_print:        eval time =    2164.79 ms /    32 runs   (   67.65 ms per token,    14.78 tokens per second)
0.02.641.901 I llama_perf_context_print:       total time =    2183.70 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.539 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.758 I main: llama backend init
0.00.000.765 I main: load the model and apply lora adapter, if any
0.00.021.106 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.114 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.122 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.126 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.128 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.131 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.131 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.132 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.133 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.133 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.134 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.138 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.139 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.139 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.140 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.140 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.011 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.698 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.511 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.517 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.518 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.519 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.520 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.521 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.522 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.525 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.526 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.527 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.528 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.529 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.533 I llama_model_loader: - type  f32:   37 tensors
0.00.130.534 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.960 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.823 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.426 I llm_load_vocab: special tokens cache size = 5
0.00.268.394 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.411 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.411 I llm_load_print_meta: arch             = gemma
0.00.268.412 I llm_load_print_meta: vocab type       = SPM
0.00.268.413 I llm_load_print_meta: n_vocab          = 256000
0.00.268.413 I llm_load_print_meta: n_merges         = 0
0.00.268.413 I llm_load_print_meta: vocab_only       = 0
0.00.268.414 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.414 I llm_load_print_meta: n_embd           = 2048
0.00.268.414 I llm_load_print_meta: n_layer          = 18
0.00.268.426 I llm_load_print_meta: n_head           = 8
0.00.268.427 I llm_load_print_meta: n_head_kv        = 1
0.00.268.427 I llm_load_print_meta: n_rot            = 256
0.00.268.427 I llm_load_print_meta: n_swa            = 0
0.00.268.428 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.428 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.429 I llm_load_print_meta: n_gqa            = 8
0.00.268.430 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.431 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.431 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.433 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.433 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.434 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.434 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.435 I llm_load_print_meta: n_ff             = 16384
0.00.268.435 I llm_load_print_meta: n_expert         = 0
0.00.268.435 I llm_load_print_meta: n_expert_used    = 0
0.00.268.436 I llm_load_print_meta: causal attn      = 1
0.00.268.436 I llm_load_print_meta: pooling type     = 0
0.00.268.436 I llm_load_print_meta: rope type        = 2
0.00.268.437 I llm_load_print_meta: rope scaling     = linear
0.00.268.438 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.439 I llm_load_print_meta: freq_scale_train = 1
0.00.268.440 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.441 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.441 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.441 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.441 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.442 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.442 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.442 I llm_load_print_meta: model type       = 2B
0.00.268.443 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.444 I llm_load_print_meta: model params     = 2.51 B
0.00.268.444 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.445 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.445 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.446 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.446 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.446 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.447 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.447 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.447 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.448 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.448 I llm_load_print_meta: max token length = 93
0.00.342.261 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.342.268 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.269 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.342.270 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.342.270 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.271 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.378 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.384 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.385 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.385 I llama_new_context_with_model: n_batch       = 2048
0.00.347.385 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.386 I llama_new_context_with_model: flash_attn    = 0
0.00.347.388 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.389 I llama_new_context_with_model: freq_scale    = 1
0.00.347.390 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.932 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.945 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.362.044 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.363.323 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.330 I llama_new_context_with_model: graph nodes  = 601
0.00.363.330 I llama_new_context_with_model: graph splits = 1
0.00.363.332 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.364 I main: llama threadpool init, n_threads = 4
0.00.448.381 I 
0.00.448.454 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.448.457 I 
0.00.448.507 I sampler seed: 389269155
0.00.448.518 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.522 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.522 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.522 I 
 increasities and offer a fresh perspective on the role of intimacy in relationships.

**Intimacy: Beyond Physical Connection**

Intimacy transcends mere physical closeness.

0.02.763.397 I llama_perf_sampler_print:    sampling time =       5.33 ms /    33 runs   (    0.16 ms per token,  6185.57 tokens per second)
0.02.763.399 I llama_perf_context_print:        load time =     447.58 ms
0.02.763.400 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.763.402 I llama_perf_context_print:        eval time =    2295.35 ms /    32 runs   (   71.73 ms per token,    13.94 tokens per second)
0.02.763.402 I llama_perf_context_print:       total time =    2315.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.556 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.787 I main: llama backend init
0.00.000.794 I main: load the model and apply lora adapter, if any
0.00.021.316 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.334 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.339 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.346 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.347 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.348 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.355 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.355 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.362 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.363 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.364 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.364 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.365 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.710 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.537 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.443 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.449 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.450 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.450 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.451 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.452 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.453 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.455 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.457 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.458 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.458 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.459 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.463 I llama_model_loader: - type  f32:   37 tensors
0.00.132.465 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.451 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.551 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.250.135 I llm_load_vocab: special tokens cache size = 5
0.00.271.260 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.277 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.277 I llm_load_print_meta: arch             = gemma
0.00.271.278 I llm_load_print_meta: vocab type       = SPM
0.00.271.279 I llm_load_print_meta: n_vocab          = 256000
0.00.271.279 I llm_load_print_meta: n_merges         = 0
0.00.271.279 I llm_load_print_meta: vocab_only       = 0
0.00.271.280 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.280 I llm_load_print_meta: n_embd           = 2048
0.00.271.281 I llm_load_print_meta: n_layer          = 18
0.00.271.292 I llm_load_print_meta: n_head           = 8
0.00.271.293 I llm_load_print_meta: n_head_kv        = 1
0.00.271.293 I llm_load_print_meta: n_rot            = 256
0.00.271.294 I llm_load_print_meta: n_swa            = 0
0.00.271.294 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.294 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.295 I llm_load_print_meta: n_gqa            = 8
0.00.271.296 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.297 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.298 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.299 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.300 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.300 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.301 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.302 I llm_load_print_meta: n_ff             = 16384
0.00.271.302 I llm_load_print_meta: n_expert         = 0
0.00.271.302 I llm_load_print_meta: n_expert_used    = 0
0.00.271.303 I llm_load_print_meta: causal attn      = 1
0.00.271.303 I llm_load_print_meta: pooling type     = 0
0.00.271.303 I llm_load_print_meta: rope type        = 2
0.00.271.303 I llm_load_print_meta: rope scaling     = linear
0.00.271.305 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.306 I llm_load_print_meta: freq_scale_train = 1
0.00.271.306 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.307 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.307 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.307 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.307 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.308 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.308 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.308 I llm_load_print_meta: model type       = 2B
0.00.271.309 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.309 I llm_load_print_meta: model params     = 2.51 B
0.00.271.310 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.310 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.311 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.311 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.312 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.312 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.312 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.313 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.313 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.314 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.314 I llm_load_print_meta: max token length = 93
0.00.343.485 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.343.491 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.348.593 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.599 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.599 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.599 I llama_new_context_with_model: n_batch       = 2048
0.00.348.600 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.600 I llama_new_context_with_model: flash_attn    = 0
0.00.348.603 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.604 I llama_new_context_with_model: freq_scale    = 1
0.00.348.604 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.279 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.293 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.384 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.686 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.692 I llama_new_context_with_model: graph nodes  = 601
0.00.364.693 I llama_new_context_with_model: graph splits = 1
0.00.364.694 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.117 I main: llama threadpool init, n_threads = 4
0.00.453.132 I 
0.00.453.214 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.453.217 I 
0.00.453.268 I sampler seed: 3209197543
0.00.453.280 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.292 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.296 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.297 I 
 increasively, with each statement adding another layer of detail.

**Step 1:** The universe is vast and contains countless stars. Each star is a tiny

0.02.872.192 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6613.23 tokens per second)
0.02.872.194 I llama_perf_context_print:        load time =     452.30 ms
0.02.872.195 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.872.197 I llama_perf_context_print:        eval time =    2399.29 ms /    32 runs   (   74.98 ms per token,    13.34 tokens per second)
0.02.872.197 I llama_perf_context_print:       total time =    2419.08 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.805s
user	0m31.984s
sys	0m9.285s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4220 (0f77aae5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40183.24 ms
main:    total time = 40183.24 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.520 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.727 I main: llama backend init
0.00.000.733 I main: load the model and apply lora adapter, if any
0.00.021.211 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.219 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.228 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.232 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.233 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.237 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.237 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.238 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.239 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.239 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.239 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.242 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.243 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.244 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.244 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.244 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.732 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.498 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.377 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.384 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.385 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.386 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.386 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.387 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.388 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.391 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.392 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.392 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.394 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.395 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.398 I llama_model_loader: - type  f32:   37 tensors
0.00.130.399 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.400 I llama_model_loader: - type q6_K:   19 tensors
0.00.214.837 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.363 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.934 I llm_load_vocab: special tokens cache size = 5
0.00.278.934 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.950 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.951 I llm_load_print_meta: arch             = gemma
0.00.278.951 I llm_load_print_meta: vocab type       = SPM
0.00.278.952 I llm_load_print_meta: n_vocab          = 256000
0.00.278.952 I llm_load_print_meta: n_merges         = 0
0.00.278.953 I llm_load_print_meta: vocab_only       = 0
0.00.278.953 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.955 I llm_load_print_meta: n_embd           = 2048
0.00.278.955 I llm_load_print_meta: n_layer          = 18
0.00.278.968 I llm_load_print_meta: n_head           = 8
0.00.278.969 I llm_load_print_meta: n_head_kv        = 1
0.00.278.969 I llm_load_print_meta: n_rot            = 256
0.00.278.969 I llm_load_print_meta: n_swa            = 0
0.00.278.970 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.971 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.972 I llm_load_print_meta: n_gqa            = 8
0.00.278.973 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.974 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.975 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.977 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.977 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.977 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.978 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.979 I llm_load_print_meta: n_ff             = 16384
0.00.278.979 I llm_load_print_meta: n_expert         = 0
0.00.278.979 I llm_load_print_meta: n_expert_used    = 0
0.00.278.980 I llm_load_print_meta: causal attn      = 1
0.00.278.981 I llm_load_print_meta: pooling type     = 0
0.00.278.981 I llm_load_print_meta: rope type        = 2
0.00.278.981 I llm_load_print_meta: rope scaling     = linear
0.00.278.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.983 I llm_load_print_meta: freq_scale_train = 1
0.00.278.984 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.984 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.985 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.985 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.985 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.985 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.986 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.986 I llm_load_print_meta: model type       = 2B
0.00.278.987 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.278.988 I llm_load_print_meta: model params     = 2.51 B
0.00.278.989 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.278.989 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.990 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.990 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.990 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.991 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.991 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.995 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.995 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.996 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.996 I llm_load_print_meta: max token length = 93
0.00.338.963 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.338.969 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.338.970 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.338.970 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.338.971 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.338.972 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.344.116 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.122 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.123 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.123 I llama_new_context_with_model: n_batch       = 2048
0.00.344.124 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.124 I llama_new_context_with_model: flash_attn    = 0
0.00.344.127 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.128 I llama_new_context_with_model: freq_scale    = 1
0.00.344.129 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.370 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.383 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.471 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.764 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.359.771 I llama_new_context_with_model: graph nodes  = 601
0.00.359.771 I llama_new_context_with_model: graph splits = 1
0.00.359.774 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.634 I main: llama threadpool init, n_threads = 4
0.00.434.649 I 
0.00.434.726 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.434.729 I 
0.00.434.772 I sampler seed: 3641984804
0.00.434.784 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.434.792 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.434.795 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.434.795 I 
 seconally with the following context:

**The context mentions that there are two types of data: structured and unstructured. Structured data is typically stored in relational databases

0.02.017.817 I llama_perf_sampler_print:    sampling time =       5.53 ms /    33 runs   (    0.17 ms per token,  5970.69 tokens per second)
0.02.017.819 I llama_perf_context_print:        load time =     433.88 ms
0.02.017.821 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.017.822 I llama_perf_context_print:        eval time =    1563.35 ms /    32 runs   (   48.85 ms per token,    20.47 tokens per second)
0.02.017.823 I llama_perf_context_print:       total time =    1583.19 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4220 (0f77aae5)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40165.30 ms
main:    total time = 40165.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.557 I build: 4220 (0f77aae5) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.000.759 I main: load the model and apply lora adapter, if any
0.00.021.223 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.237 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.243 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.252 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.252 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.253 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.254 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.262 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.266 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.267 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.267 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.268 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.269 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.473 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.883 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.664 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.669 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.670 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.671 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.672 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.673 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.673 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.676 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.676 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.679 I llama_model_loader: - type  f32:   37 tensors
0.00.129.680 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.681 I llama_model_loader: - type q6_K:   19 tensors
0.00.220.112 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.266.431 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.266.858 I llm_load_vocab: special tokens cache size = 5
0.00.287.659 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.287.674 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.287.675 I llm_load_print_meta: arch             = gemma
0.00.287.675 I llm_load_print_meta: vocab type       = SPM
0.00.287.676 I llm_load_print_meta: n_vocab          = 256000
0.00.287.677 I llm_load_print_meta: n_merges         = 0
0.00.287.677 I llm_load_print_meta: vocab_only       = 0
0.00.287.678 I llm_load_print_meta: n_ctx_train      = 8192
0.00.287.678 I llm_load_print_meta: n_embd           = 2048
0.00.287.678 I llm_load_print_meta: n_layer          = 18
0.00.287.690 I llm_load_print_meta: n_head           = 8
0.00.287.691 I llm_load_print_meta: n_head_kv        = 1
0.00.287.692 I llm_load_print_meta: n_rot            = 256
0.00.287.692 I llm_load_print_meta: n_swa            = 0
0.00.287.692 I llm_load_print_meta: n_embd_head_k    = 256
0.00.287.693 I llm_load_print_meta: n_embd_head_v    = 256
0.00.287.693 I llm_load_print_meta: n_gqa            = 8
0.00.287.694 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.287.695 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.287.696 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.287.697 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.287.698 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.287.698 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.287.698 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.287.699 I llm_load_print_meta: n_ff             = 16384
0.00.287.699 I llm_load_print_meta: n_expert         = 0
0.00.287.700 I llm_load_print_meta: n_expert_used    = 0
0.00.287.700 I llm_load_print_meta: causal attn      = 1
0.00.287.700 I llm_load_print_meta: pooling type     = 0
0.00.287.701 I llm_load_print_meta: rope type        = 2
0.00.287.701 I llm_load_print_meta: rope scaling     = linear
0.00.287.702 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.287.703 I llm_load_print_meta: freq_scale_train = 1
0.00.287.703 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.287.704 I llm_load_print_meta: rope_finetuned   = unknown
0.00.287.704 I llm_load_print_meta: ssm_d_conv       = 0
0.00.287.704 I llm_load_print_meta: ssm_d_inner      = 0
0.00.287.704 I llm_load_print_meta: ssm_d_state      = 0
0.00.287.705 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.287.705 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.287.705 I llm_load_print_meta: model type       = 2B
0.00.287.706 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.287.706 I llm_load_print_meta: model params     = 2.51 B
0.00.287.707 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.287.707 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.287.708 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.287.708 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.287.708 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.287.709 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.287.709 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.287.709 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.287.710 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.287.711 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.287.711 I llm_load_print_meta: max token length = 93
0.00.343.192 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.348.413 I llama_new_context_with_model: n_seq_max     = 1
0.00.348.419 I llama_new_context_with_model: n_ctx         = 4096
0.00.348.419 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.348.420 I llama_new_context_with_model: n_batch       = 2048
0.00.348.420 I llama_new_context_with_model: n_ubatch      = 512
0.00.348.421 I llama_new_context_with_model: flash_attn    = 0
0.00.348.423 I llama_new_context_with_model: freq_base     = 10000.0
0.00.348.424 I llama_new_context_with_model: freq_scale    = 1
0.00.348.425 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.363.519 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.534 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.363.625 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.364.890 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.364.896 I llama_new_context_with_model: graph nodes  = 601
0.00.364.897 I llama_new_context_with_model: graph splits = 1
0.00.364.899 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.439.448 I main: llama threadpool init, n_threads = 4
0.00.439.463 I 
0.00.439.538 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.439.541 I 
0.00.439.590 I sampler seed: 2140638848
0.00.439.601 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.439.613 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.439.617 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.439.617 I 
 increasities. [end of text]


0.00.632.606 I llama_perf_sampler_print:    sampling time =       0.67 ms /     5 runs   (    0.13 ms per token,  7473.84 tokens per second)
0.00.632.608 I llama_perf_context_print:        load time =     438.67 ms
0.00.632.610 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.632.611 I llama_perf_context_print:        eval time =     189.84 ms /     4 runs   (   47.46 ms per token,    21.07 tokens per second)
0.00.632.625 I llama_perf_context_print:       total time =     193.17 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.746s
user	10m18.243s
sys	0m6.839s
