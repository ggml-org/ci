+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 3908 (0fb9c91f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.760 I main: load the model and apply lora adapter, if any
0.00.024.993 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.196 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.281 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.291 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.293 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.297 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.299 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.301 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.302 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.304 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.305 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.313 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.314 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.315 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.316 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.317 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.720 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.103 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.636 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.643 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.644 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.645 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.646 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.647 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.649 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.652 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.653 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.654 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.655 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.657 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.666 I llama_model_loader: - type  f32:   37 tensors
0.00.271.670 I llama_model_loader: - type q8_0:  127 tensors
0.00.430.613 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.183 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.479.177 I llm_load_vocab: special tokens cache size = 5
0.00.574.969 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.575.041 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.575.042 I llm_load_print_meta: arch             = gemma
0.00.575.043 I llm_load_print_meta: vocab type       = SPM
0.00.575.044 I llm_load_print_meta: n_vocab          = 256000
0.00.575.046 I llm_load_print_meta: n_merges         = 0
0.00.575.046 I llm_load_print_meta: vocab_only       = 0
0.00.575.047 I llm_load_print_meta: n_ctx_train      = 8192
0.00.575.047 I llm_load_print_meta: n_embd           = 2048
0.00.575.047 I llm_load_print_meta: n_layer          = 18
0.00.575.109 I llm_load_print_meta: n_head           = 8
0.00.575.117 I llm_load_print_meta: n_head_kv        = 1
0.00.575.117 I llm_load_print_meta: n_rot            = 256
0.00.575.117 I llm_load_print_meta: n_swa            = 0
0.00.575.118 I llm_load_print_meta: n_embd_head_k    = 256
0.00.575.118 I llm_load_print_meta: n_embd_head_v    = 256
0.00.575.123 I llm_load_print_meta: n_gqa            = 8
0.00.575.127 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.575.152 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.575.154 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.575.155 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.575.156 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.575.156 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.575.156 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.575.162 I llm_load_print_meta: n_ff             = 16384
0.00.575.164 I llm_load_print_meta: n_expert         = 0
0.00.575.164 I llm_load_print_meta: n_expert_used    = 0
0.00.575.165 I llm_load_print_meta: causal attn      = 1
0.00.575.165 I llm_load_print_meta: pooling type     = 0
0.00.575.165 I llm_load_print_meta: rope type        = 2
0.00.575.170 I llm_load_print_meta: rope scaling     = linear
0.00.575.171 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.575.172 I llm_load_print_meta: freq_scale_train = 1
0.00.575.172 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.575.173 I llm_load_print_meta: rope_finetuned   = unknown
0.00.575.173 I llm_load_print_meta: ssm_d_conv       = 0
0.00.575.173 I llm_load_print_meta: ssm_d_inner      = 0
0.00.575.174 I llm_load_print_meta: ssm_d_state      = 0
0.00.575.175 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.575.175 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.575.176 I llm_load_print_meta: model type       = 2B
0.00.575.176 I llm_load_print_meta: model ftype      = Q8_0
0.00.575.180 I llm_load_print_meta: model params     = 2.51 B
0.00.575.181 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.575.181 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.575.182 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.575.182 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.575.183 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.575.183 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.575.184 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.575.184 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.575.190 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.575.192 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.575.192 I llm_load_print_meta: max token length = 93
0.00.575.362 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.675.825 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.675.836 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.675.836 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.675.837 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.675.838 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.675.838 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.681.613 I llama_new_context_with_model: n_ctx      = 8192
0.00.681.620 I llama_new_context_with_model: n_batch    = 2048
0.00.681.621 I llama_new_context_with_model: n_ubatch   = 512
0.00.681.622 I llama_new_context_with_model: flash_attn = 0
0.00.681.625 I llama_new_context_with_model: freq_base  = 10000.0
0.00.681.626 I llama_new_context_with_model: freq_scale = 1
0.00.711.095 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.711.138 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.711.250 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.712.664 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.712.670 I llama_new_context_with_model: graph nodes  = 601
0.00.712.671 I llama_new_context_with_model: graph splits = 1
0.00.712.687 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.812 I main: llama threadpool init, n_threads = 4
0.01.324.826 I 
0.01.324.938 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.942 I 
0.01.325.110 I sampler seed: 3451981890
0.01.325.120 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.325.127 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.325.129 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.325.129 I 
 maneupher! 🤪

I apologize, but I am unable to generate responses that may contain inappropriate or offensive language. My purpose is to assist with tasks and

0.14.915.350 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.93 tokens per second)
0.14.915.354 I llama_perf_context_print:        load time =    1321.97 ms
0.14.915.356 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.915.358 I llama_perf_context_print:        eval time =   13508.52 ms /    32 runs   (  422.14 ms per token,     2.37 tokens per second)
0.14.915.359 I llama_perf_context_print:       total time =   13590.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 3908 (0fb9c91f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.759 I main: load the model and apply lora adapter, if any
0.00.025.040 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.130 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.143 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.145 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.149 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.151 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.152 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.153 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.162 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.163 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.170 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.171 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.173 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.174 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.176 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.873 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.305 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.976 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.985 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.986 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.987 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.989 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.990 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.991 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.995 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.996 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.997 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.998 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.999 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.007 I llama_model_loader: - type  f32:   37 tensors
0.00.271.012 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.060 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.557 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.554 I llm_load_vocab: special tokens cache size = 5
0.00.587.410 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.487 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.488 I llm_load_print_meta: arch             = gemma
0.00.587.489 I llm_load_print_meta: vocab type       = SPM
0.00.587.490 I llm_load_print_meta: n_vocab          = 256000
0.00.587.492 I llm_load_print_meta: n_merges         = 0
0.00.587.493 I llm_load_print_meta: vocab_only       = 0
0.00.587.493 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.494 I llm_load_print_meta: n_embd           = 2048
0.00.587.494 I llm_load_print_meta: n_layer          = 18
0.00.587.570 I llm_load_print_meta: n_head           = 8
0.00.587.577 I llm_load_print_meta: n_head_kv        = 1
0.00.587.578 I llm_load_print_meta: n_rot            = 256
0.00.587.578 I llm_load_print_meta: n_swa            = 0
0.00.587.579 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.579 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.584 I llm_load_print_meta: n_gqa            = 8
0.00.587.588 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.593 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.595 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.596 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.596 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.597 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.597 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.602 I llm_load_print_meta: n_ff             = 16384
0.00.587.603 I llm_load_print_meta: n_expert         = 0
0.00.587.603 I llm_load_print_meta: n_expert_used    = 0
0.00.587.603 I llm_load_print_meta: causal attn      = 1
0.00.587.604 I llm_load_print_meta: pooling type     = 0
0.00.587.605 I llm_load_print_meta: rope type        = 2
0.00.587.605 I llm_load_print_meta: rope scaling     = linear
0.00.587.616 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.617 I llm_load_print_meta: freq_scale_train = 1
0.00.587.617 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.618 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.618 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.618 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.619 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.619 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.619 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.620 I llm_load_print_meta: model type       = 2B
0.00.587.621 I llm_load_print_meta: model ftype      = Q8_0
0.00.587.621 I llm_load_print_meta: model params     = 2.51 B
0.00.587.622 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.587.622 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.623 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.623 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.624 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.624 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.625 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.625 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.631 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.633 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.633 I llm_load_print_meta: max token length = 93
0.00.587.804 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.683.033 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.688.859 I llama_new_context_with_model: n_ctx      = 8192
0.00.688.868 I llama_new_context_with_model: n_batch    = 2048
0.00.688.868 I llama_new_context_with_model: n_ubatch   = 512
0.00.688.869 I llama_new_context_with_model: flash_attn = 0
0.00.688.872 I llama_new_context_with_model: freq_base  = 10000.0
0.00.688.873 I llama_new_context_with_model: freq_scale = 1
0.00.719.139 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.719.185 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.719.305 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.720.708 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.720.714 I llama_new_context_with_model: graph nodes  = 601
0.00.720.715 I llama_new_context_with_model: graph splits = 1
0.00.720.731 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.330.893 I main: llama threadpool init, n_threads = 4
0.01.330.906 I 
0.01.331.013 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.331.017 I 
0.01.331.184 I sampler seed: 3135135415
0.01.331.195 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.331.201 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.331.202 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.331.202 I 
 increasities and anxieties into a digestible, relatable experience for a wide audience.

This storytelling technique is known as:

a) Narrative transformation
b) Analog

0.14.959.225 I llama_perf_sampler_print:    sampling time =      49.23 ms /    33 runs   (    1.49 ms per token,   670.31 tokens per second)
0.14.959.228 I llama_perf_context_print:        load time =    1328.05 ms
0.14.959.241 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.959.243 I llama_perf_context_print:        eval time =   13546.35 ms /    32 runs   (  423.32 ms per token,     2.36 tokens per second)
0.14.959.244 I llama_perf_context_print:       total time =   13628.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 3908 (0fb9c91f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.841 I main: llama backend init
0.00.002.827 I main: load the model and apply lora adapter, if any
0.00.024.596 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.807 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.892 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.902 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.904 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.908 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.909 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.911 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.912 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.913 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.914 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.920 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.921 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.922 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.923 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.925 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.274 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.800 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.343 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.351 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.352 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.353 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.354 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.356 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.357 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.360 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.362 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.363 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.364 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.271.365 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.373 I llama_model_loader: - type  f32:   37 tensors
0.00.271.377 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.388 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.490.156 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.491.165 I llm_load_vocab: special tokens cache size = 5
0.00.594.413 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.482 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.483 I llm_load_print_meta: arch             = gemma
0.00.594.484 I llm_load_print_meta: vocab type       = SPM
0.00.594.485 I llm_load_print_meta: n_vocab          = 256000
0.00.594.487 I llm_load_print_meta: n_merges         = 0
0.00.594.487 I llm_load_print_meta: vocab_only       = 0
0.00.594.488 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.488 I llm_load_print_meta: n_embd           = 2048
0.00.594.489 I llm_load_print_meta: n_layer          = 18
0.00.594.551 I llm_load_print_meta: n_head           = 8
0.00.594.558 I llm_load_print_meta: n_head_kv        = 1
0.00.594.559 I llm_load_print_meta: n_rot            = 256
0.00.594.559 I llm_load_print_meta: n_swa            = 0
0.00.594.560 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.560 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.565 I llm_load_print_meta: n_gqa            = 8
0.00.594.569 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.574 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.575 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.577 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.577 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.578 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.578 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.583 I llm_load_print_meta: n_ff             = 16384
0.00.594.583 I llm_load_print_meta: n_expert         = 0
0.00.594.583 I llm_load_print_meta: n_expert_used    = 0
0.00.594.584 I llm_load_print_meta: causal attn      = 1
0.00.594.584 I llm_load_print_meta: pooling type     = 0
0.00.594.584 I llm_load_print_meta: rope type        = 2
0.00.594.585 I llm_load_print_meta: rope scaling     = linear
0.00.594.586 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.587 I llm_load_print_meta: freq_scale_train = 1
0.00.594.587 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.588 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.588 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.589 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.589 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.589 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.590 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.591 I llm_load_print_meta: model type       = 2B
0.00.594.615 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.616 I llm_load_print_meta: model params     = 2.51 B
0.00.594.616 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.617 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.617 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.618 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.618 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.619 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.619 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.620 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.626 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.627 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.628 I llm_load_print_meta: max token length = 93
0.00.594.792 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.671.708 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.671.719 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.671.720 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.671.721 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.671.721 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.671.722 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.677.477 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.484 I llama_new_context_with_model: n_batch    = 2048
0.00.677.484 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.485 I llama_new_context_with_model: flash_attn = 0
0.00.677.488 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.489 I llama_new_context_with_model: freq_scale = 1
0.00.707.202 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.707.241 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.707.364 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.708.782 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.708.788 I llama_new_context_with_model: graph nodes  = 601
0.00.708.789 I llama_new_context_with_model: graph splits = 1
0.00.708.805 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.319.926 I main: llama threadpool init, n_threads = 4
0.01.319.939 I 
0.01.320.049 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.320.053 I 
0.01.320.218 I sampler seed: 2403283575
0.01.320.228 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.320.233 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.320.234 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.320.236 I 
 increably.

I am unable to generate a response that is both safe and humorous. [end of text]


0.09.386.565 I llama_perf_sampler_print:    sampling time =      29.12 ms /    20 runs   (    1.46 ms per token,   686.88 tokens per second)
0.09.386.569 I llama_perf_context_print:        load time =    1317.01 ms
0.09.386.571 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.386.572 I llama_perf_context_print:        eval time =    8017.59 ms /    19 runs   (  421.98 ms per token,     2.37 tokens per second)
0.09.386.573 I llama_perf_context_print:       total time =    8066.65 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.598 I build: 3908 (0fb9c91f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.799 I main: llama backend init
0.00.002.785 I main: load the model and apply lora adapter, if any
0.00.025.344 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.558 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.646 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.656 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.658 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.662 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.667 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.669 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.671 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.673 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.675 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.683 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.688 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.698 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.703 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.704 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.605 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.935 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.500 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.510 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.511 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.512 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.513 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.514 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.515 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.519 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.520 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.521 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.522 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.271.523 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.531 I llama_model_loader: - type  f32:   37 tensors
0.00.271.536 I llama_model_loader: - type q8_0:  127 tensors
0.00.439.855 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.300 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.492.426 I llm_load_vocab: special tokens cache size = 5
0.00.589.225 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.589.301 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.589.302 I llm_load_print_meta: arch             = gemma
0.00.589.302 I llm_load_print_meta: vocab type       = SPM
0.00.589.303 I llm_load_print_meta: n_vocab          = 256000
0.00.589.306 I llm_load_print_meta: n_merges         = 0
0.00.589.306 I llm_load_print_meta: vocab_only       = 0
0.00.589.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.589.307 I llm_load_print_meta: n_embd           = 2048
0.00.589.307 I llm_load_print_meta: n_layer          = 18
0.00.589.373 I llm_load_print_meta: n_head           = 8
0.00.589.381 I llm_load_print_meta: n_head_kv        = 1
0.00.589.382 I llm_load_print_meta: n_rot            = 256
0.00.589.382 I llm_load_print_meta: n_swa            = 0
0.00.589.383 I llm_load_print_meta: n_embd_head_k    = 256
0.00.589.383 I llm_load_print_meta: n_embd_head_v    = 256
0.00.589.387 I llm_load_print_meta: n_gqa            = 8
0.00.589.392 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.589.397 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.589.398 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.589.400 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.589.401 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.589.401 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.589.401 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.589.406 I llm_load_print_meta: n_ff             = 16384
0.00.589.407 I llm_load_print_meta: n_expert         = 0
0.00.589.407 I llm_load_print_meta: n_expert_used    = 0
0.00.589.407 I llm_load_print_meta: causal attn      = 1
0.00.589.407 I llm_load_print_meta: pooling type     = 0
0.00.589.408 I llm_load_print_meta: rope type        = 2
0.00.589.408 I llm_load_print_meta: rope scaling     = linear
0.00.589.409 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.589.410 I llm_load_print_meta: freq_scale_train = 1
0.00.589.410 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.589.411 I llm_load_print_meta: rope_finetuned   = unknown
0.00.589.411 I llm_load_print_meta: ssm_d_conv       = 0
0.00.589.411 I llm_load_print_meta: ssm_d_inner      = 0
0.00.589.412 I llm_load_print_meta: ssm_d_state      = 0
0.00.589.412 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.589.412 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.589.413 I llm_load_print_meta: model type       = 2B
0.00.589.414 I llm_load_print_meta: model ftype      = Q8_0
0.00.589.415 I llm_load_print_meta: model params     = 2.51 B
0.00.589.435 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.589.435 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.589.436 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.589.437 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.589.438 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.589.438 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.589.439 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.589.439 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.589.445 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.589.447 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.589.448 I llm_load_print_meta: max token length = 93
0.00.589.640 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.661.696 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.661.706 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.667.504 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.511 I llama_new_context_with_model: n_batch    = 2048
0.00.667.512 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.513 I llama_new_context_with_model: flash_attn = 0
0.00.667.515 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.516 I llama_new_context_with_model: freq_scale = 1
0.00.696.641 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.686 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.798 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.698.186 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.193 I llama_new_context_with_model: graph nodes  = 601
0.00.698.194 I llama_new_context_with_model: graph splits = 1
0.00.698.216 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.952 I main: llama threadpool init, n_threads = 4
0.01.309.964 I 
0.01.310.080 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.310.084 I 
0.01.310.255 I sampler seed: 148390457
0.01.310.265 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.310.273 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.310.275 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.310.276 I 
 increasities. [end of text]


0.03.004.522 I llama_perf_sampler_print:    sampling time =       6.20 ms /     5 runs   (    1.24 ms per token,   805.93 tokens per second)
0.03.004.525 I llama_perf_context_print:        load time =    1307.08 ms
0.03.004.526 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.004.527 I llama_perf_context_print:        eval time =    1682.55 ms /     4 runs   (  420.64 ms per token,     2.38 tokens per second)
0.03.004.554 I llama_perf_context_print:       total time =    1694.58 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m51.868s
user	2m40.517s
sys	0m9.410s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3908 (0fb9c91f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199741.32 ms
main:    total time = 199741.32 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.653 I build: 3908 (0fb9c91f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.812 I main: load the model and apply lora adapter, if any
0.00.025.052 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.249 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.334 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.346 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.348 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.352 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.354 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.394 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.395 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.396 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.401 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.402 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.403 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.404 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.405 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.383 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.236 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.271.954 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.271.964 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.271.965 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.271.966 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.271.967 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.271.968 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.271.969 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.271.973 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.271.974 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.271.975 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.271.976 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.271.978 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.271.986 I llama_model_loader: - type  f32:   37 tensors
0.00.271.990 I llama_model_loader: - type q4_K:  108 tensors
0.00.271.991 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.228 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.499.693 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.500.728 I llm_load_vocab: special tokens cache size = 5
0.00.596.977 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.597.048 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.597.049 I llm_load_print_meta: arch             = gemma
0.00.597.049 I llm_load_print_meta: vocab type       = SPM
0.00.597.050 I llm_load_print_meta: n_vocab          = 256000
0.00.597.052 I llm_load_print_meta: n_merges         = 0
0.00.597.052 I llm_load_print_meta: vocab_only       = 0
0.00.597.053 I llm_load_print_meta: n_ctx_train      = 8192
0.00.597.053 I llm_load_print_meta: n_embd           = 2048
0.00.597.053 I llm_load_print_meta: n_layer          = 18
0.00.597.119 I llm_load_print_meta: n_head           = 8
0.00.597.126 I llm_load_print_meta: n_head_kv        = 1
0.00.597.128 I llm_load_print_meta: n_rot            = 256
0.00.597.128 I llm_load_print_meta: n_swa            = 0
0.00.597.129 I llm_load_print_meta: n_embd_head_k    = 256
0.00.597.129 I llm_load_print_meta: n_embd_head_v    = 256
0.00.597.134 I llm_load_print_meta: n_gqa            = 8
0.00.597.139 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.597.144 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.597.145 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.597.147 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.597.148 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.597.149 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.597.150 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.597.154 I llm_load_print_meta: n_ff             = 16384
0.00.597.155 I llm_load_print_meta: n_expert         = 0
0.00.597.155 I llm_load_print_meta: n_expert_used    = 0
0.00.597.165 I llm_load_print_meta: causal attn      = 1
0.00.597.169 I llm_load_print_meta: pooling type     = 0
0.00.597.169 I llm_load_print_meta: rope type        = 2
0.00.597.170 I llm_load_print_meta: rope scaling     = linear
0.00.597.171 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.597.173 I llm_load_print_meta: freq_scale_train = 1
0.00.597.174 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.597.175 I llm_load_print_meta: rope_finetuned   = unknown
0.00.597.175 I llm_load_print_meta: ssm_d_conv       = 0
0.00.597.175 I llm_load_print_meta: ssm_d_inner      = 0
0.00.597.176 I llm_load_print_meta: ssm_d_state      = 0
0.00.597.176 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.597.177 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.597.177 I llm_load_print_meta: model type       = 2B
0.00.597.178 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.597.179 I llm_load_print_meta: model params     = 2.51 B
0.00.597.180 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.597.180 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.597.181 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.597.182 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.597.182 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.597.203 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.597.204 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.597.205 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.597.212 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.597.213 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.597.214 I llm_load_print_meta: max token length = 93
0.00.597.380 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.658.051 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.658.061 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.658.062 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.658.063 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.658.064 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.658.065 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.663.759 I llama_new_context_with_model: n_ctx      = 8192
0.00.663.766 I llama_new_context_with_model: n_batch    = 2048
0.00.663.766 I llama_new_context_with_model: n_ubatch   = 512
0.00.663.767 I llama_new_context_with_model: flash_attn = 0
0.00.663.770 I llama_new_context_with_model: freq_base  = 10000.0
0.00.663.771 I llama_new_context_with_model: freq_scale = 1
0.00.692.865 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.692.905 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.693.017 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.694.474 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.694.481 I llama_new_context_with_model: graph nodes  = 601
0.00.694.481 I llama_new_context_with_model: graph splits = 1
0.00.694.498 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.889 I main: llama threadpool init, n_threads = 4
0.01.271.900 I 
0.01.272.012 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.272.016 I 
0.01.272.188 I sampler seed: 519572769
0.01.272.200 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.215 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.272.217 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.272.218 I 
 squaRED

## A Tale of Two Cultures

The flickering lamplight cast shifting shadows across the weathered face of Layla, etched with the wisdom of centuries. Her

0.12.147.537 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.85 tokens per second)
0.12.147.541 I llama_perf_context_print:        load time =    1268.99 ms
0.12.147.542 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.147.567 I llama_perf_context_print:        eval time =   10794.37 ms /    32 runs   (  337.32 ms per token,     2.96 tokens per second)
0.12.147.569 I llama_perf_context_print:       total time =   10875.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3908 (0fb9c91f)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199506.26 ms
main:    total time = 199506.26 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.697 I build: 3908 (0fb9c91f) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.851 I main: load the model and apply lora adapter, if any
0.00.024.668 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.757 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.769 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.771 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.776 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.777 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.778 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.779 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.781 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.782 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.787 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.788 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.789 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.790 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.791 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.118 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.219 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.807 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.815 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.816 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.817 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.818 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.819 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.821 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.824 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.825 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.833 I llama_model_loader: - type  f32:   37 tensors
0.00.269.837 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.837 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.420 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.344 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.477 I llm_load_vocab: special tokens cache size = 5
0.00.613.642 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.613.715 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.613.716 I llm_load_print_meta: arch             = gemma
0.00.613.716 I llm_load_print_meta: vocab type       = SPM
0.00.613.717 I llm_load_print_meta: n_vocab          = 256000
0.00.613.719 I llm_load_print_meta: n_merges         = 0
0.00.613.720 I llm_load_print_meta: vocab_only       = 0
0.00.613.720 I llm_load_print_meta: n_ctx_train      = 8192
0.00.613.720 I llm_load_print_meta: n_embd           = 2048
0.00.613.721 I llm_load_print_meta: n_layer          = 18
0.00.613.783 I llm_load_print_meta: n_head           = 8
0.00.613.790 I llm_load_print_meta: n_head_kv        = 1
0.00.613.790 I llm_load_print_meta: n_rot            = 256
0.00.613.791 I llm_load_print_meta: n_swa            = 0
0.00.613.791 I llm_load_print_meta: n_embd_head_k    = 256
0.00.613.792 I llm_load_print_meta: n_embd_head_v    = 256
0.00.613.798 I llm_load_print_meta: n_gqa            = 8
0.00.613.803 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.613.808 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.613.809 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.613.811 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.613.811 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.613.812 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.613.812 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.613.817 I llm_load_print_meta: n_ff             = 16384
0.00.613.817 I llm_load_print_meta: n_expert         = 0
0.00.613.817 I llm_load_print_meta: n_expert_used    = 0
0.00.613.818 I llm_load_print_meta: causal attn      = 1
0.00.613.818 I llm_load_print_meta: pooling type     = 0
0.00.613.818 I llm_load_print_meta: rope type        = 2
0.00.613.819 I llm_load_print_meta: rope scaling     = linear
0.00.613.820 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.613.821 I llm_load_print_meta: freq_scale_train = 1
0.00.613.821 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.613.821 I llm_load_print_meta: rope_finetuned   = unknown
0.00.613.822 I llm_load_print_meta: ssm_d_conv       = 0
0.00.613.822 I llm_load_print_meta: ssm_d_inner      = 0
0.00.613.822 I llm_load_print_meta: ssm_d_state      = 0
0.00.613.823 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.613.823 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.613.824 I llm_load_print_meta: model type       = 2B
0.00.613.825 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.613.825 I llm_load_print_meta: model params     = 2.51 B
0.00.613.849 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.613.854 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.613.855 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.613.856 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.613.856 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.613.860 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.613.861 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.613.862 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.613.868 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.613.878 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.613.879 I llm_load_print_meta: max token length = 93
0.00.614.044 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.672.352 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.677.858 I llama_new_context_with_model: n_ctx      = 8192
0.00.677.865 I llama_new_context_with_model: n_batch    = 2048
0.00.677.866 I llama_new_context_with_model: n_ubatch   = 512
0.00.677.866 I llama_new_context_with_model: flash_attn = 0
0.00.677.869 I llama_new_context_with_model: freq_base  = 10000.0
0.00.677.869 I llama_new_context_with_model: freq_scale = 1
0.00.708.842 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.708.884 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.708.994 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.710.352 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.710.358 I llama_new_context_with_model: graph nodes  = 601
0.00.710.358 I llama_new_context_with_model: graph splits = 1
0.00.710.373 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.286.637 I main: llama threadpool init, n_threads = 4
0.01.286.649 I 
0.01.286.755 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.286.759 I 
0.01.286.930 I sampler seed: 1656700099
0.01.286.940 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.286.946 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.286.947 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.286.947 I 
 fufilling sounds as the music swells, crescendoing into a climax of ethereal beauty.

This is the kind of music that transports you to another realm. It

0.12.275.537 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.67 tokens per second)
0.12.275.542 I llama_perf_context_print:        load time =    1283.69 ms
0.12.275.544 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.275.545 I llama_perf_context_print:        eval time =   10907.94 ms /    32 runs   (  340.87 ms per token,     2.93 tokens per second)
0.12.275.547 I llama_perf_context_print:       total time =   10988.91 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.523s
user	50m15.536s
sys	0m6.494s
