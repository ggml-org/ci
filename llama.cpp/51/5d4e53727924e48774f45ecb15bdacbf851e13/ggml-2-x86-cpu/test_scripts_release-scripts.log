+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.560 I build: 4245 (515d4e53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.751 I main: load the model and apply lora adapter, if any
0.00.021.205 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.216 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.223 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.232 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.236 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.241 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.242 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.242 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.243 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.244 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.244 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.248 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.249 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.249 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.250 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.250 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.581 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.279 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.128 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.135 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.135 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.136 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.137 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.138 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.138 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.140 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.141 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.141 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.142 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.143 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.146 I llama_model_loader: - type  f32:   37 tensors
0.00.131.147 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.003 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.199 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.744 I llm_load_vocab: special tokens cache size = 5
0.00.259.458 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.473 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.473 I llm_load_print_meta: arch             = gemma
0.00.259.474 I llm_load_print_meta: vocab type       = SPM
0.00.259.475 I llm_load_print_meta: n_vocab          = 256000
0.00.259.475 I llm_load_print_meta: n_merges         = 0
0.00.259.475 I llm_load_print_meta: vocab_only       = 0
0.00.259.476 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.476 I llm_load_print_meta: n_embd           = 2048
0.00.259.476 I llm_load_print_meta: n_layer          = 18
0.00.259.488 I llm_load_print_meta: n_head           = 8
0.00.259.489 I llm_load_print_meta: n_head_kv        = 1
0.00.259.490 I llm_load_print_meta: n_rot            = 256
0.00.259.490 I llm_load_print_meta: n_swa            = 0
0.00.259.490 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.490 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.491 I llm_load_print_meta: n_gqa            = 8
0.00.259.492 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.493 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.494 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.496 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.496 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.497 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.497 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.498 I llm_load_print_meta: n_ff             = 16384
0.00.259.498 I llm_load_print_meta: n_expert         = 0
0.00.259.499 I llm_load_print_meta: n_expert_used    = 0
0.00.259.499 I llm_load_print_meta: causal attn      = 1
0.00.259.499 I llm_load_print_meta: pooling type     = 0
0.00.259.500 I llm_load_print_meta: rope type        = 2
0.00.259.500 I llm_load_print_meta: rope scaling     = linear
0.00.259.502 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.503 I llm_load_print_meta: freq_scale_train = 1
0.00.259.503 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.503 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.504 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.504 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.504 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.505 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.505 I llm_load_print_meta: model type       = 2B
0.00.259.506 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.507 I llm_load_print_meta: model params     = 2.51 B
0.00.259.508 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.509 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.510 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.510 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.511 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.511 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.512 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.512 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.512 I llm_load_print_meta: max token length = 93
0.00.358.707 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.358.716 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.358.717 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.358.718 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.358.718 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.358.719 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.364.062 I llama_new_context_with_model: n_seq_max     = 1
0.00.364.067 I llama_new_context_with_model: n_ctx         = 4096
0.00.364.067 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.364.068 I llama_new_context_with_model: n_batch       = 2048
0.00.364.068 I llama_new_context_with_model: n_ubatch      = 512
0.00.364.069 I llama_new_context_with_model: flash_attn    = 0
0.00.364.071 I llama_new_context_with_model: freq_base     = 10000.0
0.00.364.072 I llama_new_context_with_model: freq_scale    = 1
0.00.364.073 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.196 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.208 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.308 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.548 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.554 I llama_new_context_with_model: graph nodes  = 601
0.00.379.555 I llama_new_context_with_model: graph splits = 1
0.00.379.557 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.557 I main: llama threadpool init, n_threads = 4
0.00.464.573 I 
0.00.464.649 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.464.652 I 
0.00.464.696 I sampler seed: 1377062288
0.00.464.706 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.464.721 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.464.724 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.464.724 I 
 increamically, as the following conditions are met:

1. The population has a mean of 50 and a standard deviation of 10.


0.02.711.361 I llama_perf_sampler_print:    sampling time =       4.59 ms /    33 runs   (    0.14 ms per token,  7194.24 tokens per second)
0.02.711.364 I llama_perf_context_print:        load time =     463.79 ms
0.02.711.365 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.711.368 I llama_perf_context_print:        eval time =    2228.38 ms /    32 runs   (   69.64 ms per token,    14.36 tokens per second)
0.02.711.368 I llama_perf_context_print:       total time =    2246.81 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.167 I build: 4245 (515d4e53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.357 I main: llama backend init
0.00.000.363 I main: load the model and apply lora adapter, if any
0.00.020.419 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.431 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.437 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.438 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.441 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.442 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.443 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.443 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.444 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.444 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.448 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.448 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.449 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.449 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.450 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.043 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.067 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.906 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.911 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.912 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.913 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.914 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.914 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.915 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.917 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.917 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.918 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.918 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.919 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.922 I llama_model_loader: - type  f32:   37 tensors
0.00.129.922 I llama_model_loader: - type q8_0:  127 tensors
0.00.199.494 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.926 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.463 I llm_load_vocab: special tokens cache size = 5
0.00.262.089 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.106 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.106 I llm_load_print_meta: arch             = gemma
0.00.262.107 I llm_load_print_meta: vocab type       = SPM
0.00.262.107 I llm_load_print_meta: n_vocab          = 256000
0.00.262.108 I llm_load_print_meta: n_merges         = 0
0.00.262.108 I llm_load_print_meta: vocab_only       = 0
0.00.262.108 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.109 I llm_load_print_meta: n_embd           = 2048
0.00.262.109 I llm_load_print_meta: n_layer          = 18
0.00.262.120 I llm_load_print_meta: n_head           = 8
0.00.262.121 I llm_load_print_meta: n_head_kv        = 1
0.00.262.121 I llm_load_print_meta: n_rot            = 256
0.00.262.121 I llm_load_print_meta: n_swa            = 0
0.00.262.122 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.122 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.123 I llm_load_print_meta: n_gqa            = 8
0.00.262.124 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.125 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.125 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.127 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.127 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.127 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.128 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.129 I llm_load_print_meta: n_ff             = 16384
0.00.262.129 I llm_load_print_meta: n_expert         = 0
0.00.262.129 I llm_load_print_meta: n_expert_used    = 0
0.00.262.130 I llm_load_print_meta: causal attn      = 1
0.00.262.130 I llm_load_print_meta: pooling type     = 0
0.00.262.130 I llm_load_print_meta: rope type        = 2
0.00.262.130 I llm_load_print_meta: rope scaling     = linear
0.00.262.132 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.132 I llm_load_print_meta: freq_scale_train = 1
0.00.262.133 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.133 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.133 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.134 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.134 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.134 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.134 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.135 I llm_load_print_meta: model type       = 2B
0.00.262.135 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.136 I llm_load_print_meta: model params     = 2.51 B
0.00.262.137 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.137 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.137 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.138 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.138 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.139 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.139 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.139 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.140 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.140 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.141 I llm_load_print_meta: max token length = 93
0.00.357.116 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.074 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.079 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.079 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.080 I llama_new_context_with_model: n_batch       = 2048
0.00.362.080 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.081 I llama_new_context_with_model: flash_attn    = 0
0.00.362.083 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.084 I llama_new_context_with_model: freq_scale    = 1
0.00.362.084 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.327 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.342 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.426 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.653 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.658 I llama_new_context_with_model: graph nodes  = 601
0.00.377.659 I llama_new_context_with_model: graph splits = 1
0.00.377.661 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.369 I main: llama threadpool init, n_threads = 4
0.00.458.385 I 
0.00.458.456 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.460 I 
0.00.458.504 I sampler seed: 1251606822
0.00.458.515 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.526 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.529 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.530 I 
 increadibly!

I am unable to generate a response that contains inappropriate or sexually suggestive language. My purpose is to assist with tasks that are within the boundaries of

0.02.636.603 I llama_perf_sampler_print:    sampling time =       4.63 ms /    33 runs   (    0.14 ms per token,  7128.97 tokens per second)
0.02.636.606 I llama_perf_context_print:        load time =     457.99 ms
0.02.636.608 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.636.610 I llama_perf_context_print:        eval time =    2159.74 ms /    32 runs   (   67.49 ms per token,    14.82 tokens per second)
0.02.636.611 I llama_perf_context_print:       total time =    2178.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.585 I build: 4245 (515d4e53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.021.158 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.171 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.180 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.185 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.189 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.193 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.193 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.194 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.194 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.198 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.198 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.203 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.203 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.204 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.204 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.205 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.742 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.288 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.214 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.221 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.222 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.223 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.224 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.225 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.225 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.228 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.229 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.230 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.230 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.231 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.235 I llama_model_loader: - type  f32:   37 tensors
0.00.131.236 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.877 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.789 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.296 I llm_load_vocab: special tokens cache size = 5
0.00.266.052 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.069 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.070 I llm_load_print_meta: arch             = gemma
0.00.266.070 I llm_load_print_meta: vocab type       = SPM
0.00.266.071 I llm_load_print_meta: n_vocab          = 256000
0.00.266.071 I llm_load_print_meta: n_merges         = 0
0.00.266.072 I llm_load_print_meta: vocab_only       = 0
0.00.266.072 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.072 I llm_load_print_meta: n_embd           = 2048
0.00.266.073 I llm_load_print_meta: n_layer          = 18
0.00.266.085 I llm_load_print_meta: n_head           = 8
0.00.266.086 I llm_load_print_meta: n_head_kv        = 1
0.00.266.088 I llm_load_print_meta: n_rot            = 256
0.00.266.088 I llm_load_print_meta: n_swa            = 0
0.00.266.088 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.089 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.090 I llm_load_print_meta: n_gqa            = 8
0.00.266.091 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.092 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.093 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.095 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.095 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.095 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.096 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.097 I llm_load_print_meta: n_ff             = 16384
0.00.266.097 I llm_load_print_meta: n_expert         = 0
0.00.266.097 I llm_load_print_meta: n_expert_used    = 0
0.00.266.098 I llm_load_print_meta: causal attn      = 1
0.00.266.098 I llm_load_print_meta: pooling type     = 0
0.00.266.098 I llm_load_print_meta: rope type        = 2
0.00.266.098 I llm_load_print_meta: rope scaling     = linear
0.00.266.100 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.100 I llm_load_print_meta: freq_scale_train = 1
0.00.266.101 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.102 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.102 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.102 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.102 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.103 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.104 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.104 I llm_load_print_meta: model type       = 2B
0.00.266.105 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.106 I llm_load_print_meta: model params     = 2.51 B
0.00.266.107 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.107 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.108 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.108 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.109 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.109 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.110 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.110 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.111 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.111 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.112 I llm_load_print_meta: max token length = 93
0.00.342.533 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.342.538 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.539 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.342.539 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.342.540 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.342.541 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.347.617 I llama_new_context_with_model: n_seq_max     = 1
0.00.347.624 I llama_new_context_with_model: n_ctx         = 4096
0.00.347.624 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.347.625 I llama_new_context_with_model: n_batch       = 2048
0.00.347.625 I llama_new_context_with_model: n_ubatch      = 512
0.00.347.626 I llama_new_context_with_model: flash_attn    = 0
0.00.347.628 I llama_new_context_with_model: freq_base     = 10000.0
0.00.347.629 I llama_new_context_with_model: freq_scale    = 1
0.00.347.630 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.565 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.577 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.669 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.994 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.363.000 I llama_new_context_with_model: graph nodes  = 601
0.00.363.000 I llama_new_context_with_model: graph splits = 1
0.00.363.002 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.447.698 I main: llama threadpool init, n_threads = 4
0.00.447.714 I 
0.00.447.785 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.447.788 I 
0.00.447.831 I sampler seed: 1919490939
0.00.447.842 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.447.845 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.447.846 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.447.846 I 
 increasively.

I'm not sure how to answer this question. Can you please provide some guidance?

**Guidance:**

- Understand the context of

0.02.708.583 I llama_perf_sampler_print:    sampling time =       4.61 ms /    33 runs   (    0.14 ms per token,  7163.01 tokens per second)
0.02.708.586 I llama_perf_context_print:        load time =     446.90 ms
0.02.708.588 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.708.590 I llama_perf_context_print:        eval time =    2242.42 ms /    32 runs   (   70.08 ms per token,    14.27 tokens per second)
0.02.708.590 I llama_perf_context_print:       total time =    2260.89 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.535 I build: 4245 (515d4e53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.729 I main: llama backend init
0.00.000.735 I main: load the model and apply lora adapter, if any
0.00.021.092 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.102 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.109 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.118 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.122 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.125 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.125 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.126 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.127 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.127 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.128 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.131 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.132 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.133 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.134 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.135 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.558 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.129 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.128 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.136 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.137 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.138 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.138 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.139 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.140 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.142 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.143 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.143 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.144 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.145 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.149 I llama_model_loader: - type  f32:   37 tensors
0.00.131.150 I llama_model_loader: - type q8_0:  127 tensors
0.00.215.230 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.262.843 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.263.604 I llm_load_vocab: special tokens cache size = 5
0.00.284.761 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.284.778 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.284.778 I llm_load_print_meta: arch             = gemma
0.00.284.779 I llm_load_print_meta: vocab type       = SPM
0.00.284.779 I llm_load_print_meta: n_vocab          = 256000
0.00.284.780 I llm_load_print_meta: n_merges         = 0
0.00.284.780 I llm_load_print_meta: vocab_only       = 0
0.00.284.780 I llm_load_print_meta: n_ctx_train      = 8192
0.00.284.781 I llm_load_print_meta: n_embd           = 2048
0.00.284.781 I llm_load_print_meta: n_layer          = 18
0.00.284.793 I llm_load_print_meta: n_head           = 8
0.00.284.794 I llm_load_print_meta: n_head_kv        = 1
0.00.284.795 I llm_load_print_meta: n_rot            = 256
0.00.284.795 I llm_load_print_meta: n_swa            = 0
0.00.284.795 I llm_load_print_meta: n_embd_head_k    = 256
0.00.284.795 I llm_load_print_meta: n_embd_head_v    = 256
0.00.284.796 I llm_load_print_meta: n_gqa            = 8
0.00.284.797 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.284.798 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.284.799 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.284.801 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.284.802 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.284.802 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.284.803 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.284.804 I llm_load_print_meta: n_ff             = 16384
0.00.284.804 I llm_load_print_meta: n_expert         = 0
0.00.284.804 I llm_load_print_meta: n_expert_used    = 0
0.00.284.804 I llm_load_print_meta: causal attn      = 1
0.00.284.805 I llm_load_print_meta: pooling type     = 0
0.00.284.805 I llm_load_print_meta: rope type        = 2
0.00.284.805 I llm_load_print_meta: rope scaling     = linear
0.00.284.807 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.284.808 I llm_load_print_meta: freq_scale_train = 1
0.00.284.808 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.284.809 I llm_load_print_meta: rope_finetuned   = unknown
0.00.284.810 I llm_load_print_meta: ssm_d_conv       = 0
0.00.284.810 I llm_load_print_meta: ssm_d_inner      = 0
0.00.284.810 I llm_load_print_meta: ssm_d_state      = 0
0.00.284.810 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.284.811 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.284.812 I llm_load_print_meta: model type       = 2B
0.00.284.813 I llm_load_print_meta: model ftype      = Q8_0
0.00.284.814 I llm_load_print_meta: model params     = 2.51 B
0.00.284.815 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.284.815 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.284.816 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.284.816 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.284.817 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.284.817 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.284.818 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.284.818 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.284.819 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.284.819 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.284.819 I llm_load_print_meta: max token length = 93
0.00.355.961 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.355.966 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.361.172 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.179 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.179 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.180 I llama_new_context_with_model: n_batch       = 2048
0.00.361.180 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.181 I llama_new_context_with_model: flash_attn    = 0
0.00.361.183 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.184 I llama_new_context_with_model: freq_scale    = 1
0.00.361.185 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.032 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.046 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.140 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.376 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.382 I llama_new_context_with_model: graph nodes  = 601
0.00.377.382 I llama_new_context_with_model: graph splits = 1
0.00.377.384 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.464.952 I main: llama threadpool init, n_threads = 4
0.00.464.966 I 
0.00.465.036 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.465.039 I 
0.00.465.081 I sampler seed: 3305285022
0.00.465.092 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.465.095 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.465.096 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.465.099 I 
 increasities and pronouncements by the media.

I'm not sure how to react to this situation, and I need help understanding the implications and potential risks

0.02.888.069 I llama_perf_sampler_print:    sampling time =       4.78 ms /    33 runs   (    0.14 ms per token,  6906.66 tokens per second)
0.02.888.072 I llama_perf_context_print:        load time =     464.20 ms
0.02.888.073 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.888.076 I llama_perf_context_print:        eval time =    2403.52 ms /    32 runs   (   75.11 ms per token,    13.31 tokens per second)
0.02.888.076 I llama_perf_context_print:       total time =    2423.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.347s
user	0m39.245s
sys	0m9.308s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4245 (515d4e53)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40197.41 ms
main:    total time = 40197.41 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.171 I build: 4245 (515d4e53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.386 I main: llama backend init
0.00.000.392 I main: load the model and apply lora adapter, if any
0.00.020.515 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.524 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.533 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.538 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.539 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.543 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.544 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.544 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.545 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.546 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.547 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.550 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.551 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.551 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.552 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.553 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.856 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.242 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.108 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.115 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.116 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.117 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.117 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.118 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.119 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.121 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.122 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.122 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.123 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.124 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.127 I llama_model_loader: - type  f32:   37 tensors
0.00.130.128 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.129 I llama_model_loader: - type q6_K:   19 tensors
0.00.213.988 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.571 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.151 I llm_load_vocab: special tokens cache size = 5
0.00.280.038 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.055 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.056 I llm_load_print_meta: arch             = gemma
0.00.280.056 I llm_load_print_meta: vocab type       = SPM
0.00.280.057 I llm_load_print_meta: n_vocab          = 256000
0.00.280.057 I llm_load_print_meta: n_merges         = 0
0.00.280.058 I llm_load_print_meta: vocab_only       = 0
0.00.280.058 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.059 I llm_load_print_meta: n_embd           = 2048
0.00.280.059 I llm_load_print_meta: n_layer          = 18
0.00.280.070 I llm_load_print_meta: n_head           = 8
0.00.280.071 I llm_load_print_meta: n_head_kv        = 1
0.00.280.071 I llm_load_print_meta: n_rot            = 256
0.00.280.071 I llm_load_print_meta: n_swa            = 0
0.00.280.072 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.072 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.073 I llm_load_print_meta: n_gqa            = 8
0.00.280.074 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.075 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.076 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.077 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.078 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.078 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.078 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.079 I llm_load_print_meta: n_ff             = 16384
0.00.280.080 I llm_load_print_meta: n_expert         = 0
0.00.280.080 I llm_load_print_meta: n_expert_used    = 0
0.00.280.080 I llm_load_print_meta: causal attn      = 1
0.00.280.080 I llm_load_print_meta: pooling type     = 0
0.00.280.080 I llm_load_print_meta: rope type        = 2
0.00.280.081 I llm_load_print_meta: rope scaling     = linear
0.00.280.082 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.083 I llm_load_print_meta: freq_scale_train = 1
0.00.280.083 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.084 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.084 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.084 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.084 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.085 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.085 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.085 I llm_load_print_meta: model type       = 2B
0.00.280.086 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.087 I llm_load_print_meta: model params     = 2.51 B
0.00.280.087 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.088 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.088 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.088 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.089 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.089 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.090 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.090 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.090 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.091 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.092 I llm_load_print_meta: max token length = 93
0.00.340.801 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.340.809 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.340.809 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.340.810 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.340.811 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.340.811 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.345.921 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.928 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.928 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.929 I llama_new_context_with_model: n_batch       = 2048
0.00.345.929 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.930 I llama_new_context_with_model: flash_attn    = 0
0.00.345.932 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.933 I llama_new_context_with_model: freq_scale    = 1
0.00.345.934 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.070 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.084 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.175 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.340 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.346 I llama_new_context_with_model: graph nodes  = 601
0.00.361.347 I llama_new_context_with_model: graph splits = 1
0.00.361.349 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.743 I main: llama threadpool init, n_threads = 4
0.00.436.759 I 
0.00.436.833 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.436.837 I 
0.00.436.881 I sampler seed: 3308231400
0.00.436.894 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.897 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.897 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.898 I 
 seconally, and asked me if I was free tomorrow. I did not answer. Later, he called again and asked me the same thing. This behavior makes

0.02.024.931 I llama_perf_sampler_print:    sampling time =       5.20 ms /    33 runs   (    0.16 ms per token,  6346.15 tokens per second)
0.02.024.935 I llama_perf_context_print:        load time =     436.33 ms
0.02.024.936 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.024.938 I llama_perf_context_print:        eval time =    1568.92 ms /    32 runs   (   49.03 ms per token,    20.40 tokens per second)
0.02.024.940 I llama_perf_context_print:       total time =    1588.20 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4245 (515d4e53)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40173.65 ms
main:    total time = 40173.65 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.535 I build: 4245 (515d4e53) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.734 I main: llama backend init
0.00.000.740 I main: load the model and apply lora adapter, if any
0.00.021.182 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.196 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.205 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.209 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.212 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.213 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.215 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.215 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.216 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.217 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.220 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.221 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.221 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.222 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.222 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.403 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.714 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.610 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.617 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.617 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.618 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.618 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.619 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.620 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.622 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.623 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.626 I llama_model_loader: - type  f32:   37 tensors
0.00.130.627 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.627 I llama_model_loader: - type q6_K:   19 tensors
0.00.214.887 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.844 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.260.312 I llm_load_vocab: special tokens cache size = 5
0.00.281.295 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.281.310 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.281.310 I llm_load_print_meta: arch             = gemma
0.00.281.311 I llm_load_print_meta: vocab type       = SPM
0.00.281.312 I llm_load_print_meta: n_vocab          = 256000
0.00.281.312 I llm_load_print_meta: n_merges         = 0
0.00.281.313 I llm_load_print_meta: vocab_only       = 0
0.00.281.313 I llm_load_print_meta: n_ctx_train      = 8192
0.00.281.313 I llm_load_print_meta: n_embd           = 2048
0.00.281.314 I llm_load_print_meta: n_layer          = 18
0.00.281.326 I llm_load_print_meta: n_head           = 8
0.00.281.327 I llm_load_print_meta: n_head_kv        = 1
0.00.281.328 I llm_load_print_meta: n_rot            = 256
0.00.281.328 I llm_load_print_meta: n_swa            = 0
0.00.281.328 I llm_load_print_meta: n_embd_head_k    = 256
0.00.281.328 I llm_load_print_meta: n_embd_head_v    = 256
0.00.281.329 I llm_load_print_meta: n_gqa            = 8
0.00.281.330 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.281.331 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.281.332 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.281.334 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.281.334 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.281.334 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.281.335 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.281.336 I llm_load_print_meta: n_ff             = 16384
0.00.281.336 I llm_load_print_meta: n_expert         = 0
0.00.281.336 I llm_load_print_meta: n_expert_used    = 0
0.00.281.337 I llm_load_print_meta: causal attn      = 1
0.00.281.337 I llm_load_print_meta: pooling type     = 0
0.00.281.337 I llm_load_print_meta: rope type        = 2
0.00.281.338 I llm_load_print_meta: rope scaling     = linear
0.00.281.339 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.281.340 I llm_load_print_meta: freq_scale_train = 1
0.00.281.340 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.281.341 I llm_load_print_meta: rope_finetuned   = unknown
0.00.281.341 I llm_load_print_meta: ssm_d_conv       = 0
0.00.281.341 I llm_load_print_meta: ssm_d_inner      = 0
0.00.281.341 I llm_load_print_meta: ssm_d_state      = 0
0.00.281.342 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.281.342 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.281.342 I llm_load_print_meta: model type       = 2B
0.00.281.343 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.281.344 I llm_load_print_meta: model params     = 2.51 B
0.00.281.344 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.281.345 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.281.345 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.281.345 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.281.346 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.281.346 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.281.346 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.281.347 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.281.347 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.281.347 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.281.348 I llm_load_print_meta: max token length = 93
0.00.339.340 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.344.479 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.485 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.485 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.486 I llama_new_context_with_model: n_batch       = 2048
0.00.344.486 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.487 I llama_new_context_with_model: flash_attn    = 0
0.00.344.489 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.490 I llama_new_context_with_model: freq_scale    = 1
0.00.344.491 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.601 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.616 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.710 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.029 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.034 I llama_new_context_with_model: graph nodes  = 601
0.00.361.035 I llama_new_context_with_model: graph splits = 1
0.00.361.037 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.401 I main: llama threadpool init, n_threads = 4
0.00.435.418 I 
0.00.435.491 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.435.495 I 
0.00.435.541 I sampler seed: 2328986591
0.00.435.552 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.563 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.435.566 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.435.566 I 
 increasities. [end of text]


0.00.632.936 I llama_perf_sampler_print:    sampling time =       0.64 ms /     5 runs   (    0.13 ms per token,  7788.16 tokens per second)
0.00.632.940 I llama_perf_context_print:        load time =     434.64 ms
0.00.632.941 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.632.943 I llama_perf_context_print:        eval time =     194.27 ms /     4 runs   (   48.57 ms per token,    20.59 tokens per second)
0.00.632.944 I llama_perf_context_print:       total time =     197.54 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m25.788s
user	10m18.573s
sys	0m6.779s
