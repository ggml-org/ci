+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.633 I build: 3872 (d6fe7abf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.783 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.024.984 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.168 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.258 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.270 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.271 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.275 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.276 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.277 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.279 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.280 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.281 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.289 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.290 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.291 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.292 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.293 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.988 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.212 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.513 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.522 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.523 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.524 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.524 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.525 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.526 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.531 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.532 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.533 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.533 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.534 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.542 I llama_model_loader: - type  f32:   37 tensors
0.00.196.548 I llama_model_loader: - type q8_0:  127 tensors
0.00.362.522 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.391.940 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.393.039 I llm_load_vocab: special tokens cache size = 5
0.00.450.496 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.450.556 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.450.557 I llm_load_print_meta: arch             = gemma
0.00.450.557 I llm_load_print_meta: vocab type       = SPM
0.00.450.558 I llm_load_print_meta: n_vocab          = 256000
0.00.450.561 I llm_load_print_meta: n_merges         = 0
0.00.450.561 I llm_load_print_meta: vocab_only       = 0
0.00.450.562 I llm_load_print_meta: n_ctx_train      = 8192
0.00.450.562 I llm_load_print_meta: n_embd           = 2048
0.00.450.562 I llm_load_print_meta: n_layer          = 18
0.00.450.624 I llm_load_print_meta: n_head           = 8
0.00.450.631 I llm_load_print_meta: n_head_kv        = 1
0.00.450.631 I llm_load_print_meta: n_rot            = 256
0.00.450.632 I llm_load_print_meta: n_swa            = 0
0.00.450.632 I llm_load_print_meta: n_embd_head_k    = 256
0.00.450.632 I llm_load_print_meta: n_embd_head_v    = 256
0.00.450.637 I llm_load_print_meta: n_gqa            = 8
0.00.450.641 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.450.646 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.450.647 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.450.648 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.450.649 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.450.676 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.450.676 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.450.682 I llm_load_print_meta: n_ff             = 16384
0.00.450.683 I llm_load_print_meta: n_expert         = 0
0.00.450.684 I llm_load_print_meta: n_expert_used    = 0
0.00.450.684 I llm_load_print_meta: causal attn      = 1
0.00.450.684 I llm_load_print_meta: pooling type     = 0
0.00.450.685 I llm_load_print_meta: rope type        = 2
0.00.450.686 I llm_load_print_meta: rope scaling     = linear
0.00.450.687 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.450.688 I llm_load_print_meta: freq_scale_train = 1
0.00.450.696 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.450.700 I llm_load_print_meta: rope_finetuned   = unknown
0.00.450.701 I llm_load_print_meta: ssm_d_conv       = 0
0.00.450.702 I llm_load_print_meta: ssm_d_inner      = 0
0.00.450.702 I llm_load_print_meta: ssm_d_state      = 0
0.00.450.709 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.450.717 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.450.725 I llm_load_print_meta: model type       = 2B
0.00.450.735 I llm_load_print_meta: model ftype      = Q8_0
0.00.450.736 I llm_load_print_meta: model params     = 2.51 B
0.00.450.737 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.450.737 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.450.738 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.450.741 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.450.741 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.450.742 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.450.742 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.450.743 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.450.749 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.450.750 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.450.751 I llm_load_print_meta: max token length = 93
0.00.450.919 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.550.096 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.550.106 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.550.107 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.550.108 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.550.109 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.550.109 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.555.914 I llama_new_context_with_model: n_ctx      = 8192
0.00.555.923 I llama_new_context_with_model: n_batch    = 2048
0.00.555.924 I llama_new_context_with_model: n_ubatch   = 512
0.00.555.924 I llama_new_context_with_model: flash_attn = 0
0.00.555.928 I llama_new_context_with_model: freq_base  = 10000.0
0.00.555.929 I llama_new_context_with_model: freq_scale = 1
0.00.585.865 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.585.907 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.586.021 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.587.416 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.587.422 I llama_new_context_with_model: graph nodes  = 601
0.00.587.423 I llama_new_context_with_model: graph splits = 1
0.00.587.438 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.202.135 I main: llama threadpool init, n_threads = 4
0.01.202.148 I 
0.01.202.243 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.202.247 I 
0.01.202.416 I sampler seed: 1508299930
0.01.202.427 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.202.431 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.202.432 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.202.432 I 
 increasities, and other forms of courtship behavior that are observed in nature. [end of text]


0.07.984.266 I llama_perf_sampler_print:    sampling time =      24.71 ms /    17 runs   (    1.45 ms per token,   687.84 tokens per second)
0.07.984.269 I llama_perf_context_print:        load time =    1199.20 ms
0.07.984.271 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.984.273 I llama_perf_context_print:        eval time =    6740.04 ms /    16 runs   (  421.25 ms per token,     2.37 tokens per second)
0.07.984.274 I llama_perf_context_print:       total time =    6782.14 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.650 I build: 3872 (d6fe7abf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.025.143 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.248 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.265 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.269 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.273 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.274 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.275 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.277 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.278 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.280 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.287 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.288 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.289 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.289 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.290 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.371 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.887 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.216 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.225 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.226 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.227 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.228 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.229 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.230 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.233 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.234 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.235 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.197.236 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.197.237 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.197.245 I llama_model_loader: - type  f32:   37 tensors
0.00.197.249 I llama_model_loader: - type q8_0:  127 tensors
0.00.351.383 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.379.862 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.380.937 I llm_load_vocab: special tokens cache size = 5
0.00.438.188 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.438.247 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.438.248 I llm_load_print_meta: arch             = gemma
0.00.438.249 I llm_load_print_meta: vocab type       = SPM
0.00.438.250 I llm_load_print_meta: n_vocab          = 256000
0.00.438.253 I llm_load_print_meta: n_merges         = 0
0.00.438.253 I llm_load_print_meta: vocab_only       = 0
0.00.438.254 I llm_load_print_meta: n_ctx_train      = 8192
0.00.438.254 I llm_load_print_meta: n_embd           = 2048
0.00.438.254 I llm_load_print_meta: n_layer          = 18
0.00.438.316 I llm_load_print_meta: n_head           = 8
0.00.438.323 I llm_load_print_meta: n_head_kv        = 1
0.00.438.324 I llm_load_print_meta: n_rot            = 256
0.00.438.324 I llm_load_print_meta: n_swa            = 0
0.00.438.325 I llm_load_print_meta: n_embd_head_k    = 256
0.00.438.325 I llm_load_print_meta: n_embd_head_v    = 256
0.00.438.329 I llm_load_print_meta: n_gqa            = 8
0.00.438.333 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.438.338 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.438.339 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.438.341 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.438.341 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.438.342 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.438.342 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.438.347 I llm_load_print_meta: n_ff             = 16384
0.00.438.349 I llm_load_print_meta: n_expert         = 0
0.00.438.350 I llm_load_print_meta: n_expert_used    = 0
0.00.438.350 I llm_load_print_meta: causal attn      = 1
0.00.438.350 I llm_load_print_meta: pooling type     = 0
0.00.438.351 I llm_load_print_meta: rope type        = 2
0.00.438.363 I llm_load_print_meta: rope scaling     = linear
0.00.438.365 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.438.379 I llm_load_print_meta: freq_scale_train = 1
0.00.438.381 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.438.381 I llm_load_print_meta: rope_finetuned   = unknown
0.00.438.382 I llm_load_print_meta: ssm_d_conv       = 0
0.00.438.382 I llm_load_print_meta: ssm_d_inner      = 0
0.00.438.391 I llm_load_print_meta: ssm_d_state      = 0
0.00.438.395 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.438.396 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.438.396 I llm_load_print_meta: model type       = 2B
0.00.438.406 I llm_load_print_meta: model ftype      = Q8_0
0.00.438.407 I llm_load_print_meta: model params     = 2.51 B
0.00.438.408 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.438.409 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.438.410 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.438.411 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.438.412 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.438.412 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.438.413 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.438.414 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.438.420 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.438.422 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.438.422 I llm_load_print_meta: max token length = 93
0.00.438.592 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.531.401 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.537.405 I llama_new_context_with_model: n_ctx      = 8192
0.00.537.415 I llama_new_context_with_model: n_batch    = 2048
0.00.537.415 I llama_new_context_with_model: n_ubatch   = 512
0.00.537.416 I llama_new_context_with_model: flash_attn = 0
0.00.537.420 I llama_new_context_with_model: freq_base  = 10000.0
0.00.537.421 I llama_new_context_with_model: freq_scale = 1
0.00.568.738 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.568.782 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.568.897 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.570.337 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.570.345 I llama_new_context_with_model: graph nodes  = 601
0.00.570.345 I llama_new_context_with_model: graph splits = 1
0.00.570.362 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.188.446 I main: llama threadpool init, n_threads = 4
0.01.188.456 I 
0.01.188.550 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.188.553 I 
0.01.188.711 I sampler seed: 1843603902
0.01.188.722 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.188.727 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.188.727 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.188.728 I 
 increasities, but he soon found solace in the company of others.

What does this passage tell us about the importance of companionship and connection in life?



0.14.625.421 I llama_perf_sampler_print:    sampling time =      49.59 ms /    33 runs   (    1.50 ms per token,   665.46 tokens per second)
0.14.625.424 I llama_perf_context_print:        load time =    1185.48 ms
0.14.625.425 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.625.427 I llama_perf_context_print:        eval time =   13353.70 ms /    32 runs   (  417.30 ms per token,     2.40 tokens per second)
0.14.625.428 I llama_perf_context_print:       total time =   13436.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.639 I build: 3872 (d6fe7abf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.024.933 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.123 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.216 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.229 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.230 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.235 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.239 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.240 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.241 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.241 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.242 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.249 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.250 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.251 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.251 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.253 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.009 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.501 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.866 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.876 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.877 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.878 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.879 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.880 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.881 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.884 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.885 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.886 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.887 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.196.888 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.897 I llama_model_loader: - type  f32:   37 tensors
0.00.196.902 I llama_model_loader: - type q8_0:  127 tensors
0.00.363.342 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.391.682 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.392.769 I llm_load_vocab: special tokens cache size = 5
0.00.450.012 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.450.076 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.450.077 I llm_load_print_meta: arch             = gemma
0.00.450.078 I llm_load_print_meta: vocab type       = SPM
0.00.450.079 I llm_load_print_meta: n_vocab          = 256000
0.00.450.081 I llm_load_print_meta: n_merges         = 0
0.00.450.082 I llm_load_print_meta: vocab_only       = 0
0.00.450.082 I llm_load_print_meta: n_ctx_train      = 8192
0.00.450.083 I llm_load_print_meta: n_embd           = 2048
0.00.450.083 I llm_load_print_meta: n_layer          = 18
0.00.450.148 I llm_load_print_meta: n_head           = 8
0.00.450.155 I llm_load_print_meta: n_head_kv        = 1
0.00.450.156 I llm_load_print_meta: n_rot            = 256
0.00.450.156 I llm_load_print_meta: n_swa            = 0
0.00.450.157 I llm_load_print_meta: n_embd_head_k    = 256
0.00.450.157 I llm_load_print_meta: n_embd_head_v    = 256
0.00.450.161 I llm_load_print_meta: n_gqa            = 8
0.00.450.166 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.450.171 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.450.172 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.450.174 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.450.175 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.450.176 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.450.176 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.450.183 I llm_load_print_meta: n_ff             = 16384
0.00.450.186 I llm_load_print_meta: n_expert         = 0
0.00.450.187 I llm_load_print_meta: n_expert_used    = 0
0.00.450.193 I llm_load_print_meta: causal attn      = 1
0.00.450.193 I llm_load_print_meta: pooling type     = 0
0.00.450.194 I llm_load_print_meta: rope type        = 2
0.00.450.195 I llm_load_print_meta: rope scaling     = linear
0.00.450.198 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.450.199 I llm_load_print_meta: freq_scale_train = 1
0.00.450.200 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.450.200 I llm_load_print_meta: rope_finetuned   = unknown
0.00.450.201 I llm_load_print_meta: ssm_d_conv       = 0
0.00.450.202 I llm_load_print_meta: ssm_d_inner      = 0
0.00.450.203 I llm_load_print_meta: ssm_d_state      = 0
0.00.450.203 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.450.204 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.450.204 I llm_load_print_meta: model type       = 2B
0.00.450.215 I llm_load_print_meta: model ftype      = Q8_0
0.00.450.217 I llm_load_print_meta: model params     = 2.51 B
0.00.450.219 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.450.220 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.450.221 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.450.222 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.450.223 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.450.223 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.450.225 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.450.226 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.450.233 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.450.235 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.450.237 I llm_load_print_meta: max token length = 93
0.00.450.419 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.525.824 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.525.837 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.525.838 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.525.838 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.525.839 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.525.840 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.531.741 I llama_new_context_with_model: n_ctx      = 8192
0.00.531.749 I llama_new_context_with_model: n_batch    = 2048
0.00.531.750 I llama_new_context_with_model: n_ubatch   = 512
0.00.531.751 I llama_new_context_with_model: flash_attn = 0
0.00.531.753 I llama_new_context_with_model: freq_base  = 10000.0
0.00.531.754 I llama_new_context_with_model: freq_scale = 1
0.00.561.272 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.561.315 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.561.430 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.562.816 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.562.824 I llama_new_context_with_model: graph nodes  = 601
0.00.562.824 I llama_new_context_with_model: graph splits = 1
0.00.562.843 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.178.241 I main: llama threadpool init, n_threads = 4
0.01.178.256 I 
0.01.178.360 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.178.364 I 
0.01.178.541 I sampler seed: 1658999521
0.01.178.552 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.178.557 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.178.557 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.178.558 I 
 increasities with the new Genshin Impact character, Dendro Archon.

**Dendro Archon's Abilities:**

* **Arc Lightning:** A powerful

0.14.729.015 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.21 tokens per second)
0.14.729.018 I llama_perf_context_print:        load time =    1175.28 ms
0.14.729.020 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.729.022 I llama_perf_context_print:        eval time =   13468.77 ms /    32 runs   (  420.90 ms per token,     2.38 tokens per second)
0.14.729.023 I llama_perf_context_print:       total time =   13550.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.677 I build: 3872 (d6fe7abf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.815 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.024.628 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.819 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.908 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.919 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.920 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.924 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.926 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.928 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.929 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.930 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.931 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.938 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.939 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.940 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.940 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.941 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.559 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.590 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.844 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.852 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.854 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.854 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.855 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.856 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.857 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.861 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.862 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.863 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.863 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.195.864 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.873 I llama_model_loader: - type  f32:   37 tensors
0.00.195.878 I llama_model_loader: - type q8_0:  127 tensors
0.00.354.572 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.381.840 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.382.967 I llm_load_vocab: special tokens cache size = 5
0.00.440.290 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.440.350 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.440.351 I llm_load_print_meta: arch             = gemma
0.00.440.352 I llm_load_print_meta: vocab type       = SPM
0.00.440.352 I llm_load_print_meta: n_vocab          = 256000
0.00.440.355 I llm_load_print_meta: n_merges         = 0
0.00.440.355 I llm_load_print_meta: vocab_only       = 0
0.00.440.356 I llm_load_print_meta: n_ctx_train      = 8192
0.00.440.356 I llm_load_print_meta: n_embd           = 2048
0.00.440.356 I llm_load_print_meta: n_layer          = 18
0.00.440.418 I llm_load_print_meta: n_head           = 8
0.00.440.451 I llm_load_print_meta: n_head_kv        = 1
0.00.440.452 I llm_load_print_meta: n_rot            = 256
0.00.440.453 I llm_load_print_meta: n_swa            = 0
0.00.440.453 I llm_load_print_meta: n_embd_head_k    = 256
0.00.440.453 I llm_load_print_meta: n_embd_head_v    = 256
0.00.440.458 I llm_load_print_meta: n_gqa            = 8
0.00.440.463 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.440.468 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.440.477 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.440.478 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.440.479 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.440.480 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.440.484 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.440.489 I llm_load_print_meta: n_ff             = 16384
0.00.440.490 I llm_load_print_meta: n_expert         = 0
0.00.440.490 I llm_load_print_meta: n_expert_used    = 0
0.00.440.490 I llm_load_print_meta: causal attn      = 1
0.00.440.491 I llm_load_print_meta: pooling type     = 0
0.00.440.492 I llm_load_print_meta: rope type        = 2
0.00.440.492 I llm_load_print_meta: rope scaling     = linear
0.00.440.493 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.440.494 I llm_load_print_meta: freq_scale_train = 1
0.00.440.494 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.440.494 I llm_load_print_meta: rope_finetuned   = unknown
0.00.440.495 I llm_load_print_meta: ssm_d_conv       = 0
0.00.440.496 I llm_load_print_meta: ssm_d_inner      = 0
0.00.440.496 I llm_load_print_meta: ssm_d_state      = 0
0.00.440.497 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.440.498 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.440.499 I llm_load_print_meta: model type       = 2B
0.00.440.508 I llm_load_print_meta: model ftype      = Q8_0
0.00.440.509 I llm_load_print_meta: model params     = 2.51 B
0.00.440.510 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.440.511 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.440.512 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.440.513 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.440.516 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.440.516 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.440.517 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.440.518 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.440.524 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.440.525 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.440.526 I llm_load_print_meta: max token length = 93
0.00.440.695 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.512.445 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.512.456 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.518.028 I llama_new_context_with_model: n_ctx      = 8192
0.00.518.037 I llama_new_context_with_model: n_batch    = 2048
0.00.518.037 I llama_new_context_with_model: n_ubatch   = 512
0.00.518.038 I llama_new_context_with_model: flash_attn = 0
0.00.518.040 I llama_new_context_with_model: freq_base  = 10000.0
0.00.518.041 I llama_new_context_with_model: freq_scale = 1
0.00.547.606 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.547.654 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.547.770 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.549.149 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.549.156 I llama_new_context_with_model: graph nodes  = 601
0.00.549.156 I llama_new_context_with_model: graph splits = 1
0.00.549.171 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.161.387 I main: llama threadpool init, n_threads = 4
0.01.161.399 I 
0.01.161.493 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.161.497 I 
0.01.161.658 I sampler seed: 2006770180
0.01.161.668 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.161.673 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.161.674 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.161.674 I 
 increasities to the question:

**How has the development of AI in healthcare impacted patients and healthcare professionals?**

**Impact on patients:**

* **

0.14.679.127 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.82 tokens per second)
0.14.679.131 I llama_perf_context_print:        load time =    1158.41 ms
0.14.679.133 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.679.147 I llama_perf_context_print:        eval time =   13434.75 ms /    32 runs   (  419.84 ms per token,     2.38 tokens per second)
0.14.679.148 I llama_perf_context_print:       total time =   13517.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m1.951s
user	3m21.196s
sys	0m9.667s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3872 (d6fe7abf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199289.52 ms
main:    total time = 199289.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.736 I build: 3872 (d6fe7abf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.936 I main: llama backend init
0.00.002.875 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.024.983 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.274 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.286 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.288 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.293 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.294 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.296 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.298 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.301 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.302 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.308 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.310 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.311 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.311 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.312 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.820 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.750 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.063 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.070 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.071 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.071 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.072 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.073 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.074 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.077 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.078 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.079 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.079 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.080 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.090 I llama_model_loader: - type  f32:   37 tensors
0.00.196.094 I llama_model_loader: - type q4_K:  108 tensors
0.00.196.096 I llama_model_loader: - type q6_K:   19 tensors
0.00.350.829 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.379.219 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.380.244 I llm_load_vocab: special tokens cache size = 5
0.00.437.448 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.437.509 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.437.510 I llm_load_print_meta: arch             = gemma
0.00.437.511 I llm_load_print_meta: vocab type       = SPM
0.00.437.512 I llm_load_print_meta: n_vocab          = 256000
0.00.437.514 I llm_load_print_meta: n_merges         = 0
0.00.437.515 I llm_load_print_meta: vocab_only       = 0
0.00.437.516 I llm_load_print_meta: n_ctx_train      = 8192
0.00.437.516 I llm_load_print_meta: n_embd           = 2048
0.00.437.517 I llm_load_print_meta: n_layer          = 18
0.00.437.579 I llm_load_print_meta: n_head           = 8
0.00.437.586 I llm_load_print_meta: n_head_kv        = 1
0.00.437.587 I llm_load_print_meta: n_rot            = 256
0.00.437.587 I llm_load_print_meta: n_swa            = 0
0.00.437.587 I llm_load_print_meta: n_embd_head_k    = 256
0.00.437.588 I llm_load_print_meta: n_embd_head_v    = 256
0.00.437.592 I llm_load_print_meta: n_gqa            = 8
0.00.437.596 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.437.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.437.603 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.437.604 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.437.604 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.437.605 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.437.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.437.610 I llm_load_print_meta: n_ff             = 16384
0.00.437.611 I llm_load_print_meta: n_expert         = 0
0.00.437.612 I llm_load_print_meta: n_expert_used    = 0
0.00.437.612 I llm_load_print_meta: causal attn      = 1
0.00.437.612 I llm_load_print_meta: pooling type     = 0
0.00.437.613 I llm_load_print_meta: rope type        = 2
0.00.437.614 I llm_load_print_meta: rope scaling     = linear
0.00.437.616 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.437.616 I llm_load_print_meta: freq_scale_train = 1
0.00.437.617 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.437.617 I llm_load_print_meta: rope_finetuned   = unknown
0.00.437.617 I llm_load_print_meta: ssm_d_conv       = 0
0.00.437.618 I llm_load_print_meta: ssm_d_inner      = 0
0.00.437.619 I llm_load_print_meta: ssm_d_state      = 0
0.00.437.619 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.437.619 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.437.620 I llm_load_print_meta: model type       = 2B
0.00.437.630 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.437.631 I llm_load_print_meta: model params     = 2.51 B
0.00.437.632 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.437.632 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.437.633 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.437.634 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.437.634 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.437.634 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.437.635 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.437.640 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.437.647 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.437.648 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.437.649 I llm_load_print_meta: max token length = 93
0.00.437.813 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.497.270 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.497.280 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.497.281 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.497.281 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.497.282 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.497.283 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.502.916 I llama_new_context_with_model: n_ctx      = 8192
0.00.502.924 I llama_new_context_with_model: n_batch    = 2048
0.00.502.924 I llama_new_context_with_model: n_ubatch   = 512
0.00.502.925 I llama_new_context_with_model: flash_attn = 0
0.00.502.927 I llama_new_context_with_model: freq_base  = 10000.0
0.00.502.928 I llama_new_context_with_model: freq_scale = 1
0.00.532.843 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.532.889 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.533.006 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.534.401 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.534.408 I llama_new_context_with_model: graph nodes  = 601
0.00.534.408 I llama_new_context_with_model: graph splits = 1
0.00.534.424 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.117.179 I main: llama threadpool init, n_threads = 4
0.01.117.190 I 
0.01.117.280 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.117.284 I 
0.01.117.444 I sampler seed: 3983923655
0.01.117.454 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.117.462 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.117.462 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.117.462 I 
 seconally. 

**Instructions:** Write a response to the prompt that includes the following:

- Explain the difference between a noun and a verb.


0.12.108.065 I llama_perf_sampler_print:    sampling time =      49.30 ms /    33 runs   (    1.49 ms per token,   669.37 tokens per second)
0.12.108.068 I llama_perf_context_print:        load time =    1114.16 ms
0.12.108.069 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.108.071 I llama_perf_context_print:        eval time =   10908.77 ms /    32 runs   (  340.90 ms per token,     2.93 tokens per second)
0.12.108.084 I llama_perf_context_print:       total time =   10990.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3872 (d6fe7abf)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199406.56 ms
main:    total time = 199406.56 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.638 I build: 3872 (d6fe7abf) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.002.793 I main: load the model and apply lora adapter, if any
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.024.897 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.004 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.020 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.021 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.027 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.030 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.031 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.032 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.033 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.033 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.042 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.045 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.045 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.046 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.047 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.962 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.185.307 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.197.546 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.197.555 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.197.556 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.197.556 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.197.557 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.197.558 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.197.559 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.197.562 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.197.563 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.197.572 I llama_model_loader: - type  f32:   37 tensors
0.00.197.576 I llama_model_loader: - type q4_K:  108 tensors
0.00.197.577 I llama_model_loader: - type q6_K:   19 tensors
0.00.361.390 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.390.090 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.391.288 I llm_load_vocab: special tokens cache size = 5
0.00.448.642 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.448.704 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.448.705 I llm_load_print_meta: arch             = gemma
0.00.448.706 I llm_load_print_meta: vocab type       = SPM
0.00.448.707 I llm_load_print_meta: n_vocab          = 256000
0.00.448.710 I llm_load_print_meta: n_merges         = 0
0.00.448.710 I llm_load_print_meta: vocab_only       = 0
0.00.448.711 I llm_load_print_meta: n_ctx_train      = 8192
0.00.448.711 I llm_load_print_meta: n_embd           = 2048
0.00.448.712 I llm_load_print_meta: n_layer          = 18
0.00.448.774 I llm_load_print_meta: n_head           = 8
0.00.448.781 I llm_load_print_meta: n_head_kv        = 1
0.00.448.781 I llm_load_print_meta: n_rot            = 256
0.00.448.782 I llm_load_print_meta: n_swa            = 0
0.00.448.782 I llm_load_print_meta: n_embd_head_k    = 256
0.00.448.782 I llm_load_print_meta: n_embd_head_v    = 256
0.00.448.787 I llm_load_print_meta: n_gqa            = 8
0.00.448.791 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.448.795 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.448.797 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.448.799 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.448.799 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.448.800 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.448.800 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.448.805 I llm_load_print_meta: n_ff             = 16384
0.00.448.805 I llm_load_print_meta: n_expert         = 0
0.00.448.806 I llm_load_print_meta: n_expert_used    = 0
0.00.448.806 I llm_load_print_meta: causal attn      = 1
0.00.448.806 I llm_load_print_meta: pooling type     = 0
0.00.448.807 I llm_load_print_meta: rope type        = 2
0.00.448.807 I llm_load_print_meta: rope scaling     = linear
0.00.448.809 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.448.809 I llm_load_print_meta: freq_scale_train = 1
0.00.448.809 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.448.810 I llm_load_print_meta: rope_finetuned   = unknown
0.00.448.810 I llm_load_print_meta: ssm_d_conv       = 0
0.00.448.810 I llm_load_print_meta: ssm_d_inner      = 0
0.00.448.810 I llm_load_print_meta: ssm_d_state      = 0
0.00.448.811 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.448.811 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.448.812 I llm_load_print_meta: model type       = 2B
0.00.448.824 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.448.824 I llm_load_print_meta: model params     = 2.51 B
0.00.448.825 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.448.825 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.448.826 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.448.827 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.448.827 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.448.827 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.448.828 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.448.829 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.448.834 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.448.836 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.448.836 I llm_load_print_meta: max token length = 93
0.00.449.004 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.507.084 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.512.674 I llama_new_context_with_model: n_ctx      = 8192
0.00.512.681 I llama_new_context_with_model: n_batch    = 2048
0.00.512.681 I llama_new_context_with_model: n_ubatch   = 512
0.00.512.682 I llama_new_context_with_model: flash_attn = 0
0.00.512.685 I llama_new_context_with_model: freq_base  = 10000.0
0.00.512.686 I llama_new_context_with_model: freq_scale = 1
0.00.543.383 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.543.425 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.543.546 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.544.927 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.544.933 I llama_new_context_with_model: graph nodes  = 601
0.00.544.933 I llama_new_context_with_model: graph splits = 1
0.00.544.948 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.122.248 I main: llama threadpool init, n_threads = 4
0.01.122.263 I 
0.01.122.362 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.122.365 I 
0.01.122.532 I sampler seed: 1266410481
0.01.122.543 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.122.548 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.122.549 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.122.549 I 
 susceptable.

**Instructions:**

1. Read the instructions carefully.
2. Answer the questions to the best of your ability.
3. Show

0.12.095.301 I llama_perf_sampler_print:    sampling time =      49.17 ms /    33 runs   (    1.49 ms per token,   671.13 tokens per second)
0.12.095.305 I llama_perf_context_print:        load time =    1119.29 ms
0.12.095.306 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.095.318 I llama_perf_context_print:        eval time =   10890.80 ms /    32 runs   (  340.34 ms per token,     2.94 tokens per second)
0.12.095.319 I llama_perf_context_print:       total time =   10973.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.904s
user	50m11.454s
sys	0m6.482s
