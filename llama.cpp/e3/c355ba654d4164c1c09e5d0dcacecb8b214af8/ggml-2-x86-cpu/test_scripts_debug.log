+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.612 I build: 3871 (e3c355ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.815 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.024.920 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.098 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.188 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.199 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.201 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.204 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.205 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.206 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.207 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.208 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.216 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.217 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.218 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.219 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.220 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.886 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.729 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.088 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.097 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.097 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.099 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.101 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.104 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.105 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.106 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.119 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.121 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.128 I llama_model_loader: - type  f32:   37 tensors
0.00.196.133 I llama_model_loader: - type q8_0:  127 tensors
0.00.341.471 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.365.837 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.366.832 I llm_load_vocab: special tokens cache size = 5
0.00.424.234 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.424.300 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.424.302 I llm_load_print_meta: arch             = gemma
0.00.424.302 I llm_load_print_meta: vocab type       = SPM
0.00.424.304 I llm_load_print_meta: n_vocab          = 256000
0.00.424.306 I llm_load_print_meta: n_merges         = 0
0.00.424.306 I llm_load_print_meta: vocab_only       = 0
0.00.424.307 I llm_load_print_meta: n_ctx_train      = 8192
0.00.424.307 I llm_load_print_meta: n_embd           = 2048
0.00.424.308 I llm_load_print_meta: n_layer          = 18
0.00.424.375 I llm_load_print_meta: n_head           = 8
0.00.424.382 I llm_load_print_meta: n_head_kv        = 1
0.00.424.383 I llm_load_print_meta: n_rot            = 256
0.00.424.383 I llm_load_print_meta: n_swa            = 0
0.00.424.383 I llm_load_print_meta: n_embd_head_k    = 256
0.00.424.384 I llm_load_print_meta: n_embd_head_v    = 256
0.00.424.388 I llm_load_print_meta: n_gqa            = 8
0.00.424.394 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.424.400 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.424.406 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.424.408 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.424.408 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.424.409 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.424.409 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.424.414 I llm_load_print_meta: n_ff             = 16384
0.00.424.415 I llm_load_print_meta: n_expert         = 0
0.00.424.415 I llm_load_print_meta: n_expert_used    = 0
0.00.424.416 I llm_load_print_meta: causal attn      = 1
0.00.424.417 I llm_load_print_meta: pooling type     = 0
0.00.424.417 I llm_load_print_meta: rope type        = 2
0.00.424.417 I llm_load_print_meta: rope scaling     = linear
0.00.424.419 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.424.419 I llm_load_print_meta: freq_scale_train = 1
0.00.424.420 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.424.421 I llm_load_print_meta: rope_finetuned   = unknown
0.00.424.421 I llm_load_print_meta: ssm_d_conv       = 0
0.00.424.421 I llm_load_print_meta: ssm_d_inner      = 0
0.00.424.422 I llm_load_print_meta: ssm_d_state      = 0
0.00.424.422 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.424.422 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.424.435 I llm_load_print_meta: model type       = 2B
0.00.424.436 I llm_load_print_meta: model ftype      = Q8_0
0.00.424.437 I llm_load_print_meta: model params     = 2.51 B
0.00.424.438 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.424.438 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.424.439 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.424.440 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.424.441 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.424.441 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.424.442 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.424.442 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.424.448 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.424.449 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.424.449 I llm_load_print_meta: max token length = 93
0.00.424.620 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.523.475 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.523.487 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.523.488 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.523.489 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.523.490 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.523.490 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.529.229 I llama_new_context_with_model: n_ctx      = 8192
0.00.529.236 I llama_new_context_with_model: n_batch    = 2048
0.00.529.237 I llama_new_context_with_model: n_ubatch   = 512
0.00.529.238 I llama_new_context_with_model: flash_attn = 0
0.00.529.240 I llama_new_context_with_model: freq_base  = 10000.0
0.00.529.241 I llama_new_context_with_model: freq_scale = 1
0.00.558.032 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.558.073 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.558.189 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.559.593 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.559.600 I llama_new_context_with_model: graph nodes  = 601
0.00.559.600 I llama_new_context_with_model: graph splits = 1
0.00.559.617 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.174.517 I main: llama threadpool init, n_threads = 4
0.01.174.528 I 
0.01.174.619 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.174.622 I 
0.01.174.782 I sampler seed: 1342808890
0.01.174.793 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.174.799 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.174.800 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.174.800 I 
 increasively.

I am not able to generate text that is sexually suggestive in nature. [end of text]


0.09.206.259 I llama_perf_sampler_print:    sampling time =      29.15 ms /    20 runs   (    1.46 ms per token,   686.13 tokens per second)
0.09.206.273 I llama_perf_context_print:        load time =    1171.65 ms
0.09.206.275 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.206.277 I llama_perf_context_print:        eval time =    7982.16 ms /    19 runs   (  420.11 ms per token,     2.38 tokens per second)
0.09.206.278 I llama_perf_context_print:       total time =    8031.75 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.624 I build: 3871 (e3c355ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.824 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.024.798 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.895 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.909 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.913 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.918 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.918 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.920 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.922 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.923 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.924 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.931 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.932 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.933 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.933 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.934 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.199 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.360 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.618 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.627 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.627 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.628 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.629 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.630 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.632 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.635 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.636 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.651 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.653 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.194.654 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.662 I llama_model_loader: - type  f32:   37 tensors
0.00.194.667 I llama_model_loader: - type q8_0:  127 tensors
0.00.338.946 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.364.127 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.365.142 I llm_load_vocab: special tokens cache size = 5
0.00.422.374 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.422.438 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.422.439 I llm_load_print_meta: arch             = gemma
0.00.422.440 I llm_load_print_meta: vocab type       = SPM
0.00.422.440 I llm_load_print_meta: n_vocab          = 256000
0.00.422.443 I llm_load_print_meta: n_merges         = 0
0.00.422.444 I llm_load_print_meta: vocab_only       = 0
0.00.422.444 I llm_load_print_meta: n_ctx_train      = 8192
0.00.422.444 I llm_load_print_meta: n_embd           = 2048
0.00.422.445 I llm_load_print_meta: n_layer          = 18
0.00.422.510 I llm_load_print_meta: n_head           = 8
0.00.422.518 I llm_load_print_meta: n_head_kv        = 1
0.00.422.518 I llm_load_print_meta: n_rot            = 256
0.00.422.519 I llm_load_print_meta: n_swa            = 0
0.00.422.519 I llm_load_print_meta: n_embd_head_k    = 256
0.00.422.520 I llm_load_print_meta: n_embd_head_v    = 256
0.00.422.525 I llm_load_print_meta: n_gqa            = 8
0.00.422.529 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.422.534 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.422.535 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.422.536 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.422.538 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.422.538 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.422.538 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.422.543 I llm_load_print_meta: n_ff             = 16384
0.00.422.543 I llm_load_print_meta: n_expert         = 0
0.00.422.548 I llm_load_print_meta: n_expert_used    = 0
0.00.422.548 I llm_load_print_meta: causal attn      = 1
0.00.422.549 I llm_load_print_meta: pooling type     = 0
0.00.422.549 I llm_load_print_meta: rope type        = 2
0.00.422.550 I llm_load_print_meta: rope scaling     = linear
0.00.422.551 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.422.552 I llm_load_print_meta: freq_scale_train = 1
0.00.422.552 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.422.552 I llm_load_print_meta: rope_finetuned   = unknown
0.00.422.553 I llm_load_print_meta: ssm_d_conv       = 0
0.00.422.555 I llm_load_print_meta: ssm_d_inner      = 0
0.00.422.555 I llm_load_print_meta: ssm_d_state      = 0
0.00.422.555 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.422.567 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.422.576 I llm_load_print_meta: model type       = 2B
0.00.422.578 I llm_load_print_meta: model ftype      = Q8_0
0.00.422.578 I llm_load_print_meta: model params     = 2.51 B
0.00.422.579 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.422.580 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.422.580 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.422.581 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.422.582 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.422.582 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.422.583 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.422.584 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.422.590 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.422.591 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.422.591 I llm_load_print_meta: max token length = 93
0.00.422.758 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.515.900 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.521.546 I llama_new_context_with_model: n_ctx      = 8192
0.00.521.554 I llama_new_context_with_model: n_batch    = 2048
0.00.521.555 I llama_new_context_with_model: n_ubatch   = 512
0.00.521.555 I llama_new_context_with_model: flash_attn = 0
0.00.521.557 I llama_new_context_with_model: freq_base  = 10000.0
0.00.521.558 I llama_new_context_with_model: freq_scale = 1
0.00.551.202 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.551.247 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.551.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.552.750 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.552.756 I llama_new_context_with_model: graph nodes  = 601
0.00.552.756 I llama_new_context_with_model: graph splits = 1
0.00.552.772 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.163.564 I main: llama threadpool init, n_threads = 4
0.01.163.575 I 
0.01.163.666 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.163.670 I 
0.01.163.833 I sampler seed: 140820329
0.01.163.843 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.163.848 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.163.848 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.163.848 I 
 increasities.

I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.07.901.607 I llama_perf_sampler_print:    sampling time =      24.82 ms /    17 runs   (    1.46 ms per token,   685.01 tokens per second)
0.07.901.611 I llama_perf_context_print:        load time =    1160.70 ms
0.07.901.622 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.901.624 I llama_perf_context_print:        eval time =    6695.70 ms /    16 runs   (  418.48 ms per token,     2.39 tokens per second)
0.07.901.625 I llama_perf_context_print:       total time =    6738.05 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.646 I build: 3871 (e3c355ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.025.071 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.278 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.372 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.384 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.386 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.390 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.392 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.393 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.396 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.397 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.398 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.405 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.406 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.407 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.407 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.408 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.868 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.572 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.885 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.893 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.894 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.895 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.895 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.897 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.898 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.901 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.902 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.903 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.903 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.195.904 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.912 I llama_model_loader: - type  f32:   37 tensors
0.00.195.917 I llama_model_loader: - type q8_0:  127 tensors
0.00.345.677 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.373.900 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.374.935 I llm_load_vocab: special tokens cache size = 5
0.00.434.418 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.434.489 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.434.490 I llm_load_print_meta: arch             = gemma
0.00.434.491 I llm_load_print_meta: vocab type       = SPM
0.00.434.492 I llm_load_print_meta: n_vocab          = 256000
0.00.434.494 I llm_load_print_meta: n_merges         = 0
0.00.434.495 I llm_load_print_meta: vocab_only       = 0
0.00.434.495 I llm_load_print_meta: n_ctx_train      = 8192
0.00.434.496 I llm_load_print_meta: n_embd           = 2048
0.00.434.496 I llm_load_print_meta: n_layer          = 18
0.00.434.567 I llm_load_print_meta: n_head           = 8
0.00.434.574 I llm_load_print_meta: n_head_kv        = 1
0.00.434.576 I llm_load_print_meta: n_rot            = 256
0.00.434.577 I llm_load_print_meta: n_swa            = 0
0.00.434.577 I llm_load_print_meta: n_embd_head_k    = 256
0.00.434.578 I llm_load_print_meta: n_embd_head_v    = 256
0.00.434.582 I llm_load_print_meta: n_gqa            = 8
0.00.434.586 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.434.591 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.434.593 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.434.595 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.434.595 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.434.596 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.434.596 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.434.601 I llm_load_print_meta: n_ff             = 16384
0.00.434.602 I llm_load_print_meta: n_expert         = 0
0.00.434.602 I llm_load_print_meta: n_expert_used    = 0
0.00.434.602 I llm_load_print_meta: causal attn      = 1
0.00.434.603 I llm_load_print_meta: pooling type     = 0
0.00.434.603 I llm_load_print_meta: rope type        = 2
0.00.434.603 I llm_load_print_meta: rope scaling     = linear
0.00.434.605 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.434.605 I llm_load_print_meta: freq_scale_train = 1
0.00.434.605 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.434.615 I llm_load_print_meta: rope_finetuned   = unknown
0.00.434.616 I llm_load_print_meta: ssm_d_conv       = 0
0.00.434.617 I llm_load_print_meta: ssm_d_inner      = 0
0.00.434.629 I llm_load_print_meta: ssm_d_state      = 0
0.00.434.629 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.434.630 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.434.638 I llm_load_print_meta: model type       = 2B
0.00.434.639 I llm_load_print_meta: model ftype      = Q8_0
0.00.434.641 I llm_load_print_meta: model params     = 2.51 B
0.00.434.642 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.434.642 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.434.644 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.434.644 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.434.644 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.434.645 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.434.646 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.434.646 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.434.652 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.434.653 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.434.653 I llm_load_print_meta: max token length = 93
0.00.434.824 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.510.909 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.510.918 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.510.919 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.510.920 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.510.920 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.510.921 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.516.586 I llama_new_context_with_model: n_ctx      = 8192
0.00.516.594 I llama_new_context_with_model: n_batch    = 2048
0.00.516.595 I llama_new_context_with_model: n_ubatch   = 512
0.00.516.595 I llama_new_context_with_model: flash_attn = 0
0.00.516.599 I llama_new_context_with_model: freq_base  = 10000.0
0.00.516.599 I llama_new_context_with_model: freq_scale = 1
0.00.546.751 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.546.793 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.546.908 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.548.284 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.548.291 I llama_new_context_with_model: graph nodes  = 601
0.00.548.291 I llama_new_context_with_model: graph splits = 1
0.00.548.308 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.194.815 I main: llama threadpool init, n_threads = 4
0.01.194.827 I 
0.01.194.918 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.194.922 I 
0.01.195.101 I sampler seed: 157829886
0.01.195.114 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.195.121 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.195.122 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.195.122 I 
 increasively.

I am not able to access the provided text, so I am unable to determine the meaning of the text or the information requested. [end of text]


0.14.326.772 I llama_perf_sampler_print:    sampling time =      47.53 ms /    32 runs   (    1.49 ms per token,   673.23 tokens per second)
0.14.326.776 I llama_perf_context_print:        load time =    1191.91 ms
0.14.326.777 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.326.779 I llama_perf_context_print:        eval time =   13051.67 ms /    31 runs   (  421.02 ms per token,     2.38 tokens per second)
0.14.326.793 I llama_perf_context_print:       total time =   13131.97 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.648 I build: 3871 (e3c355ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.845 I main: llama backend init
0.00.002.798 I main: load the model and apply lora adapter, if any
0.00.024.814 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.000 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.090 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.101 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.104 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.109 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.112 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.113 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.114 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.115 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.116 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.122 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.123 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.124 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.125 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.133 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.904 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.318 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.335 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.336 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.337 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.337 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.338 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.339 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.343 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.344 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.345 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.345 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.195.346 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.355 I llama_model_loader: - type  f32:   37 tensors
0.00.195.359 I llama_model_loader: - type q8_0:  127 tensors
0.00.358.020 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.386.941 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.388.042 I llm_load_vocab: special tokens cache size = 5
0.00.455.810 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.455.872 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.455.874 I llm_load_print_meta: arch             = gemma
0.00.455.874 I llm_load_print_meta: vocab type       = SPM
0.00.455.875 I llm_load_print_meta: n_vocab          = 256000
0.00.455.877 I llm_load_print_meta: n_merges         = 0
0.00.455.878 I llm_load_print_meta: vocab_only       = 0
0.00.455.878 I llm_load_print_meta: n_ctx_train      = 8192
0.00.455.879 I llm_load_print_meta: n_embd           = 2048
0.00.455.879 I llm_load_print_meta: n_layer          = 18
0.00.455.941 I llm_load_print_meta: n_head           = 8
0.00.455.948 I llm_load_print_meta: n_head_kv        = 1
0.00.455.949 I llm_load_print_meta: n_rot            = 256
0.00.455.949 I llm_load_print_meta: n_swa            = 0
0.00.455.949 I llm_load_print_meta: n_embd_head_k    = 256
0.00.455.971 I llm_load_print_meta: n_embd_head_v    = 256
0.00.455.985 I llm_load_print_meta: n_gqa            = 8
0.00.455.990 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.455.995 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.455.997 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.455.999 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.455.999 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.455.999 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.456.000 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.456.005 I llm_load_print_meta: n_ff             = 16384
0.00.456.006 I llm_load_print_meta: n_expert         = 0
0.00.456.014 I llm_load_print_meta: n_expert_used    = 0
0.00.456.021 I llm_load_print_meta: causal attn      = 1
0.00.456.022 I llm_load_print_meta: pooling type     = 0
0.00.456.023 I llm_load_print_meta: rope type        = 2
0.00.456.023 I llm_load_print_meta: rope scaling     = linear
0.00.456.024 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.456.025 I llm_load_print_meta: freq_scale_train = 1
0.00.456.026 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.456.026 I llm_load_print_meta: rope_finetuned   = unknown
0.00.456.027 I llm_load_print_meta: ssm_d_conv       = 0
0.00.456.027 I llm_load_print_meta: ssm_d_inner      = 0
0.00.456.028 I llm_load_print_meta: ssm_d_state      = 0
0.00.456.029 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.456.029 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.456.038 I llm_load_print_meta: model type       = 2B
0.00.456.039 I llm_load_print_meta: model ftype      = Q8_0
0.00.456.040 I llm_load_print_meta: model params     = 2.51 B
0.00.456.041 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.456.041 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.456.049 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.456.057 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.456.057 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.456.058 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.456.059 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.456.060 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.456.065 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.456.067 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.456.071 I llm_load_print_meta: max token length = 93
0.00.456.253 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.527.537 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.527.546 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.533.264 I llama_new_context_with_model: n_ctx      = 8192
0.00.533.272 I llama_new_context_with_model: n_batch    = 2048
0.00.533.272 I llama_new_context_with_model: n_ubatch   = 512
0.00.533.273 I llama_new_context_with_model: flash_attn = 0
0.00.533.276 I llama_new_context_with_model: freq_base  = 10000.0
0.00.533.277 I llama_new_context_with_model: freq_scale = 1
0.00.562.118 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.562.161 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.562.277 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.563.679 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.563.686 I llama_new_context_with_model: graph nodes  = 601
0.00.563.686 I llama_new_context_with_model: graph splits = 1
0.00.563.702 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.175.179 I main: llama threadpool init, n_threads = 4
0.01.175.191 I 
0.01.175.282 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.175.286 I 
0.01.175.459 I sampler seed: 967308211
0.01.175.469 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.175.473 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.175.474 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.175.474 I 
 increasities with her.

**Answer:** I am unable to generate sexually suggestive or inappropriate responses. My purpose is to assist with tasks and provide information within the

0.14.729.833 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.99 tokens per second)
0.14.729.836 I llama_perf_context_print:        load time =    1172.29 ms
0.14.729.848 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.729.851 I llama_perf_context_print:        eval time =   13472.29 ms /    32 runs   (  421.01 ms per token,     2.38 tokens per second)
0.14.729.852 I llama_perf_context_print:       total time =   13554.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.933s
user	2m57.937s
sys	0m9.530s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
main: build = 3871 (e3c355ba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199960.38 ms
main:    total time = 199960.38 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.647 I build: 3871 (e3c355ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.728 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.908 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.000 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.012 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.013 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.018 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.019 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.020 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.022 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.031 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.037 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.038 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.039 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.040 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.041 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.957 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.079 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.402 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.411 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.412 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.413 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.414 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.415 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.416 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.419 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.420 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.421 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.421 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.194.422 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.431 I llama_model_loader: - type  f32:   37 tensors
0.00.194.435 I llama_model_loader: - type q4_K:  108 tensors
0.00.194.436 I llama_model_loader: - type q6_K:   19 tensors
0.00.347.508 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.374.151 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.375.166 I llm_load_vocab: special tokens cache size = 5
0.00.432.715 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.432.774 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.432.775 I llm_load_print_meta: arch             = gemma
0.00.432.776 I llm_load_print_meta: vocab type       = SPM
0.00.432.776 I llm_load_print_meta: n_vocab          = 256000
0.00.432.779 I llm_load_print_meta: n_merges         = 0
0.00.432.779 I llm_load_print_meta: vocab_only       = 0
0.00.432.780 I llm_load_print_meta: n_ctx_train      = 8192
0.00.432.780 I llm_load_print_meta: n_embd           = 2048
0.00.432.780 I llm_load_print_meta: n_layer          = 18
0.00.432.843 I llm_load_print_meta: n_head           = 8
0.00.432.850 I llm_load_print_meta: n_head_kv        = 1
0.00.432.851 I llm_load_print_meta: n_rot            = 256
0.00.432.851 I llm_load_print_meta: n_swa            = 0
0.00.432.852 I llm_load_print_meta: n_embd_head_k    = 256
0.00.432.852 I llm_load_print_meta: n_embd_head_v    = 256
0.00.432.856 I llm_load_print_meta: n_gqa            = 8
0.00.432.860 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.432.865 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.432.866 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.432.867 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.432.868 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.432.869 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.432.869 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.432.873 I llm_load_print_meta: n_ff             = 16384
0.00.432.874 I llm_load_print_meta: n_expert         = 0
0.00.432.874 I llm_load_print_meta: n_expert_used    = 0
0.00.432.875 I llm_load_print_meta: causal attn      = 1
0.00.432.875 I llm_load_print_meta: pooling type     = 0
0.00.432.875 I llm_load_print_meta: rope type        = 2
0.00.432.875 I llm_load_print_meta: rope scaling     = linear
0.00.432.877 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.432.878 I llm_load_print_meta: freq_scale_train = 1
0.00.432.878 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.432.879 I llm_load_print_meta: rope_finetuned   = unknown
0.00.432.879 I llm_load_print_meta: ssm_d_conv       = 0
0.00.432.879 I llm_load_print_meta: ssm_d_inner      = 0
0.00.432.880 I llm_load_print_meta: ssm_d_state      = 0
0.00.432.880 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.432.880 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.432.890 I llm_load_print_meta: model type       = 2B
0.00.432.892 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.432.892 I llm_load_print_meta: model params     = 2.51 B
0.00.432.893 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.432.893 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.432.894 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.432.894 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.432.895 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.432.895 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.432.896 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.432.896 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.432.902 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.432.904 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.432.904 I llm_load_print_meta: max token length = 93
0.00.433.072 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.492.093 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.492.104 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.492.105 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.492.106 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.492.107 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.492.107 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.497.743 I llama_new_context_with_model: n_ctx      = 8192
0.00.497.752 I llama_new_context_with_model: n_batch    = 2048
0.00.497.753 I llama_new_context_with_model: n_ubatch   = 512
0.00.497.753 I llama_new_context_with_model: flash_attn = 0
0.00.497.757 I llama_new_context_with_model: freq_base  = 10000.0
0.00.497.758 I llama_new_context_with_model: freq_scale = 1
0.00.527.502 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.527.543 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.527.655 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.529.078 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.529.084 I llama_new_context_with_model: graph nodes  = 601
0.00.529.084 I llama_new_context_with_model: graph splits = 1
0.00.529.101 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.106.768 I main: llama threadpool init, n_threads = 4
0.01.106.781 I 
0.01.106.872 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.106.876 I 
0.01.107.038 I sampler seed: 2163128050
0.01.107.048 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.107.053 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.107.054 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.107.054 I 
 increasities, the woman is not the one who should be blamed for the situation.

I am unable to provide an answer to the question as it contains sensitive

0.12.104.306 I llama_perf_sampler_print:    sampling time =      49.14 ms /    33 runs   (    1.49 ms per token,   671.51 tokens per second)
0.12.104.310 I llama_perf_context_print:        load time =    1103.88 ms
0.12.104.322 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.104.324 I llama_perf_context_print:        eval time =   10915.68 ms /    32 runs   (  341.12 ms per token,     2.93 tokens per second)
0.12.104.326 I llama_perf_context_print:       total time =   10997.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
main: build = 3871 (e3c355ba)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200226.39 ms
main:    total time = 200226.39 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (CPU)
0.00.000.647 I build: 3871 (e3c355ba) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.002.822 I main: load the model and apply lora adapter, if any
0.00.024.999 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.096 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.111 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.112 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.116 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.117 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.118 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.119 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.120 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.121 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.128 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.129 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.130 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.130 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.139 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.275 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.789 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.056 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.065 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.066 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.066 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.067 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.069 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.071 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.074 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.075 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.083 I llama_model_loader: - type  f32:   37 tensors
0.00.195.087 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.088 I llama_model_loader: - type q6_K:   19 tensors
0.00.343.255 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.369.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.370.430 I llm_load_vocab: special tokens cache size = 5
0.00.427.859 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.427.922 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.427.924 I llm_load_print_meta: arch             = gemma
0.00.427.924 I llm_load_print_meta: vocab type       = SPM
0.00.427.925 I llm_load_print_meta: n_vocab          = 256000
0.00.427.928 I llm_load_print_meta: n_merges         = 0
0.00.427.928 I llm_load_print_meta: vocab_only       = 0
0.00.427.929 I llm_load_print_meta: n_ctx_train      = 8192
0.00.427.929 I llm_load_print_meta: n_embd           = 2048
0.00.427.929 I llm_load_print_meta: n_layer          = 18
0.00.427.994 I llm_load_print_meta: n_head           = 8
0.00.428.001 I llm_load_print_meta: n_head_kv        = 1
0.00.428.001 I llm_load_print_meta: n_rot            = 256
0.00.428.002 I llm_load_print_meta: n_swa            = 0
0.00.428.002 I llm_load_print_meta: n_embd_head_k    = 256
0.00.428.002 I llm_load_print_meta: n_embd_head_v    = 256
0.00.428.007 I llm_load_print_meta: n_gqa            = 8
0.00.428.013 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.428.018 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.428.019 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.428.020 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.428.021 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.428.022 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.428.022 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.428.026 I llm_load_print_meta: n_ff             = 16384
0.00.428.027 I llm_load_print_meta: n_expert         = 0
0.00.428.027 I llm_load_print_meta: n_expert_used    = 0
0.00.428.028 I llm_load_print_meta: causal attn      = 1
0.00.428.028 I llm_load_print_meta: pooling type     = 0
0.00.428.028 I llm_load_print_meta: rope type        = 2
0.00.428.029 I llm_load_print_meta: rope scaling     = linear
0.00.428.030 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.428.031 I llm_load_print_meta: freq_scale_train = 1
0.00.428.031 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.428.031 I llm_load_print_meta: rope_finetuned   = unknown
0.00.428.032 I llm_load_print_meta: ssm_d_conv       = 0
0.00.428.032 I llm_load_print_meta: ssm_d_inner      = 0
0.00.428.032 I llm_load_print_meta: ssm_d_state      = 0
0.00.428.033 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.428.033 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.428.043 I llm_load_print_meta: model type       = 2B
0.00.428.044 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.428.045 I llm_load_print_meta: model params     = 2.51 B
0.00.428.046 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.428.046 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.428.047 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.428.047 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.428.047 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.428.047 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.428.048 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.428.049 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.428.055 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.428.056 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.428.057 I llm_load_print_meta: max token length = 93
0.00.428.221 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.485.572 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.491.276 I llama_new_context_with_model: n_ctx      = 8192
0.00.491.283 I llama_new_context_with_model: n_batch    = 2048
0.00.491.284 I llama_new_context_with_model: n_ubatch   = 512
0.00.491.284 I llama_new_context_with_model: flash_attn = 0
0.00.491.287 I llama_new_context_with_model: freq_base  = 10000.0
0.00.491.287 I llama_new_context_with_model: freq_scale = 1
0.00.521.347 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.521.391 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.521.508 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.522.874 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.522.881 I llama_new_context_with_model: graph nodes  = 601
0.00.522.881 I llama_new_context_with_model: graph splits = 1
0.00.522.900 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.098.621 I main: llama threadpool init, n_threads = 4
0.01.098.632 I 
0.01.098.725 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.098.728 I 
0.01.098.888 I sampler seed: 2556168449
0.01.098.899 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.098.903 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.098.904 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.098.904 I 
 seconded the question.

I am unable to access the question. Please provide me with the question so I can assist you. [end of text]


0.10.304.681 I llama_perf_sampler_print:    sampling time =      41.41 ms /    28 runs   (    1.48 ms per token,   676.17 tokens per second)
0.10.304.685 I llama_perf_context_print:        load time =    1095.71 ms
0.10.304.686 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.304.688 I llama_perf_context_print:        eval time =    9136.70 ms /    27 runs   (  338.40 ms per token,     2.96 tokens per second)
0.10.304.688 I llama_perf_context_print:       total time =    9206.07 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.443s
user	50m8.299s
sys	0m6.360s
