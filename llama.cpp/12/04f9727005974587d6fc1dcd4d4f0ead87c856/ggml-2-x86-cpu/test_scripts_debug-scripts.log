+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4455 (1204f972) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.000.865 I main: load the model and apply lora adapter, if any
0.00.085.244 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.258 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.374 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.377 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.382 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.384 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.386 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.388 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.392 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.400 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.402 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.404 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.405 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.407 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.017 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.393.298 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.709 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.725 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.727 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.728 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.730 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.732 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.734 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.738 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.740 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.742 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.744 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.746 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.417.755 I llama_model_loader: - type  f32:   37 tensors
0.00.417.757 I llama_model_loader: - type q8_0:  127 tensors
0.00.681.252 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.801.620 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.802.568 I llm_load_vocab: special tokens cache size = 5
0.01.010.792 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.010.872 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.010.877 I llm_load_print_meta: arch             = gemma
0.01.010.878 I llm_load_print_meta: vocab type       = SPM
0.01.010.879 I llm_load_print_meta: n_vocab          = 256000
0.01.010.880 I llm_load_print_meta: n_merges         = 0
0.01.010.881 I llm_load_print_meta: vocab_only       = 0
0.01.010.881 I llm_load_print_meta: n_ctx_train      = 8192
0.01.010.882 I llm_load_print_meta: n_embd           = 2048
0.01.010.882 I llm_load_print_meta: n_layer          = 18
0.01.010.961 I llm_load_print_meta: n_head           = 8
0.01.010.972 I llm_load_print_meta: n_head_kv        = 1
0.01.010.973 I llm_load_print_meta: n_rot            = 256
0.01.010.974 I llm_load_print_meta: n_swa            = 0
0.01.010.975 I llm_load_print_meta: n_embd_head_k    = 256
0.01.010.983 I llm_load_print_meta: n_embd_head_v    = 256
0.01.010.988 I llm_load_print_meta: n_gqa            = 8
0.01.010.996 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.011.001 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.011.003 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.011.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.011.005 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.011.006 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.011.021 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.011.030 I llm_load_print_meta: n_ff             = 16384
0.01.011.038 I llm_load_print_meta: n_expert         = 0
0.01.011.041 I llm_load_print_meta: n_expert_used    = 0
0.01.011.041 I llm_load_print_meta: causal attn      = 1
0.01.011.041 I llm_load_print_meta: pooling type     = 0
0.01.011.042 I llm_load_print_meta: rope type        = 2
0.01.011.042 I llm_load_print_meta: rope scaling     = linear
0.01.011.044 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.011.044 I llm_load_print_meta: freq_scale_train = 1
0.01.011.045 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.011.045 I llm_load_print_meta: rope_finetuned   = unknown
0.01.011.045 I llm_load_print_meta: ssm_d_conv       = 0
0.01.011.053 I llm_load_print_meta: ssm_d_inner      = 0
0.01.011.056 I llm_load_print_meta: ssm_d_state      = 0
0.01.011.056 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.011.057 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.011.059 I llm_load_print_meta: model type       = 2B
0.01.011.061 I llm_load_print_meta: model ftype      = Q8_0
0.01.011.062 I llm_load_print_meta: model params     = 2.51 B
0.01.011.064 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.011.064 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.011.065 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.011.066 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.011.066 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.011.068 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.011.068 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.011.069 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.011.075 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.011.076 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.011.076 I llm_load_print_meta: max token length = 93
0.01.113.833 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.113.841 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.113.842 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.113.843 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.113.844 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.113.844 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.120.954 I llama_new_context_with_model: n_seq_max     = 1
0.01.120.960 I llama_new_context_with_model: n_ctx         = 4096
0.01.120.960 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.120.960 I llama_new_context_with_model: n_batch       = 2048
0.01.120.961 I llama_new_context_with_model: n_ubatch      = 512
0.01.120.961 I llama_new_context_with_model: flash_attn    = 0
0.01.120.963 I llama_new_context_with_model: freq_base     = 10000.0
0.01.120.964 I llama_new_context_with_model: freq_scale    = 1
0.01.120.964 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.121.048 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.134.930 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.134.972 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.135.094 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.138.362 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.138.366 I llama_new_context_with_model: graph nodes  = 601
0.01.138.366 I llama_new_context_with_model: graph splits = 1
0.01.138.391 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.138.394 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.751.427 I main: llama threadpool init, n_threads = 4
0.01.751.444 I 
0.01.751.565 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.751.569 I 
0.01.751.794 I sampler seed: 1485352766
0.01.751.808 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.751.821 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.751.822 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.751.822 I 
 increably.

I'm unable to generate a response as I am unable to access external websites or specific APIs. [end of text]


0.12.289.119 I llama_perf_sampler_print:    sampling time =      37.73 ms /    26 runs   (    1.45 ms per token,   689.03 tokens per second)
0.12.289.145 I llama_perf_context_print:        load time =    1750.48 ms
0.12.289.146 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.289.148 I llama_perf_context_print:        eval time =   10471.51 ms /    25 runs   (  418.86 ms per token,     2.39 tokens per second)
0.12.289.149 I llama_perf_context_print:       total time =   10537.70 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4455 (1204f972) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.000.841 I main: load the model and apply lora adapter, if any
0.00.085.010 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.085.112 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.134 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.136 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.141 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.143 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.144 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.147 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.149 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.150 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.157 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.169 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.175 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.177 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.179 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.747 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.367 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.415.786 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.415.795 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.415.797 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.415.799 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.415.801 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.415.803 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.415.805 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.415.810 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.415.812 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.415.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.415.816 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.415.817 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.415.825 I llama_model_loader: - type  f32:   37 tensors
0.00.415.828 I llama_model_loader: - type q8_0:  127 tensors
0.00.699.302 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.840.003 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.840.998 I llm_load_vocab: special tokens cache size = 5
0.01.061.258 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.061.341 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.061.346 I llm_load_print_meta: arch             = gemma
0.01.061.347 I llm_load_print_meta: vocab type       = SPM
0.01.061.348 I llm_load_print_meta: n_vocab          = 256000
0.01.061.350 I llm_load_print_meta: n_merges         = 0
0.01.061.351 I llm_load_print_meta: vocab_only       = 0
0.01.061.351 I llm_load_print_meta: n_ctx_train      = 8192
0.01.061.352 I llm_load_print_meta: n_embd           = 2048
0.01.061.352 I llm_load_print_meta: n_layer          = 18
0.01.061.439 I llm_load_print_meta: n_head           = 8
0.01.061.449 I llm_load_print_meta: n_head_kv        = 1
0.01.061.453 I llm_load_print_meta: n_rot            = 256
0.01.061.453 I llm_load_print_meta: n_swa            = 0
0.01.061.454 I llm_load_print_meta: n_embd_head_k    = 256
0.01.061.454 I llm_load_print_meta: n_embd_head_v    = 256
0.01.061.459 I llm_load_print_meta: n_gqa            = 8
0.01.061.464 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.061.469 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.061.471 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.061.473 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.061.474 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.061.474 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.061.474 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.061.480 I llm_load_print_meta: n_ff             = 16384
0.01.061.481 I llm_load_print_meta: n_expert         = 0
0.01.061.481 I llm_load_print_meta: n_expert_used    = 0
0.01.061.484 I llm_load_print_meta: causal attn      = 1
0.01.061.484 I llm_load_print_meta: pooling type     = 0
0.01.061.484 I llm_load_print_meta: rope type        = 2
0.01.061.485 I llm_load_print_meta: rope scaling     = linear
0.01.061.486 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.061.487 I llm_load_print_meta: freq_scale_train = 1
0.01.061.487 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.061.488 I llm_load_print_meta: rope_finetuned   = unknown
0.01.061.488 I llm_load_print_meta: ssm_d_conv       = 0
0.01.061.488 I llm_load_print_meta: ssm_d_inner      = 0
0.01.061.489 I llm_load_print_meta: ssm_d_state      = 0
0.01.061.489 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.061.489 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.061.492 I llm_load_print_meta: model type       = 2B
0.01.061.494 I llm_load_print_meta: model ftype      = Q8_0
0.01.061.495 I llm_load_print_meta: model params     = 2.51 B
0.01.061.497 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.061.498 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.061.498 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.061.499 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.061.499 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.061.500 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.061.500 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.061.501 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.061.508 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.061.511 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.061.511 I llm_load_print_meta: max token length = 93
0.01.159.807 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.166.744 I llama_new_context_with_model: n_seq_max     = 1
0.01.166.749 I llama_new_context_with_model: n_ctx         = 4096
0.01.166.750 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.166.750 I llama_new_context_with_model: n_batch       = 2048
0.01.166.751 I llama_new_context_with_model: n_ubatch      = 512
0.01.166.751 I llama_new_context_with_model: flash_attn    = 0
0.01.166.754 I llama_new_context_with_model: freq_base     = 10000.0
0.01.166.754 I llama_new_context_with_model: freq_scale    = 1
0.01.166.755 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.166.834 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.181.363 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.181.406 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.181.524 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.185.083 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.185.087 I llama_new_context_with_model: graph nodes  = 601
0.01.185.087 I llama_new_context_with_model: graph splits = 1
0.01.185.112 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.185.115 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.816.065 I main: llama threadpool init, n_threads = 4
0.01.816.081 I 
0.01.816.203 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.816.207 I 
0.01.816.430 I sampler seed: 1389259173
0.01.816.444 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.816.454 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.816.455 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.816.455 I 
 increasities in the early church, and how the early church responded to these challenges.

**Answer:**

**1. Persecution and Abuse:**

-

0.15.367.425 I llama_perf_sampler_print:    sampling time =      48.15 ms /    33 runs   (    1.46 ms per token,   685.30 tokens per second)
0.15.367.429 I llama_perf_context_print:        load time =    1815.14 ms
0.15.367.431 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.367.433 I llama_perf_context_print:        eval time =   13468.23 ms /    32 runs   (  420.88 ms per token,     2.38 tokens per second)
0.15.367.435 I llama_perf_context_print:       total time =   13551.37 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4455 (1204f972) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.842 I main: llama backend init
0.00.000.849 I main: load the model and apply lora adapter, if any
0.00.085.429 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.442 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.539 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.562 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.567 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.569 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.571 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.573 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.576 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.578 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.585 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.587 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.588 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.590 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.592 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.185 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.245 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.712 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.724 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.726 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.727 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.729 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.731 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.736 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.737 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.416.739 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.741 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.416.743 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.416.751 I llama_model_loader: - type  f32:   37 tensors
0.00.416.753 I llama_model_loader: - type q8_0:  127 tensors
0.00.688.498 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.814.943 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.815.897 I llm_load_vocab: special tokens cache size = 5
0.01.040.025 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.040.107 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.040.115 I llm_load_print_meta: arch             = gemma
0.01.040.116 I llm_load_print_meta: vocab type       = SPM
0.01.040.117 I llm_load_print_meta: n_vocab          = 256000
0.01.040.119 I llm_load_print_meta: n_merges         = 0
0.01.040.119 I llm_load_print_meta: vocab_only       = 0
0.01.040.120 I llm_load_print_meta: n_ctx_train      = 8192
0.01.040.120 I llm_load_print_meta: n_embd           = 2048
0.01.040.120 I llm_load_print_meta: n_layer          = 18
0.01.040.200 I llm_load_print_meta: n_head           = 8
0.01.040.207 I llm_load_print_meta: n_head_kv        = 1
0.01.040.207 I llm_load_print_meta: n_rot            = 256
0.01.040.208 I llm_load_print_meta: n_swa            = 0
0.01.040.208 I llm_load_print_meta: n_embd_head_k    = 256
0.01.040.208 I llm_load_print_meta: n_embd_head_v    = 256
0.01.040.214 I llm_load_print_meta: n_gqa            = 8
0.01.040.218 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.040.223 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.040.225 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.040.226 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.040.227 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.040.227 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.040.227 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.040.233 I llm_load_print_meta: n_ff             = 16384
0.01.040.233 I llm_load_print_meta: n_expert         = 0
0.01.040.234 I llm_load_print_meta: n_expert_used    = 0
0.01.040.234 I llm_load_print_meta: causal attn      = 1
0.01.040.234 I llm_load_print_meta: pooling type     = 0
0.01.040.234 I llm_load_print_meta: rope type        = 2
0.01.040.235 I llm_load_print_meta: rope scaling     = linear
0.01.040.236 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.040.237 I llm_load_print_meta: freq_scale_train = 1
0.01.040.238 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.040.238 I llm_load_print_meta: rope_finetuned   = unknown
0.01.040.239 I llm_load_print_meta: ssm_d_conv       = 0
0.01.040.239 I llm_load_print_meta: ssm_d_inner      = 0
0.01.040.239 I llm_load_print_meta: ssm_d_state      = 0
0.01.040.239 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.040.240 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.040.242 I llm_load_print_meta: model type       = 2B
0.01.040.244 I llm_load_print_meta: model ftype      = Q8_0
0.01.040.244 I llm_load_print_meta: model params     = 2.51 B
0.01.040.245 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.040.245 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.040.246 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.040.247 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.040.247 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.040.248 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.040.248 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.040.249 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.040.256 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.040.257 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.040.257 I llm_load_print_meta: max token length = 93
0.01.120.579 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.120.588 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.120.589 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.120.590 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.120.591 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.120.591 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.127.603 I llama_new_context_with_model: n_seq_max     = 1
0.01.127.608 I llama_new_context_with_model: n_ctx         = 4096
0.01.127.608 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.127.609 I llama_new_context_with_model: n_batch       = 2048
0.01.127.609 I llama_new_context_with_model: n_ubatch      = 512
0.01.127.609 I llama_new_context_with_model: flash_attn    = 0
0.01.127.612 I llama_new_context_with_model: freq_base     = 10000.0
0.01.127.612 I llama_new_context_with_model: freq_scale    = 1
0.01.127.613 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.127.695 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.141.866 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.141.905 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.142.026 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.145.246 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.145.250 I llama_new_context_with_model: graph nodes  = 601
0.01.145.250 I llama_new_context_with_model: graph splits = 1
0.01.145.277 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.145.280 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.757.174 I main: llama threadpool init, n_threads = 4
0.01.757.191 I 
0.01.757.312 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.757.316 I 
0.01.757.539 I sampler seed: 3156363525
0.01.757.553 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.757.562 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.757.565 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.757.566 I 
 increasities, and the broader context of the issue. [end of text]


0.06.846.308 I llama_perf_sampler_print:    sampling time =      18.29 ms /    13 runs   (    1.41 ms per token,   710.73 tokens per second)
0.06.846.312 I llama_perf_context_print:        load time =    1756.23 ms
0.06.846.313 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.06.846.315 I llama_perf_context_print:        eval time =    5056.17 ms /    12 runs   (  421.35 ms per token,     2.37 tokens per second)
0.06.846.317 I llama_perf_context_print:       total time =    5089.15 ms /    13 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.625 I build: 4455 (1204f972) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.085.408 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.420 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.514 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.532 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.535 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.541 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.544 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.546 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.547 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.549 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.551 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.558 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.560 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.562 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.563 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.565 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.316.966 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.418.974 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.443.621 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.443.637 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.443.638 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.443.640 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.443.642 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.443.643 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.443.645 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.443.650 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.443.652 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.443.654 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.443.656 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.443.657 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.443.667 I llama_model_loader: - type  f32:   37 tensors
0.00.443.669 I llama_model_loader: - type q8_0:  127 tensors
0.00.705.283 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.825.657 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.826.628 I llm_load_vocab: special tokens cache size = 5
0.01.052.419 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.052.495 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.052.503 I llm_load_print_meta: arch             = gemma
0.01.052.504 I llm_load_print_meta: vocab type       = SPM
0.01.052.505 I llm_load_print_meta: n_vocab          = 256000
0.01.052.507 I llm_load_print_meta: n_merges         = 0
0.01.052.510 I llm_load_print_meta: vocab_only       = 0
0.01.052.511 I llm_load_print_meta: n_ctx_train      = 8192
0.01.052.511 I llm_load_print_meta: n_embd           = 2048
0.01.052.511 I llm_load_print_meta: n_layer          = 18
0.01.052.589 I llm_load_print_meta: n_head           = 8
0.01.052.599 I llm_load_print_meta: n_head_kv        = 1
0.01.052.600 I llm_load_print_meta: n_rot            = 256
0.01.052.602 I llm_load_print_meta: n_swa            = 0
0.01.052.603 I llm_load_print_meta: n_embd_head_k    = 256
0.01.052.603 I llm_load_print_meta: n_embd_head_v    = 256
0.01.052.608 I llm_load_print_meta: n_gqa            = 8
0.01.052.613 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.052.618 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.052.619 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.052.621 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.052.622 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.052.623 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.052.623 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.052.628 I llm_load_print_meta: n_ff             = 16384
0.01.052.629 I llm_load_print_meta: n_expert         = 0
0.01.052.629 I llm_load_print_meta: n_expert_used    = 0
0.01.052.632 I llm_load_print_meta: causal attn      = 1
0.01.052.632 I llm_load_print_meta: pooling type     = 0
0.01.052.633 I llm_load_print_meta: rope type        = 2
0.01.052.633 I llm_load_print_meta: rope scaling     = linear
0.01.052.635 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.052.635 I llm_load_print_meta: freq_scale_train = 1
0.01.052.636 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.052.636 I llm_load_print_meta: rope_finetuned   = unknown
0.01.052.636 I llm_load_print_meta: ssm_d_conv       = 0
0.01.052.637 I llm_load_print_meta: ssm_d_inner      = 0
0.01.052.637 I llm_load_print_meta: ssm_d_state      = 0
0.01.052.637 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.052.638 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.052.640 I llm_load_print_meta: model type       = 2B
0.01.052.642 I llm_load_print_meta: model ftype      = Q8_0
0.01.052.642 I llm_load_print_meta: model params     = 2.51 B
0.01.052.644 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.052.645 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.052.645 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.052.646 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.052.646 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.052.647 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.052.647 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.052.650 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.052.656 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.052.658 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.052.659 I llm_load_print_meta: max token length = 93
0.01.126.445 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.126.454 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.133.550 I llama_new_context_with_model: n_seq_max     = 1
0.01.133.556 I llama_new_context_with_model: n_ctx         = 4096
0.01.133.556 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.133.557 I llama_new_context_with_model: n_batch       = 2048
0.01.133.557 I llama_new_context_with_model: n_ubatch      = 512
0.01.133.557 I llama_new_context_with_model: flash_attn    = 0
0.01.133.560 I llama_new_context_with_model: freq_base     = 10000.0
0.01.133.561 I llama_new_context_with_model: freq_scale    = 1
0.01.133.561 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.133.642 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.148.093 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.148.135 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.148.253 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.151.859 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.151.863 I llama_new_context_with_model: graph nodes  = 601
0.01.151.863 I llama_new_context_with_model: graph splits = 1
0.01.151.890 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.151.893 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.762.785 I main: llama threadpool init, n_threads = 4
0.01.762.800 I 
0.01.762.922 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.762.926 I 
0.01.763.147 I sampler seed: 2544411969
0.01.763.161 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.763.173 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.763.173 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.763.174 I 
 increasities, and the broader historical context of the evolution of these concepts. [end of text]


0.08.507.443 I llama_perf_sampler_print:    sampling time =      24.23 ms /    17 runs   (    1.43 ms per token,   701.58 tokens per second)
0.08.507.458 I llama_perf_context_print:        load time =    1761.84 ms
0.08.507.460 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.507.462 I llama_perf_context_print:        eval time =    6702.03 ms /    16 runs   (  418.88 ms per token,     2.39 tokens per second)
0.08.507.463 I llama_perf_context_print:       total time =    6744.67 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m54.333s
user	2m39.672s
sys	0m9.340s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4455 (1204f972)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187764.73 ms
main:    total time = 187764.73 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.660 I build: 4455 (1204f972) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.000.863 I main: load the model and apply lora adapter, if any
0.00.085.516 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.530 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.631 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.653 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.656 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.661 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.663 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.664 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.666 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.668 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.669 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.677 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.678 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.680 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.681 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.291.726 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.393.927 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.418.377 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.418.389 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.418.391 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.418.392 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.418.394 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.418.397 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.398 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.403 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.404 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.418.406 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.418.408 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.418.410 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.418.412 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.418.421 I llama_model_loader: - type  f32:   37 tensors
0.00.418.423 I llama_model_loader: - type q4_K:  108 tensors
0.00.418.424 I llama_model_loader: - type q6_K:   19 tensors
0.00.687.561 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.816.529 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.817.479 I llm_load_vocab: special tokens cache size = 5
0.01.035.906 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.035.990 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.035.995 I llm_load_print_meta: arch             = gemma
0.01.035.996 I llm_load_print_meta: vocab type       = SPM
0.01.035.996 I llm_load_print_meta: n_vocab          = 256000
0.01.035.999 I llm_load_print_meta: n_merges         = 0
0.01.035.999 I llm_load_print_meta: vocab_only       = 0
0.01.036.000 I llm_load_print_meta: n_ctx_train      = 8192
0.01.036.000 I llm_load_print_meta: n_embd           = 2048
0.01.036.001 I llm_load_print_meta: n_layer          = 18
0.01.036.080 I llm_load_print_meta: n_head           = 8
0.01.036.090 I llm_load_print_meta: n_head_kv        = 1
0.01.036.090 I llm_load_print_meta: n_rot            = 256
0.01.036.091 I llm_load_print_meta: n_swa            = 0
0.01.036.092 I llm_load_print_meta: n_embd_head_k    = 256
0.01.036.092 I llm_load_print_meta: n_embd_head_v    = 256
0.01.036.097 I llm_load_print_meta: n_gqa            = 8
0.01.036.101 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.036.106 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.036.110 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.036.111 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.036.112 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.036.112 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.036.112 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.036.117 I llm_load_print_meta: n_ff             = 16384
0.01.036.118 I llm_load_print_meta: n_expert         = 0
0.01.036.119 I llm_load_print_meta: n_expert_used    = 0
0.01.036.119 I llm_load_print_meta: causal attn      = 1
0.01.036.119 I llm_load_print_meta: pooling type     = 0
0.01.036.120 I llm_load_print_meta: rope type        = 2
0.01.036.121 I llm_load_print_meta: rope scaling     = linear
0.01.036.122 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.036.123 I llm_load_print_meta: freq_scale_train = 1
0.01.036.123 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.036.124 I llm_load_print_meta: rope_finetuned   = unknown
0.01.036.125 I llm_load_print_meta: ssm_d_conv       = 0
0.01.036.126 I llm_load_print_meta: ssm_d_inner      = 0
0.01.036.126 I llm_load_print_meta: ssm_d_state      = 0
0.01.036.127 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.036.127 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.036.130 I llm_load_print_meta: model type       = 2B
0.01.036.133 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.036.134 I llm_load_print_meta: model params     = 2.51 B
0.01.036.134 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.036.135 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.036.137 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.036.137 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.036.138 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.036.149 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.036.150 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.036.151 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.036.158 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.036.159 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.036.171 I llm_load_print_meta: max token length = 93
0.01.098.859 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.098.868 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.098.869 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.098.870 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.098.870 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.098.871 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.105.915 I llama_new_context_with_model: n_seq_max     = 1
0.01.105.921 I llama_new_context_with_model: n_ctx         = 4096
0.01.105.921 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.105.921 I llama_new_context_with_model: n_batch       = 2048
0.01.105.922 I llama_new_context_with_model: n_ubatch      = 512
0.01.105.922 I llama_new_context_with_model: flash_attn    = 0
0.01.105.924 I llama_new_context_with_model: freq_base     = 10000.0
0.01.105.925 I llama_new_context_with_model: freq_scale    = 1
0.01.105.926 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.106.008 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.120.205 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.120.243 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.120.360 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.123.552 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.123.556 I llama_new_context_with_model: graph nodes  = 601
0.01.123.556 I llama_new_context_with_model: graph splits = 1
0.01.123.580 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.123.583 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.702.048 I main: llama threadpool init, n_threads = 4
0.01.702.067 I 
0.01.702.187 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.702.191 I 
0.01.702.419 I sampler seed: 404225501
0.01.702.433 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.702.446 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.702.446 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.702.447 I 
 increamically.

I have a question. What is the meaning of the word "erosion"?

Erosion is the process of wearing away of the land surface

0.12.821.161 I llama_perf_sampler_print:    sampling time =      48.21 ms /    33 runs   (    1.46 ms per token,   684.51 tokens per second)
0.12.821.163 I llama_perf_context_print:        load time =    1701.10 ms
0.12.821.165 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.821.166 I llama_perf_context_print:        eval time =   11035.15 ms /    32 runs   (  344.85 ms per token,     2.90 tokens per second)
0.12.821.167 I llama_perf_context_print:       total time =   11119.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4455 (1204f972)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 187824.64 ms
main:    total time = 187824.64 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4455 (1204f972) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.813 I main: llama backend init
0.00.000.820 I main: load the model and apply lora adapter, if any
0.00.085.734 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.853 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.879 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.884 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.889 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.891 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.893 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.894 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.896 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.898 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.905 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.908 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.909 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.911 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.303.748 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.406.423 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.431.070 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.431.081 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.431.083 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.431.084 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.431.086 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.431.088 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.431.090 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.431.094 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.431.096 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.431.098 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.431.107 I llama_model_loader: - type  f32:   37 tensors
0.00.431.110 I llama_model_loader: - type q4_K:  108 tensors
0.00.431.110 I llama_model_loader: - type q6_K:   19 tensors
0.00.691.536 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.812.403 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.813.354 I llm_load_vocab: special tokens cache size = 5
0.01.033.561 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.033.641 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.033.646 I llm_load_print_meta: arch             = gemma
0.01.033.647 I llm_load_print_meta: vocab type       = SPM
0.01.033.647 I llm_load_print_meta: n_vocab          = 256000
0.01.033.649 I llm_load_print_meta: n_merges         = 0
0.01.033.650 I llm_load_print_meta: vocab_only       = 0
0.01.033.650 I llm_load_print_meta: n_ctx_train      = 8192
0.01.033.651 I llm_load_print_meta: n_embd           = 2048
0.01.033.651 I llm_load_print_meta: n_layer          = 18
0.01.033.729 I llm_load_print_meta: n_head           = 8
0.01.033.736 I llm_load_print_meta: n_head_kv        = 1
0.01.033.737 I llm_load_print_meta: n_rot            = 256
0.01.033.737 I llm_load_print_meta: n_swa            = 0
0.01.033.738 I llm_load_print_meta: n_embd_head_k    = 256
0.01.033.738 I llm_load_print_meta: n_embd_head_v    = 256
0.01.033.744 I llm_load_print_meta: n_gqa            = 8
0.01.033.748 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.033.753 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.033.754 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.033.756 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.033.757 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.033.758 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.033.762 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.033.767 I llm_load_print_meta: n_ff             = 16384
0.01.033.767 I llm_load_print_meta: n_expert         = 0
0.01.033.769 I llm_load_print_meta: n_expert_used    = 0
0.01.033.769 I llm_load_print_meta: causal attn      = 1
0.01.033.770 I llm_load_print_meta: pooling type     = 0
0.01.033.771 I llm_load_print_meta: rope type        = 2
0.01.033.771 I llm_load_print_meta: rope scaling     = linear
0.01.033.773 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.033.774 I llm_load_print_meta: freq_scale_train = 1
0.01.033.774 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.033.775 I llm_load_print_meta: rope_finetuned   = unknown
0.01.033.776 I llm_load_print_meta: ssm_d_conv       = 0
0.01.033.776 I llm_load_print_meta: ssm_d_inner      = 0
0.01.033.776 I llm_load_print_meta: ssm_d_state      = 0
0.01.033.777 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.033.780 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.033.783 I llm_load_print_meta: model type       = 2B
0.01.033.785 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.033.786 I llm_load_print_meta: model params     = 2.51 B
0.01.033.786 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.033.787 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.033.795 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.033.797 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.033.798 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.033.799 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.033.799 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.033.800 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.033.806 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.033.807 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.033.808 I llm_load_print_meta: max token length = 93
0.01.093.508 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.100.755 I llama_new_context_with_model: n_seq_max     = 1
0.01.100.760 I llama_new_context_with_model: n_ctx         = 4096
0.01.100.760 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.100.761 I llama_new_context_with_model: n_batch       = 2048
0.01.100.761 I llama_new_context_with_model: n_ubatch      = 512
0.01.100.762 I llama_new_context_with_model: flash_attn    = 0
0.01.100.764 I llama_new_context_with_model: freq_base     = 10000.0
0.01.100.764 I llama_new_context_with_model: freq_scale    = 1
0.01.100.765 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.100.847 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.115.977 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.116.019 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.116.144 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.119.405 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.119.409 I llama_new_context_with_model: graph nodes  = 601
0.01.119.410 I llama_new_context_with_model: graph splits = 1
0.01.119.434 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.119.437 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.699.884 I main: llama threadpool init, n_threads = 4
0.01.699.900 I 
0.01.700.033 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.700.038 I 
0.01.700.266 I sampler seed: 1886991790
0.01.700.280 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.700.289 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.700.294 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.700.294 I 
 increasities, and other forms of flattery are not inherently narcissistic. Rather, they can be used as a way to express genuine affection and appreciation. [end of text]


0.12.175.615 I llama_perf_sampler_print:    sampling time =      45.39 ms /    31 runs   (    1.46 ms per token,   682.94 tokens per second)
0.12.175.618 I llama_perf_context_print:        load time =    1698.97 ms
0.12.175.619 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.175.621 I llama_perf_context_print:        eval time =   10396.82 ms /    30 runs   (  346.56 ms per token,     2.89 tokens per second)
0.12.175.622 I llama_perf_context_print:       total time =   10475.74 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m43.800s
user	46m43.810s
sys	0m6.385s
