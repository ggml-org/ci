+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 4053 (120d5128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.021.588 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.598 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.605 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.611 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.615 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.618 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.619 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.620 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.620 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.621 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.621 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.625 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.626 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.626 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.627 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.627 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.885 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.193 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.116 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.123 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.124 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.124 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.125 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.126 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.126 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.129 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.130 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.130 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.131 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.132 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.135 I llama_model_loader: - type  f32:   37 tensors
0.00.132.136 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.883 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.951 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.472 I llm_load_vocab: special tokens cache size = 5
0.00.268.610 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.627 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.628 I llm_load_print_meta: arch             = gemma
0.00.268.628 I llm_load_print_meta: vocab type       = SPM
0.00.268.629 I llm_load_print_meta: n_vocab          = 256000
0.00.268.629 I llm_load_print_meta: n_merges         = 0
0.00.268.630 I llm_load_print_meta: vocab_only       = 0
0.00.268.630 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.630 I llm_load_print_meta: n_embd           = 2048
0.00.268.631 I llm_load_print_meta: n_layer          = 18
0.00.268.642 I llm_load_print_meta: n_head           = 8
0.00.268.644 I llm_load_print_meta: n_head_kv        = 1
0.00.268.644 I llm_load_print_meta: n_rot            = 256
0.00.268.644 I llm_load_print_meta: n_swa            = 0
0.00.268.644 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.645 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.646 I llm_load_print_meta: n_gqa            = 8
0.00.268.646 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.647 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.648 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.650 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.650 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.650 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.651 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.652 I llm_load_print_meta: n_ff             = 16384
0.00.268.652 I llm_load_print_meta: n_expert         = 0
0.00.268.652 I llm_load_print_meta: n_expert_used    = 0
0.00.268.652 I llm_load_print_meta: causal attn      = 1
0.00.268.653 I llm_load_print_meta: pooling type     = 0
0.00.268.653 I llm_load_print_meta: rope type        = 2
0.00.268.653 I llm_load_print_meta: rope scaling     = linear
0.00.268.655 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.655 I llm_load_print_meta: freq_scale_train = 1
0.00.268.655 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.656 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.656 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.656 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.657 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.657 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.657 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.658 I llm_load_print_meta: model type       = 2B
0.00.268.658 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.659 I llm_load_print_meta: model params     = 2.51 B
0.00.268.660 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.660 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.661 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.661 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.661 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.662 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.662 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.662 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.663 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.663 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.663 I llm_load_print_meta: max token length = 93
0.00.370.409 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.370.425 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.370.425 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.370.426 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.370.427 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.370.427 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.375.699 I llama_new_context_with_model: n_seq_max     = 1
0.00.375.705 I llama_new_context_with_model: n_ctx         = 4096
0.00.375.706 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.375.706 I llama_new_context_with_model: n_batch       = 2048
0.00.375.707 I llama_new_context_with_model: n_ubatch      = 512
0.00.375.707 I llama_new_context_with_model: flash_attn    = 0
0.00.375.709 I llama_new_context_with_model: freq_base     = 10000.0
0.00.375.710 I llama_new_context_with_model: freq_scale    = 1
0.00.375.711 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.390.496 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.390.510 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.390.601 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.391.811 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.391.818 I llama_new_context_with_model: graph nodes  = 601
0.00.391.818 I llama_new_context_with_model: graph splits = 1
0.00.391.820 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.476.797 I main: llama threadpool init, n_threads = 4
0.00.476.809 I 
0.00.476.885 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.476.888 I 
0.00.476.934 I sampler seed: 3159183229
0.00.476.945 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.476.950 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.476.951 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.476.951 I 
 increasively.

I'm not sure what you're trying to say. Can you please rephrase your question? [end of text]


0.02.295.932 I llama_perf_sampler_print:    sampling time =       3.86 ms /    27 runs   (    0.14 ms per token,  6987.58 tokens per second)
0.02.295.935 I llama_perf_context_print:        load time =     475.90 ms
0.02.295.936 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.295.937 I llama_perf_context_print:        eval time =    1803.85 ms /    26 runs   (   69.38 ms per token,    14.41 tokens per second)
0.02.295.938 I llama_perf_context_print:       total time =    1819.14 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.537 I build: 4053 (120d5128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.742 I main: llama backend init
0.00.000.877 I main: load the model and apply lora adapter, if any
0.00.021.515 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.526 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.534 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.534 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.538 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.539 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.539 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.540 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.540 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.541 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.545 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.545 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.546 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.546 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.547 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.120 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.378 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.247 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.254 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.254 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.255 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.255 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.256 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.257 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.259 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.260 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.260 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.262 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.263 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.267 I llama_model_loader: - type  f32:   37 tensors
0.00.132.267 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.955 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.051 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.561 I llm_load_vocab: special tokens cache size = 5
0.00.262.753 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.768 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.768 I llm_load_print_meta: arch             = gemma
0.00.262.769 I llm_load_print_meta: vocab type       = SPM
0.00.262.769 I llm_load_print_meta: n_vocab          = 256000
0.00.262.770 I llm_load_print_meta: n_merges         = 0
0.00.262.770 I llm_load_print_meta: vocab_only       = 0
0.00.262.770 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.771 I llm_load_print_meta: n_embd           = 2048
0.00.262.771 I llm_load_print_meta: n_layer          = 18
0.00.262.781 I llm_load_print_meta: n_head           = 8
0.00.262.782 I llm_load_print_meta: n_head_kv        = 1
0.00.262.783 I llm_load_print_meta: n_rot            = 256
0.00.262.783 I llm_load_print_meta: n_swa            = 0
0.00.262.783 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.784 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.785 I llm_load_print_meta: n_gqa            = 8
0.00.262.786 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.786 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.787 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.789 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.789 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.789 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.790 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.790 I llm_load_print_meta: n_ff             = 16384
0.00.262.791 I llm_load_print_meta: n_expert         = 0
0.00.262.791 I llm_load_print_meta: n_expert_used    = 0
0.00.262.791 I llm_load_print_meta: causal attn      = 1
0.00.262.792 I llm_load_print_meta: pooling type     = 0
0.00.262.792 I llm_load_print_meta: rope type        = 2
0.00.262.792 I llm_load_print_meta: rope scaling     = linear
0.00.262.794 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.794 I llm_load_print_meta: freq_scale_train = 1
0.00.262.795 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.795 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.795 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.795 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.796 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.796 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.796 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.797 I llm_load_print_meta: model type       = 2B
0.00.262.797 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.798 I llm_load_print_meta: model params     = 2.51 B
0.00.262.799 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.799 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.799 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.800 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.800 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.800 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.801 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.801 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.801 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.802 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.802 I llm_load_print_meta: max token length = 93
0.00.357.767 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.956 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.962 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.963 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.963 I llama_new_context_with_model: n_batch       = 2048
0.00.362.963 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.964 I llama_new_context_with_model: flash_attn    = 0
0.00.362.966 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.967 I llama_new_context_with_model: freq_scale    = 1
0.00.362.968 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.623 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.640 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.728 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.932 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.938 I llama_new_context_with_model: graph nodes  = 601
0.00.379.938 I llama_new_context_with_model: graph splits = 1
0.00.379.940 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.584 I main: llama threadpool init, n_threads = 4
0.00.460.598 I 
0.00.460.673 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.676 I 
0.00.460.723 I sampler seed: 2451860317
0.00.460.734 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.737 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.738 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.738 I 
 increasities is a dangerous and harmful practice.

**Response:**

I cannot provide opinions or engage in discussions that promote harmful or dangerous practices. My purpose is

0.02.648.047 I llama_perf_sampler_print:    sampling time =       4.89 ms /    33 runs   (    0.15 ms per token,  6751.23 tokens per second)
0.02.648.050 I llama_perf_context_print:        load time =     459.68 ms
0.02.648.052 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.648.054 I llama_perf_context_print:        eval time =    2168.74 ms /    32 runs   (   67.77 ms per token,    14.76 tokens per second)
0.02.648.055 I llama_perf_context_print:       total time =    2187.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.549 I build: 4053 (120d5128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.768 I main: llama backend init
0.00.000.908 I main: load the model and apply lora adapter, if any
0.00.022.647 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.658 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.666 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.675 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.676 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.687 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.688 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.693 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.694 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.695 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.696 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.701 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.703 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.704 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.705 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.706 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.334 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.201 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.091 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.097 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.098 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.098 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.099 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.100 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.101 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.103 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.103 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.104 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.104 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.134.105 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.109 I llama_model_loader: - type  f32:   37 tensors
0.00.134.110 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.489 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.243.911 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.474 I llm_load_vocab: special tokens cache size = 5
0.00.265.828 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.843 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.844 I llm_load_print_meta: arch             = gemma
0.00.265.845 I llm_load_print_meta: vocab type       = SPM
0.00.265.845 I llm_load_print_meta: n_vocab          = 256000
0.00.265.846 I llm_load_print_meta: n_merges         = 0
0.00.265.846 I llm_load_print_meta: vocab_only       = 0
0.00.265.847 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.847 I llm_load_print_meta: n_embd           = 2048
0.00.265.847 I llm_load_print_meta: n_layer          = 18
0.00.265.859 I llm_load_print_meta: n_head           = 8
0.00.265.860 I llm_load_print_meta: n_head_kv        = 1
0.00.265.861 I llm_load_print_meta: n_rot            = 256
0.00.265.861 I llm_load_print_meta: n_swa            = 0
0.00.265.861 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.862 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.862 I llm_load_print_meta: n_gqa            = 8
0.00.265.864 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.864 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.865 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.866 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.867 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.867 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.867 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.868 I llm_load_print_meta: n_ff             = 16384
0.00.265.869 I llm_load_print_meta: n_expert         = 0
0.00.265.869 I llm_load_print_meta: n_expert_used    = 0
0.00.265.869 I llm_load_print_meta: causal attn      = 1
0.00.265.870 I llm_load_print_meta: pooling type     = 0
0.00.265.870 I llm_load_print_meta: rope type        = 2
0.00.265.870 I llm_load_print_meta: rope scaling     = linear
0.00.265.872 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.872 I llm_load_print_meta: freq_scale_train = 1
0.00.265.873 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.873 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.873 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.873 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.874 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.874 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.874 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.875 I llm_load_print_meta: model type       = 2B
0.00.265.875 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.876 I llm_load_print_meta: model params     = 2.51 B
0.00.265.877 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.877 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.878 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.878 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.879 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.879 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.879 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.879 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.880 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.880 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.880 I llm_load_print_meta: max token length = 93
0.00.355.260 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.355.268 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.269 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.355.269 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.355.270 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.270 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.360.643 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.650 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.651 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.651 I llama_new_context_with_model: n_batch       = 2048
0.00.360.651 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.652 I llama_new_context_with_model: flash_attn    = 0
0.00.360.655 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.656 I llama_new_context_with_model: freq_scale    = 1
0.00.360.657 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.169 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.376.184 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.376.273 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.377.525 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.377.530 I llama_new_context_with_model: graph nodes  = 601
0.00.377.530 I llama_new_context_with_model: graph splits = 1
0.00.377.532 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.633 I main: llama threadpool init, n_threads = 4
0.00.463.647 I 
0.00.463.735 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.463.739 I 
0.00.463.794 I sampler seed: 2662498420
0.00.463.805 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.808 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.808 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.809 I 
 increasively. 

I'm sorry, but I am unable to generate responses that contain sexually suggestive or inappropriate content. [end of text]


0.02.252.282 I llama_perf_sampler_print:    sampling time =       4.33 ms /    27 runs   (    0.16 ms per token,  6229.81 tokens per second)
0.02.252.284 I llama_perf_context_print:        load time =     462.70 ms
0.02.252.285 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.252.287 I llama_perf_context_print:        eval time =    1771.45 ms /    26 runs   (   68.13 ms per token,    14.68 tokens per second)
0.02.252.287 I llama_perf_context_print:       total time =    1788.66 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.565 I build: 4053 (120d5128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.756 I main: llama backend init
0.00.000.892 I main: load the model and apply lora adapter, if any
0.00.021.389 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.399 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.407 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.412 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.412 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.416 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.417 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.418 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.418 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.418 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.419 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.423 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.423 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.424 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.424 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.425 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.967 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.420 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.238 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.244 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.245 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.245 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.246 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.247 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.247 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.250 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.250 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.251 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.252 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.253 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.255 I llama_model_loader: - type  f32:   37 tensors
0.00.133.256 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.843 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.282 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.801 I llm_load_vocab: special tokens cache size = 5
0.00.262.014 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.030 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.030 I llm_load_print_meta: arch             = gemma
0.00.262.031 I llm_load_print_meta: vocab type       = SPM
0.00.262.031 I llm_load_print_meta: n_vocab          = 256000
0.00.262.032 I llm_load_print_meta: n_merges         = 0
0.00.262.032 I llm_load_print_meta: vocab_only       = 0
0.00.262.032 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.033 I llm_load_print_meta: n_embd           = 2048
0.00.262.033 I llm_load_print_meta: n_layer          = 18
0.00.262.045 I llm_load_print_meta: n_head           = 8
0.00.262.046 I llm_load_print_meta: n_head_kv        = 1
0.00.262.046 I llm_load_print_meta: n_rot            = 256
0.00.262.047 I llm_load_print_meta: n_swa            = 0
0.00.262.047 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.047 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.048 I llm_load_print_meta: n_gqa            = 8
0.00.262.049 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.050 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.051 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.052 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.052 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.053 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.053 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.054 I llm_load_print_meta: n_ff             = 16384
0.00.262.054 I llm_load_print_meta: n_expert         = 0
0.00.262.054 I llm_load_print_meta: n_expert_used    = 0
0.00.262.055 I llm_load_print_meta: causal attn      = 1
0.00.262.055 I llm_load_print_meta: pooling type     = 0
0.00.262.055 I llm_load_print_meta: rope type        = 2
0.00.262.056 I llm_load_print_meta: rope scaling     = linear
0.00.262.058 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.058 I llm_load_print_meta: freq_scale_train = 1
0.00.262.058 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.059 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.059 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.059 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.059 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.060 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.060 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.060 I llm_load_print_meta: model type       = 2B
0.00.262.061 I llm_load_print_meta: model ftype      = Q8_0
0.00.262.062 I llm_load_print_meta: model params     = 2.51 B
0.00.262.063 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.262.063 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.064 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.064 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.064 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.065 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.065 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.065 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.065 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.066 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.066 I llm_load_print_meta: max token length = 93
0.00.332.864 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.332.871 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.338.300 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.306 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.306 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.307 I llama_new_context_with_model: n_batch       = 2048
0.00.338.307 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.307 I llama_new_context_with_model: flash_attn    = 0
0.00.338.310 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.310 I llama_new_context_with_model: freq_scale    = 1
0.00.338.311 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.337 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.351 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.450 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.686 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.691 I llama_new_context_with_model: graph nodes  = 601
0.00.354.691 I llama_new_context_with_model: graph splits = 1
0.00.354.693 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.441.416 I main: llama threadpool init, n_threads = 4
0.00.441.429 I 
0.00.441.523 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.527 I 
0.00.441.573 I sampler seed: 2673478635
0.00.441.583 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.587 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.587 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.589 I 
 increasements. [end of text]


0.00.743.899 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7886.44 tokens per second)
0.00.743.902 I llama_perf_context_print:        load time =     440.50 ms
0.00.743.903 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.743.905 I llama_perf_context_print:        eval time =     298.88 ms /     4 runs   (   74.72 ms per token,    13.38 tokens per second)
0.00.743.906 I llama_perf_context_print:       total time =     302.49 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.452s
user	0m27.182s
sys	0m9.389s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4053 (120d5128)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32148.01 ms
main:    total time = 32148.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.536 I build: 4053 (120d5128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.757 I main: llama backend init
0.00.000.890 I main: load the model and apply lora adapter, if any
0.00.021.881 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.891 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.899 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.904 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.905 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.910 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.914 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.915 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.915 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.916 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.917 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.920 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.920 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.921 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.921 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.922 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.520 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.056 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.921 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.927 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.928 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.928 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.929 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.930 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.930 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.933 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.934 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.935 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.936 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.937 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.940 I llama_model_loader: - type  f32:   37 tensors
0.00.132.941 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.942 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.460 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.548 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.138 I llm_load_vocab: special tokens cache size = 5
0.00.270.496 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.513 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.514 I llm_load_print_meta: arch             = gemma
0.00.270.514 I llm_load_print_meta: vocab type       = SPM
0.00.270.515 I llm_load_print_meta: n_vocab          = 256000
0.00.270.515 I llm_load_print_meta: n_merges         = 0
0.00.270.516 I llm_load_print_meta: vocab_only       = 0
0.00.270.516 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.517 I llm_load_print_meta: n_embd           = 2048
0.00.270.517 I llm_load_print_meta: n_layer          = 18
0.00.270.529 I llm_load_print_meta: n_head           = 8
0.00.270.530 I llm_load_print_meta: n_head_kv        = 1
0.00.270.530 I llm_load_print_meta: n_rot            = 256
0.00.270.531 I llm_load_print_meta: n_swa            = 0
0.00.270.531 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.531 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.532 I llm_load_print_meta: n_gqa            = 8
0.00.270.533 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.534 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.535 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.536 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.537 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.537 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.537 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.538 I llm_load_print_meta: n_ff             = 16384
0.00.270.538 I llm_load_print_meta: n_expert         = 0
0.00.270.539 I llm_load_print_meta: n_expert_used    = 0
0.00.270.539 I llm_load_print_meta: causal attn      = 1
0.00.270.540 I llm_load_print_meta: pooling type     = 0
0.00.270.540 I llm_load_print_meta: rope type        = 2
0.00.270.540 I llm_load_print_meta: rope scaling     = linear
0.00.270.542 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.542 I llm_load_print_meta: freq_scale_train = 1
0.00.270.542 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.543 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.543 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.543 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.543 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.543 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.544 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.545 I llm_load_print_meta: model type       = 2B
0.00.270.545 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.270.546 I llm_load_print_meta: model params     = 2.51 B
0.00.270.546 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.270.547 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.547 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.548 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.548 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.548 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.549 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.549 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.549 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.550 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.550 I llm_load_print_meta: max token length = 93
0.00.331.302 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.331.309 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.331.309 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.331.310 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.331.310 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.331.311 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.336.705 I llama_new_context_with_model: n_seq_max     = 1
0.00.336.714 I llama_new_context_with_model: n_ctx         = 4096
0.00.336.714 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.336.715 I llama_new_context_with_model: n_batch       = 2048
0.00.336.715 I llama_new_context_with_model: n_ubatch      = 512
0.00.336.716 I llama_new_context_with_model: flash_attn    = 0
0.00.336.718 I llama_new_context_with_model: freq_base     = 10000.0
0.00.336.720 I llama_new_context_with_model: freq_scale    = 1
0.00.336.721 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.352.479 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.352.494 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.352.590 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.833 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.353.840 I llama_new_context_with_model: graph nodes  = 601
0.00.353.840 I llama_new_context_with_model: graph splits = 1
0.00.353.842 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.022 I main: llama threadpool init, n_threads = 4
0.00.430.034 I 
0.00.430.109 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.430.112 I 
0.00.430.154 I sampler seed: 3396559327
0.00.430.165 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.168 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.170 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.170 I 
 seconally, highlighting key points.

**Assistant**

I am unable to provide assistance with tasks that involve unethical or harmful activities. [end of text]


0.01.861.539 I llama_perf_sampler_print:    sampling time =       4.77 ms /    29 runs   (    0.16 ms per token,  6080.94 tokens per second)
0.01.861.541 I llama_perf_context_print:        load time =     429.11 ms
0.01.861.542 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.861.544 I llama_perf_context_print:        eval time =    1413.76 ms /    28 runs   (   50.49 ms per token,    19.81 tokens per second)
0.01.861.544 I llama_perf_context_print:       total time =    1431.53 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4053 (120d5128)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32002.20 ms
main:    total time = 32002.20 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.556 I build: 4053 (120d5128) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.743 I main: llama backend init
0.00.000.879 I main: load the model and apply lora adapter, if any
0.00.021.421 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.443 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.446 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.450 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.450 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.451 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.452 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.453 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.453 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.457 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.457 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.458 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.458 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.459 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.898 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.722 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.601 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.609 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.610 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.610 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.611 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.612 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.612 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.615 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.616 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.620 I llama_model_loader: - type  f32:   37 tensors
0.00.132.621 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.622 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.002 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.237.389 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.237.849 I llm_load_vocab: special tokens cache size = 5
0.00.259.361 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.376 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.376 I llm_load_print_meta: arch             = gemma
0.00.259.377 I llm_load_print_meta: vocab type       = SPM
0.00.259.378 I llm_load_print_meta: n_vocab          = 256000
0.00.259.378 I llm_load_print_meta: n_merges         = 0
0.00.259.379 I llm_load_print_meta: vocab_only       = 0
0.00.259.379 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.379 I llm_load_print_meta: n_embd           = 2048
0.00.259.379 I llm_load_print_meta: n_layer          = 18
0.00.259.391 I llm_load_print_meta: n_head           = 8
0.00.259.392 I llm_load_print_meta: n_head_kv        = 1
0.00.259.392 I llm_load_print_meta: n_rot            = 256
0.00.259.392 I llm_load_print_meta: n_swa            = 0
0.00.259.393 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.393 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.394 I llm_load_print_meta: n_gqa            = 8
0.00.259.395 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.396 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.397 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.398 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.399 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.399 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.399 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.400 I llm_load_print_meta: n_ff             = 16384
0.00.259.400 I llm_load_print_meta: n_expert         = 0
0.00.259.401 I llm_load_print_meta: n_expert_used    = 0
0.00.259.401 I llm_load_print_meta: causal attn      = 1
0.00.259.401 I llm_load_print_meta: pooling type     = 0
0.00.259.401 I llm_load_print_meta: rope type        = 2
0.00.259.402 I llm_load_print_meta: rope scaling     = linear
0.00.259.403 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.404 I llm_load_print_meta: freq_scale_train = 1
0.00.259.404 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.404 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.405 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.405 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.405 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.405 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.406 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.406 I llm_load_print_meta: model type       = 2B
0.00.259.407 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.407 I llm_load_print_meta: model params     = 2.51 B
0.00.259.408 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.409 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.409 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.409 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.410 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.410 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.410 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.411 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.411 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.412 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.412 I llm_load_print_meta: max token length = 93
0.00.317.662 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.322.850 I llama_new_context_with_model: n_seq_max     = 1
0.00.322.855 I llama_new_context_with_model: n_ctx         = 4096
0.00.322.856 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.322.856 I llama_new_context_with_model: n_batch       = 2048
0.00.322.856 I llama_new_context_with_model: n_ubatch      = 512
0.00.322.857 I llama_new_context_with_model: flash_attn    = 0
0.00.322.859 I llama_new_context_with_model: freq_base     = 10000.0
0.00.322.860 I llama_new_context_with_model: freq_scale    = 1
0.00.322.861 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.338.474 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.488 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.338.577 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.339.847 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.339.853 I llama_new_context_with_model: graph nodes  = 601
0.00.339.854 I llama_new_context_with_model: graph splits = 1
0.00.339.856 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.413.923 I main: llama threadpool init, n_threads = 4
0.00.413.939 I 
0.00.414.035 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.414.043 I 
0.00.414.085 I sampler seed: 1787581475
0.00.414.097 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.414.099 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.414.100 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.414.100 I 
 maneutrally.  

**Answer:**  I am unable to generate responses that are disrespectful or insensitive towards individuals or groups. [end of text]


0.01.737.121 I llama_perf_sampler_print:    sampling time =       3.98 ms /    28 runs   (    0.14 ms per token,  7040.48 tokens per second)
0.01.737.124 I llama_perf_context_print:        load time =     413.02 ms
0.01.737.125 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.737.127 I llama_perf_context_print:        eval time =    1307.17 ms /    27 runs   (   48.41 ms per token,    20.66 tokens per second)
0.01.737.129 I llama_perf_context_print:       total time =    1323.21 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.670s
user	8m12.631s
sys	0m6.938s
