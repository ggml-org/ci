+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.625 I build: 3840 (922bf99a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.814 I main: llama backend init
0.00.002.743 I main: load the model and apply lora adapter, if any
0.00.024.584 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.758 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.840 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.851 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.852 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.856 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.858 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.867 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.869 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.870 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.870 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.877 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.881 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.881 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.882 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.883 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.505 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.179.995 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.191.991 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.191.999 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.000 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.001 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.002 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.003 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.004 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.007 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.007 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.008 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.009 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.192.010 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.017 I llama_model_loader: - type  f32:   37 tensors
0.00.192.020 I llama_model_loader: - type q8_0:  127 tensors
0.00.330.144 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.351.848 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.352.883 I llm_load_vocab: special tokens cache size = 5
0.00.420.683 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.420.743 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.420.745 I llm_load_print_meta: arch             = gemma
0.00.420.745 I llm_load_print_meta: vocab type       = SPM
0.00.420.746 I llm_load_print_meta: n_vocab          = 256000
0.00.420.748 I llm_load_print_meta: n_merges         = 0
0.00.420.749 I llm_load_print_meta: vocab_only       = 0
0.00.420.749 I llm_load_print_meta: n_ctx_train      = 8192
0.00.420.750 I llm_load_print_meta: n_embd           = 2048
0.00.420.750 I llm_load_print_meta: n_layer          = 18
0.00.420.810 I llm_load_print_meta: n_head           = 8
0.00.420.817 I llm_load_print_meta: n_head_kv        = 1
0.00.420.817 I llm_load_print_meta: n_rot            = 256
0.00.420.818 I llm_load_print_meta: n_swa            = 0
0.00.420.818 I llm_load_print_meta: n_embd_head_k    = 256
0.00.420.818 I llm_load_print_meta: n_embd_head_v    = 256
0.00.420.824 I llm_load_print_meta: n_gqa            = 8
0.00.420.829 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.420.834 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.420.835 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.420.837 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.420.842 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.420.842 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.420.843 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.420.848 I llm_load_print_meta: n_ff             = 16384
0.00.420.849 I llm_load_print_meta: n_expert         = 0
0.00.420.849 I llm_load_print_meta: n_expert_used    = 0
0.00.420.849 I llm_load_print_meta: causal attn      = 1
0.00.420.849 I llm_load_print_meta: pooling type     = 0
0.00.420.850 I llm_load_print_meta: rope type        = 2
0.00.420.850 I llm_load_print_meta: rope scaling     = linear
0.00.420.851 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.420.852 I llm_load_print_meta: freq_scale_train = 1
0.00.420.853 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.420.854 I llm_load_print_meta: rope_finetuned   = unknown
0.00.420.854 I llm_load_print_meta: ssm_d_conv       = 0
0.00.420.854 I llm_load_print_meta: ssm_d_inner      = 0
0.00.420.855 I llm_load_print_meta: ssm_d_state      = 0
0.00.420.856 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.420.869 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.420.873 I llm_load_print_meta: model type       = 2B
0.00.420.874 I llm_load_print_meta: model ftype      = Q8_0
0.00.420.875 I llm_load_print_meta: model params     = 2.51 B
0.00.420.876 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.420.876 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.420.877 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.420.878 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.420.878 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.420.879 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.420.879 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.420.880 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.420.887 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.420.889 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.420.889 I llm_load_print_meta: max token length = 93
0.00.421.070 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.521.228 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.521.238 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.521.239 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.521.240 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.521.240 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.521.241 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.526.806 I llama_new_context_with_model: n_ctx      = 8192
0.00.526.813 I llama_new_context_with_model: n_batch    = 2048
0.00.526.814 I llama_new_context_with_model: n_ubatch   = 512
0.00.526.814 I llama_new_context_with_model: flash_attn = 0
0.00.526.816 I llama_new_context_with_model: freq_base  = 10000.0
0.00.526.817 I llama_new_context_with_model: freq_scale = 1
0.00.555.865 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.555.911 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.556.025 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.557.406 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.557.412 I llama_new_context_with_model: graph nodes  = 601
0.00.557.412 I llama_new_context_with_model: graph splits = 1
0.00.557.428 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.170.559 I main: llama threadpool init, n_threads = 4
0.01.170.571 I 
0.01.170.662 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.170.666 I 
0.01.170.838 I sampler seed: 606533660
0.01.170.848 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.170.853 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.170.854 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.170.854 I 
 increably in the year 1995.

**Answer:** 1995

The given text indicates the year 1995

0.14.603.148 I llama_perf_sampler_print:    sampling time =      48.99 ms /    33 runs   (    1.48 ms per token,   673.57 tokens per second)
0.14.603.152 I llama_perf_context_print:        load time =    1167.74 ms
0.14.603.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.603.167 I llama_perf_context_print:        eval time =   13351.06 ms /    32 runs   (  417.22 ms per token,     2.40 tokens per second)
0.14.603.169 I llama_perf_context_print:       total time =   13432.60 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.664 I build: 3840 (922bf99a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.813 I main: load the model and apply lora adapter, if any
0.00.025.306 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.404 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.422 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.426 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.431 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.432 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.433 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.434 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.435 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.435 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.443 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.443 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.444 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.446 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.447 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.278 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.308 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.438 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.446 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.447 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.448 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.449 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.450 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.450 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.466 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.467 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.468 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.193.469 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.193.470 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.193.478 I llama_model_loader: - type  f32:   37 tensors
0.00.193.481 I llama_model_loader: - type q8_0:  127 tensors
0.00.330.648 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.353.072 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.354.124 I llm_load_vocab: special tokens cache size = 5
0.00.412.270 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.412.331 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.412.332 I llm_load_print_meta: arch             = gemma
0.00.412.333 I llm_load_print_meta: vocab type       = SPM
0.00.412.334 I llm_load_print_meta: n_vocab          = 256000
0.00.412.336 I llm_load_print_meta: n_merges         = 0
0.00.412.336 I llm_load_print_meta: vocab_only       = 0
0.00.412.337 I llm_load_print_meta: n_ctx_train      = 8192
0.00.412.337 I llm_load_print_meta: n_embd           = 2048
0.00.412.337 I llm_load_print_meta: n_layer          = 18
0.00.412.400 I llm_load_print_meta: n_head           = 8
0.00.412.406 I llm_load_print_meta: n_head_kv        = 1
0.00.412.407 I llm_load_print_meta: n_rot            = 256
0.00.412.407 I llm_load_print_meta: n_swa            = 0
0.00.412.408 I llm_load_print_meta: n_embd_head_k    = 256
0.00.412.408 I llm_load_print_meta: n_embd_head_v    = 256
0.00.412.413 I llm_load_print_meta: n_gqa            = 8
0.00.412.417 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.412.422 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.412.423 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.412.425 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.412.425 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.412.426 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.412.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.412.432 I llm_load_print_meta: n_ff             = 16384
0.00.412.443 I llm_load_print_meta: n_expert         = 0
0.00.412.443 I llm_load_print_meta: n_expert_used    = 0
0.00.412.444 I llm_load_print_meta: causal attn      = 1
0.00.412.444 I llm_load_print_meta: pooling type     = 0
0.00.412.457 I llm_load_print_meta: rope type        = 2
0.00.412.457 I llm_load_print_meta: rope scaling     = linear
0.00.412.459 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.412.459 I llm_load_print_meta: freq_scale_train = 1
0.00.412.460 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.412.460 I llm_load_print_meta: rope_finetuned   = unknown
0.00.412.461 I llm_load_print_meta: ssm_d_conv       = 0
0.00.412.461 I llm_load_print_meta: ssm_d_inner      = 0
0.00.412.461 I llm_load_print_meta: ssm_d_state      = 0
0.00.412.462 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.412.463 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.412.464 I llm_load_print_meta: model type       = 2B
0.00.412.465 I llm_load_print_meta: model ftype      = Q8_0
0.00.412.465 I llm_load_print_meta: model params     = 2.51 B
0.00.412.466 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.412.466 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.412.467 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.412.468 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.412.469 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.412.469 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.412.470 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.412.470 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.412.475 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.412.477 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.412.477 I llm_load_print_meta: max token length = 93
0.00.412.648 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.508.307 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.514.017 I llama_new_context_with_model: n_ctx      = 8192
0.00.514.024 I llama_new_context_with_model: n_batch    = 2048
0.00.514.025 I llama_new_context_with_model: n_ubatch   = 512
0.00.514.025 I llama_new_context_with_model: flash_attn = 0
0.00.514.028 I llama_new_context_with_model: freq_base  = 10000.0
0.00.514.028 I llama_new_context_with_model: freq_scale = 1
0.00.544.558 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.544.606 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.544.726 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.546.146 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.546.152 I llama_new_context_with_model: graph nodes  = 601
0.00.546.153 I llama_new_context_with_model: graph splits = 1
0.00.546.168 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.159.978 I main: llama threadpool init, n_threads = 4
0.01.159.990 I 
0.01.160.084 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.160.087 I 
0.01.160.264 I sampler seed: 201664236
0.01.160.275 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.160.279 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.160.280 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.160.280 I 
 increasities, a young woman named Anya steps into a world of magic and intrigue.

**Chapter 1: Whispers of the Astral Forge**

A

0.14.835.561 I llama_perf_sampler_print:    sampling time =      49.35 ms /    33 runs   (    1.50 ms per token,   668.75 tokens per second)
0.14.835.563 I llama_perf_context_print:        load time =    1157.07 ms
0.14.835.564 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.835.566 I llama_perf_context_print:        eval time =   13593.12 ms /    32 runs   (  424.78 ms per token,     2.35 tokens per second)
0.14.835.567 I llama_perf_context_print:       total time =   13675.59 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.626 I build: 3840 (922bf99a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.002.741 I main: load the model and apply lora adapter, if any
0.00.024.993 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.178 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.262 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.274 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.275 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.279 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.280 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.281 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.282 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.283 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.284 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.289 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.290 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.291 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.291 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.292 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.020 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.616 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.653 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.661 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.661 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.662 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.663 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.664 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.665 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.669 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.669 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.670 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.671 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.192.672 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.680 I llama_model_loader: - type  f32:   37 tensors
0.00.192.685 I llama_model_loader: - type q8_0:  127 tensors
0.00.335.969 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.359.743 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.360.814 I llm_load_vocab: special tokens cache size = 5
0.00.418.692 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.418.748 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.418.749 I llm_load_print_meta: arch             = gemma
0.00.418.750 I llm_load_print_meta: vocab type       = SPM
0.00.418.751 I llm_load_print_meta: n_vocab          = 256000
0.00.418.753 I llm_load_print_meta: n_merges         = 0
0.00.418.754 I llm_load_print_meta: vocab_only       = 0
0.00.418.754 I llm_load_print_meta: n_ctx_train      = 8192
0.00.418.754 I llm_load_print_meta: n_embd           = 2048
0.00.418.755 I llm_load_print_meta: n_layer          = 18
0.00.418.820 I llm_load_print_meta: n_head           = 8
0.00.418.826 I llm_load_print_meta: n_head_kv        = 1
0.00.418.827 I llm_load_print_meta: n_rot            = 256
0.00.418.829 I llm_load_print_meta: n_swa            = 0
0.00.418.829 I llm_load_print_meta: n_embd_head_k    = 256
0.00.418.842 I llm_load_print_meta: n_embd_head_v    = 256
0.00.418.848 I llm_load_print_meta: n_gqa            = 8
0.00.418.857 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.418.863 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.418.869 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.418.871 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.418.872 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.418.872 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.418.872 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.418.878 I llm_load_print_meta: n_ff             = 16384
0.00.418.879 I llm_load_print_meta: n_expert         = 0
0.00.418.891 I llm_load_print_meta: n_expert_used    = 0
0.00.418.892 I llm_load_print_meta: causal attn      = 1
0.00.418.893 I llm_load_print_meta: pooling type     = 0
0.00.418.893 I llm_load_print_meta: rope type        = 2
0.00.418.894 I llm_load_print_meta: rope scaling     = linear
0.00.418.895 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.418.896 I llm_load_print_meta: freq_scale_train = 1
0.00.418.897 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.418.897 I llm_load_print_meta: rope_finetuned   = unknown
0.00.418.906 I llm_load_print_meta: ssm_d_conv       = 0
0.00.418.907 I llm_load_print_meta: ssm_d_inner      = 0
0.00.418.915 I llm_load_print_meta: ssm_d_state      = 0
0.00.418.917 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.418.918 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.418.918 I llm_load_print_meta: model type       = 2B
0.00.418.919 I llm_load_print_meta: model ftype      = Q8_0
0.00.418.920 I llm_load_print_meta: model params     = 2.51 B
0.00.418.921 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.418.921 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.418.921 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.418.922 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.418.922 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.418.923 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.418.923 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.418.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.418.930 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.418.931 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.418.931 I llm_load_print_meta: max token length = 93
0.00.419.109 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.495.504 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.495.514 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.495.515 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.495.516 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.495.516 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.495.517 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.501.100 I llama_new_context_with_model: n_ctx      = 8192
0.00.501.107 I llama_new_context_with_model: n_batch    = 2048
0.00.501.108 I llama_new_context_with_model: n_ubatch   = 512
0.00.501.108 I llama_new_context_with_model: flash_attn = 0
0.00.501.110 I llama_new_context_with_model: freq_base  = 10000.0
0.00.501.111 I llama_new_context_with_model: freq_scale = 1
0.00.529.608 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.529.650 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.529.773 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.531.141 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.531.147 I llama_new_context_with_model: graph nodes  = 601
0.00.531.148 I llama_new_context_with_model: graph splits = 1
0.00.531.164 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.143.979 I main: llama threadpool init, n_threads = 4
0.01.143.990 I 
0.01.144.084 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.144.088 I 
0.01.144.259 I sampler seed: 2954234369
0.01.144.270 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.144.274 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.144.275 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.144.275 I 
 increasities,
And turn them upside down,
To create a new and wondrous form.

Who is the speaker of this quote?

The quote is

0.14.593.311 I llama_perf_sampler_print:    sampling time =      49.08 ms /    33 runs   (    1.49 ms per token,   672.39 tokens per second)
0.14.593.327 I llama_perf_context_print:        load time =    1141.16 ms
0.14.593.329 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.593.331 I llama_perf_context_print:        eval time =   13367.79 ms /    32 runs   (  417.74 ms per token,     2.39 tokens per second)
0.14.593.332 I llama_perf_context_print:       total time =   13449.34 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.624 I build: 3840 (922bf99a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.002.800 I main: load the model and apply lora adapter, if any
0.00.024.899 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.087 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.183 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.194 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.195 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.199 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.203 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.204 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.205 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.209 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.210 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.218 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.222 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.223 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.229 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.948 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.505 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.463 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.469 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.470 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.471 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.472 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.473 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.474 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.476 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.477 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.478 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.479 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.192.480 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.487 I llama_model_loader: - type  f32:   37 tensors
0.00.192.490 I llama_model_loader: - type q8_0:  127 tensors
0.00.339.402 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.362.732 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.363.832 I llm_load_vocab: special tokens cache size = 5
0.00.421.532 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.421.590 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.421.591 I llm_load_print_meta: arch             = gemma
0.00.421.592 I llm_load_print_meta: vocab type       = SPM
0.00.421.593 I llm_load_print_meta: n_vocab          = 256000
0.00.421.596 I llm_load_print_meta: n_merges         = 0
0.00.421.596 I llm_load_print_meta: vocab_only       = 0
0.00.421.596 I llm_load_print_meta: n_ctx_train      = 8192
0.00.421.597 I llm_load_print_meta: n_embd           = 2048
0.00.421.597 I llm_load_print_meta: n_layer          = 18
0.00.421.656 I llm_load_print_meta: n_head           = 8
0.00.421.663 I llm_load_print_meta: n_head_kv        = 1
0.00.421.663 I llm_load_print_meta: n_rot            = 256
0.00.421.664 I llm_load_print_meta: n_swa            = 0
0.00.421.664 I llm_load_print_meta: n_embd_head_k    = 256
0.00.421.665 I llm_load_print_meta: n_embd_head_v    = 256
0.00.421.669 I llm_load_print_meta: n_gqa            = 8
0.00.421.673 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.421.678 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.421.680 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.421.682 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.421.682 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.421.683 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.421.683 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.421.688 I llm_load_print_meta: n_ff             = 16384
0.00.421.688 I llm_load_print_meta: n_expert         = 0
0.00.421.689 I llm_load_print_meta: n_expert_used    = 0
0.00.421.690 I llm_load_print_meta: causal attn      = 1
0.00.421.690 I llm_load_print_meta: pooling type     = 0
0.00.421.691 I llm_load_print_meta: rope type        = 2
0.00.421.691 I llm_load_print_meta: rope scaling     = linear
0.00.421.692 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.421.693 I llm_load_print_meta: freq_scale_train = 1
0.00.421.694 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.421.695 I llm_load_print_meta: rope_finetuned   = unknown
0.00.421.695 I llm_load_print_meta: ssm_d_conv       = 0
0.00.421.695 I llm_load_print_meta: ssm_d_inner      = 0
0.00.421.705 I llm_load_print_meta: ssm_d_state      = 0
0.00.421.707 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.421.707 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.421.708 I llm_load_print_meta: model type       = 2B
0.00.421.709 I llm_load_print_meta: model ftype      = Q8_0
0.00.421.711 I llm_load_print_meta: model params     = 2.51 B
0.00.421.712 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.421.713 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.421.714 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.421.714 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.421.723 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.421.724 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.421.724 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.421.725 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.421.732 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.421.734 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.421.734 I llm_load_print_meta: max token length = 93
0.00.421.926 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.493.239 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.493.248 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.499.006 I llama_new_context_with_model: n_ctx      = 8192
0.00.499.013 I llama_new_context_with_model: n_batch    = 2048
0.00.499.013 I llama_new_context_with_model: n_ubatch   = 512
0.00.499.014 I llama_new_context_with_model: flash_attn = 0
0.00.499.016 I llama_new_context_with_model: freq_base  = 10000.0
0.00.499.017 I llama_new_context_with_model: freq_scale = 1
0.00.528.745 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.528.787 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.528.902 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.530.299 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.530.307 I llama_new_context_with_model: graph nodes  = 601
0.00.530.308 I llama_new_context_with_model: graph splits = 1
0.00.530.327 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.147.158 I main: llama threadpool init, n_threads = 4
0.01.147.169 I 
0.01.147.258 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.147.262 I 
0.01.147.459 I sampler seed: 3571568172
0.01.147.470 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.147.475 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.147.476 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.147.477 I 
 increadibly. [end of text]


0.02.834.244 I llama_perf_sampler_print:    sampling time =       6.21 ms /     5 runs   (    1.24 ms per token,   804.89 tokens per second)
0.02.834.247 I llama_perf_context_print:        load time =    1144.28 ms
0.02.834.249 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.834.250 I llama_perf_context_print:        eval time =    1675.40 ms /     4 runs   (  418.85 ms per token,     2.39 tokens per second)
0.02.834.251 I llama_perf_context_print:       total time =    1687.10 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.329s
user	3m0.943s
sys	0m9.301s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3840 (922bf99a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200173.70 ms
main:    total time = 200173.70 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.627 I build: 3840 (922bf99a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.778 I main: load the model and apply lora adapter, if any
0.00.024.490 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.663 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.743 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.754 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.755 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.759 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.761 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.762 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.763 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.764 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.765 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.770 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.772 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.773 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.773 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.774 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.451 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.179.640 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.191.599 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.191.606 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.191.607 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.191.608 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.191.609 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.191.610 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.191.611 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.191.614 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.191.615 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.191.616 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.191.617 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.191.617 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.191.625 I llama_model_loader: - type  f32:   37 tensors
0.00.191.629 I llama_model_loader: - type q4_K:  108 tensors
0.00.191.630 I llama_model_loader: - type q6_K:   19 tensors
0.00.326.547 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.349.270 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.350.248 I llm_load_vocab: special tokens cache size = 5
0.00.409.087 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.409.147 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.409.148 I llm_load_print_meta: arch             = gemma
0.00.409.149 I llm_load_print_meta: vocab type       = SPM
0.00.409.149 I llm_load_print_meta: n_vocab          = 256000
0.00.409.152 I llm_load_print_meta: n_merges         = 0
0.00.409.152 I llm_load_print_meta: vocab_only       = 0
0.00.409.152 I llm_load_print_meta: n_ctx_train      = 8192
0.00.409.153 I llm_load_print_meta: n_embd           = 2048
0.00.409.153 I llm_load_print_meta: n_layer          = 18
0.00.409.217 I llm_load_print_meta: n_head           = 8
0.00.409.224 I llm_load_print_meta: n_head_kv        = 1
0.00.409.224 I llm_load_print_meta: n_rot            = 256
0.00.409.224 I llm_load_print_meta: n_swa            = 0
0.00.409.225 I llm_load_print_meta: n_embd_head_k    = 256
0.00.409.225 I llm_load_print_meta: n_embd_head_v    = 256
0.00.409.230 I llm_load_print_meta: n_gqa            = 8
0.00.409.235 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.409.240 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.409.241 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.409.242 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.409.243 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.409.243 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.409.244 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.409.248 I llm_load_print_meta: n_ff             = 16384
0.00.409.249 I llm_load_print_meta: n_expert         = 0
0.00.409.249 I llm_load_print_meta: n_expert_used    = 0
0.00.409.249 I llm_load_print_meta: causal attn      = 1
0.00.409.249 I llm_load_print_meta: pooling type     = 0
0.00.409.250 I llm_load_print_meta: rope type        = 2
0.00.409.250 I llm_load_print_meta: rope scaling     = linear
0.00.409.252 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.409.252 I llm_load_print_meta: freq_scale_train = 1
0.00.409.253 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.409.253 I llm_load_print_meta: rope_finetuned   = unknown
0.00.409.253 I llm_load_print_meta: ssm_d_conv       = 0
0.00.409.254 I llm_load_print_meta: ssm_d_inner      = 0
0.00.409.263 I llm_load_print_meta: ssm_d_state      = 0
0.00.409.264 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.409.265 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.409.266 I llm_load_print_meta: model type       = 2B
0.00.409.267 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.409.267 I llm_load_print_meta: model params     = 2.51 B
0.00.409.269 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.409.269 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.409.270 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.409.283 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.409.284 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.409.292 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.409.293 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.409.294 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.409.300 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.409.301 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.409.302 I llm_load_print_meta: max token length = 93
0.00.409.479 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.471.611 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.471.618 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.471.619 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.471.620 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.471.620 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.471.621 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.477.167 I llama_new_context_with_model: n_ctx      = 8192
0.00.477.175 I llama_new_context_with_model: n_batch    = 2048
0.00.477.176 I llama_new_context_with_model: n_ubatch   = 512
0.00.477.176 I llama_new_context_with_model: flash_attn = 0
0.00.477.179 I llama_new_context_with_model: freq_base  = 10000.0
0.00.477.180 I llama_new_context_with_model: freq_scale = 1
0.00.508.532 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.508.574 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.508.693 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.510.126 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.510.132 I llama_new_context_with_model: graph nodes  = 601
0.00.510.133 I llama_new_context_with_model: graph splits = 1
0.00.510.150 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.091.916 I main: llama threadpool init, n_threads = 4
0.01.091.928 I 
0.01.092.019 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.092.023 I 
0.01.092.195 I sampler seed: 2839995508
0.01.092.205 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.092.210 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.092.210 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.092.211 I 
 increasities to the Supreme Court, questioning the constitutionality of the Court's rulings. The Court's decisions often have far-reaching effects on individuals,

0.12.043.882 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.97 tokens per second)
0.12.043.886 I llama_perf_context_print:        load time =    1089.06 ms
0.12.043.888 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.043.889 I llama_perf_context_print:        eval time =   10870.53 ms /    32 runs   (  339.70 ms per token,     2.94 tokens per second)
0.12.043.890 I llama_perf_context_print:       total time =   10951.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3840 (922bf99a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200015.13 ms
main:    total time = 200015.13 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.633 I build: 3840 (922bf99a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.838 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.024.681 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.784 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.801 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.806 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.811 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.814 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.816 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.818 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.820 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.821 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.828 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.833 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.834 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.835 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.836 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.190 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.700 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.799 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.806 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.807 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.808 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.809 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.810 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.812 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.816 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.817 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.825 I llama_model_loader: - type  f32:   37 tensors
0.00.192.830 I llama_model_loader: - type q4_K:  108 tensors
0.00.192.832 I llama_model_loader: - type q6_K:   19 tensors
0.00.331.009 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.353.597 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.354.655 I llm_load_vocab: special tokens cache size = 5
0.00.412.800 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.412.861 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.412.862 I llm_load_print_meta: arch             = gemma
0.00.412.863 I llm_load_print_meta: vocab type       = SPM
0.00.412.864 I llm_load_print_meta: n_vocab          = 256000
0.00.412.867 I llm_load_print_meta: n_merges         = 0
0.00.412.867 I llm_load_print_meta: vocab_only       = 0
0.00.412.868 I llm_load_print_meta: n_ctx_train      = 8192
0.00.412.868 I llm_load_print_meta: n_embd           = 2048
0.00.412.868 I llm_load_print_meta: n_layer          = 18
0.00.412.930 I llm_load_print_meta: n_head           = 8
0.00.412.938 I llm_load_print_meta: n_head_kv        = 1
0.00.412.940 I llm_load_print_meta: n_rot            = 256
0.00.412.941 I llm_load_print_meta: n_swa            = 0
0.00.412.941 I llm_load_print_meta: n_embd_head_k    = 256
0.00.412.942 I llm_load_print_meta: n_embd_head_v    = 256
0.00.412.949 I llm_load_print_meta: n_gqa            = 8
0.00.412.956 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.412.963 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.412.965 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.412.966 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.412.967 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.412.968 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.412.969 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.412.976 I llm_load_print_meta: n_ff             = 16384
0.00.412.977 I llm_load_print_meta: n_expert         = 0
0.00.412.977 I llm_load_print_meta: n_expert_used    = 0
0.00.412.979 I llm_load_print_meta: causal attn      = 1
0.00.412.980 I llm_load_print_meta: pooling type     = 0
0.00.412.980 I llm_load_print_meta: rope type        = 2
0.00.412.981 I llm_load_print_meta: rope scaling     = linear
0.00.412.983 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.412.984 I llm_load_print_meta: freq_scale_train = 1
0.00.412.985 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.412.986 I llm_load_print_meta: rope_finetuned   = unknown
0.00.412.987 I llm_load_print_meta: ssm_d_conv       = 0
0.00.412.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.412.988 I llm_load_print_meta: ssm_d_state      = 0
0.00.412.989 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.412.990 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.412.991 I llm_load_print_meta: model type       = 2B
0.00.412.999 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.413.000 I llm_load_print_meta: model params     = 2.51 B
0.00.413.001 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.413.003 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.413.004 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.413.005 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.413.007 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.413.008 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.413.009 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.413.019 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.413.027 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.413.031 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.413.032 I llm_load_print_meta: max token length = 93
0.00.413.220 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.471.534 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.477.230 I llama_new_context_with_model: n_ctx      = 8192
0.00.477.237 I llama_new_context_with_model: n_batch    = 2048
0.00.477.237 I llama_new_context_with_model: n_ubatch   = 512
0.00.477.238 I llama_new_context_with_model: flash_attn = 0
0.00.477.240 I llama_new_context_with_model: freq_base  = 10000.0
0.00.477.241 I llama_new_context_with_model: freq_scale = 1
0.00.506.436 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.506.484 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.506.607 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.507.988 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.507.995 I llama_new_context_with_model: graph nodes  = 601
0.00.507.995 I llama_new_context_with_model: graph splits = 1
0.00.508.015 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.091.986 I main: llama threadpool init, n_threads = 4
0.01.091.999 I 
0.01.092.113 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.092.117 I 
0.01.092.302 I sampler seed: 4103135990
0.01.092.314 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.092.320 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.092.321 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.092.321 I 
 maneuvled.

I think I know the answer, but I just wanted to check.

What is the capital of France?

A) Paris


0.12.178.191 I llama_perf_sampler_print:    sampling time =      49.03 ms /    33 runs   (    1.49 ms per token,   673.10 tokens per second)
0.12.178.196 I llama_perf_context_print:        load time =    1089.12 ms
0.12.178.198 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.178.200 I llama_perf_context_print:        eval time =   11004.10 ms /    32 runs   (  343.88 ms per token,     2.91 tokens per second)
0.12.178.201 I llama_perf_context_print:       total time =   11086.22 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.303s
user	50m17.560s
sys	0m6.379s
