+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 3913 (92be9f12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.830 I main: load the model and apply lora adapter, if any
0.00.024.944 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.151 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.237 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.248 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.250 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.254 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.259 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.261 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.263 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.272 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.274 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.282 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.284 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.286 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.288 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.289 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.869 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.322 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.531 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.539 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.540 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.542 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.542 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.544 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.545 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.548 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.549 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.550 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.551 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.553 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.562 I llama_model_loader: - type  f32:   37 tensors
0.00.269.565 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.639 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.497.821 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.498.844 I llm_load_vocab: special tokens cache size = 5
0.00.596.016 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.596.089 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.596.090 I llm_load_print_meta: arch             = gemma
0.00.596.091 I llm_load_print_meta: vocab type       = SPM
0.00.596.092 I llm_load_print_meta: n_vocab          = 256000
0.00.596.094 I llm_load_print_meta: n_merges         = 0
0.00.596.095 I llm_load_print_meta: vocab_only       = 0
0.00.596.095 I llm_load_print_meta: n_ctx_train      = 8192
0.00.596.096 I llm_load_print_meta: n_embd           = 2048
0.00.596.096 I llm_load_print_meta: n_layer          = 18
0.00.596.158 I llm_load_print_meta: n_head           = 8
0.00.596.165 I llm_load_print_meta: n_head_kv        = 1
0.00.596.166 I llm_load_print_meta: n_rot            = 256
0.00.596.167 I llm_load_print_meta: n_swa            = 0
0.00.596.167 I llm_load_print_meta: n_embd_head_k    = 256
0.00.596.168 I llm_load_print_meta: n_embd_head_v    = 256
0.00.596.173 I llm_load_print_meta: n_gqa            = 8
0.00.596.177 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.596.182 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.596.184 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.596.185 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.596.190 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.596.191 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.596.191 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.596.196 I llm_load_print_meta: n_ff             = 16384
0.00.596.196 I llm_load_print_meta: n_expert         = 0
0.00.596.200 I llm_load_print_meta: n_expert_used    = 0
0.00.596.200 I llm_load_print_meta: causal attn      = 1
0.00.596.201 I llm_load_print_meta: pooling type     = 0
0.00.596.201 I llm_load_print_meta: rope type        = 2
0.00.596.201 I llm_load_print_meta: rope scaling     = linear
0.00.596.203 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.596.203 I llm_load_print_meta: freq_scale_train = 1
0.00.596.204 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.596.204 I llm_load_print_meta: rope_finetuned   = unknown
0.00.596.205 I llm_load_print_meta: ssm_d_conv       = 0
0.00.596.205 I llm_load_print_meta: ssm_d_inner      = 0
0.00.596.205 I llm_load_print_meta: ssm_d_state      = 0
0.00.596.206 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.596.206 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.596.207 I llm_load_print_meta: model type       = 2B
0.00.596.208 I llm_load_print_meta: model ftype      = Q8_0
0.00.596.209 I llm_load_print_meta: model params     = 2.51 B
0.00.596.210 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.596.211 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.596.213 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.596.214 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.596.215 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.596.215 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.596.215 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.596.216 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.596.222 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.596.223 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.596.224 I llm_load_print_meta: max token length = 93
0.00.596.394 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.697.091 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.697.101 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.697.101 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.697.102 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.697.103 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.697.103 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.702.949 I llama_new_context_with_model: n_ctx      = 8192
0.00.702.956 I llama_new_context_with_model: n_batch    = 2048
0.00.702.957 I llama_new_context_with_model: n_ubatch   = 512
0.00.702.957 I llama_new_context_with_model: flash_attn = 0
0.00.702.959 I llama_new_context_with_model: freq_base  = 10000.0
0.00.702.960 I llama_new_context_with_model: freq_scale = 1
0.00.731.806 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.852 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.967 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.409 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.414 I llama_new_context_with_model: graph nodes  = 601
0.00.733.414 I llama_new_context_with_model: graph splits = 1
0.00.733.430 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.505 I main: llama threadpool init, n_threads = 4
0.01.345.516 I 
0.01.345.635 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.644 I 
0.01.345.823 I sampler seed: 174166038
0.01.345.833 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.842 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.345.843 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.845 I 
 increasities with the allure of a fresh start. [end of text]


0.05.997.575 I llama_perf_sampler_print:    sampling time =      17.07 ms /    12 runs   (    1.42 ms per token,   703.07 tokens per second)
0.05.997.598 I llama_perf_context_print:        load time =    1342.59 ms
0.05.997.600 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.05.997.604 I llama_perf_context_print:        eval time =    4622.86 ms /    11 runs   (  420.26 ms per token,     2.38 tokens per second)
0.05.997.605 I llama_perf_context_print:       total time =    4652.08 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.701 I build: 3913 (92be9f12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.929 I main: llama backend init
0.00.002.881 I main: load the model and apply lora adapter, if any
0.00.024.615 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.706 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.720 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.724 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.728 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.729 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.730 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.733 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.734 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.735 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.741 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.744 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.745 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.746 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.747 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.183 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.297 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.625 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.634 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.636 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.637 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.638 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.639 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.641 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.644 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.645 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.646 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.647 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.268.648 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.657 I llama_model_loader: - type  f32:   37 tensors
0.00.268.660 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.500 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.498.124 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.499.160 I llm_load_vocab: special tokens cache size = 5
0.00.593.909 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.593.978 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.593.982 I llm_load_print_meta: arch             = gemma
0.00.593.983 I llm_load_print_meta: vocab type       = SPM
0.00.593.984 I llm_load_print_meta: n_vocab          = 256000
0.00.593.986 I llm_load_print_meta: n_merges         = 0
0.00.593.987 I llm_load_print_meta: vocab_only       = 0
0.00.593.987 I llm_load_print_meta: n_ctx_train      = 8192
0.00.593.988 I llm_load_print_meta: n_embd           = 2048
0.00.593.988 I llm_load_print_meta: n_layer          = 18
0.00.594.051 I llm_load_print_meta: n_head           = 8
0.00.594.061 I llm_load_print_meta: n_head_kv        = 1
0.00.594.062 I llm_load_print_meta: n_rot            = 256
0.00.594.063 I llm_load_print_meta: n_swa            = 0
0.00.594.063 I llm_load_print_meta: n_embd_head_k    = 256
0.00.594.064 I llm_load_print_meta: n_embd_head_v    = 256
0.00.594.069 I llm_load_print_meta: n_gqa            = 8
0.00.594.074 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.594.082 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.594.083 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.594.085 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.594.086 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.594.094 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.594.095 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.594.100 I llm_load_print_meta: n_ff             = 16384
0.00.594.103 I llm_load_print_meta: n_expert         = 0
0.00.594.103 I llm_load_print_meta: n_expert_used    = 0
0.00.594.103 I llm_load_print_meta: causal attn      = 1
0.00.594.104 I llm_load_print_meta: pooling type     = 0
0.00.594.104 I llm_load_print_meta: rope type        = 2
0.00.594.104 I llm_load_print_meta: rope scaling     = linear
0.00.594.106 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.594.107 I llm_load_print_meta: freq_scale_train = 1
0.00.594.107 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.594.107 I llm_load_print_meta: rope_finetuned   = unknown
0.00.594.108 I llm_load_print_meta: ssm_d_conv       = 0
0.00.594.108 I llm_load_print_meta: ssm_d_inner      = 0
0.00.594.123 I llm_load_print_meta: ssm_d_state      = 0
0.00.594.132 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.594.132 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.594.140 I llm_load_print_meta: model type       = 2B
0.00.594.142 I llm_load_print_meta: model ftype      = Q8_0
0.00.594.143 I llm_load_print_meta: model params     = 2.51 B
0.00.594.144 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.594.148 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.594.149 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.594.150 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.594.150 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.594.151 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.594.151 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.594.152 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.594.158 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.594.160 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.594.160 I llm_load_print_meta: max token length = 93
0.00.594.334 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.690.861 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.696.416 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.423 I llama_new_context_with_model: n_batch    = 2048
0.00.696.424 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.425 I llama_new_context_with_model: flash_attn = 0
0.00.696.427 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.428 I llama_new_context_with_model: freq_scale = 1
0.00.725.562 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.725.606 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.725.717 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.087 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.727.092 I llama_new_context_with_model: graph nodes  = 601
0.00.727.093 I llama_new_context_with_model: graph splits = 1
0.00.727.108 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.293 I main: llama threadpool init, n_threads = 4
0.01.340.305 I 
0.01.340.435 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.440 I 
0.01.340.613 I sampler seed: 2900302699
0.01.340.624 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.631 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.340.632 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.632 I 
 increasively, and then collapsed under the weight of its own contradictions.

This enigmatic creature, perpetually shifting between light and darkness, possesses a paradoxical essence that defies

0.14.990.867 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.83 tokens per second)
0.14.990.871 I llama_perf_context_print:        load time =    1337.32 ms
0.14.990.872 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.990.875 I llama_perf_context_print:        eval time =   13568.79 ms /    32 runs   (  424.02 ms per token,     2.36 tokens per second)
0.14.990.876 I llama_perf_context_print:       total time =   13650.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.698 I build: 3913 (92be9f12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.002.833 I main: load the model and apply lora adapter, if any
0.00.024.878 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.077 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.168 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.180 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.181 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.186 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.194 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.195 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.197 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.197 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.201 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.208 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.209 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.210 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.211 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.212 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.795 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.866 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.100 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.109 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.110 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.111 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.112 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.113 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.114 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.118 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.119 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.120 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.121 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.272.122 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.130 I llama_model_loader: - type  f32:   37 tensors
0.00.272.135 I llama_model_loader: - type q8_0:  127 tensors
0.00.449.569 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.501 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.514 I llm_load_vocab: special tokens cache size = 5
0.00.610.088 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.153 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.154 I llm_load_print_meta: arch             = gemma
0.00.610.155 I llm_load_print_meta: vocab type       = SPM
0.00.610.156 I llm_load_print_meta: n_vocab          = 256000
0.00.610.158 I llm_load_print_meta: n_merges         = 0
0.00.610.159 I llm_load_print_meta: vocab_only       = 0
0.00.610.159 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.160 I llm_load_print_meta: n_embd           = 2048
0.00.610.160 I llm_load_print_meta: n_layer          = 18
0.00.610.221 I llm_load_print_meta: n_head           = 8
0.00.610.229 I llm_load_print_meta: n_head_kv        = 1
0.00.610.230 I llm_load_print_meta: n_rot            = 256
0.00.610.230 I llm_load_print_meta: n_swa            = 0
0.00.610.230 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.231 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.236 I llm_load_print_meta: n_gqa            = 8
0.00.610.241 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.246 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.254 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.255 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.256 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.256 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.257 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.261 I llm_load_print_meta: n_ff             = 16384
0.00.610.262 I llm_load_print_meta: n_expert         = 0
0.00.610.264 I llm_load_print_meta: n_expert_used    = 0
0.00.610.264 I llm_load_print_meta: causal attn      = 1
0.00.610.265 I llm_load_print_meta: pooling type     = 0
0.00.610.265 I llm_load_print_meta: rope type        = 2
0.00.610.266 I llm_load_print_meta: rope scaling     = linear
0.00.610.267 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.268 I llm_load_print_meta: freq_scale_train = 1
0.00.610.268 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.269 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.269 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.270 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.273 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.273 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.273 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.274 I llm_load_print_meta: model type       = 2B
0.00.610.275 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.276 I llm_load_print_meta: model params     = 2.51 B
0.00.610.276 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.277 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.278 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.278 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.279 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.279 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.279 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.280 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.286 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.287 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.288 I llm_load_print_meta: max token length = 93
0.00.610.452 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.687.941 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.687.952 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.687.953 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.687.954 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.687.954 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.687.955 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.693.550 I llama_new_context_with_model: n_ctx      = 8192
0.00.693.557 I llama_new_context_with_model: n_batch    = 2048
0.00.693.557 I llama_new_context_with_model: n_ubatch   = 512
0.00.693.558 I llama_new_context_with_model: flash_attn = 0
0.00.693.561 I llama_new_context_with_model: freq_base  = 10000.0
0.00.693.561 I llama_new_context_with_model: freq_scale = 1
0.00.722.264 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.722.306 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.722.417 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.723.751 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.723.756 I llama_new_context_with_model: graph nodes  = 601
0.00.723.757 I llama_new_context_with_model: graph splits = 1
0.00.723.771 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.335.508 I main: llama threadpool init, n_threads = 4
0.01.335.520 I 
0.01.335.624 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.335.628 I 
0.01.335.794 I sampler seed: 502976558
0.01.335.804 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.335.810 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.335.811 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.335.811 I 
 increably! 😄

I am unable to generate a response that is humorous or entertaining as requested. My purpose is to assist with tasks and provide information to the

0.14.888.372 I llama_perf_sampler_print:    sampling time =      49.22 ms /    33 runs   (    1.49 ms per token,   670.47 tokens per second)
0.14.888.375 I llama_perf_context_print:        load time =    1332.58 ms
0.14.888.376 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.888.378 I llama_perf_context_print:        eval time =   13471.71 ms /    32 runs   (  420.99 ms per token,     2.38 tokens per second)
0.14.888.379 I llama_perf_context_print:       total time =   13552.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.628 I build: 3913 (92be9f12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.775 I main: load the model and apply lora adapter, if any
0.00.024.691 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.901 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.986 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.996 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.997 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.001 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.002 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.003 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.004 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.005 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.007 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.013 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.014 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.016 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.017 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.018 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.842 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.003 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.134 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.142 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.143 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.144 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.145 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.146 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.147 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.151 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.152 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.153 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.154 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.155 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.164 I llama_model_loader: - type  f32:   37 tensors
0.00.269.167 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.623 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.316 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.334 I llm_load_vocab: special tokens cache size = 5
0.00.590.388 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.590.464 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.590.465 I llm_load_print_meta: arch             = gemma
0.00.590.466 I llm_load_print_meta: vocab type       = SPM
0.00.590.467 I llm_load_print_meta: n_vocab          = 256000
0.00.590.469 I llm_load_print_meta: n_merges         = 0
0.00.590.469 I llm_load_print_meta: vocab_only       = 0
0.00.590.470 I llm_load_print_meta: n_ctx_train      = 8192
0.00.590.470 I llm_load_print_meta: n_embd           = 2048
0.00.590.471 I llm_load_print_meta: n_layer          = 18
0.00.590.541 I llm_load_print_meta: n_head           = 8
0.00.590.547 I llm_load_print_meta: n_head_kv        = 1
0.00.590.548 I llm_load_print_meta: n_rot            = 256
0.00.590.548 I llm_load_print_meta: n_swa            = 0
0.00.590.550 I llm_load_print_meta: n_embd_head_k    = 256
0.00.590.551 I llm_load_print_meta: n_embd_head_v    = 256
0.00.590.555 I llm_load_print_meta: n_gqa            = 8
0.00.590.560 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.590.566 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.590.567 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.590.569 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.590.574 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.590.575 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.590.575 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.590.580 I llm_load_print_meta: n_ff             = 16384
0.00.590.592 I llm_load_print_meta: n_expert         = 0
0.00.590.593 I llm_load_print_meta: n_expert_used    = 0
0.00.590.594 I llm_load_print_meta: causal attn      = 1
0.00.590.594 I llm_load_print_meta: pooling type     = 0
0.00.590.595 I llm_load_print_meta: rope type        = 2
0.00.590.595 I llm_load_print_meta: rope scaling     = linear
0.00.590.597 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.590.598 I llm_load_print_meta: freq_scale_train = 1
0.00.590.599 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.590.599 I llm_load_print_meta: rope_finetuned   = unknown
0.00.590.600 I llm_load_print_meta: ssm_d_conv       = 0
0.00.590.601 I llm_load_print_meta: ssm_d_inner      = 0
0.00.590.602 I llm_load_print_meta: ssm_d_state      = 0
0.00.590.602 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.590.603 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.590.604 I llm_load_print_meta: model type       = 2B
0.00.590.605 I llm_load_print_meta: model ftype      = Q8_0
0.00.590.606 I llm_load_print_meta: model params     = 2.51 B
0.00.590.607 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.590.607 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.590.609 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.590.609 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.590.610 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.590.611 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.590.611 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.590.612 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.590.618 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.590.620 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.590.620 I llm_load_print_meta: max token length = 93
0.00.590.796 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.661.841 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.661.853 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.667.460 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.466 I llama_new_context_with_model: n_batch    = 2048
0.00.667.466 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.467 I llama_new_context_with_model: flash_attn = 0
0.00.667.469 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.470 I llama_new_context_with_model: freq_scale = 1
0.00.696.063 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.696.107 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.696.221 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.697.566 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.697.571 I llama_new_context_with_model: graph nodes  = 601
0.00.697.571 I llama_new_context_with_model: graph splits = 1
0.00.697.587 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.310.237 I main: llama threadpool init, n_threads = 4
0.01.310.248 I 
0.01.310.356 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.310.363 I 
0.01.310.541 I sampler seed: 1731466215
0.01.310.552 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.310.558 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.310.559 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.310.559 I 
 increably. 

I am unable to generate the requested response as it contains inappropriate and sexually suggestive content. [end of text]


0.11.016.291 I llama_perf_sampler_print:    sampling time =      35.49 ms /    24 runs   (    1.48 ms per token,   676.15 tokens per second)
0.11.016.294 I llama_perf_context_print:        load time =    1307.37 ms
0.11.016.295 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.016.316 I llama_perf_context_print:        eval time =    9647.31 ms /    23 runs   (  419.45 ms per token,     2.38 tokens per second)
0.11.016.317 I llama_perf_context_print:       total time =    9706.07 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m56.544s
user	2m58.845s
sys	0m9.379s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3913 (92be9f12)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198304.30 ms
main:    total time = 198304.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.649 I build: 3913 (92be9f12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
0.00.025.019 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.221 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.307 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.317 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.319 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.323 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.324 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.325 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.326 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.327 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.328 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.334 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.338 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.339 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.340 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.341 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.324 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.221 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.379 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.386 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.388 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.389 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.390 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.391 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.392 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.396 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.397 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.398 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.399 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.400 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.408 I llama_model_loader: - type  f32:   37 tensors
0.00.270.412 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.412 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.157 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.525 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.517 I llm_load_vocab: special tokens cache size = 5
0.00.598.548 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.598.620 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.598.624 I llm_load_print_meta: arch             = gemma
0.00.598.625 I llm_load_print_meta: vocab type       = SPM
0.00.598.626 I llm_load_print_meta: n_vocab          = 256000
0.00.598.628 I llm_load_print_meta: n_merges         = 0
0.00.598.629 I llm_load_print_meta: vocab_only       = 0
0.00.598.629 I llm_load_print_meta: n_ctx_train      = 8192
0.00.598.630 I llm_load_print_meta: n_embd           = 2048
0.00.598.630 I llm_load_print_meta: n_layer          = 18
0.00.598.693 I llm_load_print_meta: n_head           = 8
0.00.598.703 I llm_load_print_meta: n_head_kv        = 1
0.00.598.704 I llm_load_print_meta: n_rot            = 256
0.00.598.705 I llm_load_print_meta: n_swa            = 0
0.00.598.705 I llm_load_print_meta: n_embd_head_k    = 256
0.00.598.706 I llm_load_print_meta: n_embd_head_v    = 256
0.00.598.711 I llm_load_print_meta: n_gqa            = 8
0.00.598.715 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.598.720 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.598.723 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.598.724 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.598.725 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.598.725 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.598.725 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.598.730 I llm_load_print_meta: n_ff             = 16384
0.00.598.731 I llm_load_print_meta: n_expert         = 0
0.00.598.731 I llm_load_print_meta: n_expert_used    = 0
0.00.598.731 I llm_load_print_meta: causal attn      = 1
0.00.598.732 I llm_load_print_meta: pooling type     = 0
0.00.598.733 I llm_load_print_meta: rope type        = 2
0.00.598.733 I llm_load_print_meta: rope scaling     = linear
0.00.598.735 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.598.736 I llm_load_print_meta: freq_scale_train = 1
0.00.598.737 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.598.737 I llm_load_print_meta: rope_finetuned   = unknown
0.00.598.737 I llm_load_print_meta: ssm_d_conv       = 0
0.00.598.738 I llm_load_print_meta: ssm_d_inner      = 0
0.00.598.738 I llm_load_print_meta: ssm_d_state      = 0
0.00.598.738 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.598.738 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.598.747 I llm_load_print_meta: model type       = 2B
0.00.598.748 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.598.749 I llm_load_print_meta: model params     = 2.51 B
0.00.598.749 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.598.750 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.598.750 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.598.751 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.598.752 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.598.752 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.598.753 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.598.753 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.598.759 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.598.760 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.598.760 I llm_load_print_meta: max token length = 93
0.00.598.921 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.659.925 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.659.934 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.659.935 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.659.936 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.659.937 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.659.937 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.665.369 I llama_new_context_with_model: n_ctx      = 8192
0.00.665.375 I llama_new_context_with_model: n_batch    = 2048
0.00.665.376 I llama_new_context_with_model: n_ubatch   = 512
0.00.665.376 I llama_new_context_with_model: flash_attn = 0
0.00.665.378 I llama_new_context_with_model: freq_base  = 10000.0
0.00.665.379 I llama_new_context_with_model: freq_scale = 1
0.00.694.330 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.694.370 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.694.489 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.873 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.695.877 I llama_new_context_with_model: graph nodes  = 601
0.00.695.878 I llama_new_context_with_model: graph splits = 1
0.00.695.893 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.275.558 I main: llama threadpool init, n_threads = 4
0.01.275.569 I 
0.01.275.674 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.275.678 I 
0.01.275.842 I sampler seed: 2874568889
0.01.275.853 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.275.859 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.275.861 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.275.861 I 
 seconally with the following groups:

a) Integers
b) Rational numbers
c) Real numbers

**Answer:**
a) Integers


0.12.187.031 I llama_perf_sampler_print:    sampling time =      48.84 ms /    33 runs   (    1.48 ms per token,   675.65 tokens per second)
0.12.187.036 I llama_perf_context_print:        load time =    1272.65 ms
0.12.187.037 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.187.040 I llama_perf_context_print:        eval time =   10830.50 ms /    32 runs   (  338.45 ms per token,     2.95 tokens per second)
0.12.187.041 I llama_perf_context_print:       total time =   10911.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3913 (92be9f12)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199371.18 ms
main:    total time = 199371.18 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 3913 (92be9f12) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.879 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.024.814 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.906 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.919 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.921 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.925 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.927 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.929 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.930 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.932 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.933 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.938 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.939 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.940 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.942 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.403 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.649 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.807 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.814 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.815 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.816 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.817 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.818 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.820 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.823 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.824 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.831 I llama_model_loader: - type  f32:   37 tensors
0.00.268.835 I llama_model_loader: - type q4_K:  108 tensors
0.00.268.836 I llama_model_loader: - type q6_K:   19 tensors
0.00.442.026 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.491.036 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.492.021 I llm_load_vocab: special tokens cache size = 5
0.00.587.077 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.587.147 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.587.148 I llm_load_print_meta: arch             = gemma
0.00.587.149 I llm_load_print_meta: vocab type       = SPM
0.00.587.149 I llm_load_print_meta: n_vocab          = 256000
0.00.587.152 I llm_load_print_meta: n_merges         = 0
0.00.587.152 I llm_load_print_meta: vocab_only       = 0
0.00.587.153 I llm_load_print_meta: n_ctx_train      = 8192
0.00.587.153 I llm_load_print_meta: n_embd           = 2048
0.00.587.154 I llm_load_print_meta: n_layer          = 18
0.00.587.221 I llm_load_print_meta: n_head           = 8
0.00.587.228 I llm_load_print_meta: n_head_kv        = 1
0.00.587.229 I llm_load_print_meta: n_rot            = 256
0.00.587.231 I llm_load_print_meta: n_swa            = 0
0.00.587.231 I llm_load_print_meta: n_embd_head_k    = 256
0.00.587.232 I llm_load_print_meta: n_embd_head_v    = 256
0.00.587.236 I llm_load_print_meta: n_gqa            = 8
0.00.587.241 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.587.246 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.587.247 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.587.249 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.587.250 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.587.250 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.587.251 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.587.256 I llm_load_print_meta: n_ff             = 16384
0.00.587.256 I llm_load_print_meta: n_expert         = 0
0.00.587.257 I llm_load_print_meta: n_expert_used    = 0
0.00.587.257 I llm_load_print_meta: causal attn      = 1
0.00.587.257 I llm_load_print_meta: pooling type     = 0
0.00.587.258 I llm_load_print_meta: rope type        = 2
0.00.587.259 I llm_load_print_meta: rope scaling     = linear
0.00.587.277 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.587.279 I llm_load_print_meta: freq_scale_train = 1
0.00.587.279 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.587.279 I llm_load_print_meta: rope_finetuned   = unknown
0.00.587.280 I llm_load_print_meta: ssm_d_conv       = 0
0.00.587.281 I llm_load_print_meta: ssm_d_inner      = 0
0.00.587.281 I llm_load_print_meta: ssm_d_state      = 0
0.00.587.282 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.587.282 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.587.283 I llm_load_print_meta: model type       = 2B
0.00.587.285 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.587.286 I llm_load_print_meta: model params     = 2.51 B
0.00.587.286 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.587.287 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.587.295 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.587.296 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.587.303 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.587.304 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.587.305 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.587.305 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.587.312 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.587.314 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.587.315 I llm_load_print_meta: max token length = 93
0.00.587.480 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.646.825 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.652.349 I llama_new_context_with_model: n_ctx      = 8192
0.00.652.356 I llama_new_context_with_model: n_batch    = 2048
0.00.652.356 I llama_new_context_with_model: n_ubatch   = 512
0.00.652.357 I llama_new_context_with_model: flash_attn = 0
0.00.652.359 I llama_new_context_with_model: freq_base  = 10000.0
0.00.652.360 I llama_new_context_with_model: freq_scale = 1
0.00.682.342 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.682.387 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.682.494 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.683.834 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.683.839 I llama_new_context_with_model: graph nodes  = 601
0.00.683.840 I llama_new_context_with_model: graph splits = 1
0.00.683.855 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.263.368 I main: llama threadpool init, n_threads = 4
0.01.263.379 I 
0.01.263.487 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.263.491 I 
0.01.263.657 I sampler seed: 3213722227
0.01.263.667 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.263.673 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.263.674 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.263.674 I 
 increasively.

**Solution:**
$$\sqrt{x+1}+\sqrt{x-1}=2$$

**Explanation:**
$$\sqrt{x

0.12.282.942 I llama_perf_sampler_print:    sampling time =      49.06 ms /    33 runs   (    1.49 ms per token,   672.65 tokens per second)
0.12.282.945 I llama_perf_context_print:        load time =    1260.46 ms
0.12.282.959 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.282.961 I llama_perf_context_print:        eval time =   10938.91 ms /    32 runs   (  341.84 ms per token,     2.93 tokens per second)
0.12.282.962 I llama_perf_context_print:       total time =   11019.58 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.020s
user	50m16.846s
sys	0m6.555s
