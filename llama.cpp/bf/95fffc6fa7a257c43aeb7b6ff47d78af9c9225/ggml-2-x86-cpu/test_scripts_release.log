+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.530 I build: 4017 (bf95fffc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.021.583 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.591 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.598 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.603 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.603 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.607 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.607 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.608 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.609 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.610 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.610 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.614 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.615 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.616 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.616 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.617 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.328 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.771 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.670 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.676 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.676 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.677 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.678 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.678 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.679 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.682 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.683 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.685 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.685 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.686 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.690 I llama_model_loader: - type  f32:   37 tensors
0.00.131.706 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.923 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.735 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.264 I llm_load_vocab: special tokens cache size = 5
0.00.265.926 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.943 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.943 I llm_load_print_meta: arch             = gemma
0.00.265.944 I llm_load_print_meta: vocab type       = SPM
0.00.265.945 I llm_load_print_meta: n_vocab          = 256000
0.00.265.945 I llm_load_print_meta: n_merges         = 0
0.00.265.945 I llm_load_print_meta: vocab_only       = 0
0.00.265.946 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.946 I llm_load_print_meta: n_embd           = 2048
0.00.265.946 I llm_load_print_meta: n_layer          = 18
0.00.265.957 I llm_load_print_meta: n_head           = 8
0.00.265.958 I llm_load_print_meta: n_head_kv        = 1
0.00.265.958 I llm_load_print_meta: n_rot            = 256
0.00.265.958 I llm_load_print_meta: n_swa            = 0
0.00.265.959 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.959 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.960 I llm_load_print_meta: n_gqa            = 8
0.00.265.961 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.962 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.962 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.964 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.965 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.965 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.965 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.966 I llm_load_print_meta: n_ff             = 16384
0.00.265.966 I llm_load_print_meta: n_expert         = 0
0.00.265.967 I llm_load_print_meta: n_expert_used    = 0
0.00.265.967 I llm_load_print_meta: causal attn      = 1
0.00.265.967 I llm_load_print_meta: pooling type     = 0
0.00.265.968 I llm_load_print_meta: rope type        = 2
0.00.265.968 I llm_load_print_meta: rope scaling     = linear
0.00.265.969 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.970 I llm_load_print_meta: freq_scale_train = 1
0.00.265.970 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.972 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.972 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.972 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.972 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.972 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.973 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.973 I llm_load_print_meta: model type       = 2B
0.00.265.975 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.976 I llm_load_print_meta: model params     = 2.51 B
0.00.265.977 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.977 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.978 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.978 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.978 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.982 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.982 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.982 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.983 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.983 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.984 I llm_load_print_meta: max token length = 93
0.00.366.821 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.366.828 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.366.829 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.366.830 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.366.830 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.366.831 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.371.976 I llama_new_context_with_model: n_seq_max     = 1
0.00.371.982 I llama_new_context_with_model: n_ctx         = 4096
0.00.371.982 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.371.983 I llama_new_context_with_model: n_batch       = 2048
0.00.371.983 I llama_new_context_with_model: n_ubatch      = 512
0.00.371.984 I llama_new_context_with_model: flash_attn    = 0
0.00.371.986 I llama_new_context_with_model: freq_base     = 10000.0
0.00.371.987 I llama_new_context_with_model: freq_scale    = 1
0.00.371.988 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.387.284 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.298 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.385 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.388.618 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.388.624 I llama_new_context_with_model: graph nodes  = 601
0.00.388.624 I llama_new_context_with_model: graph splits = 1
0.00.388.626 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.473.059 I main: llama threadpool init, n_threads = 4
0.00.473.074 I 
0.00.473.151 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.473.154 I 
0.00.473.200 I sampler seed: 3533147629
0.00.473.212 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.473.214 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.473.215 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.473.216 I 
 increasities in a variety of settings and backgrounds. [end of text]


0.01.246.575 I llama_perf_sampler_print:    sampling time =       1.67 ms /    12 runs   (    0.14 ms per token,  7202.88 tokens per second)
0.01.246.579 I llama_perf_context_print:        load time =     472.18 ms
0.01.246.580 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.246.582 I llama_perf_context_print:        eval time =     766.37 ms /    11 runs   (   69.67 ms per token,    14.35 tokens per second)
0.01.246.583 I llama_perf_context_print:       total time =     773.53 ms /    12 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.562 I build: 4017 (bf95fffc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.905 I main: load the model and apply lora adapter, if any
0.00.021.430 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.445 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.455 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.459 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.462 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.463 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.464 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.465 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.466 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.467 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.473 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.474 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.475 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.476 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.272 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.095 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.921 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.927 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.927 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.928 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.929 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.929 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.930 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.932 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.933 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.934 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.935 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.935 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.939 I llama_model_loader: - type  f32:   37 tensors
0.00.131.940 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.510 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.925 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.503 I llm_load_vocab: special tokens cache size = 5
0.00.267.333 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.348 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.349 I llm_load_print_meta: arch             = gemma
0.00.267.349 I llm_load_print_meta: vocab type       = SPM
0.00.267.350 I llm_load_print_meta: n_vocab          = 256000
0.00.267.350 I llm_load_print_meta: n_merges         = 0
0.00.267.351 I llm_load_print_meta: vocab_only       = 0
0.00.267.351 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.351 I llm_load_print_meta: n_embd           = 2048
0.00.267.352 I llm_load_print_meta: n_layer          = 18
0.00.267.365 I llm_load_print_meta: n_head           = 8
0.00.267.366 I llm_load_print_meta: n_head_kv        = 1
0.00.267.367 I llm_load_print_meta: n_rot            = 256
0.00.267.367 I llm_load_print_meta: n_swa            = 0
0.00.267.367 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.368 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.369 I llm_load_print_meta: n_gqa            = 8
0.00.267.370 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.371 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.371 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.374 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.375 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.375 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.376 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.377 I llm_load_print_meta: n_ff             = 16384
0.00.267.377 I llm_load_print_meta: n_expert         = 0
0.00.267.377 I llm_load_print_meta: n_expert_used    = 0
0.00.267.378 I llm_load_print_meta: causal attn      = 1
0.00.267.378 I llm_load_print_meta: pooling type     = 0
0.00.267.379 I llm_load_print_meta: rope type        = 2
0.00.267.380 I llm_load_print_meta: rope scaling     = linear
0.00.267.381 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.382 I llm_load_print_meta: freq_scale_train = 1
0.00.267.382 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.383 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.383 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.383 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.383 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.383 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.384 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.385 I llm_load_print_meta: model type       = 2B
0.00.267.385 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.386 I llm_load_print_meta: model params     = 2.51 B
0.00.267.387 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.387 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.388 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.388 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.391 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.392 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.392 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.393 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.393 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.393 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.394 I llm_load_print_meta: max token length = 93
0.00.363.888 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.369.090 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.096 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.097 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.097 I llama_new_context_with_model: n_batch       = 2048
0.00.369.098 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.098 I llama_new_context_with_model: flash_attn    = 0
0.00.369.100 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.101 I llama_new_context_with_model: freq_scale    = 1
0.00.369.102 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.385.245 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.385.262 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.385.353 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.386.611 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.386.616 I llama_new_context_with_model: graph nodes  = 601
0.00.386.616 I llama_new_context_with_model: graph splits = 1
0.00.386.618 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.179 I main: llama threadpool init, n_threads = 4
0.00.468.193 I 
0.00.468.267 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.270 I 
0.00.468.317 I sampler seed: 4258528036
0.00.468.327 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.330 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.331 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.333 I 
 increasities with the following observations:

1. The numerator of the fraction should be the number of successes and the denominator should be the total number of trials.

0.02.674.333 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6772.01 tokens per second)
0.02.674.336 I llama_perf_context_print:        load time =     467.25 ms
0.02.674.337 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.674.338 I llama_perf_context_print:        eval time =    2187.86 ms /    32 runs   (   68.37 ms per token,    14.63 tokens per second)
0.02.674.339 I llama_perf_context_print:       total time =    2206.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.529 I build: 4017 (bf95fffc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.862 I main: load the model and apply lora adapter, if any
0.00.021.197 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.207 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.215 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.222 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.226 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.230 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.230 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.231 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.231 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.232 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.232 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.236 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.237 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.237 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.238 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.239 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.318 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.857 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.658 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.663 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.664 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.665 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.666 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.667 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.668 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.670 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.671 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.671 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.672 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.673 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.676 I llama_model_loader: - type  f32:   37 tensors
0.00.131.677 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.524 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.898 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.501 I llm_load_vocab: special tokens cache size = 5
0.00.264.784 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.801 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.801 I llm_load_print_meta: arch             = gemma
0.00.264.802 I llm_load_print_meta: vocab type       = SPM
0.00.264.802 I llm_load_print_meta: n_vocab          = 256000
0.00.264.803 I llm_load_print_meta: n_merges         = 0
0.00.264.803 I llm_load_print_meta: vocab_only       = 0
0.00.264.803 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.804 I llm_load_print_meta: n_embd           = 2048
0.00.264.804 I llm_load_print_meta: n_layer          = 18
0.00.264.815 I llm_load_print_meta: n_head           = 8
0.00.264.816 I llm_load_print_meta: n_head_kv        = 1
0.00.264.817 I llm_load_print_meta: n_rot            = 256
0.00.264.817 I llm_load_print_meta: n_swa            = 0
0.00.264.817 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.818 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.819 I llm_load_print_meta: n_gqa            = 8
0.00.264.820 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.821 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.822 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.823 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.824 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.824 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.824 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.825 I llm_load_print_meta: n_ff             = 16384
0.00.264.826 I llm_load_print_meta: n_expert         = 0
0.00.264.827 I llm_load_print_meta: n_expert_used    = 0
0.00.264.827 I llm_load_print_meta: causal attn      = 1
0.00.264.827 I llm_load_print_meta: pooling type     = 0
0.00.264.828 I llm_load_print_meta: rope type        = 2
0.00.264.828 I llm_load_print_meta: rope scaling     = linear
0.00.264.830 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.830 I llm_load_print_meta: freq_scale_train = 1
0.00.264.830 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.831 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.832 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.832 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.833 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.833 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.833 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.834 I llm_load_print_meta: model type       = 2B
0.00.264.835 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.836 I llm_load_print_meta: model params     = 2.51 B
0.00.264.836 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.837 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.837 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.838 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.839 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.839 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.839 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.840 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.840 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.840 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.841 I llm_load_print_meta: max token length = 93
0.00.360.410 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.360.417 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.360.418 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.360.419 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.360.419 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.360.420 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.365.675 I llama_new_context_with_model: n_seq_max     = 1
0.00.365.682 I llama_new_context_with_model: n_ctx         = 4096
0.00.365.682 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.365.683 I llama_new_context_with_model: n_batch       = 2048
0.00.365.683 I llama_new_context_with_model: n_ubatch      = 512
0.00.365.684 I llama_new_context_with_model: flash_attn    = 0
0.00.365.687 I llama_new_context_with_model: freq_base     = 10000.0
0.00.365.688 I llama_new_context_with_model: freq_scale    = 1
0.00.365.689 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.381.103 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.381.117 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.381.204 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.382.434 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.382.440 I llama_new_context_with_model: graph nodes  = 601
0.00.382.440 I llama_new_context_with_model: graph splits = 1
0.00.382.442 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.110 I main: llama threadpool init, n_threads = 4
0.00.468.124 I 
0.00.468.199 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.202 I 
0.00.468.242 I sampler seed: 489290722
0.00.468.254 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.256 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.257 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.258 I 
 maneuvled face.

It is a portrait of a young man, perhaps in his early twenties, with dark hair and eyes full of a youthful curiosity.

0.02.621.667 I llama_perf_sampler_print:    sampling time =       4.98 ms /    33 runs   (    0.15 ms per token,  6631.83 tokens per second)
0.02.621.669 I llama_perf_context_print:        load time =     467.23 ms
0.02.621.671 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.621.672 I llama_perf_context_print:        eval time =    2134.86 ms /    32 runs   (   66.71 ms per token,    14.99 tokens per second)
0.02.621.673 I llama_perf_context_print:       total time =    2153.56 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.687 I build: 4017 (bf95fffc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.902 I main: llama backend init
0.00.001.038 I main: load the model and apply lora adapter, if any
0.00.021.742 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.752 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.759 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.767 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.770 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.775 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.775 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.776 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.776 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.777 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.777 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.781 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.782 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.783 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.784 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.785 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.222 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.017 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.023 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.024 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.024 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.025 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.026 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.027 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.029 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.029 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.030 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.030 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.031 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.034 I llama_model_loader: - type  f32:   37 tensors
0.00.132.036 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.436 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.712 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.161 I llm_load_vocab: special tokens cache size = 5
0.00.266.226 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.242 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.242 I llm_load_print_meta: arch             = gemma
0.00.266.243 I llm_load_print_meta: vocab type       = SPM
0.00.266.244 I llm_load_print_meta: n_vocab          = 256000
0.00.266.244 I llm_load_print_meta: n_merges         = 0
0.00.266.245 I llm_load_print_meta: vocab_only       = 0
0.00.266.245 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.245 I llm_load_print_meta: n_embd           = 2048
0.00.266.245 I llm_load_print_meta: n_layer          = 18
0.00.266.257 I llm_load_print_meta: n_head           = 8
0.00.266.258 I llm_load_print_meta: n_head_kv        = 1
0.00.266.259 I llm_load_print_meta: n_rot            = 256
0.00.266.259 I llm_load_print_meta: n_swa            = 0
0.00.266.259 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.259 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.260 I llm_load_print_meta: n_gqa            = 8
0.00.266.261 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.262 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.263 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.265 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.265 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.265 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.266 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.266 I llm_load_print_meta: n_ff             = 16384
0.00.266.267 I llm_load_print_meta: n_expert         = 0
0.00.266.267 I llm_load_print_meta: n_expert_used    = 0
0.00.266.267 I llm_load_print_meta: causal attn      = 1
0.00.266.268 I llm_load_print_meta: pooling type     = 0
0.00.266.268 I llm_load_print_meta: rope type        = 2
0.00.266.268 I llm_load_print_meta: rope scaling     = linear
0.00.266.270 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.270 I llm_load_print_meta: freq_scale_train = 1
0.00.266.271 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.271 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.271 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.272 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.272 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.272 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.272 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.273 I llm_load_print_meta: model type       = 2B
0.00.266.273 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.274 I llm_load_print_meta: model params     = 2.51 B
0.00.266.275 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.275 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.276 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.276 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.277 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.277 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.277 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.277 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.278 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.278 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.278 I llm_load_print_meta: max token length = 93
0.00.337.821 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.337.828 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.342.950 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.955 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.956 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.956 I llama_new_context_with_model: n_batch       = 2048
0.00.342.957 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.957 I llama_new_context_with_model: flash_attn    = 0
0.00.342.959 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.960 I llama_new_context_with_model: freq_scale    = 1
0.00.342.961 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.848 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.861 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.358.951 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.208 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.213 I llama_new_context_with_model: graph nodes  = 601
0.00.360.214 I llama_new_context_with_model: graph splits = 1
0.00.360.215 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.329 I main: llama threadpool init, n_threads = 4
0.00.444.342 I 
0.00.444.416 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.444.419 I 
0.00.444.465 I sampler seed: 466273411
0.00.444.477 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.444.480 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.444.482 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.444.482 I 
 increably. 

**Answer:** I'm sorry, but I am unable to provide responses that contain inappropriate or sexually suggestive content. [end of text]


0.02.558.338 I llama_perf_sampler_print:    sampling time =       4.30 ms /    30 runs   (    0.14 ms per token,  6971.88 tokens per second)
0.02.558.341 I llama_perf_context_print:        load time =     443.27 ms
0.02.558.342 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.558.343 I llama_perf_context_print:        eval time =    2096.92 ms /    29 runs   (   72.31 ms per token,    13.83 tokens per second)
0.02.558.344 I llama_perf_context_print:       total time =    2114.02 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.852s
user	0m31.857s
sys	0m9.436s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4017 (bf95fffc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31978.19 ms
main:    total time = 31978.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.534 I build: 4017 (bf95fffc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.759 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.021.678 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.687 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.696 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.703 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.704 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.707 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.708 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.709 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.709 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.710 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.711 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.715 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.715 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.716 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.716 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.716 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.447 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.360 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.259 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.265 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.266 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.266 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.267 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.268 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.268 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.272 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.272 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.273 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.274 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.275 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.278 I llama_model_loader: - type  f32:   37 tensors
0.00.132.279 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.280 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.230 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.414 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.129 I llm_load_vocab: special tokens cache size = 5
0.00.272.138 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.160 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.161 I llm_load_print_meta: arch             = gemma
0.00.272.161 I llm_load_print_meta: vocab type       = SPM
0.00.272.162 I llm_load_print_meta: n_vocab          = 256000
0.00.272.163 I llm_load_print_meta: n_merges         = 0
0.00.272.163 I llm_load_print_meta: vocab_only       = 0
0.00.272.163 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.164 I llm_load_print_meta: n_embd           = 2048
0.00.272.164 I llm_load_print_meta: n_layer          = 18
0.00.272.176 I llm_load_print_meta: n_head           = 8
0.00.272.177 I llm_load_print_meta: n_head_kv        = 1
0.00.272.178 I llm_load_print_meta: n_rot            = 256
0.00.272.178 I llm_load_print_meta: n_swa            = 0
0.00.272.178 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.179 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.180 I llm_load_print_meta: n_gqa            = 8
0.00.272.181 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.182 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.183 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.184 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.184 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.184 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.184 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.185 I llm_load_print_meta: n_ff             = 16384
0.00.272.186 I llm_load_print_meta: n_expert         = 0
0.00.272.186 I llm_load_print_meta: n_expert_used    = 0
0.00.272.186 I llm_load_print_meta: causal attn      = 1
0.00.272.187 I llm_load_print_meta: pooling type     = 0
0.00.272.187 I llm_load_print_meta: rope type        = 2
0.00.272.187 I llm_load_print_meta: rope scaling     = linear
0.00.272.189 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.190 I llm_load_print_meta: freq_scale_train = 1
0.00.272.190 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.190 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.191 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.191 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.191 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.191 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.192 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.192 I llm_load_print_meta: model type       = 2B
0.00.272.193 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.193 I llm_load_print_meta: model params     = 2.51 B
0.00.272.194 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.194 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.195 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.195 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.196 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.196 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.196 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.196 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.197 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.197 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.197 I llm_load_print_meta: max token length = 93
0.00.333.883 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.333.889 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.333.890 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.333.891 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.333.891 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.333.892 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.339.183 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.189 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.189 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.190 I llama_new_context_with_model: n_batch       = 2048
0.00.339.190 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.191 I llama_new_context_with_model: flash_attn    = 0
0.00.339.193 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.194 I llama_new_context_with_model: freq_scale    = 1
0.00.339.195 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.385 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.401 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.488 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.355.698 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.355.704 I llama_new_context_with_model: graph nodes  = 601
0.00.355.705 I llama_new_context_with_model: graph splits = 1
0.00.355.707 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.432.181 I main: llama threadpool init, n_threads = 4
0.00.432.195 I 
0.00.432.271 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.432.275 I 
0.00.432.316 I sampler seed: 858871894
0.00.432.328 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.331 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.332 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.332 I 
 squaRED.COM is a platform that connects users with qualified professionals and services. It offers a wide range of services, including home improvement, legal assistance, financial

0.02.091.135 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6784.54 tokens per second)
0.02.091.137 I llama_perf_context_print:        load time =     431.27 ms
0.02.091.138 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.091.140 I llama_perf_context_print:        eval time =    1640.39 ms /    32 runs   (   51.26 ms per token,    19.51 tokens per second)
0.02.091.140 I llama_perf_context_print:       total time =    1658.96 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4017 (bf95fffc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32050.07 ms
main:    total time = 32050.08 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.535 I build: 4017 (bf95fffc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.021.571 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.585 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.592 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.592 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.596 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.597 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.598 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.599 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.599 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.599 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.603 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.603 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.604 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.604 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.605 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.711 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.494 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.276 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.284 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.284 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.285 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.286 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.286 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.289 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.291 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.293 I llama_model_loader: - type  f32:   37 tensors
0.00.131.295 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.295 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.848 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.486 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.192 I llm_load_vocab: special tokens cache size = 5
0.00.274.372 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.394 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.395 I llm_load_print_meta: arch             = gemma
0.00.274.395 I llm_load_print_meta: vocab type       = SPM
0.00.274.396 I llm_load_print_meta: n_vocab          = 256000
0.00.274.396 I llm_load_print_meta: n_merges         = 0
0.00.274.397 I llm_load_print_meta: vocab_only       = 0
0.00.274.397 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.397 I llm_load_print_meta: n_embd           = 2048
0.00.274.398 I llm_load_print_meta: n_layer          = 18
0.00.274.409 I llm_load_print_meta: n_head           = 8
0.00.274.410 I llm_load_print_meta: n_head_kv        = 1
0.00.274.411 I llm_load_print_meta: n_rot            = 256
0.00.274.411 I llm_load_print_meta: n_swa            = 0
0.00.274.411 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.412 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.412 I llm_load_print_meta: n_gqa            = 8
0.00.274.414 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.415 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.415 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.417 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.417 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.417 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.418 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.419 I llm_load_print_meta: n_ff             = 16384
0.00.274.419 I llm_load_print_meta: n_expert         = 0
0.00.274.419 I llm_load_print_meta: n_expert_used    = 0
0.00.274.419 I llm_load_print_meta: causal attn      = 1
0.00.274.420 I llm_load_print_meta: pooling type     = 0
0.00.274.420 I llm_load_print_meta: rope type        = 2
0.00.274.421 I llm_load_print_meta: rope scaling     = linear
0.00.274.422 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.423 I llm_load_print_meta: freq_scale_train = 1
0.00.274.423 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.424 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.424 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.424 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.424 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.425 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.425 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.425 I llm_load_print_meta: model type       = 2B
0.00.274.426 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.274.427 I llm_load_print_meta: model params     = 2.51 B
0.00.274.427 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.274.427 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.428 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.429 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.429 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.429 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.430 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.430 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.431 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.431 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.431 I llm_load_print_meta: max token length = 93
0.00.333.855 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.132 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.138 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.139 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.139 I llama_new_context_with_model: n_batch       = 2048
0.00.339.139 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.140 I llama_new_context_with_model: flash_attn    = 0
0.00.339.142 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.143 I llama_new_context_with_model: freq_scale    = 1
0.00.339.144 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.897 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.913 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.002 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.260 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.266 I llama_new_context_with_model: graph nodes  = 601
0.00.356.266 I llama_new_context_with_model: graph splits = 1
0.00.356.268 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.449 I main: llama threadpool init, n_threads = 4
0.00.430.464 I 
0.00.430.541 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.430.544 I 
0.00.430.585 I sampler seed: 1954548352
0.00.430.596 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.601 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.602 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.602 I 
 guaranteing that the future of work is characterized by a hybrid work model. While this model offers flexibility and autonomy, it also comes with challenges, such as increased

0.02.024.565 I llama_perf_sampler_print:    sampling time =       5.05 ms /    33 runs   (    0.15 ms per token,  6534.65 tokens per second)
0.02.024.567 I llama_perf_context_print:        load time =     429.54 ms
0.02.024.568 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.024.570 I llama_perf_context_print:        eval time =    1575.08 ms /    32 runs   (   49.22 ms per token,    20.32 tokens per second)
0.02.024.571 I llama_perf_context_print:       total time =    1594.12 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m11.076s
user	8m14.403s
sys	0m7.070s
