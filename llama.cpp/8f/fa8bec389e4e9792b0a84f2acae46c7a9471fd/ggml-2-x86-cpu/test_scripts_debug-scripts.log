+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.673 I build: 4794 (8ffa8bec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.896 I main: llama backend init
0.00.000.904 I main: load the model and apply lora adapter, if any
0.00.085.785 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.800 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.900 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.924 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.930 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.937 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.939 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.941 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.942 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.944 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.946 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.953 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.957 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.959 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.961 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.962 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.294.600 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.394.851 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.942 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.955 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.957 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.959 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.960 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.963 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.964 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.969 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.971 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.973 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.975 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.977 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.417.986 I llama_model_loader: - type  f32:   37 tensors
0.00.417.989 I llama_model_loader: - type q8_0:  127 tensors
0.00.418.006 I print_info: file format = GGUF V3 (latest)
0.00.418.007 I print_info: file type   = Q8_0
0.00.418.009 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.702.555 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.833.348 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.834.535 I load: special tokens cache size = 5
0.01.063.950 I load: token to piece cache size = 1.6014 MB
0.01.064.033 I print_info: arch             = gemma
0.01.064.035 I print_info: vocab_only       = 0
0.01.064.035 I print_info: n_ctx_train      = 8192
0.01.064.036 I print_info: n_embd           = 2048
0.01.064.036 I print_info: n_layer          = 18
0.01.064.111 I print_info: n_head           = 8
0.01.064.122 I print_info: n_head_kv        = 1
0.01.064.124 I print_info: n_rot            = 256
0.01.064.124 I print_info: n_swa            = 0
0.01.064.125 I print_info: n_embd_head_k    = 256
0.01.064.125 I print_info: n_embd_head_v    = 256
0.01.064.130 I print_info: n_gqa            = 8
0.01.064.135 I print_info: n_embd_k_gqa     = 256
0.01.064.142 I print_info: n_embd_v_gqa     = 256
0.01.064.143 I print_info: f_norm_eps       = 0.0e+00
0.01.064.145 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.064.145 I print_info: f_clamp_kqv      = 0.0e+00
0.01.064.146 I print_info: f_max_alibi_bias = 0.0e+00
0.01.064.147 I print_info: f_logit_scale    = 0.0e+00
0.01.064.152 I print_info: n_ff             = 16384
0.01.064.152 I print_info: n_expert         = 0
0.01.064.165 I print_info: n_expert_used    = 0
0.01.064.168 I print_info: causal attn      = 1
0.01.064.169 I print_info: pooling type     = 0
0.01.064.170 I print_info: rope type        = 2
0.01.064.170 I print_info: rope scaling     = linear
0.01.064.172 I print_info: freq_base_train  = 10000.0
0.01.064.172 I print_info: freq_scale_train = 1
0.01.064.173 I print_info: n_ctx_orig_yarn  = 8192
0.01.064.173 I print_info: rope_finetuned   = unknown
0.01.064.174 I print_info: ssm_d_conv       = 0
0.01.064.174 I print_info: ssm_d_inner      = 0
0.01.064.174 I print_info: ssm_d_state      = 0
0.01.064.174 I print_info: ssm_dt_rank      = 0
0.01.064.175 I print_info: ssm_dt_b_c_rms   = 0
0.01.064.176 I print_info: model type       = 2B
0.01.064.177 I print_info: model params     = 2.51 B
0.01.064.182 I print_info: general.name     = gemma-1.1-2b-it
0.01.064.187 I print_info: vocab type       = SPM
0.01.064.189 I print_info: n_vocab          = 256000
0.01.064.192 I print_info: n_merges         = 0
0.01.064.193 I print_info: BOS token        = 2 '<bos>'
0.01.064.194 I print_info: EOS token        = 1 '<eos>'
0.01.064.194 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.064.195 I print_info: UNK token        = 3 '<unk>'
0.01.064.196 I print_info: PAD token        = 0 '<pad>'
0.01.064.196 I print_info: LF token         = 227 '<0x0A>'
0.01.064.203 I print_info: EOG token        = 1 '<eos>'
0.01.064.205 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.064.206 I print_info: max token length = 93
0.01.064.207 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.164.242 I load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.164.252 I load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.164.253 I load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.164.253 I load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.164.254 I load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.164.255 I load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.171.218 I llama_init_from_model: n_seq_max     = 1
0.01.171.224 I llama_init_from_model: n_ctx         = 4096
0.01.171.224 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.171.224 I llama_init_from_model: n_batch       = 2048
0.01.171.225 I llama_init_from_model: n_ubatch      = 512
0.01.171.225 I llama_init_from_model: flash_attn    = 0
0.01.171.229 I llama_init_from_model: freq_base     = 10000.0
0.01.171.229 I llama_init_from_model: freq_scale    = 1
0.01.171.230 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.171.314 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.186.500 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.186.561 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.186.694 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.189.952 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.189.956 I llama_init_from_model: graph nodes  = 601
0.01.189.956 I llama_init_from_model: graph splits = 1
0.01.189.983 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.189.986 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.825.002 I main: llama threadpool init, n_threads = 4
0.01.825.017 I 
0.01.825.115 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.825.119 I 
0.01.825.358 I sampler seed: 991650471
0.01.825.372 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.825.383 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.825.384 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.825.384 I 
 seconally.

**Answer:**

I am unable to provide an answer as the context does not provide any information regarding a specific question or topic. [end of text]


0.14.937.874 I llama_perf_sampler_print:    sampling time =      48.17 ms /    32 runs   (    1.51 ms per token,   664.30 tokens per second)
0.14.937.877 I llama_perf_context_print:        load time =    1797.41 ms
0.14.937.879 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.937.880 I llama_perf_context_print:        eval time =   13029.91 ms /    31 runs   (  420.32 ms per token,     2.38 tokens per second)
0.14.937.881 I llama_perf_context_print:       total time =   13139.45 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.632 I build: 4794 (8ffa8bec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.000.854 I main: load the model and apply lora adapter, if any
0.00.086.253 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.359 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.384 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.387 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.392 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.394 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.396 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.398 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.399 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.401 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.408 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.410 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.411 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.413 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.414 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.294.982 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.394.900 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.418.057 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.418.077 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.418.079 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.418.081 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.418.083 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.418.085 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.087 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.092 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.093 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.418.095 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.418.097 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.418.099 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.418.109 I llama_model_loader: - type  f32:   37 tensors
0.00.418.111 I llama_model_loader: - type q8_0:  127 tensors
0.00.418.130 I print_info: file format = GGUF V3 (latest)
0.00.418.130 I print_info: file type   = Q8_0
0.00.418.134 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.696.109 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.820.876 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.821.882 I load: special tokens cache size = 5
0.01.045.174 I load: token to piece cache size = 1.6014 MB
0.01.045.260 I print_info: arch             = gemma
0.01.045.261 I print_info: vocab_only       = 0
0.01.045.262 I print_info: n_ctx_train      = 8192
0.01.045.262 I print_info: n_embd           = 2048
0.01.045.263 I print_info: n_layer          = 18
0.01.045.341 I print_info: n_head           = 8
0.01.045.353 I print_info: n_head_kv        = 1
0.01.045.355 I print_info: n_rot            = 256
0.01.045.356 I print_info: n_swa            = 0
0.01.045.356 I print_info: n_embd_head_k    = 256
0.01.045.380 I print_info: n_embd_head_v    = 256
0.01.045.388 I print_info: n_gqa            = 8
0.01.045.393 I print_info: n_embd_k_gqa     = 256
0.01.045.398 I print_info: n_embd_v_gqa     = 256
0.01.045.402 I print_info: f_norm_eps       = 0.0e+00
0.01.045.403 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.045.404 I print_info: f_clamp_kqv      = 0.0e+00
0.01.045.404 I print_info: f_max_alibi_bias = 0.0e+00
0.01.045.405 I print_info: f_logit_scale    = 0.0e+00
0.01.045.409 I print_info: n_ff             = 16384
0.01.045.410 I print_info: n_expert         = 0
0.01.045.410 I print_info: n_expert_used    = 0
0.01.045.410 I print_info: causal attn      = 1
0.01.045.411 I print_info: pooling type     = 0
0.01.045.411 I print_info: rope type        = 2
0.01.045.412 I print_info: rope scaling     = linear
0.01.045.413 I print_info: freq_base_train  = 10000.0
0.01.045.414 I print_info: freq_scale_train = 1
0.01.045.423 I print_info: n_ctx_orig_yarn  = 8192
0.01.045.424 I print_info: rope_finetuned   = unknown
0.01.045.424 I print_info: ssm_d_conv       = 0
0.01.045.425 I print_info: ssm_d_inner      = 0
0.01.045.426 I print_info: ssm_d_state      = 0
0.01.045.426 I print_info: ssm_dt_rank      = 0
0.01.045.427 I print_info: ssm_dt_b_c_rms   = 0
0.01.045.429 I print_info: model type       = 2B
0.01.045.430 I print_info: model params     = 2.51 B
0.01.045.431 I print_info: general.name     = gemma-1.1-2b-it
0.01.045.435 I print_info: vocab type       = SPM
0.01.045.436 I print_info: n_vocab          = 256000
0.01.045.439 I print_info: n_merges         = 0
0.01.045.440 I print_info: BOS token        = 2 '<bos>'
0.01.045.441 I print_info: EOS token        = 1 '<eos>'
0.01.045.442 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.045.442 I print_info: UNK token        = 3 '<unk>'
0.01.045.443 I print_info: PAD token        = 0 '<pad>'
0.01.045.444 I print_info: LF token         = 227 '<0x0A>'
0.01.045.451 I print_info: EOG token        = 1 '<eos>'
0.01.045.452 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.045.452 I print_info: max token length = 93
0.01.045.454 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.121.468 I load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.128.757 I llama_init_from_model: n_seq_max     = 1
0.01.128.763 I llama_init_from_model: n_ctx         = 4096
0.01.128.763 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.128.763 I llama_init_from_model: n_batch       = 2048
0.01.128.764 I llama_init_from_model: n_ubatch      = 512
0.01.128.764 I llama_init_from_model: flash_attn    = 0
0.01.128.767 I llama_init_from_model: freq_base     = 10000.0
0.01.128.767 I llama_init_from_model: freq_scale    = 1
0.01.128.768 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.128.859 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.143.074 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.143.112 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.143.234 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.146.521 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.146.525 I llama_init_from_model: graph nodes  = 601
0.01.146.526 I llama_init_from_model: graph splits = 1
0.01.146.550 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.146.554 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.780.165 I main: llama threadpool init, n_threads = 4
0.01.780.178 I 
0.01.780.285 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.780.293 I 
0.01.780.536 I sampler seed: 2624904586
0.01.780.549 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.780.559 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.780.560 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.780.560 I 
 increasities!

I cannot answer this question as it contains sexually suggestive content that is inappropriate for me to discuss. [end of text]


0.12.000.404 I llama_perf_sampler_print:    sampling time =      37.40 ms /    25 runs   (    1.50 ms per token,   668.52 tokens per second)
0.12.000.408 I llama_perf_context_print:        load time =    1752.63 ms
0.12.000.409 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.000.411 I llama_perf_context_print:        eval time =   10154.43 ms /    24 runs   (  423.10 ms per token,     2.36 tokens per second)
0.12.000.412 I llama_perf_context_print:       total time =   10246.81 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.622 I build: 4794 (8ffa8bec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.000.831 I main: load the model and apply lora adapter, if any
0.00.085.706 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.725 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.085.822 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.842 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.845 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.850 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.852 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.854 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.856 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.858 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.859 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.867 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.869 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.871 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.873 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.875 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.297.591 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.397.649 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.420.828 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.420.845 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.420.847 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.420.849 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.420.851 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.420.853 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.420.855 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.420.859 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.420.861 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.420.863 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.420.865 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.420.867 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.420.876 I llama_model_loader: - type  f32:   37 tensors
0.00.420.878 I llama_model_loader: - type q8_0:  127 tensors
0.00.420.896 I print_info: file format = GGUF V3 (latest)
0.00.420.896 I print_info: file type   = Q8_0
0.00.420.899 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.692.855 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.822.360 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.823.398 I load: special tokens cache size = 5
0.01.049.725 I load: token to piece cache size = 1.6014 MB
0.01.049.813 I print_info: arch             = gemma
0.01.049.818 I print_info: vocab_only       = 0
0.01.049.818 I print_info: n_ctx_train      = 8192
0.01.049.819 I print_info: n_embd           = 2048
0.01.049.819 I print_info: n_layer          = 18
0.01.049.896 I print_info: n_head           = 8
0.01.049.907 I print_info: n_head_kv        = 1
0.01.049.908 I print_info: n_rot            = 256
0.01.049.909 I print_info: n_swa            = 0
0.01.049.909 I print_info: n_embd_head_k    = 256
0.01.049.910 I print_info: n_embd_head_v    = 256
0.01.049.915 I print_info: n_gqa            = 8
0.01.049.919 I print_info: n_embd_k_gqa     = 256
0.01.049.924 I print_info: n_embd_v_gqa     = 256
0.01.049.928 I print_info: f_norm_eps       = 0.0e+00
0.01.049.930 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.049.930 I print_info: f_clamp_kqv      = 0.0e+00
0.01.049.931 I print_info: f_max_alibi_bias = 0.0e+00
0.01.049.931 I print_info: f_logit_scale    = 0.0e+00
0.01.049.936 I print_info: n_ff             = 16384
0.01.049.937 I print_info: n_expert         = 0
0.01.049.938 I print_info: n_expert_used    = 0
0.01.049.938 I print_info: causal attn      = 1
0.01.049.939 I print_info: pooling type     = 0
0.01.049.940 I print_info: rope type        = 2
0.01.049.941 I print_info: rope scaling     = linear
0.01.049.943 I print_info: freq_base_train  = 10000.0
0.01.049.944 I print_info: freq_scale_train = 1
0.01.049.945 I print_info: n_ctx_orig_yarn  = 8192
0.01.049.945 I print_info: rope_finetuned   = unknown
0.01.049.946 I print_info: ssm_d_conv       = 0
0.01.049.947 I print_info: ssm_d_inner      = 0
0.01.049.947 I print_info: ssm_d_state      = 0
0.01.049.948 I print_info: ssm_dt_rank      = 0
0.01.049.949 I print_info: ssm_dt_b_c_rms   = 0
0.01.049.959 I print_info: model type       = 2B
0.01.049.961 I print_info: model params     = 2.51 B
0.01.049.961 I print_info: general.name     = gemma-1.1-2b-it
0.01.049.965 I print_info: vocab type       = SPM
0.01.049.967 I print_info: n_vocab          = 256000
0.01.049.970 I print_info: n_merges         = 0
0.01.049.971 I print_info: BOS token        = 2 '<bos>'
0.01.049.972 I print_info: EOS token        = 1 '<eos>'
0.01.049.973 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.049.973 I print_info: UNK token        = 3 '<unk>'
0.01.049.974 I print_info: PAD token        = 0 '<pad>'
0.01.049.975 I print_info: LF token         = 227 '<0x0A>'
0.01.049.981 I print_info: EOG token        = 1 '<eos>'
0.01.049.983 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.049.984 I print_info: max token length = 93
0.01.049.985 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.124.943 I load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.124.955 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.124.955 I load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.124.956 I load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.124.957 I load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.124.957 I load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.131.885 I llama_init_from_model: n_seq_max     = 1
0.01.131.891 I llama_init_from_model: n_ctx         = 4096
0.01.131.892 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.131.892 I llama_init_from_model: n_batch       = 2048
0.01.131.892 I llama_init_from_model: n_ubatch      = 512
0.01.131.893 I llama_init_from_model: flash_attn    = 0
0.01.131.896 I llama_init_from_model: freq_base     = 10000.0
0.01.131.897 I llama_init_from_model: freq_scale    = 1
0.01.131.897 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.131.987 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.147.353 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.147.394 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.147.519 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.150.758 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.150.761 I llama_init_from_model: graph nodes  = 601
0.01.150.762 I llama_init_from_model: graph splits = 1
0.01.150.788 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.150.791 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.782.339 I main: llama threadpool init, n_threads = 4
0.01.782.352 I 
0.01.782.448 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.782.452 I 
0.01.782.706 I sampler seed: 3948938578
0.01.782.718 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.782.729 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.782.730 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.782.730 I 
 increablingly.

I am unable to generate a response because the prompt contains inappropriate and potentially harmful content. [end of text]


0.11.420.200 I llama_perf_sampler_print:    sampling time =      35.80 ms /    24 runs   (    1.49 ms per token,   670.39 tokens per second)
0.11.420.203 I llama_perf_context_print:        load time =    1754.90 ms
0.11.420.205 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.420.206 I llama_perf_context_print:        eval time =    9575.71 ms /    23 runs   (  416.34 ms per token,     2.40 tokens per second)
0.11.420.207 I llama_perf_context_print:       total time =    9664.36 ms /    24 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.648 I build: 4794 (8ffa8bec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.847 I main: llama backend init
0.00.000.855 I main: load the model and apply lora adapter, if any
0.00.085.112 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.124 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.218 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.239 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.244 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.249 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.251 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.253 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.254 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.256 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.258 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.265 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.266 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.268 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.270 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.272 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.288.878 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.394.492 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.665 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.682 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.684 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.686 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.687 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.689 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.691 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.696 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.698 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.700 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.702 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.703 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.417.714 I llama_model_loader: - type  f32:   37 tensors
0.00.417.716 I llama_model_loader: - type q8_0:  127 tensors
0.00.417.734 I print_info: file format = GGUF V3 (latest)
0.00.417.734 I print_info: file type   = Q8_0
0.00.417.738 I print_info: file size   = 2.48 GiB (8.50 BPW) 
0.00.701.444 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.826.833 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.827.836 I load: special tokens cache size = 5
0.01.042.751 I load: token to piece cache size = 1.6014 MB
0.01.042.832 I print_info: arch             = gemma
0.01.042.833 I print_info: vocab_only       = 0
0.01.042.834 I print_info: n_ctx_train      = 8192
0.01.042.834 I print_info: n_embd           = 2048
0.01.042.834 I print_info: n_layer          = 18
0.01.042.911 I print_info: n_head           = 8
0.01.042.923 I print_info: n_head_kv        = 1
0.01.042.924 I print_info: n_rot            = 256
0.01.042.924 I print_info: n_swa            = 0
0.01.042.925 I print_info: n_embd_head_k    = 256
0.01.042.925 I print_info: n_embd_head_v    = 256
0.01.042.930 I print_info: n_gqa            = 8
0.01.042.934 I print_info: n_embd_k_gqa     = 256
0.01.042.939 I print_info: n_embd_v_gqa     = 256
0.01.042.941 I print_info: f_norm_eps       = 0.0e+00
0.01.042.943 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.042.943 I print_info: f_clamp_kqv      = 0.0e+00
0.01.042.945 I print_info: f_max_alibi_bias = 0.0e+00
0.01.042.945 I print_info: f_logit_scale    = 0.0e+00
0.01.042.950 I print_info: n_ff             = 16384
0.01.042.951 I print_info: n_expert         = 0
0.01.042.951 I print_info: n_expert_used    = 0
0.01.042.951 I print_info: causal attn      = 1
0.01.042.952 I print_info: pooling type     = 0
0.01.042.953 I print_info: rope type        = 2
0.01.042.954 I print_info: rope scaling     = linear
0.01.042.956 I print_info: freq_base_train  = 10000.0
0.01.042.957 I print_info: freq_scale_train = 1
0.01.042.957 I print_info: n_ctx_orig_yarn  = 8192
0.01.042.958 I print_info: rope_finetuned   = unknown
0.01.042.958 I print_info: ssm_d_conv       = 0
0.01.042.959 I print_info: ssm_d_inner      = 0
0.01.042.959 I print_info: ssm_d_state      = 0
0.01.042.959 I print_info: ssm_dt_rank      = 0
0.01.042.960 I print_info: ssm_dt_b_c_rms   = 0
0.01.042.961 I print_info: model type       = 2B
0.01.042.962 I print_info: model params     = 2.51 B
0.01.042.963 I print_info: general.name     = gemma-1.1-2b-it
0.01.042.967 I print_info: vocab type       = SPM
0.01.042.968 I print_info: n_vocab          = 256000
0.01.042.971 I print_info: n_merges         = 0
0.01.042.972 I print_info: BOS token        = 2 '<bos>'
0.01.042.972 I print_info: EOS token        = 1 '<eos>'
0.01.042.973 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.042.973 I print_info: UNK token        = 3 '<unk>'
0.01.042.974 I print_info: PAD token        = 0 '<pad>'
0.01.042.975 I print_info: LF token         = 227 '<0x0A>'
0.01.042.981 I print_info: EOG token        = 1 '<eos>'
0.01.042.982 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.042.983 I print_info: max token length = 93
0.01.042.984 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.115.968 I load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.115.980 I load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.123.108 I llama_init_from_model: n_seq_max     = 1
0.01.123.113 I llama_init_from_model: n_ctx         = 4096
0.01.123.114 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.123.114 I llama_init_from_model: n_batch       = 2048
0.01.123.115 I llama_init_from_model: n_ubatch      = 512
0.01.123.116 I llama_init_from_model: flash_attn    = 0
0.01.123.119 I llama_init_from_model: freq_base     = 10000.0
0.01.123.120 I llama_init_from_model: freq_scale    = 1
0.01.123.120 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.123.209 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.137.552 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.137.598 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.137.718 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.141.313 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.141.318 I llama_init_from_model: graph nodes  = 601
0.01.141.318 I llama_init_from_model: graph splits = 1
0.01.141.346 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.141.347 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.776.001 I main: llama threadpool init, n_threads = 4
0.01.776.015 I 
0.01.776.122 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.776.126 I 
0.01.776.369 I sampler seed: 3579057019
0.01.776.391 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.776.404 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.776.413 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.776.414 I 
 increasities on the surface of Pluto, which suggest the presence of subsurface ice.

**Explanation:**

* The presence of ice beneath the surface of Pluto indicates

0.15.342.464 I llama_perf_sampler_print:    sampling time =      49.68 ms /    33 runs   (    1.51 ms per token,   664.32 tokens per second)
0.15.342.470 I llama_perf_context_print:        load time =    1748.44 ms
0.15.342.472 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.342.476 I llama_perf_context_print:        eval time =   13481.00 ms /    32 runs   (  421.28 ms per token,     2.37 tokens per second)
0.15.342.477 I llama_perf_context_print:       total time =   13593.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.655s
user	3m22.236s
sys	0m9.125s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4794 (8ffa8bec)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186758.68 ms
main:    total time = 186758.68 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.660 I build: 4794 (8ffa8bec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.000.875 I main: load the model and apply lora adapter, if any
0.00.087.473 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.087.488 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.087.591 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.087.614 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.087.617 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.087.623 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.087.625 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.087.627 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.087.628 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.087.630 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.087.632 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.087.639 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.087.641 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.087.642 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.087.644 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.290.980 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.164 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.414.219 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.414.232 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.414.234 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.414.235 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.414.237 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.414.239 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.414.241 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.414.246 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.414.248 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.414.250 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.414.252 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.414.254 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.414.256 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.414.265 I llama_model_loader: - type  f32:   37 tensors
0.00.414.267 I llama_model_loader: - type q4_K:  108 tensors
0.00.414.268 I llama_model_loader: - type q6_K:   19 tensors
0.00.414.286 I print_info: file format = GGUF V3 (latest)
0.00.414.287 I print_info: file type   = Q4_K - Medium
0.00.414.289 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.678.616 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.800.920 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.801.892 I load: special tokens cache size = 5
0.01.026.224 I load: token to piece cache size = 1.6014 MB
0.01.026.308 I print_info: arch             = gemma
0.01.026.312 I print_info: vocab_only       = 0
0.01.026.313 I print_info: n_ctx_train      = 8192
0.01.026.313 I print_info: n_embd           = 2048
0.01.026.314 I print_info: n_layer          = 18
0.01.026.389 I print_info: n_head           = 8
0.01.026.399 I print_info: n_head_kv        = 1
0.01.026.401 I print_info: n_rot            = 256
0.01.026.402 I print_info: n_swa            = 0
0.01.026.413 I print_info: n_embd_head_k    = 256
0.01.026.415 I print_info: n_embd_head_v    = 256
0.01.026.420 I print_info: n_gqa            = 8
0.01.026.425 I print_info: n_embd_k_gqa     = 256
0.01.026.430 I print_info: n_embd_v_gqa     = 256
0.01.026.432 I print_info: f_norm_eps       = 0.0e+00
0.01.026.434 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.026.434 I print_info: f_clamp_kqv      = 0.0e+00
0.01.026.435 I print_info: f_max_alibi_bias = 0.0e+00
0.01.026.436 I print_info: f_logit_scale    = 0.0e+00
0.01.026.441 I print_info: n_ff             = 16384
0.01.026.441 I print_info: n_expert         = 0
0.01.026.442 I print_info: n_expert_used    = 0
0.01.026.443 I print_info: causal attn      = 1
0.01.026.443 I print_info: pooling type     = 0
0.01.026.444 I print_info: rope type        = 2
0.01.026.447 I print_info: rope scaling     = linear
0.01.026.449 I print_info: freq_base_train  = 10000.0
0.01.026.449 I print_info: freq_scale_train = 1
0.01.026.450 I print_info: n_ctx_orig_yarn  = 8192
0.01.026.450 I print_info: rope_finetuned   = unknown
0.01.026.451 I print_info: ssm_d_conv       = 0
0.01.026.451 I print_info: ssm_d_inner      = 0
0.01.026.451 I print_info: ssm_d_state      = 0
0.01.026.452 I print_info: ssm_dt_rank      = 0
0.01.026.452 I print_info: ssm_dt_b_c_rms   = 0
0.01.026.454 I print_info: model type       = 2B
0.01.026.455 I print_info: model params     = 2.51 B
0.01.026.456 I print_info: general.name     = gemma-1.1-2b-it
0.01.026.460 I print_info: vocab type       = SPM
0.01.026.461 I print_info: n_vocab          = 256000
0.01.026.464 I print_info: n_merges         = 0
0.01.026.465 I print_info: BOS token        = 2 '<bos>'
0.01.026.466 I print_info: EOS token        = 1 '<eos>'
0.01.026.467 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.026.467 I print_info: UNK token        = 3 '<unk>'
0.01.026.469 I print_info: PAD token        = 0 '<pad>'
0.01.026.469 I print_info: LF token         = 227 '<0x0A>'
0.01.026.476 I print_info: EOG token        = 1 '<eos>'
0.01.026.477 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.026.478 I print_info: max token length = 93
0.01.026.479 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.076.223 I load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.076.234 I load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.076.235 I load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.076.236 I load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.076.237 I load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.076.237 I load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.083.167 I llama_init_from_model: n_seq_max     = 1
0.01.083.173 I llama_init_from_model: n_ctx         = 4096
0.01.083.174 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.083.174 I llama_init_from_model: n_batch       = 2048
0.01.083.174 I llama_init_from_model: n_ubatch      = 512
0.01.083.175 I llama_init_from_model: flash_attn    = 0
0.01.083.177 I llama_init_from_model: freq_base     = 10000.0
0.01.083.178 I llama_init_from_model: freq_scale    = 1
0.01.083.179 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.083.260 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.098.069 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.098.109 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.098.228 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.101.504 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.101.508 I llama_init_from_model: graph nodes  = 601
0.01.101.509 I llama_init_from_model: graph splits = 1
0.01.101.533 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.101.536 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.709.421 I main: llama threadpool init, n_threads = 4
0.01.709.435 I 
0.01.709.529 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.709.533 I 
0.01.709.787 I sampler seed: 1744484160
0.01.709.799 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.709.810 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.709.811 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.709.811 I 
 increamically.

I am sorry, but I am unable to provide assistance or generate responses that promote or encourage harmful or dangerous activities. [end of text]


0.11.428.839 I llama_perf_sampler_print:    sampling time =      43.67 ms /    29 runs   (    1.51 ms per token,   664.04 tokens per second)
0.11.428.843 I llama_perf_context_print:        load time =    1681.95 ms
0.11.428.845 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.428.847 I llama_perf_context_print:        eval time =    9644.14 ms /    28 runs   (  344.43 ms per token,     2.90 tokens per second)
0.11.428.848 I llama_perf_context_print:       total time =    9745.90 ms /    29 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4794 (8ffa8bec)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186647.01 ms
main:    total time = 186647.01 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli -no-cnv --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
load_backend: failed to find ggml_backend_init in /home/ggml/work/llama.cpp/build-ci-debug/bin/libggml-cpu.so
0.00.000.643 I build: 4794 (8ffa8bec) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.085.765 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.887 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.928 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.930 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.936 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.938 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.940 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.941 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.943 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.944 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.951 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.952 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.954 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.955 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.288.311 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.390.621 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.413.744 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.413.759 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.413.761 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.413.763 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.413.765 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.413.767 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.413.769 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.413.773 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.413.775 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.413.778 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.413.787 I llama_model_loader: - type  f32:   37 tensors
0.00.413.789 I llama_model_loader: - type q4_K:  108 tensors
0.00.413.790 I llama_model_loader: - type q6_K:   19 tensors
0.00.413.807 I print_info: file format = GGUF V3 (latest)
0.00.413.808 I print_info: file type   = Q4_K - Medium
0.00.413.810 I print_info: file size   = 1.51 GiB (5.18 BPW) 
0.00.703.057 W load: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.825.753 W load: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.826.754 I load: special tokens cache size = 5
0.01.057.095 I load: token to piece cache size = 1.6014 MB
0.01.057.179 I print_info: arch             = gemma
0.01.057.179 I print_info: vocab_only       = 0
0.01.057.180 I print_info: n_ctx_train      = 8192
0.01.057.180 I print_info: n_embd           = 2048
0.01.057.181 I print_info: n_layer          = 18
0.01.057.256 I print_info: n_head           = 8
0.01.057.267 I print_info: n_head_kv        = 1
0.01.057.267 I print_info: n_rot            = 256
0.01.057.268 I print_info: n_swa            = 0
0.01.057.271 I print_info: n_embd_head_k    = 256
0.01.057.271 I print_info: n_embd_head_v    = 256
0.01.057.276 I print_info: n_gqa            = 8
0.01.057.281 I print_info: n_embd_k_gqa     = 256
0.01.057.286 I print_info: n_embd_v_gqa     = 256
0.01.057.287 I print_info: f_norm_eps       = 0.0e+00
0.01.057.289 I print_info: f_norm_rms_eps   = 1.0e-06
0.01.057.289 I print_info: f_clamp_kqv      = 0.0e+00
0.01.057.290 I print_info: f_max_alibi_bias = 0.0e+00
0.01.057.291 I print_info: f_logit_scale    = 0.0e+00
0.01.057.296 I print_info: n_ff             = 16384
0.01.057.297 I print_info: n_expert         = 0
0.01.057.297 I print_info: n_expert_used    = 0
0.01.057.298 I print_info: causal attn      = 1
0.01.057.298 I print_info: pooling type     = 0
0.01.057.299 I print_info: rope type        = 2
0.01.057.299 I print_info: rope scaling     = linear
0.01.057.301 I print_info: freq_base_train  = 10000.0
0.01.057.302 I print_info: freq_scale_train = 1
0.01.057.303 I print_info: n_ctx_orig_yarn  = 8192
0.01.057.304 I print_info: rope_finetuned   = unknown
0.01.057.305 I print_info: ssm_d_conv       = 0
0.01.057.305 I print_info: ssm_d_inner      = 0
0.01.057.305 I print_info: ssm_d_state      = 0
0.01.057.319 I print_info: ssm_dt_rank      = 0
0.01.057.319 I print_info: ssm_dt_b_c_rms   = 0
0.01.057.321 I print_info: model type       = 2B
0.01.057.322 I print_info: model params     = 2.51 B
0.01.057.322 I print_info: general.name     = gemma-1.1-2b-it
0.01.057.326 I print_info: vocab type       = SPM
0.01.057.328 I print_info: n_vocab          = 256000
0.01.057.330 I print_info: n_merges         = 0
0.01.057.331 I print_info: BOS token        = 2 '<bos>'
0.01.057.332 I print_info: EOS token        = 1 '<eos>'
0.01.057.333 I print_info: EOT token        = 107 '<end_of_turn>'
0.01.057.334 I print_info: UNK token        = 3 '<unk>'
0.01.057.335 I print_info: PAD token        = 0 '<pad>'
0.01.057.335 I print_info: LF token         = 227 '<0x0A>'
0.01.057.344 I print_info: EOG token        = 1 '<eos>'
0.01.057.345 I print_info: EOG token        = 107 '<end_of_turn>'
0.01.057.346 I print_info: max token length = 93
0.01.057.348 I load_tensors: loading model tensors, this can take a while... (mmap = true)
0.01.103.866 I load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.110.859 I llama_init_from_model: n_seq_max     = 1
0.01.110.864 I llama_init_from_model: n_ctx         = 4096
0.01.110.864 I llama_init_from_model: n_ctx_per_seq = 4096
0.01.110.865 I llama_init_from_model: n_batch       = 2048
0.01.110.865 I llama_init_from_model: n_ubatch      = 512
0.01.110.865 I llama_init_from_model: flash_attn    = 0
0.01.110.867 I llama_init_from_model: freq_base     = 10000.0
0.01.110.868 I llama_init_from_model: freq_scale    = 1
0.01.110.869 W llama_init_from_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.110.952 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.125.514 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.125.553 I llama_init_from_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.125.682 I llama_init_from_model:        CPU  output buffer size =     0.98 MiB
0.01.128.904 I llama_init_from_model:        CPU compute buffer size =   504.00 MiB
0.01.128.908 I llama_init_from_model: graph nodes  = 601
0.01.128.909 I llama_init_from_model: graph splits = 1
0.01.128.932 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.128.935 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.736.188 I main: llama threadpool init, n_threads = 4
0.01.736.201 I 
0.01.736.289 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.736.293 I 
0.01.736.531 I sampler seed: 1397149337
0.01.736.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, top_n_sigma = -1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.736.556 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.736.559 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.736.559 I 
 maneutruely. [end of text]


0.03.452.113 I llama_perf_sampler_print:    sampling time =       7.88 ms /     6 runs   (    1.31 ms per token,   761.13 tokens per second)
0.03.452.119 I llama_perf_context_print:        load time =    1708.66 ms
0.03.452.120 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.452.121 I llama_perf_context_print:        eval time =    1700.81 ms /     5 runs   (  340.16 ms per token,     2.94 tokens per second)
0.03.452.122 I llama_perf_context_print:       total time =    1742.46 ms /     6 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m31.545s
user	46m1.418s
sys	0m6.227s
