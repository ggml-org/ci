+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.675 I build: 4142 (8fd4b7fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.881 I main: llama backend init
0.00.000.889 I main: load the model and apply lora adapter, if any
0.00.023.444 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.456 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.547 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.559 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.561 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.567 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.569 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.570 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.572 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.573 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.575 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.582 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.583 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.596 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.598 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.604 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.845 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.292 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.308 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.317 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.318 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.320 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.321 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.322 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.323 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.327 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.328 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.329 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.330 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.331 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.340 I llama_model_loader: - type  f32:   37 tensors
0.00.269.342 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.155 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.056 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.970 I llm_load_vocab: special tokens cache size = 5
0.00.621.977 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.042 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.043 I llm_load_print_meta: arch             = gemma
0.00.622.044 I llm_load_print_meta: vocab type       = SPM
0.00.622.045 I llm_load_print_meta: n_vocab          = 256000
0.00.622.048 I llm_load_print_meta: n_merges         = 0
0.00.622.048 I llm_load_print_meta: vocab_only       = 0
0.00.622.049 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.049 I llm_load_print_meta: n_embd           = 2048
0.00.622.050 I llm_load_print_meta: n_layer          = 18
0.00.622.113 I llm_load_print_meta: n_head           = 8
0.00.622.120 I llm_load_print_meta: n_head_kv        = 1
0.00.622.121 I llm_load_print_meta: n_rot            = 256
0.00.622.121 I llm_load_print_meta: n_swa            = 0
0.00.622.122 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.122 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.127 I llm_load_print_meta: n_gqa            = 8
0.00.622.131 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.136 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.137 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.139 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.140 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.140 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.142 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.148 I llm_load_print_meta: n_ff             = 16384
0.00.622.148 I llm_load_print_meta: n_expert         = 0
0.00.622.149 I llm_load_print_meta: n_expert_used    = 0
0.00.622.150 I llm_load_print_meta: causal attn      = 1
0.00.622.150 I llm_load_print_meta: pooling type     = 0
0.00.622.150 I llm_load_print_meta: rope type        = 2
0.00.622.151 I llm_load_print_meta: rope scaling     = linear
0.00.622.153 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.153 I llm_load_print_meta: freq_scale_train = 1
0.00.622.153 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.154 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.155 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.155 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.155 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.156 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.156 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.157 I llm_load_print_meta: model type       = 2B
0.00.622.158 I llm_load_print_meta: model ftype      = Q8_0
0.00.622.159 I llm_load_print_meta: model params     = 2.51 B
0.00.622.170 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.622.170 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.171 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.172 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.173 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.177 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.178 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.178 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.185 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.186 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.187 I llm_load_print_meta: max token length = 93
0.00.724.559 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.724.568 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.724.569 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.724.570 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.724.571 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.724.572 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.730.463 I llama_new_context_with_model: n_seq_max     = 1
0.00.730.470 I llama_new_context_with_model: n_ctx         = 4096
0.00.730.471 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.730.471 I llama_new_context_with_model: n_batch       = 2048
0.00.730.471 I llama_new_context_with_model: n_ubatch      = 512
0.00.730.472 I llama_new_context_with_model: flash_attn    = 0
0.00.730.474 I llama_new_context_with_model: freq_base     = 10000.0
0.00.730.475 I llama_new_context_with_model: freq_scale    = 1
0.00.730.476 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.745.179 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.745.218 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.745.346 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.747.917 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.747.921 I llama_new_context_with_model: graph nodes  = 601
0.00.747.921 I llama_new_context_with_model: graph splits = 1
0.00.747.944 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.908 I main: llama threadpool init, n_threads = 4
0.01.355.923 I 
0.01.356.042 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.356.047 I 
0.01.356.326 I sampler seed: 1551966241
0.01.356.338 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.356.347 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.356.348 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.356.348 I 
 increasities, the rise of global governance, and the impact of technology on society.

**Discuss the key challenges and opportunities presented by these trends.**

**

0.14.853.934 I llama_perf_sampler_print:    sampling time =      49.21 ms /    33 runs   (    1.49 ms per token,   670.65 tokens per second)
0.14.853.950 I llama_perf_context_print:        load time =    1354.93 ms
0.14.853.952 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.853.954 I llama_perf_context_print:        eval time =   13408.00 ms /    32 runs   (  419.00 ms per token,     2.39 tokens per second)
0.14.853.955 I llama_perf_context_print:       total time =   13498.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.540 I build: 4142 (8fd4b7fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.733 I main: llama backend init
0.00.000.742 I main: load the model and apply lora adapter, if any
0.00.023.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.426 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.440 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.444 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.450 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.451 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.452 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.453 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.454 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.455 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.465 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.466 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.467 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.468 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.469 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.971 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.126 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.212 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.220 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.221 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.222 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.223 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.225 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.226 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.248 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.252 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.261 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.271 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.270.274 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.282 I llama_model_loader: - type  f32:   37 tensors
0.00.270.287 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.037 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.770 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.761 I llm_load_vocab: special tokens cache size = 5
0.00.608.543 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.613 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.614 I llm_load_print_meta: arch             = gemma
0.00.608.614 I llm_load_print_meta: vocab type       = SPM
0.00.608.615 I llm_load_print_meta: n_vocab          = 256000
0.00.608.617 I llm_load_print_meta: n_merges         = 0
0.00.608.618 I llm_load_print_meta: vocab_only       = 0
0.00.608.618 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.618 I llm_load_print_meta: n_embd           = 2048
0.00.608.619 I llm_load_print_meta: n_layer          = 18
0.00.608.683 I llm_load_print_meta: n_head           = 8
0.00.608.690 I llm_load_print_meta: n_head_kv        = 1
0.00.608.692 I llm_load_print_meta: n_rot            = 256
0.00.608.693 I llm_load_print_meta: n_swa            = 0
0.00.608.693 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.693 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.706 I llm_load_print_meta: n_gqa            = 8
0.00.608.711 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.716 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.720 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.721 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.722 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.722 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.723 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.729 I llm_load_print_meta: n_ff             = 16384
0.00.608.729 I llm_load_print_meta: n_expert         = 0
0.00.608.730 I llm_load_print_meta: n_expert_used    = 0
0.00.608.731 I llm_load_print_meta: causal attn      = 1
0.00.608.731 I llm_load_print_meta: pooling type     = 0
0.00.608.732 I llm_load_print_meta: rope type        = 2
0.00.608.732 I llm_load_print_meta: rope scaling     = linear
0.00.608.734 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.735 I llm_load_print_meta: freq_scale_train = 1
0.00.608.735 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.736 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.736 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.737 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.737 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.737 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.738 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.739 I llm_load_print_meta: model type       = 2B
0.00.608.741 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.741 I llm_load_print_meta: model params     = 2.51 B
0.00.608.750 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.751 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.752 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.752 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.753 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.754 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.754 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.755 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.761 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.763 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.763 I llm_load_print_meta: max token length = 93
0.00.704.956 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.710.958 I llama_new_context_with_model: n_seq_max     = 1
0.00.710.965 I llama_new_context_with_model: n_ctx         = 4096
0.00.710.965 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.710.965 I llama_new_context_with_model: n_batch       = 2048
0.00.710.966 I llama_new_context_with_model: n_ubatch      = 512
0.00.710.966 I llama_new_context_with_model: flash_attn    = 0
0.00.710.968 I llama_new_context_with_model: freq_base     = 10000.0
0.00.710.969 I llama_new_context_with_model: freq_scale    = 1
0.00.710.969 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.725.497 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.725.538 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.725.663 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.728.159 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.728.163 I llama_new_context_with_model: graph nodes  = 601
0.00.728.163 I llama_new_context_with_model: graph splits = 1
0.00.728.185 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.336.965 I main: llama threadpool init, n_threads = 4
0.01.336.981 I 
0.01.337.092 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.337.093 I 
0.01.337.325 I sampler seed: 2288453735
0.01.337.339 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.337.346 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.337.350 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.337.350 I 
 increasities can be caused by a variety of factors, including:

- **Genetics:** Some people may have an inherited predisposition to certain types of increasities.

0.14.992.247 I llama_perf_sampler_print:    sampling time =      49.51 ms /    33 runs   (    1.50 ms per token,   666.60 tokens per second)
0.14.992.269 I llama_perf_context_print:        load time =    1336.11 ms
0.14.992.270 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.992.272 I llama_perf_context_print:        eval time =   13565.75 ms /    32 runs   (  423.93 ms per token,     2.36 tokens per second)
0.14.992.274 I llama_perf_context_print:       total time =   13655.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 4142 (8fd4b7fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.918 I main: llama backend init
0.00.000.926 I main: load the model and apply lora adapter, if any
0.00.023.246 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.256 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.343 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.355 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.357 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.363 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.367 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.368 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.369 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.370 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.371 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.377 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.378 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.379 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.380 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.381 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.493 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.755 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.870 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.880 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.881 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.882 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.883 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.884 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.885 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.889 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.890 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.891 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.892 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.893 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.902 I llama_model_loader: - type  f32:   37 tensors
0.00.268.905 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.055 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.539 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.593 I llm_load_vocab: special tokens cache size = 5
0.00.611.047 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.121 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.121 I llm_load_print_meta: arch             = gemma
0.00.611.122 I llm_load_print_meta: vocab type       = SPM
0.00.611.123 I llm_load_print_meta: n_vocab          = 256000
0.00.611.126 I llm_load_print_meta: n_merges         = 0
0.00.611.126 I llm_load_print_meta: vocab_only       = 0
0.00.611.126 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.127 I llm_load_print_meta: n_embd           = 2048
0.00.611.127 I llm_load_print_meta: n_layer          = 18
0.00.611.193 I llm_load_print_meta: n_head           = 8
0.00.611.200 I llm_load_print_meta: n_head_kv        = 1
0.00.611.201 I llm_load_print_meta: n_rot            = 256
0.00.611.202 I llm_load_print_meta: n_swa            = 0
0.00.611.202 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.202 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.207 I llm_load_print_meta: n_gqa            = 8
0.00.611.211 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.216 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.217 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.219 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.219 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.220 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.221 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.226 I llm_load_print_meta: n_ff             = 16384
0.00.611.227 I llm_load_print_meta: n_expert         = 0
0.00.611.227 I llm_load_print_meta: n_expert_used    = 0
0.00.611.228 I llm_load_print_meta: causal attn      = 1
0.00.611.228 I llm_load_print_meta: pooling type     = 0
0.00.611.228 I llm_load_print_meta: rope type        = 2
0.00.611.229 I llm_load_print_meta: rope scaling     = linear
0.00.611.231 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.231 I llm_load_print_meta: freq_scale_train = 1
0.00.611.232 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.242 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.245 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.246 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.246 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.246 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.247 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.247 I llm_load_print_meta: model type       = 2B
0.00.611.248 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.249 I llm_load_print_meta: model params     = 2.51 B
0.00.611.258 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.258 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.259 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.260 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.260 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.261 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.261 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.262 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.269 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.271 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.271 I llm_load_print_meta: max token length = 93
0.00.686.599 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.686.606 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.686.607 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.686.607 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.686.608 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.686.609 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.692.261 I llama_new_context_with_model: n_seq_max     = 1
0.00.692.268 I llama_new_context_with_model: n_ctx         = 4096
0.00.692.269 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.692.269 I llama_new_context_with_model: n_batch       = 2048
0.00.692.269 I llama_new_context_with_model: n_ubatch      = 512
0.00.692.270 I llama_new_context_with_model: flash_attn    = 0
0.00.692.272 I llama_new_context_with_model: freq_base     = 10000.0
0.00.692.273 I llama_new_context_with_model: freq_scale    = 1
0.00.692.273 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.706.826 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.706.871 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.707.002 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.709.565 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.709.570 I llama_new_context_with_model: graph nodes  = 601
0.00.709.571 I llama_new_context_with_model: graph splits = 1
0.00.709.594 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.324.161 I main: llama threadpool init, n_threads = 4
0.01.324.177 I 
0.01.324.284 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.324.288 I 
0.01.324.517 I sampler seed: 2421526662
0.01.324.529 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.324.536 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.324.539 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.324.539 I 
 increasively.

The answer should be:

1, 2, 3, 4, 5, 6, 7, 8

0.14.767.227 I llama_perf_sampler_print:    sampling time =      48.92 ms /    33 runs   (    1.48 ms per token,   674.61 tokens per second)
0.14.767.230 I llama_perf_context_print:        load time =    1323.14 ms
0.14.767.231 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.767.233 I llama_perf_context_print:        eval time =   13354.25 ms /    32 runs   (  417.32 ms per token,     2.40 tokens per second)
0.14.767.250 I llama_perf_context_print:       total time =   13443.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.637 I build: 4142 (8fd4b7fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.868 I main: llama backend init
0.00.000.876 I main: load the model and apply lora adapter, if any
0.00.022.976 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.985 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.079 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.091 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.094 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.100 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.106 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.108 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.109 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.112 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.114 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.138 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.141 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.143 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.145 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.542 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.153 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.543 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.554 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.555 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.556 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.557 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.559 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.560 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.564 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.565 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.566 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.567 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.269.569 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.578 I llama_model_loader: - type  f32:   37 tensors
0.00.269.580 I llama_model_loader: - type q8_0:  127 tensors
0.00.441.933 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.244 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.227 I llm_load_vocab: special tokens cache size = 5
0.00.601.769 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.838 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.839 I llm_load_print_meta: arch             = gemma
0.00.601.840 I llm_load_print_meta: vocab type       = SPM
0.00.601.840 I llm_load_print_meta: n_vocab          = 256000
0.00.601.843 I llm_load_print_meta: n_merges         = 0
0.00.601.843 I llm_load_print_meta: vocab_only       = 0
0.00.601.844 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.844 I llm_load_print_meta: n_embd           = 2048
0.00.601.845 I llm_load_print_meta: n_layer          = 18
0.00.601.909 I llm_load_print_meta: n_head           = 8
0.00.601.920 I llm_load_print_meta: n_head_kv        = 1
0.00.601.926 I llm_load_print_meta: n_rot            = 256
0.00.601.926 I llm_load_print_meta: n_swa            = 0
0.00.601.927 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.928 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.936 I llm_load_print_meta: n_gqa            = 8
0.00.601.945 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.952 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.956 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.958 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.959 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.960 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.961 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.968 I llm_load_print_meta: n_ff             = 16384
0.00.601.970 I llm_load_print_meta: n_expert         = 0
0.00.601.970 I llm_load_print_meta: n_expert_used    = 0
0.00.601.972 I llm_load_print_meta: causal attn      = 1
0.00.601.972 I llm_load_print_meta: pooling type     = 0
0.00.601.985 I llm_load_print_meta: rope type        = 2
0.00.601.987 I llm_load_print_meta: rope scaling     = linear
0.00.601.989 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.990 I llm_load_print_meta: freq_scale_train = 1
0.00.601.990 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.000 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.003 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.004 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.004 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.004 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.005 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.006 I llm_load_print_meta: model type       = 2B
0.00.602.007 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.008 I llm_load_print_meta: model params     = 2.51 B
0.00.602.018 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.019 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.021 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.024 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.025 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.026 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.026 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.027 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.035 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.037 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.037 I llm_load_print_meta: max token length = 93
0.00.674.558 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.674.567 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.680.570 I llama_new_context_with_model: n_seq_max     = 1
0.00.680.577 I llama_new_context_with_model: n_ctx         = 4096
0.00.680.577 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.680.578 I llama_new_context_with_model: n_batch       = 2048
0.00.680.578 I llama_new_context_with_model: n_ubatch      = 512
0.00.680.579 I llama_new_context_with_model: flash_attn    = 0
0.00.680.582 I llama_new_context_with_model: freq_base     = 10000.0
0.00.680.583 I llama_new_context_with_model: freq_scale    = 1
0.00.680.583 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.694.650 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.694.696 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.694.821 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.697.308 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.697.312 I llama_new_context_with_model: graph nodes  = 601
0.00.697.312 I llama_new_context_with_model: graph splits = 1
0.00.697.336 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.311.267 I main: llama threadpool init, n_threads = 4
0.01.311.282 I 
0.01.311.400 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.311.404 I 
0.01.311.636 I sampler seed: 1116788271
0.01.311.650 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.311.659 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.311.660 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.311.660 I 
 increasities. [end of text]


0.02.993.880 I llama_perf_sampler_print:    sampling time =       6.23 ms /     5 runs   (    1.25 ms per token,   802.57 tokens per second)
0.02.993.882 I llama_perf_context_print:        load time =    1310.29 ms
0.02.993.883 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.993.907 I llama_perf_context_print:        eval time =    1669.71 ms /     4 runs   (  417.43 ms per token,     2.40 tokens per second)
0.02.993.909 I llama_perf_context_print:       total time =    1682.62 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.136s
user	3m1.876s
sys	0m9.252s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4142 (8fd4b7fa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186386.30 ms
main:    total time = 186386.30 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.652 I build: 4142 (8fd4b7fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.876 I main: llama backend init
0.00.000.884 I main: load the model and apply lora adapter, if any
0.00.023.447 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.459 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.555 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.567 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.569 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.574 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.576 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.578 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.579 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.580 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.581 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.591 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.595 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.596 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.597 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.598 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.814 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.942 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.035 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.044 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.046 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.047 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.048 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.050 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.051 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.054 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.055 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.057 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.058 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.059 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.068 I llama_model_loader: - type  f32:   37 tensors
0.00.270.070 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.071 I llama_model_loader: - type q6_K:   19 tensors
0.00.451.852 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.687 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.676 I llm_load_vocab: special tokens cache size = 5
0.00.619.674 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.747 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.748 I llm_load_print_meta: arch             = gemma
0.00.619.749 I llm_load_print_meta: vocab type       = SPM
0.00.619.749 I llm_load_print_meta: n_vocab          = 256000
0.00.619.752 I llm_load_print_meta: n_merges         = 0
0.00.619.752 I llm_load_print_meta: vocab_only       = 0
0.00.619.752 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.753 I llm_load_print_meta: n_embd           = 2048
0.00.619.753 I llm_load_print_meta: n_layer          = 18
0.00.619.817 I llm_load_print_meta: n_head           = 8
0.00.619.825 I llm_load_print_meta: n_head_kv        = 1
0.00.619.826 I llm_load_print_meta: n_rot            = 256
0.00.619.826 I llm_load_print_meta: n_swa            = 0
0.00.619.850 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.853 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.858 I llm_load_print_meta: n_gqa            = 8
0.00.619.863 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.868 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.872 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.873 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.874 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.874 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.875 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.887 I llm_load_print_meta: n_ff             = 16384
0.00.619.888 I llm_load_print_meta: n_expert         = 0
0.00.619.888 I llm_load_print_meta: n_expert_used    = 0
0.00.619.889 I llm_load_print_meta: causal attn      = 1
0.00.619.889 I llm_load_print_meta: pooling type     = 0
0.00.619.889 I llm_load_print_meta: rope type        = 2
0.00.619.890 I llm_load_print_meta: rope scaling     = linear
0.00.619.892 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.893 I llm_load_print_meta: freq_scale_train = 1
0.00.619.893 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.901 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.908 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.910 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.910 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.911 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.911 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.912 I llm_load_print_meta: model type       = 2B
0.00.619.913 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.619.914 I llm_load_print_meta: model params     = 2.51 B
0.00.619.923 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.619.923 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.924 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.925 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.925 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.925 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.926 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.927 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.933 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.937 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.937 I llm_load_print_meta: max token length = 93
0.00.682.941 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.682.951 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.682.952 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.682.952 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.682.953 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.682.954 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.688.817 I llama_new_context_with_model: n_seq_max     = 1
0.00.688.823 I llama_new_context_with_model: n_ctx         = 4096
0.00.688.823 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.688.824 I llama_new_context_with_model: n_batch       = 2048
0.00.688.824 I llama_new_context_with_model: n_ubatch      = 512
0.00.688.824 I llama_new_context_with_model: flash_attn    = 0
0.00.688.827 I llama_new_context_with_model: freq_base     = 10000.0
0.00.688.828 I llama_new_context_with_model: freq_scale    = 1
0.00.688.828 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.703.787 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.703.829 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.703.964 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.648 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.706.652 I llama_new_context_with_model: graph nodes  = 601
0.00.706.653 I llama_new_context_with_model: graph splits = 1
0.00.706.675 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.291.119 I main: llama threadpool init, n_threads = 4
0.01.291.134 I 
0.01.291.244 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.291.248 I 
0.01.291.476 I sampler seed: 1477545343
0.01.291.488 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.496 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.291.497 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.291.497 I 
 maneuvously, defying the limitations of my understanding.

I am unable to comprehend the intricacies of your reasoning, but I am intrigued by the audacity of your

0.12.421.416 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.29 tokens per second)
0.12.421.441 I llama_perf_context_print:        load time =    1290.15 ms
0.12.421.442 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.421.444 I llama_perf_context_print:        eval time =   11041.76 ms /    32 runs   (  345.05 ms per token,     2.90 tokens per second)
0.12.421.445 I llama_perf_context_print:       total time =   11130.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4142 (8fd4b7fa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186421.58 ms
main:    total time = 186421.58 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.623 I build: 4142 (8fd4b7fa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.817 I main: llama backend init
0.00.000.824 I main: load the model and apply lora adapter, if any
0.00.023.094 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.192 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.205 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.207 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.212 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.216 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.217 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.218 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.219 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.220 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.229 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.231 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.232 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.234 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.235 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.146.126 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.244.920 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.943 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.951 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.953 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.954 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.955 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.956 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.957 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.961 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.962 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.970 I llama_model_loader: - type  f32:   37 tensors
0.00.267.973 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.973 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.736 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.500.950 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.501.910 I llm_load_vocab: special tokens cache size = 5
0.00.601.553 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.625 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.626 I llm_load_print_meta: arch             = gemma
0.00.601.627 I llm_load_print_meta: vocab type       = SPM
0.00.601.628 I llm_load_print_meta: n_vocab          = 256000
0.00.601.630 I llm_load_print_meta: n_merges         = 0
0.00.601.631 I llm_load_print_meta: vocab_only       = 0
0.00.601.631 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.631 I llm_load_print_meta: n_embd           = 2048
0.00.601.632 I llm_load_print_meta: n_layer          = 18
0.00.601.698 I llm_load_print_meta: n_head           = 8
0.00.601.705 I llm_load_print_meta: n_head_kv        = 1
0.00.601.707 I llm_load_print_meta: n_rot            = 256
0.00.601.707 I llm_load_print_meta: n_swa            = 0
0.00.601.707 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.708 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.712 I llm_load_print_meta: n_gqa            = 8
0.00.601.717 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.722 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.723 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.724 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.725 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.725 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.725 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.730 I llm_load_print_meta: n_ff             = 16384
0.00.601.731 I llm_load_print_meta: n_expert         = 0
0.00.601.732 I llm_load_print_meta: n_expert_used    = 0
0.00.601.733 I llm_load_print_meta: causal attn      = 1
0.00.601.733 I llm_load_print_meta: pooling type     = 0
0.00.601.733 I llm_load_print_meta: rope type        = 2
0.00.601.734 I llm_load_print_meta: rope scaling     = linear
0.00.601.736 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.736 I llm_load_print_meta: freq_scale_train = 1
0.00.601.737 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.738 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.738 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.738 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.738 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.739 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.739 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.740 I llm_load_print_meta: model type       = 2B
0.00.601.742 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.601.743 I llm_load_print_meta: model params     = 2.51 B
0.00.601.751 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.601.751 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.752 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.752 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.753 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.754 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.754 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.755 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.761 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.762 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.763 I llm_load_print_meta: max token length = 93
0.00.657.625 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.663.234 I llama_new_context_with_model: n_seq_max     = 1
0.00.663.240 I llama_new_context_with_model: n_ctx         = 4096
0.00.663.240 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.663.241 I llama_new_context_with_model: n_batch       = 2048
0.00.663.241 I llama_new_context_with_model: n_ubatch      = 512
0.00.663.242 I llama_new_context_with_model: flash_attn    = 0
0.00.663.244 I llama_new_context_with_model: freq_base     = 10000.0
0.00.663.245 I llama_new_context_with_model: freq_scale    = 1
0.00.663.246 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.677.785 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.677.826 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.677.951 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.680.522 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.680.525 I llama_new_context_with_model: graph nodes  = 601
0.00.680.526 I llama_new_context_with_model: graph splits = 1
0.00.680.549 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.262.948 I main: llama threadpool init, n_threads = 4
0.01.262.964 I 
0.01.263.070 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.263.074 I 
0.01.263.305 I sampler seed: 2982787711
0.01.263.317 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.263.325 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.263.328 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.263.328 I 
 increasities, and other related phenomena are often accompanied by a decline in cognitive function. However, the precise relationship between cognitive decline and these phenomena remains an active area

0.12.400.717 I llama_perf_sampler_print:    sampling time =      49.32 ms /    33 runs   (    1.49 ms per token,   669.09 tokens per second)
0.12.400.722 I llama_perf_context_print:        load time =    1262.04 ms
0.12.400.724 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.400.726 I llama_perf_context_print:        eval time =   11047.60 ms /    32 runs   (  345.24 ms per token,     2.90 tokens per second)
0.12.400.727 I llama_perf_context_print:       total time =   11137.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.583s
user	46m55.930s
sys	0m6.270s
