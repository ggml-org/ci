+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.174 I build: 4315 (8faa1d4d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.395 I main: llama backend init
0.00.000.401 I main: load the model and apply lora adapter, if any
0.00.021.125 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.134 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.142 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.147 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.148 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.151 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.152 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.153 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.153 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.154 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.154 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.159 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.159 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.160 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.160 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.161 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.991 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.515 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.342 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.349 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.350 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.351 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.352 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.353 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.354 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.358 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.358 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.359 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.359 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.360 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.364 I llama_model_loader: - type  f32:   37 tensors
0.00.131.365 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.887 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.777 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.372 I llm_load_vocab: special tokens cache size = 5
0.00.271.759 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.776 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.776 I llm_load_print_meta: arch             = gemma
0.00.271.777 I llm_load_print_meta: vocab type       = SPM
0.00.271.778 I llm_load_print_meta: n_vocab          = 256000
0.00.271.778 I llm_load_print_meta: n_merges         = 0
0.00.271.778 I llm_load_print_meta: vocab_only       = 0
0.00.271.779 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.779 I llm_load_print_meta: n_embd           = 2048
0.00.271.779 I llm_load_print_meta: n_layer          = 18
0.00.271.791 I llm_load_print_meta: n_head           = 8
0.00.271.792 I llm_load_print_meta: n_head_kv        = 1
0.00.271.792 I llm_load_print_meta: n_rot            = 256
0.00.271.793 I llm_load_print_meta: n_swa            = 0
0.00.271.793 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.793 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.794 I llm_load_print_meta: n_gqa            = 8
0.00.271.795 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.796 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.797 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.798 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.799 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.799 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.799 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.800 I llm_load_print_meta: n_ff             = 16384
0.00.271.801 I llm_load_print_meta: n_expert         = 0
0.00.271.801 I llm_load_print_meta: n_expert_used    = 0
0.00.271.801 I llm_load_print_meta: causal attn      = 1
0.00.271.802 I llm_load_print_meta: pooling type     = 0
0.00.271.802 I llm_load_print_meta: rope type        = 2
0.00.271.802 I llm_load_print_meta: rope scaling     = linear
0.00.271.804 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.804 I llm_load_print_meta: freq_scale_train = 1
0.00.271.804 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.805 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.805 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.806 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.806 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.806 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.806 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.807 I llm_load_print_meta: model type       = 2B
0.00.271.807 I llm_load_print_meta: model ftype      = Q8_0
0.00.271.808 I llm_load_print_meta: model params     = 2.51 B
0.00.271.809 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.271.809 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.810 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.810 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.810 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.811 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.811 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.811 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.811 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.812 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.812 I llm_load_print_meta: max token length = 93
0.00.374.930 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.374.940 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.374.941 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.374.942 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.374.942 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.374.943 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.380.187 I llama_new_context_with_model: n_seq_max     = 1
0.00.380.193 I llama_new_context_with_model: n_ctx         = 4096
0.00.380.194 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.380.194 I llama_new_context_with_model: n_batch       = 2048
0.00.380.194 I llama_new_context_with_model: n_ubatch      = 512
0.00.380.195 I llama_new_context_with_model: flash_attn    = 0
0.00.380.198 I llama_new_context_with_model: freq_base     = 10000.0
0.00.380.199 I llama_new_context_with_model: freq_scale    = 1
0.00.380.200 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.395.063 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.395.077 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.395.163 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.396.419 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.396.423 I llama_new_context_with_model: graph nodes  = 601
0.00.396.424 I llama_new_context_with_model: graph splits = 1
0.00.396.426 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.484.744 I main: llama threadpool init, n_threads = 4
0.00.484.762 I 
0.00.484.841 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.844 I 
0.00.484.887 I sampler seed: 854179513
0.00.484.899 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.903 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.904 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.904 I 
 increasively:

a. The tree is tall.
b. The tree is big.
c. The tree is old.

The answer is c

0.02.761.664 I llama_perf_sampler_print:    sampling time =       5.37 ms /    33 runs   (    0.16 ms per token,  6150.98 tokens per second)
0.02.761.667 I llama_perf_context_print:        load time =     484.32 ms
0.02.761.669 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.761.670 I llama_perf_context_print:        eval time =    2256.31 ms /    32 runs   (   70.51 ms per token,    14.18 tokens per second)
0.02.761.671 I llama_perf_context_print:       total time =    2276.93 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.552 I build: 4315 (8faa1d4d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.748 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.021.083 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.099 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.109 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.113 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.117 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.117 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.119 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.119 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.120 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.120 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.125 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.125 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.126 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.127 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.127 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.661 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.949 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.792 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.799 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.800 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.801 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.801 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.802 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.803 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.805 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.806 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.808 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.808 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.810 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.813 I llama_model_loader: - type  f32:   37 tensors
0.00.130.814 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.230 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.260.865 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.261.490 I llm_load_vocab: special tokens cache size = 5
0.00.282.284 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.282.303 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.282.304 I llm_load_print_meta: arch             = gemma
0.00.282.304 I llm_load_print_meta: vocab type       = SPM
0.00.282.305 I llm_load_print_meta: n_vocab          = 256000
0.00.282.305 I llm_load_print_meta: n_merges         = 0
0.00.282.306 I llm_load_print_meta: vocab_only       = 0
0.00.282.306 I llm_load_print_meta: n_ctx_train      = 8192
0.00.282.306 I llm_load_print_meta: n_embd           = 2048
0.00.282.306 I llm_load_print_meta: n_layer          = 18
0.00.282.318 I llm_load_print_meta: n_head           = 8
0.00.282.319 I llm_load_print_meta: n_head_kv        = 1
0.00.282.320 I llm_load_print_meta: n_rot            = 256
0.00.282.320 I llm_load_print_meta: n_swa            = 0
0.00.282.320 I llm_load_print_meta: n_embd_head_k    = 256
0.00.282.321 I llm_load_print_meta: n_embd_head_v    = 256
0.00.282.322 I llm_load_print_meta: n_gqa            = 8
0.00.282.323 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.282.324 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.282.325 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.282.327 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.282.327 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.282.327 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.282.328 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.282.329 I llm_load_print_meta: n_ff             = 16384
0.00.282.329 I llm_load_print_meta: n_expert         = 0
0.00.282.329 I llm_load_print_meta: n_expert_used    = 0
0.00.282.329 I llm_load_print_meta: causal attn      = 1
0.00.282.330 I llm_load_print_meta: pooling type     = 0
0.00.282.330 I llm_load_print_meta: rope type        = 2
0.00.282.330 I llm_load_print_meta: rope scaling     = linear
0.00.282.332 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.282.332 I llm_load_print_meta: freq_scale_train = 1
0.00.282.333 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.282.333 I llm_load_print_meta: rope_finetuned   = unknown
0.00.282.334 I llm_load_print_meta: ssm_d_conv       = 0
0.00.282.334 I llm_load_print_meta: ssm_d_inner      = 0
0.00.282.334 I llm_load_print_meta: ssm_d_state      = 0
0.00.282.334 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.282.335 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.282.335 I llm_load_print_meta: model type       = 2B
0.00.282.335 I llm_load_print_meta: model ftype      = Q8_0
0.00.282.336 I llm_load_print_meta: model params     = 2.51 B
0.00.282.337 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.282.338 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.282.338 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.282.339 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.282.339 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.282.340 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.282.340 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.282.340 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.282.340 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.282.341 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.282.341 I llm_load_print_meta: max token length = 93
0.00.376.808 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.382.020 I llama_new_context_with_model: n_seq_max     = 1
0.00.382.026 I llama_new_context_with_model: n_ctx         = 4096
0.00.382.027 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.382.027 I llama_new_context_with_model: n_batch       = 2048
0.00.382.027 I llama_new_context_with_model: n_ubatch      = 512
0.00.382.028 I llama_new_context_with_model: flash_attn    = 0
0.00.382.030 I llama_new_context_with_model: freq_base     = 10000.0
0.00.382.031 I llama_new_context_with_model: freq_scale    = 1
0.00.382.032 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.396.894 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.396.908 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.397.000 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.398.272 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.398.277 I llama_new_context_with_model: graph nodes  = 601
0.00.398.278 I llama_new_context_with_model: graph splits = 1
0.00.398.279 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.482.376 I main: llama threadpool init, n_threads = 4
0.00.482.391 I 
0.00.482.469 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.482.472 I 
0.00.482.514 I sampler seed: 2493020689
0.00.482.525 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.482.528 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.482.529 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.482.531 I 
 seconary clauses.

A secondary clause is a clause that functions as a noun phrase, adjective phrase, or adverb phrase in a sentence. It often contains a

0.02.685.625 I llama_perf_sampler_print:    sampling time =       5.41 ms /    33 runs   (    0.16 ms per token,  6103.20 tokens per second)
0.02.685.628 I llama_perf_context_print:        load time =     481.61 ms
0.02.685.629 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.685.631 I llama_perf_context_print:        eval time =    2183.70 ms /    32 runs   (   68.24 ms per token,    14.65 tokens per second)
0.02.685.632 I llama_perf_context_print:       total time =    2203.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.533 I build: 4315 (8faa1d4d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.747 I main: llama backend init
0.00.000.754 I main: load the model and apply lora adapter, if any
0.00.021.532 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.543 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.560 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.564 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.569 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.570 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.571 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.572 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.573 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.574 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.579 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.581 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.582 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.582 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.583 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.558 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.541 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.407 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.413 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.414 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.415 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.417 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.417 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.420 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.421 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.422 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.423 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.424 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.427 I llama_model_loader: - type  f32:   37 tensors
0.00.133.429 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.989 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.906 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.578 I llm_load_vocab: special tokens cache size = 5
0.00.272.433 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.450 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.450 I llm_load_print_meta: arch             = gemma
0.00.272.451 I llm_load_print_meta: vocab type       = SPM
0.00.272.452 I llm_load_print_meta: n_vocab          = 256000
0.00.272.452 I llm_load_print_meta: n_merges         = 0
0.00.272.452 I llm_load_print_meta: vocab_only       = 0
0.00.272.453 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.453 I llm_load_print_meta: n_embd           = 2048
0.00.272.453 I llm_load_print_meta: n_layer          = 18
0.00.272.464 I llm_load_print_meta: n_head           = 8
0.00.272.465 I llm_load_print_meta: n_head_kv        = 1
0.00.272.465 I llm_load_print_meta: n_rot            = 256
0.00.272.466 I llm_load_print_meta: n_swa            = 0
0.00.272.466 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.466 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.467 I llm_load_print_meta: n_gqa            = 8
0.00.272.468 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.469 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.470 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.472 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.472 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.472 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.472 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.473 I llm_load_print_meta: n_ff             = 16384
0.00.272.474 I llm_load_print_meta: n_expert         = 0
0.00.272.474 I llm_load_print_meta: n_expert_used    = 0
0.00.272.474 I llm_load_print_meta: causal attn      = 1
0.00.272.474 I llm_load_print_meta: pooling type     = 0
0.00.272.475 I llm_load_print_meta: rope type        = 2
0.00.272.475 I llm_load_print_meta: rope scaling     = linear
0.00.272.476 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.477 I llm_load_print_meta: freq_scale_train = 1
0.00.272.477 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.478 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.478 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.478 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.478 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.479 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.479 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.479 I llm_load_print_meta: model type       = 2B
0.00.272.480 I llm_load_print_meta: model ftype      = Q8_0
0.00.272.481 I llm_load_print_meta: model params     = 2.51 B
0.00.272.482 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.272.482 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.484 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.484 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.485 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.486 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.486 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.486 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.487 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.488 I llm_load_print_meta: max token length = 93
0.00.349.594 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.349.601 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.602 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.349.603 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.349.603 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.349.604 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.355.015 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.022 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.022 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.022 I llama_new_context_with_model: n_batch       = 2048
0.00.355.023 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.023 I llama_new_context_with_model: flash_attn    = 0
0.00.355.026 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.027 I llama_new_context_with_model: freq_scale    = 1
0.00.355.027 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.370.131 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.370.145 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.248 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.532 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.538 I llama_new_context_with_model: graph nodes  = 601
0.00.371.539 I llama_new_context_with_model: graph splits = 1
0.00.371.541 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.456.730 I main: llama threadpool init, n_threads = 4
0.00.456.745 I 
0.00.456.823 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.827 I 
0.00.456.878 I sampler seed: 2433568856
0.00.456.889 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.894 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.895 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.895 I 
 increasels. 

**Answer:** Octopus.

Octopus is a cephalopod, which is a group of animals characterized by their soft bodies, bilateral symmetry

0.02.722.980 I llama_perf_sampler_print:    sampling time =       5.56 ms /    33 runs   (    0.17 ms per token,  5936.32 tokens per second)
0.02.722.982 I llama_perf_context_print:        load time =     455.96 ms
0.02.722.983 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.722.985 I llama_perf_context_print:        eval time =    2246.57 ms /    32 runs   (   70.21 ms per token,    14.24 tokens per second)
0.02.722.985 I llama_perf_context_print:       total time =    2266.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.448 I build: 4315 (8faa1d4d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.651 I main: llama backend init
0.00.000.657 I main: load the model and apply lora adapter, if any
0.00.021.087 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.096 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.103 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.112 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.115 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.119 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.120 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.121 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.121 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.122 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.122 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.126 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.127 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.127 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.128 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.128 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.778 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.341 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.227 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.235 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.236 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.237 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.238 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.240 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.241 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.244 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.245 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.246 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.247 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.248 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.251 I llama_model_loader: - type  f32:   37 tensors
0.00.131.252 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.598 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.927 I llm_load_vocab: special tokens cache size = 5
0.00.277.700 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.719 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.719 I llm_load_print_meta: arch             = gemma
0.00.277.720 I llm_load_print_meta: vocab type       = SPM
0.00.277.721 I llm_load_print_meta: n_vocab          = 256000
0.00.277.721 I llm_load_print_meta: n_merges         = 0
0.00.277.721 I llm_load_print_meta: vocab_only       = 0
0.00.277.722 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.722 I llm_load_print_meta: n_embd           = 2048
0.00.277.723 I llm_load_print_meta: n_layer          = 18
0.00.277.735 I llm_load_print_meta: n_head           = 8
0.00.277.736 I llm_load_print_meta: n_head_kv        = 1
0.00.277.736 I llm_load_print_meta: n_rot            = 256
0.00.277.736 I llm_load_print_meta: n_swa            = 0
0.00.277.737 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.737 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.738 I llm_load_print_meta: n_gqa            = 8
0.00.277.739 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.740 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.741 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.742 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.743 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.743 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.743 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.744 I llm_load_print_meta: n_ff             = 16384
0.00.277.745 I llm_load_print_meta: n_expert         = 0
0.00.277.745 I llm_load_print_meta: n_expert_used    = 0
0.00.277.745 I llm_load_print_meta: causal attn      = 1
0.00.277.745 I llm_load_print_meta: pooling type     = 0
0.00.277.746 I llm_load_print_meta: rope type        = 2
0.00.277.747 I llm_load_print_meta: rope scaling     = linear
0.00.277.748 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.749 I llm_load_print_meta: freq_scale_train = 1
0.00.277.749 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.749 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.750 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.750 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.750 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.750 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.750 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.751 I llm_load_print_meta: model type       = 2B
0.00.277.751 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.752 I llm_load_print_meta: model params     = 2.51 B
0.00.277.753 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.753 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.754 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.754 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.755 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.755 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.755 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.755 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.756 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.756 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.756 I llm_load_print_meta: max token length = 93
0.00.348.607 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.348.616 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.353.806 I llama_new_context_with_model: n_seq_max     = 1
0.00.353.814 I llama_new_context_with_model: n_ctx         = 4096
0.00.353.814 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.353.814 I llama_new_context_with_model: n_batch       = 2048
0.00.353.815 I llama_new_context_with_model: n_ubatch      = 512
0.00.353.815 I llama_new_context_with_model: flash_attn    = 0
0.00.353.819 I llama_new_context_with_model: freq_base     = 10000.0
0.00.353.819 I llama_new_context_with_model: freq_scale    = 1
0.00.353.820 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.368.576 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.368.590 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.368.683 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.369.937 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.369.944 I llama_new_context_with_model: graph nodes  = 601
0.00.369.944 I llama_new_context_with_model: graph splits = 1
0.00.369.946 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.834 I main: llama threadpool init, n_threads = 4
0.00.459.850 I 
0.00.459.921 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.925 I 
0.00.459.969 I sampler seed: 2977945188
0.00.459.980 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.983 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.983 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.984 I 
 increamically. [end of text]


0.00.765.327 I llama_perf_sampler_print:    sampling time =       0.69 ms /     5 runs   (    0.14 ms per token,  7267.44 tokens per second)
0.00.765.329 I llama_perf_context_print:        load time =     459.16 ms
0.00.765.330 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.765.332 I llama_perf_context_print:        eval time =     302.21 ms /     4 runs   (   75.55 ms per token,    13.24 tokens per second)
0.00.765.332 I llama_perf_context_print:       total time =     305.50 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.883s
user	0m31.202s
sys	0m9.434s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4315 (8faa1d4d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40249.93 ms
main:    total time = 40249.93 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.523 I build: 4315 (8faa1d4d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.715 I main: llama backend init
0.00.000.722 I main: load the model and apply lora adapter, if any
0.00.020.964 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.974 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.983 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.987 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.988 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.992 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.992 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.993 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.994 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.994 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.995 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.999 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.000 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.001 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.001 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.002 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.498 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.224 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.052 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.061 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.062 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.063 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.063 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.065 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.066 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.069 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.070 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.071 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.072 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.073 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.079 I llama_model_loader: - type  f32:   37 tensors
0.00.131.080 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.081 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.841 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.500 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.129 I llm_load_vocab: special tokens cache size = 5
0.00.276.663 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.681 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.681 I llm_load_print_meta: arch             = gemma
0.00.276.682 I llm_load_print_meta: vocab type       = SPM
0.00.276.683 I llm_load_print_meta: n_vocab          = 256000
0.00.276.683 I llm_load_print_meta: n_merges         = 0
0.00.276.683 I llm_load_print_meta: vocab_only       = 0
0.00.276.684 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.684 I llm_load_print_meta: n_embd           = 2048
0.00.276.684 I llm_load_print_meta: n_layer          = 18
0.00.276.695 I llm_load_print_meta: n_head           = 8
0.00.276.696 I llm_load_print_meta: n_head_kv        = 1
0.00.276.697 I llm_load_print_meta: n_rot            = 256
0.00.276.697 I llm_load_print_meta: n_swa            = 0
0.00.276.697 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.698 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.698 I llm_load_print_meta: n_gqa            = 8
0.00.276.699 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.700 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.701 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.702 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.703 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.703 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.703 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.704 I llm_load_print_meta: n_ff             = 16384
0.00.276.704 I llm_load_print_meta: n_expert         = 0
0.00.276.705 I llm_load_print_meta: n_expert_used    = 0
0.00.276.705 I llm_load_print_meta: causal attn      = 1
0.00.276.705 I llm_load_print_meta: pooling type     = 0
0.00.276.706 I llm_load_print_meta: rope type        = 2
0.00.276.706 I llm_load_print_meta: rope scaling     = linear
0.00.276.707 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.708 I llm_load_print_meta: freq_scale_train = 1
0.00.276.708 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.708 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.709 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.709 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.709 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.709 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.709 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.710 I llm_load_print_meta: model type       = 2B
0.00.276.710 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.711 I llm_load_print_meta: model params     = 2.51 B
0.00.276.712 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.712 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.713 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.713 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.713 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.713 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.714 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.714 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.714 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.715 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.715 I llm_load_print_meta: max token length = 93
0.00.336.776 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.786 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.786 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.787 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.788 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.788 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.341.984 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.990 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.991 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.991 I llama_new_context_with_model: n_batch       = 2048
0.00.341.992 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.992 I llama_new_context_with_model: flash_attn    = 0
0.00.341.995 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.996 I llama_new_context_with_model: freq_scale    = 1
0.00.341.997 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.356.938 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.356.952 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.050 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.357 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.362 I llama_new_context_with_model: graph nodes  = 601
0.00.358.362 I llama_new_context_with_model: graph splits = 1
0.00.358.364 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.434.954 I main: llama threadpool init, n_threads = 4
0.00.434.970 I 
0.00.435.046 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.435.050 I 
0.00.435.093 I sampler seed: 139392393
0.00.435.107 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.119 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.435.121 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.435.121 I 
 seconally in the same year. [end of text]


0.00.844.728 I llama_perf_sampler_print:    sampling time =       1.41 ms /     9 runs   (    0.16 ms per token,  6392.05 tokens per second)
0.00.844.731 I llama_perf_context_print:        load time =     434.22 ms
0.00.844.732 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.844.733 I llama_perf_context_print:        eval time =     404.16 ms /     8 runs   (   50.52 ms per token,    19.79 tokens per second)
0.00.844.734 I llama_perf_context_print:       total time =     409.78 ms /     9 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4315 (8faa1d4d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40225.97 ms
main:    total time = 40225.97 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.524 I build: 4315 (8faa1d4d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.731 I main: llama backend init
0.00.000.738 I main: load the model and apply lora adapter, if any
0.00.021.150 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.165 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.172 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.173 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.177 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.181 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.181 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.182 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.183 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.184 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.187 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.188 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.189 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.189 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.190 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.745 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.160 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.049 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.056 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.057 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.058 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.059 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.060 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.061 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.065 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.066 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.070 I llama_model_loader: - type  f32:   37 tensors
0.00.131.071 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.074 I llama_model_loader: - type q6_K:   19 tensors
0.00.205.548 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.176 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.787 I llm_load_vocab: special tokens cache size = 5
0.00.277.456 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.475 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.475 I llm_load_print_meta: arch             = gemma
0.00.277.476 I llm_load_print_meta: vocab type       = SPM
0.00.277.477 I llm_load_print_meta: n_vocab          = 256000
0.00.277.477 I llm_load_print_meta: n_merges         = 0
0.00.277.478 I llm_load_print_meta: vocab_only       = 0
0.00.277.478 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.478 I llm_load_print_meta: n_embd           = 2048
0.00.277.478 I llm_load_print_meta: n_layer          = 18
0.00.277.489 I llm_load_print_meta: n_head           = 8
0.00.277.490 I llm_load_print_meta: n_head_kv        = 1
0.00.277.490 I llm_load_print_meta: n_rot            = 256
0.00.277.491 I llm_load_print_meta: n_swa            = 0
0.00.277.491 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.491 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.492 I llm_load_print_meta: n_gqa            = 8
0.00.277.493 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.494 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.495 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.497 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.497 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.498 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.498 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.499 I llm_load_print_meta: n_ff             = 16384
0.00.277.499 I llm_load_print_meta: n_expert         = 0
0.00.277.499 I llm_load_print_meta: n_expert_used    = 0
0.00.277.500 I llm_load_print_meta: causal attn      = 1
0.00.277.500 I llm_load_print_meta: pooling type     = 0
0.00.277.500 I llm_load_print_meta: rope type        = 2
0.00.277.501 I llm_load_print_meta: rope scaling     = linear
0.00.277.502 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.503 I llm_load_print_meta: freq_scale_train = 1
0.00.277.503 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.504 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.504 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.504 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.504 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.505 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.506 I llm_load_print_meta: model type       = 2B
0.00.277.506 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.277.507 I llm_load_print_meta: model params     = 2.51 B
0.00.277.507 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.277.508 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.508 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.509 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.509 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.509 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.510 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.510 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.510 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.511 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.511 I llm_load_print_meta: max token length = 93
0.00.334.629 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.339.809 I llama_new_context_with_model: n_seq_max     = 1
0.00.339.814 I llama_new_context_with_model: n_ctx         = 4096
0.00.339.814 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.339.815 I llama_new_context_with_model: n_batch       = 2048
0.00.339.815 I llama_new_context_with_model: n_ubatch      = 512
0.00.339.816 I llama_new_context_with_model: flash_attn    = 0
0.00.339.819 I llama_new_context_with_model: freq_base     = 10000.0
0.00.339.820 I llama_new_context_with_model: freq_scale    = 1
0.00.339.821 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.354.778 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.354.790 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.354.879 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.060 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.067 I llama_new_context_with_model: graph nodes  = 601
0.00.356.068 I llama_new_context_with_model: graph splits = 1
0.00.356.070 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.430.553 I main: llama threadpool init, n_threads = 4
0.00.430.570 I 
0.00.430.645 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.430.648 I 
0.00.430.693 I sampler seed: 2448979344
0.00.430.704 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.430.716 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.430.719 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.430.720 I 
 seconally after the first sentence of the paragraph.

In a world where individuality and freedom reign supreme, individuality often overshadows the collective good. This inherent tension

0.02.089.254 I llama_perf_sampler_print:    sampling time =       5.53 ms /    33 runs   (    0.17 ms per token,  5971.77 tokens per second)
0.02.089.258 I llama_perf_context_print:        load time =     429.80 ms
0.02.089.259 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.089.261 I llama_perf_context_print:        eval time =    1639.06 ms /    32 runs   (   51.22 ms per token,    19.52 tokens per second)
0.02.089.262 I llama_perf_context_print:       total time =    1658.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.253s
user	10m20.103s
sys	0m6.914s
