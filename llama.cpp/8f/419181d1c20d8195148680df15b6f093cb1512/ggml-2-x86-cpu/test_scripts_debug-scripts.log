+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.616 I build: 4163 (8f419181) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.809 I main: llama backend init
0.00.000.815 I main: load the model and apply lora adapter, if any
0.00.023.994 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.001 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.088 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.099 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.100 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.105 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.106 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.107 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.109 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.110 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.115 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.124 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.125 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.127 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.130 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.131 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.781 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.370 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.941 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.950 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.951 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.953 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.954 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.955 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.956 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.960 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.961 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.963 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.964 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.965 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.975 I llama_model_loader: - type  f32:   37 tensors
0.00.270.977 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.331 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.042 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.059 I llm_load_vocab: special tokens cache size = 5
0.00.612.757 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.823 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.824 I llm_load_print_meta: arch             = gemma
0.00.612.825 I llm_load_print_meta: vocab type       = SPM
0.00.612.826 I llm_load_print_meta: n_vocab          = 256000
0.00.612.828 I llm_load_print_meta: n_merges         = 0
0.00.612.828 I llm_load_print_meta: vocab_only       = 0
0.00.612.829 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.829 I llm_load_print_meta: n_embd           = 2048
0.00.612.829 I llm_load_print_meta: n_layer          = 18
0.00.612.892 I llm_load_print_meta: n_head           = 8
0.00.612.899 I llm_load_print_meta: n_head_kv        = 1
0.00.612.899 I llm_load_print_meta: n_rot            = 256
0.00.612.900 I llm_load_print_meta: n_swa            = 0
0.00.612.901 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.902 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.906 I llm_load_print_meta: n_gqa            = 8
0.00.612.911 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.916 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.917 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.918 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.920 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.920 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.920 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.925 I llm_load_print_meta: n_ff             = 16384
0.00.612.926 I llm_load_print_meta: n_expert         = 0
0.00.612.927 I llm_load_print_meta: n_expert_used    = 0
0.00.612.928 I llm_load_print_meta: causal attn      = 1
0.00.612.928 I llm_load_print_meta: pooling type     = 0
0.00.612.929 I llm_load_print_meta: rope type        = 2
0.00.612.929 I llm_load_print_meta: rope scaling     = linear
0.00.612.931 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.931 I llm_load_print_meta: freq_scale_train = 1
0.00.612.931 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.932 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.933 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.933 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.933 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.934 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.934 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.935 I llm_load_print_meta: model type       = 2B
0.00.612.936 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.942 I llm_load_print_meta: model params     = 2.51 B
0.00.612.951 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.952 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.954 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.955 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.955 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.956 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.956 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.956 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.962 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.972 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.973 I llm_load_print_meta: max token length = 93
0.00.715.024 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.715.032 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.715.033 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.715.034 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.715.034 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.715.035 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.720.910 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.916 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.917 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.917 I llama_new_context_with_model: n_batch       = 2048
0.00.720.918 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.918 I llama_new_context_with_model: flash_attn    = 0
0.00.720.920 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.921 I llama_new_context_with_model: freq_scale    = 1
0.00.720.922 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.735.091 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.735.131 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.735.262 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.737.828 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.737.832 I llama_new_context_with_model: graph nodes  = 601
0.00.737.832 I llama_new_context_with_model: graph splits = 1
0.00.737.853 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.172 I main: llama threadpool init, n_threads = 4
0.01.345.187 I 
0.01.345.292 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.295 I 
0.01.345.520 I sampler seed: 307410140
0.01.345.532 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.538 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.542 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.542 I 
 increasities:

I. The first sentence is grammatically correct but has an illogical structure.
II. The second sentence is grammatically correct but lacks parallelism

0.14.882.495 I llama_perf_sampler_print:    sampling time =      49.34 ms /    33 runs   (    1.50 ms per token,   668.80 tokens per second)
0.14.882.509 I llama_perf_context_print:        load time =    1344.27 ms
0.14.882.511 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.882.513 I llama_perf_context_print:        eval time =   13448.09 ms /    32 runs   (  420.25 ms per token,     2.38 tokens per second)
0.14.882.514 I llama_perf_context_print:       total time =   13537.33 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4163 (8f419181) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.230 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.324 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.337 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.341 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.347 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.348 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.350 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.351 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.353 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.354 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.360 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.361 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.363 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.364 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.365 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.157.004 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.261.398 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.285.316 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.285.328 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.285.329 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.285.330 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.285.331 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.285.333 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.285.334 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.285.338 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.285.339 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.285.340 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.285.341 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.285.343 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.285.351 I llama_model_loader: - type  f32:   37 tensors
0.00.285.353 I llama_model_loader: - type q8_0:  127 tensors
0.00.464.608 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.525.378 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.526.295 I llm_load_vocab: special tokens cache size = 5
0.00.626.266 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.626.336 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.626.337 I llm_load_print_meta: arch             = gemma
0.00.626.337 I llm_load_print_meta: vocab type       = SPM
0.00.626.338 I llm_load_print_meta: n_vocab          = 256000
0.00.626.341 I llm_load_print_meta: n_merges         = 0
0.00.626.341 I llm_load_print_meta: vocab_only       = 0
0.00.626.342 I llm_load_print_meta: n_ctx_train      = 8192
0.00.626.342 I llm_load_print_meta: n_embd           = 2048
0.00.626.343 I llm_load_print_meta: n_layer          = 18
0.00.626.406 I llm_load_print_meta: n_head           = 8
0.00.626.412 I llm_load_print_meta: n_head_kv        = 1
0.00.626.413 I llm_load_print_meta: n_rot            = 256
0.00.626.413 I llm_load_print_meta: n_swa            = 0
0.00.626.415 I llm_load_print_meta: n_embd_head_k    = 256
0.00.626.415 I llm_load_print_meta: n_embd_head_v    = 256
0.00.626.420 I llm_load_print_meta: n_gqa            = 8
0.00.626.454 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.626.463 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.626.464 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.626.474 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.626.475 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.626.475 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.626.476 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.626.481 I llm_load_print_meta: n_ff             = 16384
0.00.626.482 I llm_load_print_meta: n_expert         = 0
0.00.626.482 I llm_load_print_meta: n_expert_used    = 0
0.00.626.483 I llm_load_print_meta: causal attn      = 1
0.00.626.483 I llm_load_print_meta: pooling type     = 0
0.00.626.484 I llm_load_print_meta: rope type        = 2
0.00.626.484 I llm_load_print_meta: rope scaling     = linear
0.00.626.485 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.626.486 I llm_load_print_meta: freq_scale_train = 1
0.00.626.486 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.626.487 I llm_load_print_meta: rope_finetuned   = unknown
0.00.626.488 I llm_load_print_meta: ssm_d_conv       = 0
0.00.626.488 I llm_load_print_meta: ssm_d_inner      = 0
0.00.626.488 I llm_load_print_meta: ssm_d_state      = 0
0.00.626.489 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.626.489 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.626.489 I llm_load_print_meta: model type       = 2B
0.00.626.491 I llm_load_print_meta: model ftype      = Q8_0
0.00.626.491 I llm_load_print_meta: model params     = 2.51 B
0.00.626.500 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.626.500 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.626.501 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.626.501 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.626.502 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.626.503 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.626.503 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.626.504 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.626.509 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.626.511 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.626.511 I llm_load_print_meta: max token length = 93
0.00.722.722 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.729.141 I llama_new_context_with_model: n_seq_max     = 1
0.00.729.149 I llama_new_context_with_model: n_ctx         = 4096
0.00.729.149 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.729.150 I llama_new_context_with_model: n_batch       = 2048
0.00.729.150 I llama_new_context_with_model: n_ubatch      = 512
0.00.729.151 I llama_new_context_with_model: flash_attn    = 0
0.00.729.153 I llama_new_context_with_model: freq_base     = 10000.0
0.00.729.154 I llama_new_context_with_model: freq_scale    = 1
0.00.729.154 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.744.006 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.744.050 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.744.173 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.703 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.746.707 I llama_new_context_with_model: graph nodes  = 601
0.00.746.708 I llama_new_context_with_model: graph splits = 1
0.00.746.732 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.820 I main: llama threadpool init, n_threads = 4
0.01.354.836 I 
0.01.354.942 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.946 I 
0.01.355.174 I sampler seed: 542223402
0.01.355.187 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.193 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.196 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.197 I 
 increasities, and other forms of flattery to manipulate others into doing what one wants.

I am not sure if you are aware of this term, but it

0.15.035.124 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.63 tokens per second)
0.15.035.140 I llama_perf_context_print:        load time =    1353.87 ms
0.15.035.142 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.035.144 I llama_perf_context_print:        eval time =   13590.18 ms /    32 runs   (  424.69 ms per token,     2.35 tokens per second)
0.15.035.145 I llama_perf_context_print:       total time =   13680.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 4163 (8f419181) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.925 I main: llama backend init
0.00.000.944 I main: load the model and apply lora adapter, if any
0.00.023.827 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.839 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.932 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.944 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.947 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.954 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.959 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.961 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.962 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.964 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.966 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.978 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.983 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.985 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.988 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.989 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.702 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.844 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.460 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.471 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.473 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.474 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.475 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.476 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.477 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.481 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.482 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.484 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.485 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.486 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.496 I llama_model_loader: - type  f32:   37 tensors
0.00.270.499 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.632 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.964 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.905 I llm_load_vocab: special tokens cache size = 5
0.00.600.240 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.308 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.309 I llm_load_print_meta: arch             = gemma
0.00.600.310 I llm_load_print_meta: vocab type       = SPM
0.00.600.311 I llm_load_print_meta: n_vocab          = 256000
0.00.600.313 I llm_load_print_meta: n_merges         = 0
0.00.600.314 I llm_load_print_meta: vocab_only       = 0
0.00.600.314 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.315 I llm_load_print_meta: n_embd           = 2048
0.00.600.315 I llm_load_print_meta: n_layer          = 18
0.00.600.386 I llm_load_print_meta: n_head           = 8
0.00.600.397 I llm_load_print_meta: n_head_kv        = 1
0.00.600.401 I llm_load_print_meta: n_rot            = 256
0.00.600.402 I llm_load_print_meta: n_swa            = 0
0.00.600.402 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.403 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.409 I llm_load_print_meta: n_gqa            = 8
0.00.600.416 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.424 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.428 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.431 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.432 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.432 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.434 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.450 I llm_load_print_meta: n_ff             = 16384
0.00.600.451 I llm_load_print_meta: n_expert         = 0
0.00.600.455 I llm_load_print_meta: n_expert_used    = 0
0.00.600.455 I llm_load_print_meta: causal attn      = 1
0.00.600.456 I llm_load_print_meta: pooling type     = 0
0.00.600.457 I llm_load_print_meta: rope type        = 2
0.00.600.457 I llm_load_print_meta: rope scaling     = linear
0.00.600.460 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.462 I llm_load_print_meta: freq_scale_train = 1
0.00.600.462 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.463 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.463 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.464 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.465 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.465 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.466 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.467 I llm_load_print_meta: model type       = 2B
0.00.600.469 I llm_load_print_meta: model ftype      = Q8_0
0.00.600.470 I llm_load_print_meta: model params     = 2.51 B
0.00.600.480 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.600.480 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.482 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.483 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.484 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.485 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.486 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.487 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.495 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.496 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.497 I llm_load_print_meta: max token length = 93
0.00.675.623 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.675.632 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.675.633 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.675.634 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.675.635 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.675.635 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.681.885 I llama_new_context_with_model: n_seq_max     = 1
0.00.681.893 I llama_new_context_with_model: n_ctx         = 4096
0.00.681.893 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.681.894 I llama_new_context_with_model: n_batch       = 2048
0.00.681.894 I llama_new_context_with_model: n_ubatch      = 512
0.00.681.895 I llama_new_context_with_model: flash_attn    = 0
0.00.681.897 I llama_new_context_with_model: freq_base     = 10000.0
0.00.681.898 I llama_new_context_with_model: freq_scale    = 1
0.00.681.899 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.696.549 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.696.591 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.696.724 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.699.346 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.699.350 I llama_new_context_with_model: graph nodes  = 601
0.00.699.350 I llama_new_context_with_model: graph splits = 1
0.00.699.374 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.307.984 I main: llama threadpool init, n_threads = 4
0.01.308.000 I 
0.01.308.108 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.308.112 I 
0.01.308.339 I sampler seed: 453670618
0.01.308.352 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.308.359 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.308.362 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.308.362 I 
 increamental. [end of text]


0.03.000.928 I llama_perf_sampler_print:    sampling time =       6.27 ms /     5 runs   (    1.25 ms per token,   797.96 tokens per second)
0.03.000.944 I llama_perf_context_print:        load time =    1306.93 ms
0.03.000.946 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.000.947 I llama_perf_context_print:        eval time =    1679.92 ms /     4 runs   (  419.98 ms per token,     2.38 tokens per second)
0.03.000.948 I llama_perf_context_print:       total time =    1692.95 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 4163 (8f419181) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.000.871 I main: load the model and apply lora adapter, if any
0.00.023.422 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.432 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.518 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.529 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.531 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.536 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.538 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.539 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.548 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.550 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.552 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.558 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.562 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.563 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.564 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.566 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.354 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.142 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.753 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.766 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.767 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.769 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.770 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.771 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.772 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.776 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.778 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.779 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.780 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.270.782 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.792 I llama_model_loader: - type  f32:   37 tensors
0.00.270.794 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.417 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.503.952 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.504.948 I llm_load_vocab: special tokens cache size = 5
0.00.619.172 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.241 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.242 I llm_load_print_meta: arch             = gemma
0.00.619.242 I llm_load_print_meta: vocab type       = SPM
0.00.619.244 I llm_load_print_meta: n_vocab          = 256000
0.00.619.246 I llm_load_print_meta: n_merges         = 0
0.00.619.247 I llm_load_print_meta: vocab_only       = 0
0.00.619.247 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.247 I llm_load_print_meta: n_embd           = 2048
0.00.619.248 I llm_load_print_meta: n_layer          = 18
0.00.619.311 I llm_load_print_meta: n_head           = 8
0.00.619.318 I llm_load_print_meta: n_head_kv        = 1
0.00.619.319 I llm_load_print_meta: n_rot            = 256
0.00.619.319 I llm_load_print_meta: n_swa            = 0
0.00.619.320 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.320 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.324 I llm_load_print_meta: n_gqa            = 8
0.00.619.329 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.355 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.357 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.359 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.359 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.360 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.360 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.367 I llm_load_print_meta: n_ff             = 16384
0.00.619.368 I llm_load_print_meta: n_expert         = 0
0.00.619.368 I llm_load_print_meta: n_expert_used    = 0
0.00.619.368 I llm_load_print_meta: causal attn      = 1
0.00.619.369 I llm_load_print_meta: pooling type     = 0
0.00.619.370 I llm_load_print_meta: rope type        = 2
0.00.619.370 I llm_load_print_meta: rope scaling     = linear
0.00.619.372 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.372 I llm_load_print_meta: freq_scale_train = 1
0.00.619.373 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.380 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.381 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.388 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.389 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.389 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.390 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.391 I llm_load_print_meta: model type       = 2B
0.00.619.393 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.393 I llm_load_print_meta: model params     = 2.51 B
0.00.619.404 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.404 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.405 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.406 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.406 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.407 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.407 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.408 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.418 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.419 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.420 I llm_load_print_meta: max token length = 93
0.00.692.538 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.692.548 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.698.523 I llama_new_context_with_model: n_seq_max     = 1
0.00.698.529 I llama_new_context_with_model: n_ctx         = 4096
0.00.698.529 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.698.530 I llama_new_context_with_model: n_batch       = 2048
0.00.698.530 I llama_new_context_with_model: n_ubatch      = 512
0.00.698.531 I llama_new_context_with_model: flash_attn    = 0
0.00.698.533 I llama_new_context_with_model: freq_base     = 10000.0
0.00.698.534 I llama_new_context_with_model: freq_scale    = 1
0.00.698.535 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.712.937 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.712.977 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.713.099 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.715.698 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.715.702 I llama_new_context_with_model: graph nodes  = 601
0.00.715.702 I llama_new_context_with_model: graph splits = 1
0.00.715.726 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.326.003 I main: llama threadpool init, n_threads = 4
0.01.326.018 I 
0.01.326.121 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.125 I 
0.01.326.371 I sampler seed: 2903984219
0.01.326.387 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.326.396 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.326.408 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.326.409 I 
 increasities and anxieties, which are all part of the human experience. These feelings can be overwhelming and sometimes lead to negative consequences.

**Answer the following questions

0.14.822.455 I llama_perf_sampler_print:    sampling time =      49.26 ms /    33 runs   (    1.49 ms per token,   669.94 tokens per second)
0.14.822.477 I llama_perf_context_print:        load time =    1325.04 ms
0.14.822.479 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.822.480 I llama_perf_context_print:        eval time =   13407.48 ms /    32 runs   (  418.98 ms per token,     2.39 tokens per second)
0.14.822.488 I llama_perf_context_print:       total time =   13496.46 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.295s
user	3m2.270s
sys	0m9.344s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4163 (8f419181)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186126.79 ms
main:    total time = 186126.79 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.721 I build: 4163 (8f419181) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.916 I main: llama backend init
0.00.000.924 I main: load the model and apply lora adapter, if any
0.00.023.368 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.379 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.471 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.483 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.487 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.492 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.493 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.504 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.505 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.506 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.508 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.510 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.013 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.742 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.352 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.361 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.362 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.363 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.364 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.365 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.367 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.370 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.371 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.373 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.373 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.375 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.383 I llama_model_loader: - type  f32:   37 tensors
0.00.269.385 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.386 I llama_model_loader: - type q6_K:   19 tensors
0.00.460.636 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.862 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.776 I llm_load_vocab: special tokens cache size = 5
0.00.623.065 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.133 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.134 I llm_load_print_meta: arch             = gemma
0.00.623.135 I llm_load_print_meta: vocab type       = SPM
0.00.623.136 I llm_load_print_meta: n_vocab          = 256000
0.00.623.138 I llm_load_print_meta: n_merges         = 0
0.00.623.139 I llm_load_print_meta: vocab_only       = 0
0.00.623.139 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.140 I llm_load_print_meta: n_embd           = 2048
0.00.623.140 I llm_load_print_meta: n_layer          = 18
0.00.623.206 I llm_load_print_meta: n_head           = 8
0.00.623.214 I llm_load_print_meta: n_head_kv        = 1
0.00.623.215 I llm_load_print_meta: n_rot            = 256
0.00.623.215 I llm_load_print_meta: n_swa            = 0
0.00.623.216 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.216 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.221 I llm_load_print_meta: n_gqa            = 8
0.00.623.226 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.231 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.235 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.237 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.237 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.238 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.238 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.243 I llm_load_print_meta: n_ff             = 16384
0.00.623.243 I llm_load_print_meta: n_expert         = 0
0.00.623.244 I llm_load_print_meta: n_expert_used    = 0
0.00.623.245 I llm_load_print_meta: causal attn      = 1
0.00.623.245 I llm_load_print_meta: pooling type     = 0
0.00.623.245 I llm_load_print_meta: rope type        = 2
0.00.623.246 I llm_load_print_meta: rope scaling     = linear
0.00.623.248 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.248 I llm_load_print_meta: freq_scale_train = 1
0.00.623.248 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.249 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.250 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.250 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.250 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.251 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.251 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.252 I llm_load_print_meta: model type       = 2B
0.00.623.253 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.623.254 I llm_load_print_meta: model params     = 2.51 B
0.00.623.273 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.623.274 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.277 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.277 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.278 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.278 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.278 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.279 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.286 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.287 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.288 I llm_load_print_meta: max token length = 93
0.00.685.177 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.685.186 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.685.187 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.685.188 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.685.188 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.685.189 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.691.067 I llama_new_context_with_model: n_seq_max     = 1
0.00.691.076 I llama_new_context_with_model: n_ctx         = 4096
0.00.691.076 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.691.077 I llama_new_context_with_model: n_batch       = 2048
0.00.691.077 I llama_new_context_with_model: n_ubatch      = 512
0.00.691.078 I llama_new_context_with_model: flash_attn    = 0
0.00.691.081 I llama_new_context_with_model: freq_base     = 10000.0
0.00.691.081 I llama_new_context_with_model: freq_scale    = 1
0.00.691.082 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.706.005 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.706.049 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.706.182 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.708.751 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.708.755 I llama_new_context_with_model: graph nodes  = 601
0.00.708.756 I llama_new_context_with_model: graph splits = 1
0.00.708.780 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.294.323 I main: llama threadpool init, n_threads = 4
0.01.294.339 I 
0.01.294.448 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.294.452 I 
0.01.294.679 I sampler seed: 1457767959
0.01.294.691 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.294.699 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.294.700 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.294.703 I 
 encompating all the elements of the prompt:

**The Importance of Empathy in Everyday Life**

**Introduction:**

Empathy is an essential skill for navigating

0.12.414.585 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   668.04 tokens per second)
0.12.414.588 I llama_perf_context_print:        load time =    1293.31 ms
0.12.414.590 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.414.592 I llama_perf_context_print:        eval time =   11030.99 ms /    32 runs   (  344.72 ms per token,     2.90 tokens per second)
0.12.414.593 I llama_perf_context_print:       total time =   11120.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4163 (8f419181)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186149.87 ms
main:    total time = 186149.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.614 I build: 4163 (8f419181) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.022.996 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.095 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.109 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.111 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.116 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.121 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.122 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.123 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.124 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.125 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.134 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.135 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.139 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.140 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.141 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.147.534 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.245.794 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.285 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.293 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.294 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.295 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.296 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.298 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.299 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.303 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.304 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.312 I llama_model_loader: - type  f32:   37 tensors
0.00.269.315 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.315 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.825 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.515.535 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.516.580 I llm_load_vocab: special tokens cache size = 5
0.00.618.639 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.704 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.705 I llm_load_print_meta: arch             = gemma
0.00.618.705 I llm_load_print_meta: vocab type       = SPM
0.00.618.707 I llm_load_print_meta: n_vocab          = 256000
0.00.618.709 I llm_load_print_meta: n_merges         = 0
0.00.618.710 I llm_load_print_meta: vocab_only       = 0
0.00.618.710 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.710 I llm_load_print_meta: n_embd           = 2048
0.00.618.711 I llm_load_print_meta: n_layer          = 18
0.00.618.773 I llm_load_print_meta: n_head           = 8
0.00.618.780 I llm_load_print_meta: n_head_kv        = 1
0.00.618.781 I llm_load_print_meta: n_rot            = 256
0.00.618.781 I llm_load_print_meta: n_swa            = 0
0.00.618.782 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.782 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.789 I llm_load_print_meta: n_gqa            = 8
0.00.618.794 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.798 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.800 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.801 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.802 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.802 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.802 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.807 I llm_load_print_meta: n_ff             = 16384
0.00.618.808 I llm_load_print_meta: n_expert         = 0
0.00.618.818 I llm_load_print_meta: n_expert_used    = 0
0.00.618.822 I llm_load_print_meta: causal attn      = 1
0.00.618.822 I llm_load_print_meta: pooling type     = 0
0.00.618.822 I llm_load_print_meta: rope type        = 2
0.00.618.823 I llm_load_print_meta: rope scaling     = linear
0.00.618.824 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.825 I llm_load_print_meta: freq_scale_train = 1
0.00.618.825 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.826 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.837 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.838 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.839 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.840 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.840 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.841 I llm_load_print_meta: model type       = 2B
0.00.618.842 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.618.843 I llm_load_print_meta: model params     = 2.51 B
0.00.618.851 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.618.851 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.853 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.853 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.854 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.855 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.855 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.856 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.862 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.864 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.864 I llm_load_print_meta: max token length = 93
0.00.674.576 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.680.210 I llama_new_context_with_model: n_seq_max     = 1
0.00.680.216 I llama_new_context_with_model: n_ctx         = 4096
0.00.680.216 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.680.217 I llama_new_context_with_model: n_batch       = 2048
0.00.680.217 I llama_new_context_with_model: n_ubatch      = 512
0.00.680.218 I llama_new_context_with_model: flash_attn    = 0
0.00.680.220 I llama_new_context_with_model: freq_base     = 10000.0
0.00.680.221 I llama_new_context_with_model: freq_scale    = 1
0.00.680.222 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.695.099 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.695.139 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.695.258 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.697.863 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.697.867 I llama_new_context_with_model: graph nodes  = 601
0.00.697.867 I llama_new_context_with_model: graph splits = 1
0.00.697.890 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.368 I main: llama threadpool init, n_threads = 4
0.01.282.384 I 
0.01.282.492 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.496 I 
0.01.282.723 I sampler seed: 333511814
0.01.282.735 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.282.741 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.282.744 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.282.745 I 
 squaRED!

I am unable to access the requested data due to safety restrictions. [end of text]


0.07.574.194 I llama_perf_sampler_print:    sampling time =      27.71 ms /    19 runs   (    1.46 ms per token,   685.65 tokens per second)
0.07.574.197 I llama_perf_context_print:        load time =    1281.44 ms
0.07.574.213 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.574.216 I llama_perf_context_print:        eval time =    6240.59 ms /    18 runs   (  346.70 ms per token,     2.88 tokens per second)
0.07.574.217 I llama_perf_context_print:       total time =    6291.84 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m35.155s
user	46m23.014s
sys	0m6.329s
