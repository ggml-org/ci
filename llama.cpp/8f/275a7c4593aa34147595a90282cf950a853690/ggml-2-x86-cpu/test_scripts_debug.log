+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 3989 (8f275a7c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.002.767 I main: load the model and apply lora adapter, if any
0.00.024.114 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.326 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.409 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.421 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.422 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.426 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.427 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.428 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.429 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.430 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.431 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.438 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.441 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.443 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.443 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.445 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.683 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.447 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.346 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.354 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.355 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.356 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.357 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.358 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.360 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.363 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.364 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.365 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.366 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.367 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.375 I llama_model_loader: - type  f32:   37 tensors
0.00.268.378 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.206 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.513.476 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.514.326 I llm_load_vocab: special tokens cache size = 5
0.00.608.693 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.608.762 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.608.763 I llm_load_print_meta: arch             = gemma
0.00.608.764 I llm_load_print_meta: vocab type       = SPM
0.00.608.764 I llm_load_print_meta: n_vocab          = 256000
0.00.608.767 I llm_load_print_meta: n_merges         = 0
0.00.608.768 I llm_load_print_meta: vocab_only       = 0
0.00.608.768 I llm_load_print_meta: n_ctx_train      = 8192
0.00.608.768 I llm_load_print_meta: n_embd           = 2048
0.00.608.769 I llm_load_print_meta: n_layer          = 18
0.00.608.833 I llm_load_print_meta: n_head           = 8
0.00.608.840 I llm_load_print_meta: n_head_kv        = 1
0.00.608.841 I llm_load_print_meta: n_rot            = 256
0.00.608.842 I llm_load_print_meta: n_swa            = 0
0.00.608.843 I llm_load_print_meta: n_embd_head_k    = 256
0.00.608.843 I llm_load_print_meta: n_embd_head_v    = 256
0.00.608.848 I llm_load_print_meta: n_gqa            = 8
0.00.608.853 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.608.858 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.608.860 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.608.865 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.608.866 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.608.868 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.608.869 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.608.876 I llm_load_print_meta: n_ff             = 16384
0.00.608.877 I llm_load_print_meta: n_expert         = 0
0.00.608.877 I llm_load_print_meta: n_expert_used    = 0
0.00.608.877 I llm_load_print_meta: causal attn      = 1
0.00.608.878 I llm_load_print_meta: pooling type     = 0
0.00.608.878 I llm_load_print_meta: rope type        = 2
0.00.608.878 I llm_load_print_meta: rope scaling     = linear
0.00.608.880 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.608.880 I llm_load_print_meta: freq_scale_train = 1
0.00.608.881 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.608.882 I llm_load_print_meta: rope_finetuned   = unknown
0.00.608.882 I llm_load_print_meta: ssm_d_conv       = 0
0.00.608.883 I llm_load_print_meta: ssm_d_inner      = 0
0.00.608.883 I llm_load_print_meta: ssm_d_state      = 0
0.00.608.883 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.608.884 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.608.885 I llm_load_print_meta: model type       = 2B
0.00.608.886 I llm_load_print_meta: model ftype      = Q8_0
0.00.608.887 I llm_load_print_meta: model params     = 2.51 B
0.00.608.887 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.608.888 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.608.898 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.608.912 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.608.913 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.608.913 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.608.914 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.608.914 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.608.921 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.608.923 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.608.923 I llm_load_print_meta: max token length = 93
0.00.609.092 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.718.915 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.718.928 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.718.929 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.718.930 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.718.930 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.718.931 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.724.566 I llama_new_context_with_model: n_ctx      = 8192
0.00.724.576 I llama_new_context_with_model: n_batch    = 2048
0.00.724.576 I llama_new_context_with_model: n_ubatch   = 512
0.00.724.577 I llama_new_context_with_model: flash_attn = 0
0.00.724.581 I llama_new_context_with_model: freq_base  = 10000.0
0.00.724.582 I llama_new_context_with_model: freq_scale = 1
0.00.754.289 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.754.332 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.754.449 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.755.856 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.755.861 I llama_new_context_with_model: graph nodes  = 601
0.00.755.862 I llama_new_context_with_model: graph splits = 1
0.00.755.878 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.369.538 I main: llama threadpool init, n_threads = 4
0.01.369.551 I 
0.01.369.657 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.369.660 I 
0.01.369.889 I sampler seed: 2457843024
0.01.369.902 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.369.908 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.369.910 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.369.910 I 
 increamically, and the crescendo reached a crescendo of such overwhelming force that it shook the very foundations of the cathedral.

What literary device is being used in this

0.14.768.815 I llama_perf_sampler_print:    sampling time =      47.89 ms /    33 runs   (    1.45 ms per token,   689.06 tokens per second)
0.14.768.820 I llama_perf_context_print:        load time =    1366.68 ms
0.14.768.821 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.768.823 I llama_perf_context_print:        eval time =   13305.57 ms /    32 runs   (  415.80 ms per token,     2.41 tokens per second)
0.14.768.824 I llama_perf_context_print:       total time =   13399.29 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.691 I build: 3989 (8f275a7c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.897 I main: llama backend init
0.00.002.877 I main: load the model and apply lora adapter, if any
0.00.025.131 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.241 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.257 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.267 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.269 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.272 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.274 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.276 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.278 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.287 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.293 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.294 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.296 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.301 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.151.200 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.959 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.893 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.900 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.901 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.902 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.903 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.904 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.905 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.908 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.910 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.911 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.912 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.269.913 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.921 I llama_model_loader: - type  f32:   37 tensors
0.00.269.926 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.974 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.305 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.508.188 I llm_load_vocab: special tokens cache size = 5
0.00.603.363 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.603.433 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.603.437 I llm_load_print_meta: arch             = gemma
0.00.603.438 I llm_load_print_meta: vocab type       = SPM
0.00.603.439 I llm_load_print_meta: n_vocab          = 256000
0.00.603.441 I llm_load_print_meta: n_merges         = 0
0.00.603.441 I llm_load_print_meta: vocab_only       = 0
0.00.603.442 I llm_load_print_meta: n_ctx_train      = 8192
0.00.603.442 I llm_load_print_meta: n_embd           = 2048
0.00.603.443 I llm_load_print_meta: n_layer          = 18
0.00.603.507 I llm_load_print_meta: n_head           = 8
0.00.603.516 I llm_load_print_meta: n_head_kv        = 1
0.00.603.517 I llm_load_print_meta: n_rot            = 256
0.00.603.518 I llm_load_print_meta: n_swa            = 0
0.00.603.519 I llm_load_print_meta: n_embd_head_k    = 256
0.00.603.519 I llm_load_print_meta: n_embd_head_v    = 256
0.00.603.523 I llm_load_print_meta: n_gqa            = 8
0.00.603.528 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.603.534 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.603.535 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.603.537 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.603.538 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.603.538 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.603.540 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.603.544 I llm_load_print_meta: n_ff             = 16384
0.00.603.554 I llm_load_print_meta: n_expert         = 0
0.00.603.557 I llm_load_print_meta: n_expert_used    = 0
0.00.603.557 I llm_load_print_meta: causal attn      = 1
0.00.603.558 I llm_load_print_meta: pooling type     = 0
0.00.603.558 I llm_load_print_meta: rope type        = 2
0.00.603.559 I llm_load_print_meta: rope scaling     = linear
0.00.603.560 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.603.560 I llm_load_print_meta: freq_scale_train = 1
0.00.603.561 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.603.561 I llm_load_print_meta: rope_finetuned   = unknown
0.00.603.562 I llm_load_print_meta: ssm_d_conv       = 0
0.00.603.562 I llm_load_print_meta: ssm_d_inner      = 0
0.00.603.562 I llm_load_print_meta: ssm_d_state      = 0
0.00.603.563 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.603.563 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.603.564 I llm_load_print_meta: model type       = 2B
0.00.603.576 I llm_load_print_meta: model ftype      = Q8_0
0.00.603.578 I llm_load_print_meta: model params     = 2.51 B
0.00.603.578 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.603.588 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.603.589 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.603.590 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.603.591 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.603.591 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.603.592 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.603.595 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.603.604 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.603.606 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.603.609 I llm_load_print_meta: max token length = 93
0.00.603.787 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.701.817 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.707.526 I llama_new_context_with_model: n_ctx      = 8192
0.00.707.533 I llama_new_context_with_model: n_batch    = 2048
0.00.707.534 I llama_new_context_with_model: n_ubatch   = 512
0.00.707.535 I llama_new_context_with_model: flash_attn = 0
0.00.707.537 I llama_new_context_with_model: freq_base  = 10000.0
0.00.707.538 I llama_new_context_with_model: freq_scale = 1
0.00.736.892 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.736.936 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.737.053 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.449 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.738.454 I llama_new_context_with_model: graph nodes  = 601
0.00.738.455 I llama_new_context_with_model: graph splits = 1
0.00.738.470 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.998 I main: llama threadpool init, n_threads = 4
0.01.353.010 I 
0.01.353.132 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.353.137 I 
0.01.353.380 I sampler seed: 838303150
0.01.353.392 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.353.399 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.353.400 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.353.400 I 
 increasities.

I cannot find the requested information in the provided context. [end of text]


0.08.208.386 I llama_perf_sampler_print:    sampling time =      24.11 ms /    17 runs   (    1.42 ms per token,   705.13 tokens per second)
0.08.208.400 I llama_perf_context_print:        load time =    1350.00 ms
0.08.208.402 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.208.404 I llama_perf_context_print:        eval time =    6807.51 ms /    16 runs   (  425.47 ms per token,     2.35 tokens per second)
0.08.208.405 I llama_perf_context_print:       total time =    6855.40 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.655 I build: 3989 (8f275a7c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.872 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.569 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.803 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.893 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.904 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.906 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.910 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.912 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.913 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.914 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.916 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.917 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.925 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.934 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.940 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.941 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.943 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.045 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.633 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.268.607 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.268.617 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.268.618 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.619 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.621 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.622 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.624 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.627 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.629 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.630 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.631 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.268.633 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.643 I llama_model_loader: - type  f32:   37 tensors
0.00.268.648 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.786 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.508 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.394 I llm_load_vocab: special tokens cache size = 5
0.00.604.165 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.237 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.241 I llm_load_print_meta: arch             = gemma
0.00.604.242 I llm_load_print_meta: vocab type       = SPM
0.00.604.243 I llm_load_print_meta: n_vocab          = 256000
0.00.604.246 I llm_load_print_meta: n_merges         = 0
0.00.604.246 I llm_load_print_meta: vocab_only       = 0
0.00.604.247 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.247 I llm_load_print_meta: n_embd           = 2048
0.00.604.248 I llm_load_print_meta: n_layer          = 18
0.00.604.310 I llm_load_print_meta: n_head           = 8
0.00.604.320 I llm_load_print_meta: n_head_kv        = 1
0.00.604.321 I llm_load_print_meta: n_rot            = 256
0.00.604.321 I llm_load_print_meta: n_swa            = 0
0.00.604.322 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.322 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.328 I llm_load_print_meta: n_gqa            = 8
0.00.604.333 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.338 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.339 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.342 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.343 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.344 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.344 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.349 I llm_load_print_meta: n_ff             = 16384
0.00.604.350 I llm_load_print_meta: n_expert         = 0
0.00.604.351 I llm_load_print_meta: n_expert_used    = 0
0.00.604.351 I llm_load_print_meta: causal attn      = 1
0.00.604.352 I llm_load_print_meta: pooling type     = 0
0.00.604.352 I llm_load_print_meta: rope type        = 2
0.00.604.353 I llm_load_print_meta: rope scaling     = linear
0.00.604.354 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.355 I llm_load_print_meta: freq_scale_train = 1
0.00.604.355 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.379 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.380 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.381 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.381 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.382 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.382 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.383 I llm_load_print_meta: model type       = 2B
0.00.604.384 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.384 I llm_load_print_meta: model params     = 2.51 B
0.00.604.386 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.386 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.387 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.387 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.396 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.397 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.398 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.398 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.404 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.406 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.407 I llm_load_print_meta: max token length = 93
0.00.604.592 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.702.414 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.702.424 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.702.424 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.702.425 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.702.426 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.702.426 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.708.352 I llama_new_context_with_model: n_ctx      = 8192
0.00.708.358 I llama_new_context_with_model: n_batch    = 2048
0.00.708.359 I llama_new_context_with_model: n_ubatch   = 512
0.00.708.359 I llama_new_context_with_model: flash_attn = 0
0.00.708.362 I llama_new_context_with_model: freq_base  = 10000.0
0.00.708.363 I llama_new_context_with_model: freq_scale = 1
0.00.739.557 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.739.597 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.739.730 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.193 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.741.198 I llama_new_context_with_model: graph nodes  = 601
0.00.741.199 I llama_new_context_with_model: graph splits = 1
0.00.741.216 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.392.976 I main: llama threadpool init, n_threads = 4
0.01.392.990 I 
0.01.393.113 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.393.118 I 
0.01.393.366 I sampler seed: 2476207978
0.01.393.379 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.393.388 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.393.390 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.393.391 I 
 increasively.

I am sorry, but I cannot provide an answer that is sexually suggestive in nature. [end of text]


0.10.657.944 I llama_perf_sampler_print:    sampling time =      32.99 ms /    23 runs   (    1.43 ms per token,   697.20 tokens per second)
0.10.657.948 I llama_perf_context_print:        load time =    1390.09 ms
0.10.657.949 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.657.962 I llama_perf_context_print:        eval time =    9200.15 ms /    22 runs   (  418.19 ms per token,     2.39 tokens per second)
0.10.657.963 I llama_perf_context_print:       total time =    9264.98 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.662 I build: 3989 (8f275a7c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.027.444 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.027.666 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.027.760 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.771 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.773 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.777 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.778 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.779 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.780 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.781 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.782 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.789 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.791 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.793 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.794 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.027.795 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.973 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.253.450 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.236 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.246 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.247 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.248 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.249 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.250 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.251 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.255 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.274 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.277 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.279 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.273.280 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.289 I llama_model_loader: - type  f32:   37 tensors
0.00.273.294 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.714 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.370 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.282 I llm_load_vocab: special tokens cache size = 5
0.00.619.992 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.060 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.061 I llm_load_print_meta: arch             = gemma
0.00.620.061 I llm_load_print_meta: vocab type       = SPM
0.00.620.062 I llm_load_print_meta: n_vocab          = 256000
0.00.620.064 I llm_load_print_meta: n_merges         = 0
0.00.620.065 I llm_load_print_meta: vocab_only       = 0
0.00.620.065 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.066 I llm_load_print_meta: n_embd           = 2048
0.00.620.066 I llm_load_print_meta: n_layer          = 18
0.00.620.130 I llm_load_print_meta: n_head           = 8
0.00.620.137 I llm_load_print_meta: n_head_kv        = 1
0.00.620.138 I llm_load_print_meta: n_rot            = 256
0.00.620.138 I llm_load_print_meta: n_swa            = 0
0.00.620.139 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.140 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.145 I llm_load_print_meta: n_gqa            = 8
0.00.620.149 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.154 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.156 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.157 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.158 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.159 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.159 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.168 I llm_load_print_meta: n_ff             = 16384
0.00.620.169 I llm_load_print_meta: n_expert         = 0
0.00.620.169 I llm_load_print_meta: n_expert_used    = 0
0.00.620.172 I llm_load_print_meta: causal attn      = 1
0.00.620.173 I llm_load_print_meta: pooling type     = 0
0.00.620.173 I llm_load_print_meta: rope type        = 2
0.00.620.173 I llm_load_print_meta: rope scaling     = linear
0.00.620.175 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.175 I llm_load_print_meta: freq_scale_train = 1
0.00.620.176 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.176 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.176 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.177 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.177 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.177 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.178 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.178 I llm_load_print_meta: model type       = 2B
0.00.620.179 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.180 I llm_load_print_meta: model params     = 2.51 B
0.00.620.181 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.181 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.181 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.182 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.182 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.183 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.183 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.184 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.189 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.191 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.192 I llm_load_print_meta: max token length = 93
0.00.620.356 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.712.381 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.712.391 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.717.975 I llama_new_context_with_model: n_ctx      = 8192
0.00.717.982 I llama_new_context_with_model: n_batch    = 2048
0.00.717.982 I llama_new_context_with_model: n_ubatch   = 512
0.00.717.983 I llama_new_context_with_model: flash_attn = 0
0.00.717.985 I llama_new_context_with_model: freq_base  = 10000.0
0.00.717.986 I llama_new_context_with_model: freq_scale = 1
0.00.746.869 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.746.913 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.747.032 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.748.434 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.748.439 I llama_new_context_with_model: graph nodes  = 601
0.00.748.439 I llama_new_context_with_model: graph splits = 1
0.00.748.455 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.359.664 I main: llama threadpool init, n_threads = 4
0.01.359.678 I 
0.01.359.786 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.359.790 I 
0.01.360.019 I sampler seed: 3042792907
0.01.360.032 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.360.039 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.360.042 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.360.042 I 
 increably. [end of text]


0.03.039.890 I llama_perf_sampler_print:    sampling time =       6.00 ms /     5 runs   (    1.20 ms per token,   832.64 tokens per second)
0.03.039.893 I llama_perf_context_print:        load time =    1356.76 ms
0.03.039.895 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.039.909 I llama_perf_context_print:        eval time =    1667.11 ms /     4 runs   (  416.78 ms per token,     2.40 tokens per second)
0.03.039.910 I llama_perf_context_print:       total time =    1680.24 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m46.463s
user	2m17.685s
sys	0m9.613s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3989 (8f275a7c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199306.94 ms
main:    total time = 199306.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.651 I build: 3989 (8f275a7c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.806 I main: load the model and apply lora adapter, if any
0.00.024.565 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.788 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.877 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.888 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.890 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.894 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.895 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.897 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.898 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.900 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.901 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.907 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.910 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.911 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.912 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.913 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.080 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.918 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.793 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.801 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.802 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.803 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.804 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.806 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.807 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.811 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.812 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.815 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.267.816 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.825 I llama_model_loader: - type  f32:   37 tensors
0.00.267.830 I llama_model_loader: - type q4_K:  108 tensors
0.00.267.831 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.540 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.983 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.859 I llm_load_vocab: special tokens cache size = 5
0.00.602.465 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.602.533 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.602.534 I llm_load_print_meta: arch             = gemma
0.00.602.534 I llm_load_print_meta: vocab type       = SPM
0.00.602.535 I llm_load_print_meta: n_vocab          = 256000
0.00.602.538 I llm_load_print_meta: n_merges         = 0
0.00.602.538 I llm_load_print_meta: vocab_only       = 0
0.00.602.539 I llm_load_print_meta: n_ctx_train      = 8192
0.00.602.539 I llm_load_print_meta: n_embd           = 2048
0.00.602.540 I llm_load_print_meta: n_layer          = 18
0.00.602.600 I llm_load_print_meta: n_head           = 8
0.00.602.607 I llm_load_print_meta: n_head_kv        = 1
0.00.602.607 I llm_load_print_meta: n_rot            = 256
0.00.602.608 I llm_load_print_meta: n_swa            = 0
0.00.602.608 I llm_load_print_meta: n_embd_head_k    = 256
0.00.602.609 I llm_load_print_meta: n_embd_head_v    = 256
0.00.602.613 I llm_load_print_meta: n_gqa            = 8
0.00.602.618 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.623 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.625 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.627 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.628 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.628 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.629 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.633 I llm_load_print_meta: n_ff             = 16384
0.00.602.634 I llm_load_print_meta: n_expert         = 0
0.00.602.635 I llm_load_print_meta: n_expert_used    = 0
0.00.602.635 I llm_load_print_meta: causal attn      = 1
0.00.602.635 I llm_load_print_meta: pooling type     = 0
0.00.602.636 I llm_load_print_meta: rope type        = 2
0.00.602.636 I llm_load_print_meta: rope scaling     = linear
0.00.602.638 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.638 I llm_load_print_meta: freq_scale_train = 1
0.00.602.639 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.639 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.640 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.641 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.641 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.651 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.651 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.653 I llm_load_print_meta: model type       = 2B
0.00.602.654 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.602.655 I llm_load_print_meta: model params     = 2.51 B
0.00.602.655 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.602.656 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.666 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.667 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.668 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.673 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.673 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.673 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.681 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.683 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.683 I llm_load_print_meta: max token length = 93
0.00.602.851 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.959 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.665.967 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.665.967 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.665.968 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.665.969 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.665.969 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.671.603 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.611 I llama_new_context_with_model: n_batch    = 2048
0.00.671.611 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.612 I llama_new_context_with_model: flash_attn = 0
0.00.671.614 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.615 I llama_new_context_with_model: freq_scale = 1
0.00.701.753 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.794 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.908 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.703.311 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.703.315 I llama_new_context_with_model: graph nodes  = 601
0.00.703.316 I llama_new_context_with_model: graph splits = 1
0.00.703.331 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.711 I main: llama threadpool init, n_threads = 4
0.01.282.724 I 
0.01.282.833 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.282.837 I 
0.01.283.070 I sampler seed: 838848584
0.01.283.083 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.089 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.283.091 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.283.091 I 
 maneuvously!

I am unable to generate a response due to the limitations of my programming language. [end of text]


0.08.861.875 I llama_perf_sampler_print:    sampling time =      33.24 ms /    23 runs   (    1.45 ms per token,   692.00 tokens per second)
0.08.861.877 I llama_perf_context_print:        load time =    1279.82 ms
0.08.861.893 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.861.895 I llama_perf_context_print:        eval time =    7513.89 ms /    22 runs   (  341.54 ms per token,     2.93 tokens per second)
0.08.861.896 I llama_perf_context_print:       total time =    7579.17 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3989 (8f275a7c)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199276.94 ms
main:    total time = 199276.94 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.634 I build: 3989 (8f275a7c) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.828 I main: llama backend init
0.00.002.760 I main: load the model and apply lora adapter, if any
0.00.027.424 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.027.511 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.027.524 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.027.526 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.027.530 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.027.532 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.027.533 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.027.535 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.027.543 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.027.544 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.027.550 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.027.551 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.027.552 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.027.553 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.027.555 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.987 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.134 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.078 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.085 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.087 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.088 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.089 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.090 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.091 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.095 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.096 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.104 I llama_model_loader: - type  f32:   37 tensors
0.00.272.108 I llama_model_loader: - type q4_K:  108 tensors
0.00.272.109 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.930 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.501.458 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.502.399 I llm_load_vocab: special tokens cache size = 5
0.00.600.596 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.600.666 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.600.668 I llm_load_print_meta: arch             = gemma
0.00.600.668 I llm_load_print_meta: vocab type       = SPM
0.00.600.669 I llm_load_print_meta: n_vocab          = 256000
0.00.600.671 I llm_load_print_meta: n_merges         = 0
0.00.600.672 I llm_load_print_meta: vocab_only       = 0
0.00.600.672 I llm_load_print_meta: n_ctx_train      = 8192
0.00.600.673 I llm_load_print_meta: n_embd           = 2048
0.00.600.673 I llm_load_print_meta: n_layer          = 18
0.00.600.736 I llm_load_print_meta: n_head           = 8
0.00.600.742 I llm_load_print_meta: n_head_kv        = 1
0.00.600.743 I llm_load_print_meta: n_rot            = 256
0.00.600.743 I llm_load_print_meta: n_swa            = 0
0.00.600.744 I llm_load_print_meta: n_embd_head_k    = 256
0.00.600.744 I llm_load_print_meta: n_embd_head_v    = 256
0.00.600.749 I llm_load_print_meta: n_gqa            = 8
0.00.600.753 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.600.758 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.600.759 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.600.760 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.600.761 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.600.761 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.600.762 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.600.767 I llm_load_print_meta: n_ff             = 16384
0.00.600.767 I llm_load_print_meta: n_expert         = 0
0.00.600.768 I llm_load_print_meta: n_expert_used    = 0
0.00.600.768 I llm_load_print_meta: causal attn      = 1
0.00.600.769 I llm_load_print_meta: pooling type     = 0
0.00.600.769 I llm_load_print_meta: rope type        = 2
0.00.600.769 I llm_load_print_meta: rope scaling     = linear
0.00.600.771 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.600.772 I llm_load_print_meta: freq_scale_train = 1
0.00.600.772 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.600.772 I llm_load_print_meta: rope_finetuned   = unknown
0.00.600.773 I llm_load_print_meta: ssm_d_conv       = 0
0.00.600.773 I llm_load_print_meta: ssm_d_inner      = 0
0.00.600.773 I llm_load_print_meta: ssm_d_state      = 0
0.00.600.774 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.600.774 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.600.775 I llm_load_print_meta: model type       = 2B
0.00.600.776 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.600.776 I llm_load_print_meta: model params     = 2.51 B
0.00.600.777 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.600.777 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.600.778 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.600.778 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.600.779 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.600.779 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.600.779 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.600.780 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.600.785 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.600.786 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.600.787 I llm_load_print_meta: max token length = 93
0.00.600.949 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.662.381 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.667.947 I llama_new_context_with_model: n_ctx      = 8192
0.00.667.954 I llama_new_context_with_model: n_batch    = 2048
0.00.667.954 I llama_new_context_with_model: n_ubatch   = 512
0.00.667.955 I llama_new_context_with_model: flash_attn = 0
0.00.667.957 I llama_new_context_with_model: freq_base  = 10000.0
0.00.667.958 I llama_new_context_with_model: freq_scale = 1
0.00.697.425 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.697.472 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.697.588 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.698.981 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.698.986 I llama_new_context_with_model: graph nodes  = 601
0.00.698.986 I llama_new_context_with_model: graph splits = 1
0.00.699.002 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.586 I main: llama threadpool init, n_threads = 4
0.01.280.597 I 
0.01.280.707 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.711 I 
0.01.280.943 I sampler seed: 464728529
0.01.280.956 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.280.963 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.280.964 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.280.964 I 
 increasities and the ways they are resolved in the novel.

**Answer:**

**The novel explores the themes of societal constraints, individual freedom, and the

0.12.327.364 I llama_perf_sampler_print:    sampling time =      48.00 ms /    33 runs   (    1.45 ms per token,   687.57 tokens per second)
0.12.327.367 I llama_perf_context_print:        load time =    1277.74 ms
0.12.327.368 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.327.370 I llama_perf_context_print:        eval time =   10953.05 ms /    32 runs   (  342.28 ms per token,     2.92 tokens per second)
0.12.327.378 I llama_perf_context_print:       total time =   11046.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m2.691s
user	49m57.587s
sys	0m6.457s
