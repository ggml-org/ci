+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.551 I build: 4054 (8fc393f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.745 I main: llama backend init
0.00.000.880 I main: load the model and apply lora adapter, if any
0.00.021.520 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.530 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.538 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.543 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.544 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.547 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.548 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.549 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.550 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.550 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.551 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.555 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.555 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.556 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.556 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.557 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.208 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.033 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.876 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.882 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.882 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.883 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.884 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.884 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.885 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.888 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.888 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.889 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.890 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.891 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.893 I llama_model_loader: - type  f32:   37 tensors
0.00.131.894 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.446 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.236 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.739 I llm_load_vocab: special tokens cache size = 5
0.00.262.987 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.005 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.006 I llm_load_print_meta: arch             = gemma
0.00.263.007 I llm_load_print_meta: vocab type       = SPM
0.00.263.008 I llm_load_print_meta: n_vocab          = 256000
0.00.263.008 I llm_load_print_meta: n_merges         = 0
0.00.263.009 I llm_load_print_meta: vocab_only       = 0
0.00.263.009 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.009 I llm_load_print_meta: n_embd           = 2048
0.00.263.010 I llm_load_print_meta: n_layer          = 18
0.00.263.022 I llm_load_print_meta: n_head           = 8
0.00.263.023 I llm_load_print_meta: n_head_kv        = 1
0.00.263.024 I llm_load_print_meta: n_rot            = 256
0.00.263.024 I llm_load_print_meta: n_swa            = 0
0.00.263.024 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.025 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.025 I llm_load_print_meta: n_gqa            = 8
0.00.263.026 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.027 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.028 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.029 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.030 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.030 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.030 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.031 I llm_load_print_meta: n_ff             = 16384
0.00.263.031 I llm_load_print_meta: n_expert         = 0
0.00.263.032 I llm_load_print_meta: n_expert_used    = 0
0.00.263.032 I llm_load_print_meta: causal attn      = 1
0.00.263.033 I llm_load_print_meta: pooling type     = 0
0.00.263.033 I llm_load_print_meta: rope type        = 2
0.00.263.033 I llm_load_print_meta: rope scaling     = linear
0.00.263.035 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.035 I llm_load_print_meta: freq_scale_train = 1
0.00.263.036 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.036 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.036 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.037 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.037 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.037 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.037 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.038 I llm_load_print_meta: model type       = 2B
0.00.263.038 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.039 I llm_load_print_meta: model params     = 2.51 B
0.00.263.040 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.041 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.041 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.042 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.042 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.042 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.043 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.043 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.043 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.044 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.044 I llm_load_print_meta: max token length = 93
0.00.362.292 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.362.297 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.362.298 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.362.298 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.362.299 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.362.299 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.367.576 I llama_new_context_with_model: n_seq_max     = 1
0.00.367.583 I llama_new_context_with_model: n_ctx         = 4096
0.00.367.583 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.367.583 I llama_new_context_with_model: n_batch       = 2048
0.00.367.584 I llama_new_context_with_model: n_ubatch      = 512
0.00.367.584 I llama_new_context_with_model: flash_attn    = 0
0.00.367.586 I llama_new_context_with_model: freq_base     = 10000.0
0.00.367.587 I llama_new_context_with_model: freq_scale    = 1
0.00.367.588 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.382.480 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.382.493 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.382.577 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.383.786 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.383.792 I llama_new_context_with_model: graph nodes  = 601
0.00.383.793 I llama_new_context_with_model: graph splits = 1
0.00.383.794 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.468.668 I main: llama threadpool init, n_threads = 4
0.00.468.682 I 
0.00.468.759 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.468.762 I 
0.00.468.804 I sampler seed: 1933989073
0.00.468.816 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.468.825 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.468.826 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.468.827 I 
 increabling vocals and an energetic rhythm section weave a hypnotic spell that carries you away to a realm of pure escapism. [end of text]


0.02.212.150 I llama_perf_sampler_print:    sampling time =       3.63 ms /    26 runs   (    0.14 ms per token,  7154.65 tokens per second)
0.02.212.153 I llama_perf_context_print:        load time =     467.77 ms
0.02.212.154 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.212.155 I llama_perf_context_print:        eval time =    1729.00 ms /    25 runs   (   69.16 ms per token,    14.46 tokens per second)
0.02.212.156 I llama_perf_context_print:       total time =    1743.49 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.565 I build: 4054 (8fc393f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.760 I main: llama backend init
0.00.000.897 I main: load the model and apply lora adapter, if any
0.00.021.463 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.478 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.488 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.489 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.493 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.494 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.495 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.496 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.497 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.498 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.503 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.503 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.504 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.504 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.505 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.660 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.012 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.849 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.854 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.855 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.856 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.856 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.857 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.858 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.860 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.861 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.862 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.863 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.864 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.867 I llama_model_loader: - type  f32:   37 tensors
0.00.131.868 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.783 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.536 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.044 I llm_load_vocab: special tokens cache size = 5
0.00.260.216 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.230 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.230 I llm_load_print_meta: arch             = gemma
0.00.260.231 I llm_load_print_meta: vocab type       = SPM
0.00.260.231 I llm_load_print_meta: n_vocab          = 256000
0.00.260.232 I llm_load_print_meta: n_merges         = 0
0.00.260.232 I llm_load_print_meta: vocab_only       = 0
0.00.260.232 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.233 I llm_load_print_meta: n_embd           = 2048
0.00.260.233 I llm_load_print_meta: n_layer          = 18
0.00.260.245 I llm_load_print_meta: n_head           = 8
0.00.260.246 I llm_load_print_meta: n_head_kv        = 1
0.00.260.246 I llm_load_print_meta: n_rot            = 256
0.00.260.247 I llm_load_print_meta: n_swa            = 0
0.00.260.247 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.247 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.248 I llm_load_print_meta: n_gqa            = 8
0.00.260.249 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.250 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.251 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.252 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.253 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.253 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.253 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.254 I llm_load_print_meta: n_ff             = 16384
0.00.260.255 I llm_load_print_meta: n_expert         = 0
0.00.260.255 I llm_load_print_meta: n_expert_used    = 0
0.00.260.255 I llm_load_print_meta: causal attn      = 1
0.00.260.255 I llm_load_print_meta: pooling type     = 0
0.00.260.256 I llm_load_print_meta: rope type        = 2
0.00.260.256 I llm_load_print_meta: rope scaling     = linear
0.00.260.257 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.258 I llm_load_print_meta: freq_scale_train = 1
0.00.260.258 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.259 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.259 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.259 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.259 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.259 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.260 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.260 I llm_load_print_meta: model type       = 2B
0.00.260.261 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.261 I llm_load_print_meta: model params     = 2.51 B
0.00.260.262 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.263 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.263 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.263 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.264 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.264 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.264 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.265 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.265 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.265 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.266 I llm_load_print_meta: max token length = 93
0.00.356.775 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.362.073 I llama_new_context_with_model: n_seq_max     = 1
0.00.362.080 I llama_new_context_with_model: n_ctx         = 4096
0.00.362.081 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.362.081 I llama_new_context_with_model: n_batch       = 2048
0.00.362.082 I llama_new_context_with_model: n_ubatch      = 512
0.00.362.083 I llama_new_context_with_model: flash_attn    = 0
0.00.362.086 I llama_new_context_with_model: freq_base     = 10000.0
0.00.362.087 I llama_new_context_with_model: freq_scale    = 1
0.00.362.088 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.378.034 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.378.050 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.378.147 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.379.397 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.379.401 I llama_new_context_with_model: graph nodes  = 601
0.00.379.402 I llama_new_context_with_model: graph splits = 1
0.00.379.403 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.460.815 I main: llama threadpool init, n_threads = 4
0.00.460.828 I 
0.00.460.910 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.460.914 I 
0.00.460.972 I sampler seed: 4021220134
0.00.460.984 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.460.989 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.460.990 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.460.990 I 
 increamically.

I am unable to generate a response due to the lack of context and information required to provide a meaningful and relevant answer. Please provide me with

0.02.641.273 I llama_perf_sampler_print:    sampling time =       4.92 ms /    33 runs   (    0.15 ms per token,  6704.59 tokens per second)
0.02.641.275 I llama_perf_context_print:        load time =     459.90 ms
0.02.641.277 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.641.280 I llama_perf_context_print:        eval time =    2161.95 ms /    32 runs   (   67.56 ms per token,    14.80 tokens per second)
0.02.641.281 I llama_perf_context_print:       total time =    2180.47 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.575 I build: 4054 (8fc393f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.792 I main: llama backend init
0.00.000.930 I main: load the model and apply lora adapter, if any
0.00.021.700 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.709 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.717 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.726 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.730 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.735 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.736 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.737 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.737 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.738 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.738 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.742 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.743 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.744 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.745 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.905 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.160 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.097 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.105 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.105 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.106 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.107 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.108 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.108 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.120 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.120 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.121 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.122 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.123 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.127 I llama_model_loader: - type  f32:   37 tensors
0.00.132.127 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.606 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.248 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.818 I llm_load_vocab: special tokens cache size = 5
0.00.269.232 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.249 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.250 I llm_load_print_meta: arch             = gemma
0.00.269.251 I llm_load_print_meta: vocab type       = SPM
0.00.269.251 I llm_load_print_meta: n_vocab          = 256000
0.00.269.252 I llm_load_print_meta: n_merges         = 0
0.00.269.269 I llm_load_print_meta: vocab_only       = 0
0.00.269.270 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.270 I llm_load_print_meta: n_embd           = 2048
0.00.269.270 I llm_load_print_meta: n_layer          = 18
0.00.269.283 I llm_load_print_meta: n_head           = 8
0.00.269.284 I llm_load_print_meta: n_head_kv        = 1
0.00.269.285 I llm_load_print_meta: n_rot            = 256
0.00.269.285 I llm_load_print_meta: n_swa            = 0
0.00.269.286 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.287 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.288 I llm_load_print_meta: n_gqa            = 8
0.00.269.289 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.290 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.291 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.293 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.293 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.294 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.294 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.295 I llm_load_print_meta: n_ff             = 16384
0.00.269.296 I llm_load_print_meta: n_expert         = 0
0.00.269.296 I llm_load_print_meta: n_expert_used    = 0
0.00.269.297 I llm_load_print_meta: causal attn      = 1
0.00.269.297 I llm_load_print_meta: pooling type     = 0
0.00.269.297 I llm_load_print_meta: rope type        = 2
0.00.269.298 I llm_load_print_meta: rope scaling     = linear
0.00.269.300 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.300 I llm_load_print_meta: freq_scale_train = 1
0.00.269.301 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.301 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.301 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.302 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.302 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.303 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.303 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.304 I llm_load_print_meta: model type       = 2B
0.00.269.305 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.306 I llm_load_print_meta: model params     = 2.51 B
0.00.269.307 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.307 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.308 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.308 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.309 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.309 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.309 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.310 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.310 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.310 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.311 I llm_load_print_meta: max token length = 93
0.00.354.644 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.354.652 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.653 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.354.654 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.354.654 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.354.655 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.861 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.867 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.868 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.868 I llama_new_context_with_model: n_batch       = 2048
0.00.359.868 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.869 I llama_new_context_with_model: flash_attn    = 0
0.00.359.871 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.872 I llama_new_context_with_model: freq_scale    = 1
0.00.359.873 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.235 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.249 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.348 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.583 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.587 I llama_new_context_with_model: graph nodes  = 601
0.00.376.588 I llama_new_context_with_model: graph splits = 1
0.00.376.589 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.610 I main: llama threadpool init, n_threads = 4
0.00.461.622 I 
0.00.461.704 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.461.708 I 
0.00.461.761 I sampler seed: 3987064515
0.00.461.771 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.461.774 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.461.775 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.461.775 I 
 increasively:

**Assistant**

**Assistant**

**Senior Assistant**

**Senior Assistant**

**Principal Assistant**

**Principal Assistant**



0.02.615.671 I llama_perf_sampler_print:    sampling time =       4.86 ms /    33 runs   (    0.15 ms per token,  6787.33 tokens per second)
0.02.615.673 I llama_perf_context_print:        load time =     460.66 ms
0.02.615.674 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.615.676 I llama_perf_context_print:        eval time =    2134.62 ms /    32 runs   (   66.71 ms per token,    14.99 tokens per second)
0.02.615.677 I llama_perf_context_print:       total time =    2154.07 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.614 I build: 4054 (8fc393f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.847 I main: llama backend init
0.00.001.014 I main: load the model and apply lora adapter, if any
0.00.021.720 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.729 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.737 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.743 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.748 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.751 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.752 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.752 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.753 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.753 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.758 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.758 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.759 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.760 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.761 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.149 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.177 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.042 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.050 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.050 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.051 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.052 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.053 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.054 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.057 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.058 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.059 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.060 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.061 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.064 I llama_model_loader: - type  f32:   37 tensors
0.00.132.065 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.973 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.825 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.240.339 I llm_load_vocab: special tokens cache size = 5
0.00.261.623 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.638 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.639 I llm_load_print_meta: arch             = gemma
0.00.261.639 I llm_load_print_meta: vocab type       = SPM
0.00.261.641 I llm_load_print_meta: n_vocab          = 256000
0.00.261.642 I llm_load_print_meta: n_merges         = 0
0.00.261.642 I llm_load_print_meta: vocab_only       = 0
0.00.261.643 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.643 I llm_load_print_meta: n_embd           = 2048
0.00.261.643 I llm_load_print_meta: n_layer          = 18
0.00.261.654 I llm_load_print_meta: n_head           = 8
0.00.261.656 I llm_load_print_meta: n_head_kv        = 1
0.00.261.657 I llm_load_print_meta: n_rot            = 256
0.00.261.657 I llm_load_print_meta: n_swa            = 0
0.00.261.657 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.658 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.659 I llm_load_print_meta: n_gqa            = 8
0.00.261.661 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.662 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.662 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.663 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.664 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.664 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.664 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.666 I llm_load_print_meta: n_ff             = 16384
0.00.261.666 I llm_load_print_meta: n_expert         = 0
0.00.261.666 I llm_load_print_meta: n_expert_used    = 0
0.00.261.667 I llm_load_print_meta: causal attn      = 1
0.00.261.668 I llm_load_print_meta: pooling type     = 0
0.00.261.668 I llm_load_print_meta: rope type        = 2
0.00.261.668 I llm_load_print_meta: rope scaling     = linear
0.00.261.670 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.671 I llm_load_print_meta: freq_scale_train = 1
0.00.261.671 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.671 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.672 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.672 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.673 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.673 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.673 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.674 I llm_load_print_meta: model type       = 2B
0.00.261.675 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.676 I llm_load_print_meta: model params     = 2.51 B
0.00.261.677 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.677 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.678 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.678 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.679 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.679 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.679 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.680 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.680 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.681 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.682 I llm_load_print_meta: max token length = 93
0.00.332.672 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.332.680 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.338.037 I llama_new_context_with_model: n_seq_max     = 1
0.00.338.043 I llama_new_context_with_model: n_ctx         = 4096
0.00.338.044 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.338.044 I llama_new_context_with_model: n_batch       = 2048
0.00.338.044 I llama_new_context_with_model: n_ubatch      = 512
0.00.338.045 I llama_new_context_with_model: flash_attn    = 0
0.00.338.047 I llama_new_context_with_model: freq_base     = 10000.0
0.00.338.048 I llama_new_context_with_model: freq_scale    = 1
0.00.338.049 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.353.566 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.353.579 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.353.675 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.354.920 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.354.928 I llama_new_context_with_model: graph nodes  = 601
0.00.354.928 I llama_new_context_with_model: graph splits = 1
0.00.354.930 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.993 I main: llama threadpool init, n_threads = 4
0.00.441.007 I 
0.00.441.097 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.441.102 I 
0.00.441.148 I sampler seed: 117046143
0.00.441.164 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.441.176 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.441.177 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.441.178 I 
 increasities and the role of the media.

**Introduction:**

The contemporary media landscape is characterized by a constant flow of information, often from unreliable sources.

0.02.869.664 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6555.42 tokens per second)
0.02.869.667 I llama_perf_context_print:        load time =     439.94 ms
0.02.869.668 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.869.669 I llama_perf_context_print:        eval time =    2409.10 ms /    32 runs   (   75.28 ms per token,    13.28 tokens per second)
0.02.869.670 I llama_perf_context_print:       total time =    2428.68 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.970s
user	0m36.805s
sys	0m9.348s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4054 (8fc393f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31957.72 ms
main:    total time = 31957.72 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.525 I build: 4054 (8fc393f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.883 I main: load the model and apply lora adapter, if any
0.00.021.451 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.459 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.467 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.475 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.476 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.479 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.480 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.481 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.482 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.482 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.483 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.486 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.486 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.487 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.487 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.488 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.566 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.392 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.202 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.208 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.208 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.209 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.209 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.210 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.211 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.213 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.213 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.214 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.216 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.217 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.219 I llama_model_loader: - type  f32:   37 tensors
0.00.131.220 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.220 I llama_model_loader: - type q6_K:   19 tensors
0.00.200.739 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.312 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.238.774 I llm_load_vocab: special tokens cache size = 5
0.00.259.822 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.835 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.836 I llm_load_print_meta: arch             = gemma
0.00.259.836 I llm_load_print_meta: vocab type       = SPM
0.00.259.837 I llm_load_print_meta: n_vocab          = 256000
0.00.259.837 I llm_load_print_meta: n_merges         = 0
0.00.259.837 I llm_load_print_meta: vocab_only       = 0
0.00.259.838 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.838 I llm_load_print_meta: n_embd           = 2048
0.00.259.838 I llm_load_print_meta: n_layer          = 18
0.00.259.850 I llm_load_print_meta: n_head           = 8
0.00.259.851 I llm_load_print_meta: n_head_kv        = 1
0.00.259.852 I llm_load_print_meta: n_rot            = 256
0.00.259.852 I llm_load_print_meta: n_swa            = 0
0.00.259.852 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.852 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.853 I llm_load_print_meta: n_gqa            = 8
0.00.259.854 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.855 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.856 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.858 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.858 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.859 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.859 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.860 I llm_load_print_meta: n_ff             = 16384
0.00.259.861 I llm_load_print_meta: n_expert         = 0
0.00.259.861 I llm_load_print_meta: n_expert_used    = 0
0.00.259.862 I llm_load_print_meta: causal attn      = 1
0.00.259.862 I llm_load_print_meta: pooling type     = 0
0.00.259.862 I llm_load_print_meta: rope type        = 2
0.00.259.863 I llm_load_print_meta: rope scaling     = linear
0.00.259.864 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.865 I llm_load_print_meta: freq_scale_train = 1
0.00.259.865 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.865 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.866 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.866 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.866 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.867 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.867 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.867 I llm_load_print_meta: model type       = 2B
0.00.259.868 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.259.869 I llm_load_print_meta: model params     = 2.51 B
0.00.259.870 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.259.870 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.870 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.871 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.871 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.871 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.872 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.872 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.872 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.873 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.873 I llm_load_print_meta: max token length = 93
0.00.321.321 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.321.326 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.321.326 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.321.327 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.321.328 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.321.328 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.326.586 I llama_new_context_with_model: n_seq_max     = 1
0.00.326.593 I llama_new_context_with_model: n_ctx         = 4096
0.00.326.593 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.326.593 I llama_new_context_with_model: n_batch       = 2048
0.00.326.594 I llama_new_context_with_model: n_ubatch      = 512
0.00.326.594 I llama_new_context_with_model: flash_attn    = 0
0.00.326.596 I llama_new_context_with_model: freq_base     = 10000.0
0.00.326.597 I llama_new_context_with_model: freq_scale    = 1
0.00.326.598 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.341.495 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.341.507 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.341.595 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.342.814 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.342.820 I llama_new_context_with_model: graph nodes  = 601
0.00.342.821 I llama_new_context_with_model: graph splits = 1
0.00.342.822 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.418.214 I main: llama threadpool init, n_threads = 4
0.00.418.227 I 
0.00.418.302 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.418.305 I 
0.00.418.346 I sampler seed: 1006355803
0.00.418.357 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.418.360 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.418.361 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.418.361 I 
 seconally. [end of text]


0.00.618.026 I llama_perf_sampler_print:    sampling time =       0.60 ms /     5 runs   (    0.12 ms per token,  8278.15 tokens per second)
0.00.618.029 I llama_perf_context_print:        load time =     417.31 ms
0.00.618.030 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.618.031 I llama_perf_context_print:        eval time =     196.48 ms /     4 runs   (   49.12 ms per token,    20.36 tokens per second)
0.00.618.032 I llama_perf_context_print:       total time =     199.82 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4054 (8fc393f2)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32116.19 ms
main:    total time = 32116.19 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.527 I build: 4054 (8fc393f2) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.852 I main: load the model and apply lora adapter, if any
0.00.021.339 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.354 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.361 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.364 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.368 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.369 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.370 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.371 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.371 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.371 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.375 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.376 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.376 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.377 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.378 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.571 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.005 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.946 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.953 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.954 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.955 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.955 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.956 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.957 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.960 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.960 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.964 I llama_model_loader: - type  f32:   37 tensors
0.00.131.966 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.966 I llama_model_loader: - type q6_K:   19 tensors
0.00.206.555 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.732 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.250 I llm_load_vocab: special tokens cache size = 5
0.00.267.360 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.376 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.377 I llm_load_print_meta: arch             = gemma
0.00.267.378 I llm_load_print_meta: vocab type       = SPM
0.00.267.378 I llm_load_print_meta: n_vocab          = 256000
0.00.267.379 I llm_load_print_meta: n_merges         = 0
0.00.267.379 I llm_load_print_meta: vocab_only       = 0
0.00.267.379 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.380 I llm_load_print_meta: n_embd           = 2048
0.00.267.380 I llm_load_print_meta: n_layer          = 18
0.00.267.391 I llm_load_print_meta: n_head           = 8
0.00.267.392 I llm_load_print_meta: n_head_kv        = 1
0.00.267.392 I llm_load_print_meta: n_rot            = 256
0.00.267.393 I llm_load_print_meta: n_swa            = 0
0.00.267.393 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.394 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.395 I llm_load_print_meta: n_gqa            = 8
0.00.267.396 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.397 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.397 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.399 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.399 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.400 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.400 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.401 I llm_load_print_meta: n_ff             = 16384
0.00.267.401 I llm_load_print_meta: n_expert         = 0
0.00.267.401 I llm_load_print_meta: n_expert_used    = 0
0.00.267.402 I llm_load_print_meta: causal attn      = 1
0.00.267.402 I llm_load_print_meta: pooling type     = 0
0.00.267.402 I llm_load_print_meta: rope type        = 2
0.00.267.403 I llm_load_print_meta: rope scaling     = linear
0.00.267.404 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.405 I llm_load_print_meta: freq_scale_train = 1
0.00.267.405 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.406 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.406 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.406 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.407 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.407 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.407 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.408 I llm_load_print_meta: model type       = 2B
0.00.267.408 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.409 I llm_load_print_meta: model params     = 2.51 B
0.00.267.410 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.410 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.410 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.411 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.411 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.411 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.412 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.412 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.412 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.413 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.413 I llm_load_print_meta: max token length = 93
0.00.325.510 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.330.665 I llama_new_context_with_model: n_seq_max     = 1
0.00.330.670 I llama_new_context_with_model: n_ctx         = 4096
0.00.330.671 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.330.671 I llama_new_context_with_model: n_batch       = 2048
0.00.330.672 I llama_new_context_with_model: n_ubatch      = 512
0.00.330.672 I llama_new_context_with_model: flash_attn    = 0
0.00.330.674 I llama_new_context_with_model: freq_base     = 10000.0
0.00.330.675 I llama_new_context_with_model: freq_scale    = 1
0.00.330.676 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.346.011 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.346.026 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.346.113 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.352 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.347.359 I llama_new_context_with_model: graph nodes  = 601
0.00.347.360 I llama_new_context_with_model: graph splits = 1
0.00.347.361 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.421.144 I main: llama threadpool init, n_threads = 4
0.00.421.158 I 
0.00.421.232 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.421.235 I 
0.00.421.274 I sampler seed: 3494595177
0.00.421.286 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.421.289 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.421.289 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.421.290 I 
 maneuvously. The sky roared in anger, the wind howled like a banshee, and rain lashed the ground in a torrent.

What is the

0.01.976.420 I llama_perf_sampler_print:    sampling time =       4.87 ms /    33 runs   (    0.15 ms per token,  6778.96 tokens per second)
0.01.976.423 I llama_perf_context_print:        load time =     420.27 ms
0.01.976.424 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.976.426 I llama_perf_context_print:        eval time =    1536.70 ms /    32 runs   (   48.02 ms per token,    20.82 tokens per second)
0.01.976.428 I llama_perf_context_print:       total time =    1555.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m9.833s
user	8m8.904s
sys	0m6.677s
