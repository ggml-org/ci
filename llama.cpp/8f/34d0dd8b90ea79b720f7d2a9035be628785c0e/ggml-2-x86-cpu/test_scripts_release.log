+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.169 I build: 4362 (8f34d0dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.364 I main: llama backend init
0.00.000.371 I main: load the model and apply lora adapter, if any
0.00.020.646 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.656 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.663 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.672 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.676 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.679 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.680 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.680 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.681 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.682 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.683 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.687 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.687 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.688 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.688 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.689 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.581 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.628 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.425 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.431 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.432 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.433 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.433 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.434 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.435 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.437 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.438 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.438 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.439 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.439 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.442 I llama_model_loader: - type  f32:   37 tensors
0.00.131.443 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.508 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.048 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.612 I llm_load_vocab: special tokens cache size = 5
0.00.270.403 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.420 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.421 I llm_load_print_meta: arch             = gemma
0.00.270.422 I llm_load_print_meta: vocab type       = SPM
0.00.270.422 I llm_load_print_meta: n_vocab          = 256000
0.00.270.423 I llm_load_print_meta: n_merges         = 0
0.00.270.423 I llm_load_print_meta: vocab_only       = 0
0.00.270.424 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.424 I llm_load_print_meta: n_embd           = 2048
0.00.270.424 I llm_load_print_meta: n_layer          = 18
0.00.270.435 I llm_load_print_meta: n_head           = 8
0.00.270.436 I llm_load_print_meta: n_head_kv        = 1
0.00.270.437 I llm_load_print_meta: n_rot            = 256
0.00.270.437 I llm_load_print_meta: n_swa            = 0
0.00.270.437 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.438 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.439 I llm_load_print_meta: n_gqa            = 8
0.00.270.440 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.441 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.442 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.443 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.443 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.443 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.444 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.445 I llm_load_print_meta: n_ff             = 16384
0.00.270.445 I llm_load_print_meta: n_expert         = 0
0.00.270.445 I llm_load_print_meta: n_expert_used    = 0
0.00.270.445 I llm_load_print_meta: causal attn      = 1
0.00.270.446 I llm_load_print_meta: pooling type     = 0
0.00.270.446 I llm_load_print_meta: rope type        = 2
0.00.270.446 I llm_load_print_meta: rope scaling     = linear
0.00.270.448 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.448 I llm_load_print_meta: freq_scale_train = 1
0.00.270.449 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.449 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.449 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.449 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.450 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.450 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.450 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.451 I llm_load_print_meta: model type       = 2B
0.00.270.451 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.452 I llm_load_print_meta: model params     = 2.51 B
0.00.270.453 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.453 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.453 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.454 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.454 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.455 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.455 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.455 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.456 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.456 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.456 I llm_load_print_meta: max token length = 93
0.00.371.470 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.371.479 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.371.480 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.371.481 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.371.481 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.371.482 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.376.685 I llama_new_context_with_model: n_seq_max     = 1
0.00.376.691 I llama_new_context_with_model: n_ctx         = 4096
0.00.376.692 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.376.692 I llama_new_context_with_model: n_batch       = 2048
0.00.376.693 I llama_new_context_with_model: n_ubatch      = 512
0.00.376.693 I llama_new_context_with_model: flash_attn    = 0
0.00.376.696 I llama_new_context_with_model: freq_base     = 10000.0
0.00.376.697 I llama_new_context_with_model: freq_scale    = 1
0.00.376.698 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.376.719 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.391.259 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.391.271 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.391.362 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.392.628 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.392.635 I llama_new_context_with_model: graph nodes  = 601
0.00.392.635 I llama_new_context_with_model: graph splits = 1
0.00.392.638 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.392.638 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.478.841 I main: llama threadpool init, n_threads = 4
0.00.478.856 I 
0.00.478.929 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.478.932 I 
0.00.478.977 I sampler seed: 3460449283
0.00.478.989 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.479.006 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.479.009 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.479.009 I 
 increably.

The provided text does not contain any information about the specific pronunciation of "incredibly," so I am unable to answer this question from the provided

0.02.745.094 I llama_perf_sampler_print:    sampling time =       5.45 ms /    33 runs   (    0.17 ms per token,  6056.16 tokens per second)
0.02.745.097 I llama_perf_context_print:        load time =     478.45 ms
0.02.745.098 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.745.099 I llama_perf_context_print:        eval time =    2246.55 ms /    32 runs   (   70.20 ms per token,    14.24 tokens per second)
0.02.745.100 I llama_perf_context_print:       total time =    2266.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.483 I build: 4362 (8f34d0dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.690 I main: llama backend init
0.00.000.698 I main: load the model and apply lora adapter, if any
0.00.020.939 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.957 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.968 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.974 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.978 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.980 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.980 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.981 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.982 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.983 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.988 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.989 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.990 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.991 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.992 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.413 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.790 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.694 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.702 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.703 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.704 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.704 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.705 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.706 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.709 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.709 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.711 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.712 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.713 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.716 I llama_model_loader: - type  f32:   37 tensors
0.00.132.717 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.653 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.371 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.252.906 I llm_load_vocab: special tokens cache size = 5
0.00.273.809 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.273.824 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.273.825 I llm_load_print_meta: arch             = gemma
0.00.273.826 I llm_load_print_meta: vocab type       = SPM
0.00.273.826 I llm_load_print_meta: n_vocab          = 256000
0.00.273.827 I llm_load_print_meta: n_merges         = 0
0.00.273.828 I llm_load_print_meta: vocab_only       = 0
0.00.273.828 I llm_load_print_meta: n_ctx_train      = 8192
0.00.273.828 I llm_load_print_meta: n_embd           = 2048
0.00.273.828 I llm_load_print_meta: n_layer          = 18
0.00.273.840 I llm_load_print_meta: n_head           = 8
0.00.273.841 I llm_load_print_meta: n_head_kv        = 1
0.00.273.841 I llm_load_print_meta: n_rot            = 256
0.00.273.842 I llm_load_print_meta: n_swa            = 0
0.00.273.842 I llm_load_print_meta: n_embd_head_k    = 256
0.00.273.842 I llm_load_print_meta: n_embd_head_v    = 256
0.00.273.843 I llm_load_print_meta: n_gqa            = 8
0.00.273.844 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.273.845 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.273.846 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.273.847 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.273.847 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.273.847 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.273.848 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.273.848 I llm_load_print_meta: n_ff             = 16384
0.00.273.849 I llm_load_print_meta: n_expert         = 0
0.00.273.849 I llm_load_print_meta: n_expert_used    = 0
0.00.273.849 I llm_load_print_meta: causal attn      = 1
0.00.273.850 I llm_load_print_meta: pooling type     = 0
0.00.273.851 I llm_load_print_meta: rope type        = 2
0.00.273.852 I llm_load_print_meta: rope scaling     = linear
0.00.273.853 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.273.854 I llm_load_print_meta: freq_scale_train = 1
0.00.273.854 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.273.854 I llm_load_print_meta: rope_finetuned   = unknown
0.00.273.855 I llm_load_print_meta: ssm_d_conv       = 0
0.00.273.856 I llm_load_print_meta: ssm_d_inner      = 0
0.00.273.856 I llm_load_print_meta: ssm_d_state      = 0
0.00.273.856 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.273.856 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.273.857 I llm_load_print_meta: model type       = 2B
0.00.273.858 I llm_load_print_meta: model ftype      = Q8_0
0.00.273.859 I llm_load_print_meta: model params     = 2.51 B
0.00.273.859 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.273.860 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.273.860 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.273.861 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.273.861 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.273.862 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.273.862 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.273.863 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.273.864 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.273.864 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.273.865 I llm_load_print_meta: max token length = 93
0.00.367.977 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.373.116 I llama_new_context_with_model: n_seq_max     = 1
0.00.373.121 I llama_new_context_with_model: n_ctx         = 4096
0.00.373.122 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.373.122 I llama_new_context_with_model: n_batch       = 2048
0.00.373.123 I llama_new_context_with_model: n_ubatch      = 512
0.00.373.123 I llama_new_context_with_model: flash_attn    = 0
0.00.373.126 I llama_new_context_with_model: freq_base     = 10000.0
0.00.373.126 I llama_new_context_with_model: freq_scale    = 1
0.00.373.127 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.149 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.387.800 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.387.816 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.387.917 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.389.141 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.389.147 I llama_new_context_with_model: graph nodes  = 601
0.00.389.148 I llama_new_context_with_model: graph splits = 1
0.00.389.151 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.389.151 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.471.086 I main: llama threadpool init, n_threads = 4
0.00.471.102 I 
0.00.471.185 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.471.189 I 
0.00.471.241 I sampler seed: 388085177
0.00.471.253 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.471.262 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.471.264 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.471.264 I 
 increasels and the associated narratives reveal the deep-rooted anxieties and aspirations of individuals within a specific culture.

**Question:** What specific anxieties and aspirations are reflected

0.02.650.489 I llama_perf_sampler_print:    sampling time =       5.63 ms /    33 runs   (    0.17 ms per token,  5863.54 tokens per second)
0.02.650.491 I llama_perf_context_print:        load time =     470.37 ms
0.02.650.492 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.650.494 I llama_perf_context_print:        eval time =    2159.90 ms /    32 runs   (   67.50 ms per token,    14.82 tokens per second)
0.02.650.494 I llama_perf_context_print:       total time =    2179.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.180 I build: 4362 (8f34d0dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.370 I main: llama backend init
0.00.000.376 I main: load the model and apply lora adapter, if any
0.00.020.707 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.020.716 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.020.724 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.733 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.734 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.740 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.741 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.741 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.742 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.743 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.743 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.748 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.749 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.750 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.750 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.751 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.962 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.447 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.302 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.308 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.309 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.310 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.311 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.312 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.312 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.314 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.315 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.316 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.317 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.318 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.322 I llama_model_loader: - type  f32:   37 tensors
0.00.132.324 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.926 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.143 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.721 I llm_load_vocab: special tokens cache size = 5
0.00.269.715 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.730 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.730 I llm_load_print_meta: arch             = gemma
0.00.269.731 I llm_load_print_meta: vocab type       = SPM
0.00.269.731 I llm_load_print_meta: n_vocab          = 256000
0.00.269.732 I llm_load_print_meta: n_merges         = 0
0.00.269.732 I llm_load_print_meta: vocab_only       = 0
0.00.269.733 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.733 I llm_load_print_meta: n_embd           = 2048
0.00.269.733 I llm_load_print_meta: n_layer          = 18
0.00.269.744 I llm_load_print_meta: n_head           = 8
0.00.269.745 I llm_load_print_meta: n_head_kv        = 1
0.00.269.746 I llm_load_print_meta: n_rot            = 256
0.00.269.746 I llm_load_print_meta: n_swa            = 0
0.00.269.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.748 I llm_load_print_meta: n_gqa            = 8
0.00.269.749 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.750 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.752 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.752 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.753 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.754 I llm_load_print_meta: n_ff             = 16384
0.00.269.754 I llm_load_print_meta: n_expert         = 0
0.00.269.754 I llm_load_print_meta: n_expert_used    = 0
0.00.269.755 I llm_load_print_meta: causal attn      = 1
0.00.269.755 I llm_load_print_meta: pooling type     = 0
0.00.269.755 I llm_load_print_meta: rope type        = 2
0.00.269.755 I llm_load_print_meta: rope scaling     = linear
0.00.269.757 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.758 I llm_load_print_meta: freq_scale_train = 1
0.00.269.758 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.758 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.758 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.759 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.759 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.759 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.760 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.760 I llm_load_print_meta: model type       = 2B
0.00.269.761 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.761 I llm_load_print_meta: model params     = 2.51 B
0.00.269.762 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.763 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.763 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.763 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.764 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.764 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.764 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.765 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.765 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.765 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.766 I llm_load_print_meta: max token length = 93
0.00.345.583 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.345.590 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.591 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.345.591 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.345.592 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.345.593 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.350.754 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.760 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.761 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.761 I llama_new_context_with_model: n_batch       = 2048
0.00.350.762 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.762 I llama_new_context_with_model: flash_attn    = 0
0.00.350.765 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.766 I llama_new_context_with_model: freq_scale    = 1
0.00.350.767 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.350.786 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.365.971 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.984 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.366.086 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.367.374 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.367.380 I llama_new_context_with_model: graph nodes  = 601
0.00.367.380 I llama_new_context_with_model: graph splits = 1
0.00.367.383 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.367.383 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.455.949 I main: llama threadpool init, n_threads = 4
0.00.455.965 I 
0.00.456.042 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.456.045 I 
0.00.456.111 I sampler seed: 2617017150
0.00.456.122 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.456.124 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.456.125 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.456.125 I 
 increadibly!

I'm so sorry, but I am unable to generate responses that contain inappropriate or offensive language. My purpose is to assist users with tasks

0.02.757.698 I llama_perf_sampler_print:    sampling time =       5.65 ms /    33 runs   (    0.17 ms per token,  5843.81 tokens per second)
0.02.757.701 I llama_perf_context_print:        load time =     455.56 ms
0.02.757.702 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.757.704 I llama_perf_context_print:        eval time =    2281.78 ms /    32 runs   (   71.31 ms per token,    14.02 tokens per second)
0.02.757.704 I llama_perf_context_print:       total time =    2301.76 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.536 I build: 4362 (8f34d0dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.753 I main: llama backend init
0.00.000.760 I main: load the model and apply lora adapter, if any
0.00.021.007 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.016 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.027 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.032 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.035 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.039 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.040 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.041 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.043 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.044 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.045 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.050 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.051 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.051 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.052 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.053 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.197 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.669 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.661 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.670 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.671 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.672 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.672 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.673 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.674 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.677 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.677 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.678 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.678 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.679 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.682 I llama_model_loader: - type  f32:   37 tensors
0.00.131.683 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.235 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.246.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.956 I llm_load_vocab: special tokens cache size = 5
0.00.267.731 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.750 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.750 I llm_load_print_meta: arch             = gemma
0.00.267.751 I llm_load_print_meta: vocab type       = SPM
0.00.267.751 I llm_load_print_meta: n_vocab          = 256000
0.00.267.752 I llm_load_print_meta: n_merges         = 0
0.00.267.752 I llm_load_print_meta: vocab_only       = 0
0.00.267.752 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.753 I llm_load_print_meta: n_embd           = 2048
0.00.267.753 I llm_load_print_meta: n_layer          = 18
0.00.267.763 I llm_load_print_meta: n_head           = 8
0.00.267.764 I llm_load_print_meta: n_head_kv        = 1
0.00.267.765 I llm_load_print_meta: n_rot            = 256
0.00.267.765 I llm_load_print_meta: n_swa            = 0
0.00.267.765 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.766 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.767 I llm_load_print_meta: n_gqa            = 8
0.00.267.768 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.769 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.769 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.771 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.771 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.771 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.772 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.773 I llm_load_print_meta: n_ff             = 16384
0.00.267.773 I llm_load_print_meta: n_expert         = 0
0.00.267.773 I llm_load_print_meta: n_expert_used    = 0
0.00.267.774 I llm_load_print_meta: causal attn      = 1
0.00.267.774 I llm_load_print_meta: pooling type     = 0
0.00.267.774 I llm_load_print_meta: rope type        = 2
0.00.267.775 I llm_load_print_meta: rope scaling     = linear
0.00.267.776 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.777 I llm_load_print_meta: freq_scale_train = 1
0.00.267.777 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.777 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.777 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.778 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.778 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.778 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.778 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.779 I llm_load_print_meta: model type       = 2B
0.00.267.779 I llm_load_print_meta: model ftype      = Q8_0
0.00.267.780 I llm_load_print_meta: model params     = 2.51 B
0.00.267.781 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.267.781 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.782 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.783 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.784 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.785 I llm_load_print_meta: max token length = 93
0.00.338.944 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.338.951 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.344.096 I llama_new_context_with_model: n_seq_max     = 1
0.00.344.103 I llama_new_context_with_model: n_ctx         = 4096
0.00.344.104 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.344.104 I llama_new_context_with_model: n_batch       = 2048
0.00.344.104 I llama_new_context_with_model: n_ubatch      = 512
0.00.344.105 I llama_new_context_with_model: flash_attn    = 0
0.00.344.107 I llama_new_context_with_model: freq_base     = 10000.0
0.00.344.108 I llama_new_context_with_model: freq_scale    = 1
0.00.344.109 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.344.130 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.359.054 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.067 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.159 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.418 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.425 I llama_new_context_with_model: graph nodes  = 601
0.00.360.425 I llama_new_context_with_model: graph splits = 1
0.00.360.427 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.360.428 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.448.339 I main: llama threadpool init, n_threads = 4
0.00.448.355 I 
0.00.448.431 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.448.436 I 
0.00.448.486 I sampler seed: 2568648196
0.00.448.497 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.448.504 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.448.505 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.448.505 I 
 seconary to tertiary lymphoid nodules present in the spleen.

**Comment on the clinical significance of this finding.**

This finding could potentially indicate the development of immune

0.02.904.175 I llama_perf_sampler_print:    sampling time =       5.61 ms /    33 runs   (    0.17 ms per token,  5882.35 tokens per second)
0.02.904.177 I llama_perf_context_print:        load time =     447.56 ms
0.02.904.179 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.904.180 I llama_perf_context_print:        eval time =    2435.58 ms /    32 runs   (   76.11 ms per token,    13.14 tokens per second)
0.02.904.181 I llama_perf_context_print:       total time =    2455.84 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m20.638s
user	0m39.620s
sys	0m9.487s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4362 (8f34d0dd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40251.33 ms
main:    total time = 40251.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.532 I build: 4362 (8f34d0dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.717 I main: llama backend init
0.00.000.724 I main: load the model and apply lora adapter, if any
0.00.021.381 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.391 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.399 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.408 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.412 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.416 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.417 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.417 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.418 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.419 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.419 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.423 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.423 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.424 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.424 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.425 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.332 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.980 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.797 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.804 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.805 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.806 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.806 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.808 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.809 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.812 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.813 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.814 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.814 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.816 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.819 I llama_model_loader: - type  f32:   37 tensors
0.00.131.820 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.821 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.866 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.959 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.246.533 I llm_load_vocab: special tokens cache size = 5
0.00.267.267 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.267.282 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.267.283 I llm_load_print_meta: arch             = gemma
0.00.267.284 I llm_load_print_meta: vocab type       = SPM
0.00.267.284 I llm_load_print_meta: n_vocab          = 256000
0.00.267.284 I llm_load_print_meta: n_merges         = 0
0.00.267.285 I llm_load_print_meta: vocab_only       = 0
0.00.267.285 I llm_load_print_meta: n_ctx_train      = 8192
0.00.267.285 I llm_load_print_meta: n_embd           = 2048
0.00.267.286 I llm_load_print_meta: n_layer          = 18
0.00.267.297 I llm_load_print_meta: n_head           = 8
0.00.267.298 I llm_load_print_meta: n_head_kv        = 1
0.00.267.298 I llm_load_print_meta: n_rot            = 256
0.00.267.298 I llm_load_print_meta: n_swa            = 0
0.00.267.299 I llm_load_print_meta: n_embd_head_k    = 256
0.00.267.299 I llm_load_print_meta: n_embd_head_v    = 256
0.00.267.300 I llm_load_print_meta: n_gqa            = 8
0.00.267.301 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.267.301 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.267.302 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.267.304 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.267.304 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.267.304 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.267.304 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.267.305 I llm_load_print_meta: n_ff             = 16384
0.00.267.306 I llm_load_print_meta: n_expert         = 0
0.00.267.306 I llm_load_print_meta: n_expert_used    = 0
0.00.267.306 I llm_load_print_meta: causal attn      = 1
0.00.267.307 I llm_load_print_meta: pooling type     = 0
0.00.267.307 I llm_load_print_meta: rope type        = 2
0.00.267.307 I llm_load_print_meta: rope scaling     = linear
0.00.267.309 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.267.309 I llm_load_print_meta: freq_scale_train = 1
0.00.267.310 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.267.310 I llm_load_print_meta: rope_finetuned   = unknown
0.00.267.310 I llm_load_print_meta: ssm_d_conv       = 0
0.00.267.310 I llm_load_print_meta: ssm_d_inner      = 0
0.00.267.311 I llm_load_print_meta: ssm_d_state      = 0
0.00.267.311 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.267.311 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.267.312 I llm_load_print_meta: model type       = 2B
0.00.267.312 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.267.313 I llm_load_print_meta: model params     = 2.51 B
0.00.267.313 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.267.314 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.267.314 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.267.314 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.267.315 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.267.315 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.267.315 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.267.316 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.267.316 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.267.317 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.267.317 I llm_load_print_meta: max token length = 93
0.00.328.673 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.328.682 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.328.683 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.328.684 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.328.684 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.328.685 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.334.967 I llama_new_context_with_model: n_seq_max     = 1
0.00.334.974 I llama_new_context_with_model: n_ctx         = 4096
0.00.334.975 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.334.975 I llama_new_context_with_model: n_batch       = 2048
0.00.334.976 I llama_new_context_with_model: n_ubatch      = 512
0.00.334.976 I llama_new_context_with_model: flash_attn    = 0
0.00.334.979 I llama_new_context_with_model: freq_base     = 10000.0
0.00.334.980 I llama_new_context_with_model: freq_scale    = 1
0.00.334.981 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.002 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.349.471 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.349.486 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.349.588 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.350.870 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.350.877 I llama_new_context_with_model: graph nodes  = 601
0.00.350.877 I llama_new_context_with_model: graph splits = 1
0.00.350.880 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.350.880 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.426.776 I main: llama threadpool init, n_threads = 4
0.00.426.793 I 
0.00.426.868 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.426.871 I 
0.00.426.918 I sampler seed: 1709049352
0.00.426.929 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.426.932 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.426.933 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.426.934 I 
 seconded
I am unable to find the requested information. Please check your search parameters and try again. [end of text]


0.01.545.060 I llama_perf_sampler_print:    sampling time =       3.85 ms /    23 runs   (    0.17 ms per token,  5969.37 tokens per second)
0.01.545.063 I llama_perf_context_print:        load time =     426.04 ms
0.01.545.064 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.545.066 I llama_perf_context_print:        eval time =    1103.93 ms /    22 runs   (   50.18 ms per token,    19.93 tokens per second)
0.01.545.067 I llama_perf_context_print:       total time =    1118.29 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4362 (8f34d0dd)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40248.12 ms
main:    total time = 40248.12 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.550 I build: 4362 (8f34d0dd) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.763 I main: llama backend init
0.00.000.770 I main: load the model and apply lora adapter, if any
0.00.021.355 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.371 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.382 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.387 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.388 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.389 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.390 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.395 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.396 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.396 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.397 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.398 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.209 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.848 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.662 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.668 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.669 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.670 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.671 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.672 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.673 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.677 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.677 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.680 I llama_model_loader: - type  f32:   37 tensors
0.00.131.681 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.682 I llama_model_loader: - type q6_K:   19 tensors
0.00.202.802 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.241.271 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.765 I llm_load_vocab: special tokens cache size = 5
0.00.262.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.262.611 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.262.612 I llm_load_print_meta: arch             = gemma
0.00.262.612 I llm_load_print_meta: vocab type       = SPM
0.00.262.613 I llm_load_print_meta: n_vocab          = 256000
0.00.262.613 I llm_load_print_meta: n_merges         = 0
0.00.262.613 I llm_load_print_meta: vocab_only       = 0
0.00.262.614 I llm_load_print_meta: n_ctx_train      = 8192
0.00.262.614 I llm_load_print_meta: n_embd           = 2048
0.00.262.614 I llm_load_print_meta: n_layer          = 18
0.00.262.625 I llm_load_print_meta: n_head           = 8
0.00.262.626 I llm_load_print_meta: n_head_kv        = 1
0.00.262.626 I llm_load_print_meta: n_rot            = 256
0.00.262.627 I llm_load_print_meta: n_swa            = 0
0.00.262.627 I llm_load_print_meta: n_embd_head_k    = 256
0.00.262.627 I llm_load_print_meta: n_embd_head_v    = 256
0.00.262.628 I llm_load_print_meta: n_gqa            = 8
0.00.262.629 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.262.630 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.262.631 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.262.632 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.262.633 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.262.633 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.262.633 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.262.634 I llm_load_print_meta: n_ff             = 16384
0.00.262.634 I llm_load_print_meta: n_expert         = 0
0.00.262.634 I llm_load_print_meta: n_expert_used    = 0
0.00.262.635 I llm_load_print_meta: causal attn      = 1
0.00.262.635 I llm_load_print_meta: pooling type     = 0
0.00.262.635 I llm_load_print_meta: rope type        = 2
0.00.262.636 I llm_load_print_meta: rope scaling     = linear
0.00.262.638 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.262.638 I llm_load_print_meta: freq_scale_train = 1
0.00.262.638 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.262.639 I llm_load_print_meta: rope_finetuned   = unknown
0.00.262.639 I llm_load_print_meta: ssm_d_conv       = 0
0.00.262.639 I llm_load_print_meta: ssm_d_inner      = 0
0.00.262.640 I llm_load_print_meta: ssm_d_state      = 0
0.00.262.640 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.262.640 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.262.640 I llm_load_print_meta: model type       = 2B
0.00.262.641 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.262.642 I llm_load_print_meta: model params     = 2.51 B
0.00.262.642 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.262.643 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.262.644 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.262.644 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.262.644 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.262.645 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.262.645 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.262.645 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.262.646 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.262.646 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.262.646 I llm_load_print_meta: max token length = 93
0.00.319.302 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.324.337 I llama_new_context_with_model: n_seq_max     = 1
0.00.324.343 I llama_new_context_with_model: n_ctx         = 4096
0.00.324.344 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.324.344 I llama_new_context_with_model: n_batch       = 2048
0.00.324.345 I llama_new_context_with_model: n_ubatch      = 512
0.00.324.345 I llama_new_context_with_model: flash_attn    = 0
0.00.324.348 I llama_new_context_with_model: freq_base     = 10000.0
0.00.324.348 I llama_new_context_with_model: freq_scale    = 1
0.00.324.349 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.324.369 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.338.934 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.338.947 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.339.038 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.340.282 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.340.289 I llama_new_context_with_model: graph nodes  = 601
0.00.340.289 I llama_new_context_with_model: graph splits = 1
0.00.340.293 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.340.293 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.415.075 I main: llama threadpool init, n_threads = 4
0.00.415.090 I 
0.00.415.164 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.415.167 I 
0.00.415.214 I sampler seed: 2557293996
0.00.415.225 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.415.237 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.415.240 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.415.240 I 
 guaranteing the ability to predict future events?

**Answer:**

I am unable to provide information that claims to possess predictive abilities or makes statements implying the ability

0.02.021.546 I llama_perf_sampler_print:    sampling time =       5.59 ms /    33 runs   (    0.17 ms per token,  5901.29 tokens per second)
0.02.021.549 I llama_perf_context_print:        load time =     414.29 ms
0.02.021.551 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.021.553 I llama_perf_context_print:        eval time =    1586.81 ms /    32 runs   (   49.59 ms per token,    20.17 tokens per second)
0.02.021.554 I llama_perf_context_print:       total time =    1606.48 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m26.863s
user	10m22.440s
sys	0m6.958s
