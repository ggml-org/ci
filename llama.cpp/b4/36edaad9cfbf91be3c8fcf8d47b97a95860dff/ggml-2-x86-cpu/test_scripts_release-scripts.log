+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.176 I build: 4257 (b436edaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.370 I main: llama backend init
0.00.000.376 I main: load the model and apply lora adapter, if any
0.00.020.884 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.895 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.903 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.909 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.910 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.913 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.914 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.915 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.915 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.916 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.916 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.920 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.921 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.921 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.922 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.922 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.166 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.645 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.506 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.513 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.514 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.514 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.515 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.516 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.516 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.518 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.519 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.519 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.520 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.521 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.525 I llama_model_loader: - type  f32:   37 tensors
0.00.130.526 I llama_model_loader: - type q8_0:  127 tensors
0.00.201.915 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.947 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.497 I llm_load_vocab: special tokens cache size = 5
0.00.264.740 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.264.758 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.264.759 I llm_load_print_meta: arch             = gemma
0.00.264.759 I llm_load_print_meta: vocab type       = SPM
0.00.264.760 I llm_load_print_meta: n_vocab          = 256000
0.00.264.760 I llm_load_print_meta: n_merges         = 0
0.00.264.761 I llm_load_print_meta: vocab_only       = 0
0.00.264.761 I llm_load_print_meta: n_ctx_train      = 8192
0.00.264.762 I llm_load_print_meta: n_embd           = 2048
0.00.264.762 I llm_load_print_meta: n_layer          = 18
0.00.264.775 I llm_load_print_meta: n_head           = 8
0.00.264.776 I llm_load_print_meta: n_head_kv        = 1
0.00.264.776 I llm_load_print_meta: n_rot            = 256
0.00.264.777 I llm_load_print_meta: n_swa            = 0
0.00.264.777 I llm_load_print_meta: n_embd_head_k    = 256
0.00.264.777 I llm_load_print_meta: n_embd_head_v    = 256
0.00.264.778 I llm_load_print_meta: n_gqa            = 8
0.00.264.779 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.264.780 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.264.781 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.264.782 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.264.783 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.264.783 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.264.783 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.264.784 I llm_load_print_meta: n_ff             = 16384
0.00.264.785 I llm_load_print_meta: n_expert         = 0
0.00.264.785 I llm_load_print_meta: n_expert_used    = 0
0.00.264.785 I llm_load_print_meta: causal attn      = 1
0.00.264.785 I llm_load_print_meta: pooling type     = 0
0.00.264.785 I llm_load_print_meta: rope type        = 2
0.00.264.786 I llm_load_print_meta: rope scaling     = linear
0.00.264.787 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.264.788 I llm_load_print_meta: freq_scale_train = 1
0.00.264.788 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.264.788 I llm_load_print_meta: rope_finetuned   = unknown
0.00.264.789 I llm_load_print_meta: ssm_d_conv       = 0
0.00.264.789 I llm_load_print_meta: ssm_d_inner      = 0
0.00.264.790 I llm_load_print_meta: ssm_d_state      = 0
0.00.264.790 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.264.790 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.264.791 I llm_load_print_meta: model type       = 2B
0.00.264.791 I llm_load_print_meta: model ftype      = Q8_0
0.00.264.792 I llm_load_print_meta: model params     = 2.51 B
0.00.264.793 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.264.793 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.264.794 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.264.794 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.264.794 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.264.795 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.264.795 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.264.795 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.264.796 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.264.797 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.264.797 I llm_load_print_meta: max token length = 93
0.00.365.267 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.365.275 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.365.276 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.365.276 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.365.277 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.365.278 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.370.429 I llama_new_context_with_model: n_seq_max     = 1
0.00.370.435 I llama_new_context_with_model: n_ctx         = 4096
0.00.370.435 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.370.436 I llama_new_context_with_model: n_batch       = 2048
0.00.370.436 I llama_new_context_with_model: n_ubatch      = 512
0.00.370.437 I llama_new_context_with_model: flash_attn    = 0
0.00.370.439 I llama_new_context_with_model: freq_base     = 10000.0
0.00.370.440 I llama_new_context_with_model: freq_scale    = 1
0.00.370.441 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.384.486 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.384.499 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.384.589 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.790 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.795 I llama_new_context_with_model: graph nodes  = 601
0.00.385.796 I llama_new_context_with_model: graph splits = 1
0.00.385.798 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.785 I main: llama threadpool init, n_threads = 4
0.00.470.801 I 
0.00.470.870 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.470.873 I 
0.00.470.914 I sampler seed: 3472354366
0.00.470.925 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.937 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.941 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.942 I 
 increasities to the following questions:

a) What is the purpose of the human respiratory system?
b) How does the respiratory system regulate body temperature?

0.02.723.184 I llama_perf_sampler_print:    sampling time =       5.08 ms /    33 runs   (    0.15 ms per token,  6501.18 tokens per second)
0.02.723.187 I llama_perf_context_print:        load time =     470.39 ms
0.02.723.189 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.723.190 I llama_perf_context_print:        eval time =    2233.24 ms /    32 runs   (   69.79 ms per token,    14.33 tokens per second)
0.02.723.191 I llama_perf_context_print:       total time =    2252.41 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.174 I build: 4257 (b436edaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.346 I main: llama backend init
0.00.000.353 I main: load the model and apply lora adapter, if any
0.00.020.366 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.377 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.382 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.383 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.387 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.388 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.389 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.390 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.390 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.391 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.394 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.395 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.395 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.396 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.396 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.811 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.108 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.951 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.958 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.959 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.959 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.960 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.960 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.961 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.963 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.963 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.964 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.964 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.965 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.969 I llama_model_loader: - type  f32:   37 tensors
0.00.129.969 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.640 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.518 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.004 I llm_load_vocab: special tokens cache size = 5
0.00.261.923 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.940 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.941 I llm_load_print_meta: arch             = gemma
0.00.261.941 I llm_load_print_meta: vocab type       = SPM
0.00.261.942 I llm_load_print_meta: n_vocab          = 256000
0.00.261.943 I llm_load_print_meta: n_merges         = 0
0.00.261.943 I llm_load_print_meta: vocab_only       = 0
0.00.261.943 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.943 I llm_load_print_meta: n_embd           = 2048
0.00.261.944 I llm_load_print_meta: n_layer          = 18
0.00.261.955 I llm_load_print_meta: n_head           = 8
0.00.261.956 I llm_load_print_meta: n_head_kv        = 1
0.00.261.956 I llm_load_print_meta: n_rot            = 256
0.00.261.956 I llm_load_print_meta: n_swa            = 0
0.00.261.957 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.957 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.958 I llm_load_print_meta: n_gqa            = 8
0.00.261.959 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.960 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.960 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.962 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.962 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.963 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.963 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.964 I llm_load_print_meta: n_ff             = 16384
0.00.261.964 I llm_load_print_meta: n_expert         = 0
0.00.261.965 I llm_load_print_meta: n_expert_used    = 0
0.00.261.965 I llm_load_print_meta: causal attn      = 1
0.00.261.965 I llm_load_print_meta: pooling type     = 0
0.00.261.965 I llm_load_print_meta: rope type        = 2
0.00.261.966 I llm_load_print_meta: rope scaling     = linear
0.00.261.967 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.968 I llm_load_print_meta: freq_scale_train = 1
0.00.261.968 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.969 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.969 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.969 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.970 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.970 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.970 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.971 I llm_load_print_meta: model type       = 2B
0.00.261.971 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.972 I llm_load_print_meta: model params     = 2.51 B
0.00.261.973 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.973 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.973 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.974 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.974 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.975 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.975 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.975 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.976 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.976 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.977 I llm_load_print_meta: max token length = 93
0.00.355.523 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.360.741 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.746 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.747 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.747 I llama_new_context_with_model: n_batch       = 2048
0.00.360.748 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.748 I llama_new_context_with_model: flash_attn    = 0
0.00.360.751 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.752 I llama_new_context_with_model: freq_scale    = 1
0.00.360.753 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.375.491 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.506 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.598 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.888 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.894 I llama_new_context_with_model: graph nodes  = 601
0.00.376.895 I llama_new_context_with_model: graph splits = 1
0.00.376.897 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.457.930 I main: llama threadpool init, n_threads = 4
0.00.457.946 I 
0.00.458.015 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.458.019 I 
0.00.458.064 I sampler seed: 3723333584
0.00.458.075 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.079 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.080 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.080 I 
 increasities, a beautiful and intricate tapestry of interconnected lines and arcs. The pattern resembles a fractal, a self-similar geometric structure that repeats at increasingly smaller scales

0.02.630.474 I llama_perf_sampler_print:    sampling time =       4.85 ms /    33 runs   (    0.15 ms per token,  6805.53 tokens per second)
0.02.630.477 I llama_perf_context_print:        load time =     457.56 ms
0.02.630.479 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.630.481 I llama_perf_context_print:        eval time =    2153.02 ms /    32 runs   (   67.28 ms per token,    14.86 tokens per second)
0.02.630.482 I llama_perf_context_print:       total time =    2172.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.537 I build: 4257 (b436edaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.725 I main: llama backend init
0.00.000.732 I main: load the model and apply lora adapter, if any
0.00.021.532 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.542 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.550 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.555 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.556 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.560 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.561 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.562 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.562 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.563 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.563 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.568 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.568 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.569 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.570 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.571 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.984 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.845 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.716 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.722 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.723 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.724 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.725 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.726 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.726 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.728 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.729 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.730 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.731 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.130.732 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.736 I llama_model_loader: - type  f32:   37 tensors
0.00.130.737 I llama_model_loader: - type q8_0:  127 tensors
0.00.202.715 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.702 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.439 I llm_load_vocab: special tokens cache size = 5
0.00.278.881 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.901 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.901 I llm_load_print_meta: arch             = gemma
0.00.278.902 I llm_load_print_meta: vocab type       = SPM
0.00.278.903 I llm_load_print_meta: n_vocab          = 256000
0.00.278.903 I llm_load_print_meta: n_merges         = 0
0.00.278.903 I llm_load_print_meta: vocab_only       = 0
0.00.278.904 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.904 I llm_load_print_meta: n_embd           = 2048
0.00.278.904 I llm_load_print_meta: n_layer          = 18
0.00.278.917 I llm_load_print_meta: n_head           = 8
0.00.278.918 I llm_load_print_meta: n_head_kv        = 1
0.00.278.918 I llm_load_print_meta: n_rot            = 256
0.00.278.918 I llm_load_print_meta: n_swa            = 0
0.00.278.919 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.919 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.920 I llm_load_print_meta: n_gqa            = 8
0.00.278.921 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.922 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.923 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.924 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.925 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.925 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.925 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.926 I llm_load_print_meta: n_ff             = 16384
0.00.278.927 I llm_load_print_meta: n_expert         = 0
0.00.278.927 I llm_load_print_meta: n_expert_used    = 0
0.00.278.927 I llm_load_print_meta: causal attn      = 1
0.00.278.927 I llm_load_print_meta: pooling type     = 0
0.00.278.927 I llm_load_print_meta: rope type        = 2
0.00.278.928 I llm_load_print_meta: rope scaling     = linear
0.00.278.929 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.930 I llm_load_print_meta: freq_scale_train = 1
0.00.278.930 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.931 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.931 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.932 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.932 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.932 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.932 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.933 I llm_load_print_meta: model type       = 2B
0.00.278.933 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.934 I llm_load_print_meta: model params     = 2.51 B
0.00.278.935 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.935 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.936 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.936 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.936 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.937 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.937 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.937 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.938 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.938 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.939 I llm_load_print_meta: max token length = 93
0.00.353.891 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.353.898 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.899 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.353.900 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.353.900 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.353.901 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.359.157 I llama_new_context_with_model: n_seq_max     = 1
0.00.359.162 I llama_new_context_with_model: n_ctx         = 4096
0.00.359.162 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.359.162 I llama_new_context_with_model: n_batch       = 2048
0.00.359.163 I llama_new_context_with_model: n_ubatch      = 512
0.00.359.163 I llama_new_context_with_model: flash_attn    = 0
0.00.359.165 I llama_new_context_with_model: freq_base     = 10000.0
0.00.359.167 I llama_new_context_with_model: freq_scale    = 1
0.00.359.167 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.373.294 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.373.308 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.373.398 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.374.680 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.374.687 I llama_new_context_with_model: graph nodes  = 601
0.00.374.687 I llama_new_context_with_model: graph splits = 1
0.00.374.689 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.461.899 I main: llama threadpool init, n_threads = 4
0.00.461.916 I 
0.00.461.993 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.461.996 I 
0.00.462.046 I sampler seed: 841136010
0.00.462.058 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.462.060 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.462.061 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.462.061 I 
 increasities, it is essential to consider the impact on the individuals involved and the broader community.

**Ethical Considerations:**

* **Respect for privacy and dignity

0.02.773.675 I llama_perf_sampler_print:    sampling time =       4.95 ms /    33 runs   (    0.15 ms per token,  6672.06 tokens per second)
0.02.773.678 I llama_perf_context_print:        load time =     461.15 ms
0.02.773.679 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.773.680 I llama_perf_context_print:        eval time =    2291.77 ms /    32 runs   (   71.62 ms per token,    13.96 tokens per second)
0.02.773.681 I llama_perf_context_print:       total time =    2311.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.560 I build: 4257 (b436edaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.750 I main: llama backend init
0.00.000.756 I main: load the model and apply lora adapter, if any
0.00.021.132 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.145 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.153 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.163 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.167 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.172 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.173 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.173 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.174 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.174 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.175 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.179 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.180 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.181 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.181 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.182 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.527 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.944 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.770 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.775 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.776 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.777 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.777 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.778 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.779 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.781 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.782 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.783 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.783 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.784 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.788 I llama_model_loader: - type  f32:   37 tensors
0.00.131.789 I llama_model_loader: - type q8_0:  127 tensors
0.00.205.041 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.248.217 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.248.764 I llm_load_vocab: special tokens cache size = 5
0.00.269.918 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.269.933 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.269.933 I llm_load_print_meta: arch             = gemma
0.00.269.934 I llm_load_print_meta: vocab type       = SPM
0.00.269.934 I llm_load_print_meta: n_vocab          = 256000
0.00.269.935 I llm_load_print_meta: n_merges         = 0
0.00.269.935 I llm_load_print_meta: vocab_only       = 0
0.00.269.935 I llm_load_print_meta: n_ctx_train      = 8192
0.00.269.936 I llm_load_print_meta: n_embd           = 2048
0.00.269.936 I llm_load_print_meta: n_layer          = 18
0.00.269.947 I llm_load_print_meta: n_head           = 8
0.00.269.948 I llm_load_print_meta: n_head_kv        = 1
0.00.269.948 I llm_load_print_meta: n_rot            = 256
0.00.269.948 I llm_load_print_meta: n_swa            = 0
0.00.269.949 I llm_load_print_meta: n_embd_head_k    = 256
0.00.269.949 I llm_load_print_meta: n_embd_head_v    = 256
0.00.269.950 I llm_load_print_meta: n_gqa            = 8
0.00.269.951 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.269.952 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.269.952 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.269.954 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.269.955 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.269.955 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.269.955 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.269.956 I llm_load_print_meta: n_ff             = 16384
0.00.269.957 I llm_load_print_meta: n_expert         = 0
0.00.269.957 I llm_load_print_meta: n_expert_used    = 0
0.00.269.957 I llm_load_print_meta: causal attn      = 1
0.00.269.957 I llm_load_print_meta: pooling type     = 0
0.00.269.958 I llm_load_print_meta: rope type        = 2
0.00.269.958 I llm_load_print_meta: rope scaling     = linear
0.00.269.959 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.269.960 I llm_load_print_meta: freq_scale_train = 1
0.00.269.960 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.269.961 I llm_load_print_meta: rope_finetuned   = unknown
0.00.269.961 I llm_load_print_meta: ssm_d_conv       = 0
0.00.269.961 I llm_load_print_meta: ssm_d_inner      = 0
0.00.269.961 I llm_load_print_meta: ssm_d_state      = 0
0.00.269.962 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.269.962 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.269.962 I llm_load_print_meta: model type       = 2B
0.00.269.963 I llm_load_print_meta: model ftype      = Q8_0
0.00.269.964 I llm_load_print_meta: model params     = 2.51 B
0.00.269.965 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.269.965 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.269.965 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.269.966 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.269.966 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.269.966 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.269.967 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.269.967 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.269.967 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.269.968 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.269.968 I llm_load_print_meta: max token length = 93
0.00.340.659 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.340.666 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.345.678 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.684 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.684 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.685 I llama_new_context_with_model: n_batch       = 2048
0.00.345.685 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.685 I llama_new_context_with_model: flash_attn    = 0
0.00.345.688 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.689 I llama_new_context_with_model: freq_scale    = 1
0.00.345.689 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.359.722 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.359.734 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.825 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.069 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.076 I llama_new_context_with_model: graph nodes  = 601
0.00.361.076 I llama_new_context_with_model: graph splits = 1
0.00.361.078 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.619 I main: llama threadpool init, n_threads = 4
0.00.453.635 I 
0.00.453.707 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.453.711 I 
0.00.453.756 I sampler seed: 2837377185
0.00.453.767 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.779 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.783 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.783 I 
 increamically, and then stop abruptly, leaving the room bathed in a sudden hush.

What happened? [end of text]


0.02.121.091 I llama_perf_sampler_print:    sampling time =       3.51 ms /    23 runs   (    0.15 ms per token,  6545.25 tokens per second)
0.02.121.094 I llama_perf_context_print:        load time =     452.84 ms
0.02.121.096 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.121.098 I llama_perf_context_print:        eval time =    1653.70 ms /    22 runs   (   75.17 ms per token,    13.30 tokens per second)
0.02.121.099 I llama_perf_context_print:       total time =    1667.48 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m19.746s
user	0m36.436s
sys	0m9.418s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4257 (b436edaa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40198.83 ms
main:    total time = 40198.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.186 I build: 4257 (b436edaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.378 I main: llama backend init
0.00.000.385 I main: load the model and apply lora adapter, if any
0.00.020.708 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.719 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.727 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.735 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.737 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.742 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.743 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.744 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.744 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.746 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.746 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.750 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.751 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.751 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.752 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.020.752 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.113 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.173 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.026 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.032 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.033 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.034 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.035 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.036 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.036 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.038 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.039 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.040 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.041 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.041 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.044 I llama_model_loader: - type  f32:   37 tensors
0.00.130.045 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.045 I llama_model_loader: - type q6_K:   19 tensors
0.00.201.430 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.880 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.255.565 I llm_load_vocab: special tokens cache size = 5
0.00.276.793 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.276.815 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.276.815 I llm_load_print_meta: arch             = gemma
0.00.276.816 I llm_load_print_meta: vocab type       = SPM
0.00.276.816 I llm_load_print_meta: n_vocab          = 256000
0.00.276.817 I llm_load_print_meta: n_merges         = 0
0.00.276.817 I llm_load_print_meta: vocab_only       = 0
0.00.276.817 I llm_load_print_meta: n_ctx_train      = 8192
0.00.276.818 I llm_load_print_meta: n_embd           = 2048
0.00.276.818 I llm_load_print_meta: n_layer          = 18
0.00.276.830 I llm_load_print_meta: n_head           = 8
0.00.276.831 I llm_load_print_meta: n_head_kv        = 1
0.00.276.832 I llm_load_print_meta: n_rot            = 256
0.00.276.832 I llm_load_print_meta: n_swa            = 0
0.00.276.832 I llm_load_print_meta: n_embd_head_k    = 256
0.00.276.832 I llm_load_print_meta: n_embd_head_v    = 256
0.00.276.834 I llm_load_print_meta: n_gqa            = 8
0.00.276.835 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.276.836 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.276.837 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.276.838 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.276.838 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.276.839 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.276.839 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.276.840 I llm_load_print_meta: n_ff             = 16384
0.00.276.841 I llm_load_print_meta: n_expert         = 0
0.00.276.841 I llm_load_print_meta: n_expert_used    = 0
0.00.276.841 I llm_load_print_meta: causal attn      = 1
0.00.276.842 I llm_load_print_meta: pooling type     = 0
0.00.276.842 I llm_load_print_meta: rope type        = 2
0.00.276.842 I llm_load_print_meta: rope scaling     = linear
0.00.276.844 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.276.844 I llm_load_print_meta: freq_scale_train = 1
0.00.276.845 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.276.845 I llm_load_print_meta: rope_finetuned   = unknown
0.00.276.845 I llm_load_print_meta: ssm_d_conv       = 0
0.00.276.846 I llm_load_print_meta: ssm_d_inner      = 0
0.00.276.846 I llm_load_print_meta: ssm_d_state      = 0
0.00.276.846 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.276.846 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.276.847 I llm_load_print_meta: model type       = 2B
0.00.276.847 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.276.848 I llm_load_print_meta: model params     = 2.51 B
0.00.276.849 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.276.849 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.276.850 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.276.850 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.276.850 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.276.851 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.276.851 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.276.851 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.276.852 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.276.852 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.276.852 I llm_load_print_meta: max token length = 93
0.00.336.380 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.336.387 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.336.388 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.336.388 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.336.389 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.336.389 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.341.373 I llama_new_context_with_model: n_seq_max     = 1
0.00.341.380 I llama_new_context_with_model: n_ctx         = 4096
0.00.341.380 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.341.381 I llama_new_context_with_model: n_batch       = 2048
0.00.341.382 I llama_new_context_with_model: n_ubatch      = 512
0.00.341.382 I llama_new_context_with_model: flash_attn    = 0
0.00.341.384 I llama_new_context_with_model: freq_base     = 10000.0
0.00.341.385 I llama_new_context_with_model: freq_scale    = 1
0.00.341.386 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.610 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.625 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.714 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.907 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.915 I llama_new_context_with_model: graph nodes  = 601
0.00.356.915 I llama_new_context_with_model: graph splits = 1
0.00.356.917 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.951 I main: llama threadpool init, n_threads = 4
0.00.431.966 I 
0.00.432.038 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.432.042 I 
0.00.432.087 I sampler seed: 1097817258
0.00.432.098 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.432.101 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.432.102 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.432.103 I 
 squaRED TEXT:

**I cannot access the internet or send or receive emails.**

**I have checked my internet connection and it is working properly.**



0.02.029.649 I llama_perf_sampler_print:    sampling time =       5.03 ms /    33 runs   (    0.15 ms per token,  6565.86 tokens per second)
0.02.029.652 I llama_perf_context_print:        load time =     431.55 ms
0.02.029.653 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.029.654 I llama_perf_context_print:        eval time =    1578.32 ms /    32 runs   (   49.32 ms per token,    20.27 tokens per second)
0.02.029.655 I llama_perf_context_print:       total time =    1597.71 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4257 (b436edaa)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40183.36 ms
main:    total time = 40183.36 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.168 I build: 4257 (b436edaa) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.373 I main: llama backend init
0.00.000.379 I main: load the model and apply lora adapter, if any
0.00.020.984 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.020.999 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.005 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.006 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.010 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.011 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.011 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.013 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.013 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.013 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.017 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.017 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.018 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.018 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.019 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.456 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.972 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.779 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.786 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.787 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.788 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.789 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.790 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.791 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.794 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.796 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.799 I llama_model_loader: - type  f32:   37 tensors
0.00.129.800 I llama_model_loader: - type q4_K:  108 tensors
0.00.129.801 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.629 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.258.373 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.105 I llm_load_vocab: special tokens cache size = 5
0.00.280.319 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.339 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.339 I llm_load_print_meta: arch             = gemma
0.00.280.340 I llm_load_print_meta: vocab type       = SPM
0.00.280.341 I llm_load_print_meta: n_vocab          = 256000
0.00.280.341 I llm_load_print_meta: n_merges         = 0
0.00.280.342 I llm_load_print_meta: vocab_only       = 0
0.00.280.343 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.343 I llm_load_print_meta: n_embd           = 2048
0.00.280.343 I llm_load_print_meta: n_layer          = 18
0.00.280.354 I llm_load_print_meta: n_head           = 8
0.00.280.355 I llm_load_print_meta: n_head_kv        = 1
0.00.280.355 I llm_load_print_meta: n_rot            = 256
0.00.280.356 I llm_load_print_meta: n_swa            = 0
0.00.280.356 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.356 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.357 I llm_load_print_meta: n_gqa            = 8
0.00.280.358 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.359 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.360 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.361 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.361 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.362 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.362 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.363 I llm_load_print_meta: n_ff             = 16384
0.00.280.363 I llm_load_print_meta: n_expert         = 0
0.00.280.364 I llm_load_print_meta: n_expert_used    = 0
0.00.280.364 I llm_load_print_meta: causal attn      = 1
0.00.280.364 I llm_load_print_meta: pooling type     = 0
0.00.280.364 I llm_load_print_meta: rope type        = 2
0.00.280.365 I llm_load_print_meta: rope scaling     = linear
0.00.280.366 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.366 I llm_load_print_meta: freq_scale_train = 1
0.00.280.367 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.367 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.368 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.368 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.368 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.369 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.369 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.369 I llm_load_print_meta: model type       = 2B
0.00.280.370 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.371 I llm_load_print_meta: model params     = 2.51 B
0.00.280.372 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.372 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.372 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.373 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.373 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.373 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.375 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.375 I llm_load_print_meta: max token length = 93
0.00.337.228 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.342.259 I llama_new_context_with_model: n_seq_max     = 1
0.00.342.265 I llama_new_context_with_model: n_ctx         = 4096
0.00.342.265 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.342.266 I llama_new_context_with_model: n_batch       = 2048
0.00.342.266 I llama_new_context_with_model: n_ubatch      = 512
0.00.342.267 I llama_new_context_with_model: flash_attn    = 0
0.00.342.269 I llama_new_context_with_model: freq_base     = 10000.0
0.00.342.270 I llama_new_context_with_model: freq_scale    = 1
0.00.342.271 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.357.454 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.357.468 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.357.560 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.358.818 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.358.824 I llama_new_context_with_model: graph nodes  = 601
0.00.358.825 I llama_new_context_with_model: graph splits = 1
0.00.358.827 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.433.549 I main: llama threadpool init, n_threads = 4
0.00.433.564 I 
0.00.433.638 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.433.641 I 
0.00.433.682 I sampler seed: 3472883336
0.00.433.693 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.433.705 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.433.708 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.433.708 I 
 increasities, and other forms of harassment can have devastating consequences for victims.

**What are some practical steps that can be taken to create a safer and more

0.01.987.294 I llama_perf_sampler_print:    sampling time =       5.09 ms /    33 runs   (    0.15 ms per token,  6487.12 tokens per second)
0.01.987.296 I llama_perf_context_print:        load time =     433.15 ms
0.01.987.297 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.987.299 I llama_perf_context_print:        eval time =    1534.91 ms /    32 runs   (   47.97 ms per token,    20.85 tokens per second)
0.01.987.299 I llama_perf_context_print:       total time =    1553.75 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.181s
user	10m23.890s
sys	0m6.881s
