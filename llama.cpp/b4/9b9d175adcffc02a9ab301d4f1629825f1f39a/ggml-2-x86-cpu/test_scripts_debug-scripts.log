+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.679 I build: 4013 (b49b9d17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.808 I main: load the model and apply lora adapter, if any
0.00.025.454 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.464 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.555 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.567 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.569 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.573 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.577 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.578 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.579 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.580 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.581 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.588 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.589 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.591 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.593 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.330 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.012 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.356 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.364 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.365 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.366 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.367 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.369 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.370 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.374 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.375 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.377 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.378 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.379 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.387 I llama_model_loader: - type  f32:   37 tensors
0.00.266.389 I llama_model_loader: - type q8_0:  127 tensors
0.00.440.501 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.886 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.941 I llm_load_vocab: special tokens cache size = 5
0.00.611.173 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.611.246 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.611.250 I llm_load_print_meta: arch             = gemma
0.00.611.251 I llm_load_print_meta: vocab type       = SPM
0.00.611.251 I llm_load_print_meta: n_vocab          = 256000
0.00.611.254 I llm_load_print_meta: n_merges         = 0
0.00.611.254 I llm_load_print_meta: vocab_only       = 0
0.00.611.255 I llm_load_print_meta: n_ctx_train      = 8192
0.00.611.255 I llm_load_print_meta: n_embd           = 2048
0.00.611.255 I llm_load_print_meta: n_layer          = 18
0.00.611.323 I llm_load_print_meta: n_head           = 8
0.00.611.332 I llm_load_print_meta: n_head_kv        = 1
0.00.611.333 I llm_load_print_meta: n_rot            = 256
0.00.611.333 I llm_load_print_meta: n_swa            = 0
0.00.611.334 I llm_load_print_meta: n_embd_head_k    = 256
0.00.611.334 I llm_load_print_meta: n_embd_head_v    = 256
0.00.611.339 I llm_load_print_meta: n_gqa            = 8
0.00.611.344 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.611.352 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.611.353 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.611.355 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.611.355 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.611.355 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.611.356 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.611.362 I llm_load_print_meta: n_ff             = 16384
0.00.611.363 I llm_load_print_meta: n_expert         = 0
0.00.611.363 I llm_load_print_meta: n_expert_used    = 0
0.00.611.364 I llm_load_print_meta: causal attn      = 1
0.00.611.365 I llm_load_print_meta: pooling type     = 0
0.00.611.365 I llm_load_print_meta: rope type        = 2
0.00.611.366 I llm_load_print_meta: rope scaling     = linear
0.00.611.367 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.611.378 I llm_load_print_meta: freq_scale_train = 1
0.00.611.379 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.611.379 I llm_load_print_meta: rope_finetuned   = unknown
0.00.611.380 I llm_load_print_meta: ssm_d_conv       = 0
0.00.611.380 I llm_load_print_meta: ssm_d_inner      = 0
0.00.611.381 I llm_load_print_meta: ssm_d_state      = 0
0.00.611.383 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.611.384 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.611.385 I llm_load_print_meta: model type       = 2B
0.00.611.386 I llm_load_print_meta: model ftype      = Q8_0
0.00.611.387 I llm_load_print_meta: model params     = 2.51 B
0.00.611.395 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.611.396 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.611.396 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.611.397 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.611.397 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.611.398 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.611.399 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.611.399 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.611.405 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.611.407 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.611.408 I llm_load_print_meta: max token length = 93
0.00.716.106 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.716.116 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.716.117 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.716.118 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.716.119 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.716.119 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.721.972 I llama_new_context_with_model: n_seq_max     = 1
0.00.721.979 I llama_new_context_with_model: n_ctx         = 4096
0.00.721.979 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.721.980 I llama_new_context_with_model: n_batch       = 2048
0.00.721.980 I llama_new_context_with_model: n_ubatch      = 512
0.00.721.980 I llama_new_context_with_model: flash_attn    = 0
0.00.721.982 I llama_new_context_with_model: freq_base     = 10000.0
0.00.721.983 I llama_new_context_with_model: freq_scale    = 1
0.00.721.984 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.839 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.878 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.009 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.562 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.565 I llama_new_context_with_model: graph nodes  = 601
0.00.739.566 I llama_new_context_with_model: graph splits = 1
0.00.739.590 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.398 I main: llama threadpool init, n_threads = 4
0.01.343.410 I 
0.01.343.513 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.517 I 
0.01.343.741 I sampler seed: 2474770186
0.01.343.753 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.760 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.760 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.763 I 
 increasities!

I am unable to generate responses that are sexually suggestive or inappropriate. [end of text]


0.08.902.303 I llama_perf_sampler_print:    sampling time =      27.59 ms /    19 runs   (    1.45 ms per token,   688.78 tokens per second)
0.08.902.330 I llama_perf_context_print:        load time =    1340.50 ms
0.08.902.333 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.902.335 I llama_perf_context_print:        eval time =    7507.15 ms /    18 runs   (  417.06 ms per token,     2.40 tokens per second)
0.08.902.337 I llama_perf_context_print:       total time =    7558.91 ms /    19 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 4013 (b49b9d17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.002.865 I main: load the model and apply lora adapter, if any
0.00.025.816 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.927 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.944 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.949 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.956 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.958 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.960 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.962 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.964 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.966 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.975 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.981 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.983 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.984 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.986 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.191 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.162 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.575 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.587 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.588 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.589 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.590 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.592 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.593 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.597 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.598 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.599 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.600 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.602 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.610 I llama_model_loader: - type  f32:   37 tensors
0.00.266.613 I llama_model_loader: - type q8_0:  127 tensors
0.00.450.765 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.517.273 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.518.205 I llm_load_vocab: special tokens cache size = 5
0.00.616.279 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.354 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.355 I llm_load_print_meta: arch             = gemma
0.00.616.356 I llm_load_print_meta: vocab type       = SPM
0.00.616.356 I llm_load_print_meta: n_vocab          = 256000
0.00.616.360 I llm_load_print_meta: n_merges         = 0
0.00.616.360 I llm_load_print_meta: vocab_only       = 0
0.00.616.360 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.361 I llm_load_print_meta: n_embd           = 2048
0.00.616.361 I llm_load_print_meta: n_layer          = 18
0.00.616.433 I llm_load_print_meta: n_head           = 8
0.00.616.447 I llm_load_print_meta: n_head_kv        = 1
0.00.616.448 I llm_load_print_meta: n_rot            = 256
0.00.616.450 I llm_load_print_meta: n_swa            = 0
0.00.616.451 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.451 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.459 I llm_load_print_meta: n_gqa            = 8
0.00.616.466 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.477 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.479 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.480 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.482 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.482 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.483 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.491 I llm_load_print_meta: n_ff             = 16384
0.00.616.492 I llm_load_print_meta: n_expert         = 0
0.00.616.493 I llm_load_print_meta: n_expert_used    = 0
0.00.616.493 I llm_load_print_meta: causal attn      = 1
0.00.616.494 I llm_load_print_meta: pooling type     = 0
0.00.616.495 I llm_load_print_meta: rope type        = 2
0.00.616.496 I llm_load_print_meta: rope scaling     = linear
0.00.616.497 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.500 I llm_load_print_meta: freq_scale_train = 1
0.00.616.500 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.502 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.502 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.503 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.503 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.504 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.505 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.506 I llm_load_print_meta: model type       = 2B
0.00.616.508 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.509 I llm_load_print_meta: model params     = 2.51 B
0.00.616.522 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.523 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.524 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.525 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.526 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.526 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.528 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.529 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.536 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.538 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.539 I llm_load_print_meta: max token length = 93
0.00.715.530 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.721.801 I llama_new_context_with_model: n_seq_max     = 1
0.00.721.808 I llama_new_context_with_model: n_ctx         = 4096
0.00.721.809 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.721.809 I llama_new_context_with_model: n_batch       = 2048
0.00.721.809 I llama_new_context_with_model: n_ubatch      = 512
0.00.721.810 I llama_new_context_with_model: flash_attn    = 0
0.00.721.812 I llama_new_context_with_model: freq_base     = 10000.0
0.00.721.813 I llama_new_context_with_model: freq_scale    = 1
0.00.721.813 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.933 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.974 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.737.095 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.739.686 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.739.690 I llama_new_context_with_model: graph nodes  = 601
0.00.739.691 I llama_new_context_with_model: graph splits = 1
0.00.739.718 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.345.177 I main: llama threadpool init, n_threads = 4
0.01.345.190 I 
0.01.345.308 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.345.311 I 
0.01.345.564 I sampler seed: 1952528117
0.01.345.576 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.345.584 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.345.585 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.345.585 I 
 increasities in the movie, "The Princess Bride."

The Princess Bride is a story of adventure, romance, and courage. It is a classic tale that

0.14.886.435 I llama_perf_sampler_print:    sampling time =      49.40 ms /    33 runs   (    1.50 ms per token,   667.99 tokens per second)
0.14.886.460 I llama_perf_context_print:        load time =    1342.21 ms
0.14.886.462 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.886.464 I llama_perf_context_print:        eval time =   13450.54 ms /    32 runs   (  420.33 ms per token,     2.38 tokens per second)
0.14.886.464 I llama_perf_context_print:       total time =   13541.27 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4013 (b49b9d17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.873 I main: llama backend init
0.00.002.825 I main: load the model and apply lora adapter, if any
0.00.025.506 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.517 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.608 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.620 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.621 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.626 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.627 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.628 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.629 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.631 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.633 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.646 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.651 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.653 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.655 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.657 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.574 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.788 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.137 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.147 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.149 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.150 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.151 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.152 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.154 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.157 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.158 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.159 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.160 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.161 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.169 I llama_model_loader: - type  f32:   37 tensors
0.00.267.171 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.545 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.416 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.400 I llm_load_vocab: special tokens cache size = 5
0.00.601.698 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.770 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.771 I llm_load_print_meta: arch             = gemma
0.00.601.772 I llm_load_print_meta: vocab type       = SPM
0.00.601.772 I llm_load_print_meta: n_vocab          = 256000
0.00.601.775 I llm_load_print_meta: n_merges         = 0
0.00.601.776 I llm_load_print_meta: vocab_only       = 0
0.00.601.777 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.777 I llm_load_print_meta: n_embd           = 2048
0.00.601.777 I llm_load_print_meta: n_layer          = 18
0.00.601.844 I llm_load_print_meta: n_head           = 8
0.00.601.852 I llm_load_print_meta: n_head_kv        = 1
0.00.601.853 I llm_load_print_meta: n_rot            = 256
0.00.601.854 I llm_load_print_meta: n_swa            = 0
0.00.601.854 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.855 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.860 I llm_load_print_meta: n_gqa            = 8
0.00.601.864 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.869 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.870 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.881 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.881 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.882 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.882 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.888 I llm_load_print_meta: n_ff             = 16384
0.00.601.888 I llm_load_print_meta: n_expert         = 0
0.00.601.892 I llm_load_print_meta: n_expert_used    = 0
0.00.601.892 I llm_load_print_meta: causal attn      = 1
0.00.601.892 I llm_load_print_meta: pooling type     = 0
0.00.601.893 I llm_load_print_meta: rope type        = 2
0.00.601.893 I llm_load_print_meta: rope scaling     = linear
0.00.601.895 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.895 I llm_load_print_meta: freq_scale_train = 1
0.00.601.896 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.896 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.896 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.896 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.897 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.897 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.897 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.898 I llm_load_print_meta: model type       = 2B
0.00.601.899 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.899 I llm_load_print_meta: model params     = 2.51 B
0.00.601.909 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.910 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.911 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.914 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.914 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.915 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.915 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.916 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.922 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.923 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.924 I llm_load_print_meta: max token length = 93
0.00.699.484 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.699.493 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.699.494 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.699.495 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.699.496 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.699.496 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.705.632 I llama_new_context_with_model: n_seq_max     = 1
0.00.705.641 I llama_new_context_with_model: n_ctx         = 4096
0.00.705.641 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.705.641 I llama_new_context_with_model: n_batch       = 2048
0.00.705.642 I llama_new_context_with_model: n_ubatch      = 512
0.00.705.642 I llama_new_context_with_model: flash_attn    = 0
0.00.705.645 I llama_new_context_with_model: freq_base     = 10000.0
0.00.705.646 I llama_new_context_with_model: freq_scale    = 1
0.00.705.646 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.721.349 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.721.392 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.721.516 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.724.096 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.724.101 I llama_new_context_with_model: graph nodes  = 601
0.00.724.101 I llama_new_context_with_model: graph splits = 1
0.00.724.125 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.355.007 I main: llama threadpool init, n_threads = 4
0.01.355.019 I 
0.01.355.133 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.355.138 I 
0.01.355.381 I sampler seed: 1427127124
0.01.355.394 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.355.400 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.355.404 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.355.404 I 
 increasements and how they impact the financial performance of a company.

**Answer:**

**1. Increase in Revenue and Profitability:**

* Increased sales

0.14.883.661 I llama_perf_sampler_print:    sampling time =      48.94 ms /    33 runs   (    1.48 ms per token,   674.24 tokens per second)
0.14.883.664 I llama_perf_context_print:        load time =    1352.09 ms
0.14.883.665 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.883.689 I llama_perf_context_print:        eval time =   13439.12 ms /    32 runs   (  419.97 ms per token,     2.38 tokens per second)
0.14.883.691 I llama_perf_context_print:       total time =   13528.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4013 (b49b9d17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.862 I main: llama backend init
0.00.002.824 I main: load the model and apply lora adapter, if any
0.00.025.409 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.025.420 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.514 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.526 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.527 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.532 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.533 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.534 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.536 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.537 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.538 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.546 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.551 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.553 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.555 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.557 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.797 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.097 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.404 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.412 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.413 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.415 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.416 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.417 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.419 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.422 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.423 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.424 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.425 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.265.427 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.434 I llama_model_loader: - type  f32:   37 tensors
0.00.265.437 I llama_model_loader: - type q8_0:  127 tensors
0.00.447.162 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.509.695 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.510.597 I llm_load_vocab: special tokens cache size = 5
0.00.604.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.604.665 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.604.666 I llm_load_print_meta: arch             = gemma
0.00.604.667 I llm_load_print_meta: vocab type       = SPM
0.00.604.667 I llm_load_print_meta: n_vocab          = 256000
0.00.604.670 I llm_load_print_meta: n_merges         = 0
0.00.604.671 I llm_load_print_meta: vocab_only       = 0
0.00.604.671 I llm_load_print_meta: n_ctx_train      = 8192
0.00.604.672 I llm_load_print_meta: n_embd           = 2048
0.00.604.672 I llm_load_print_meta: n_layer          = 18
0.00.604.736 I llm_load_print_meta: n_head           = 8
0.00.604.743 I llm_load_print_meta: n_head_kv        = 1
0.00.604.744 I llm_load_print_meta: n_rot            = 256
0.00.604.744 I llm_load_print_meta: n_swa            = 0
0.00.604.746 I llm_load_print_meta: n_embd_head_k    = 256
0.00.604.747 I llm_load_print_meta: n_embd_head_v    = 256
0.00.604.752 I llm_load_print_meta: n_gqa            = 8
0.00.604.757 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.604.765 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.604.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.604.769 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.604.769 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.604.769 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.604.770 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.604.775 I llm_load_print_meta: n_ff             = 16384
0.00.604.776 I llm_load_print_meta: n_expert         = 0
0.00.604.780 I llm_load_print_meta: n_expert_used    = 0
0.00.604.780 I llm_load_print_meta: causal attn      = 1
0.00.604.780 I llm_load_print_meta: pooling type     = 0
0.00.604.781 I llm_load_print_meta: rope type        = 2
0.00.604.781 I llm_load_print_meta: rope scaling     = linear
0.00.604.783 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.604.783 I llm_load_print_meta: freq_scale_train = 1
0.00.604.784 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.604.784 I llm_load_print_meta: rope_finetuned   = unknown
0.00.604.784 I llm_load_print_meta: ssm_d_conv       = 0
0.00.604.784 I llm_load_print_meta: ssm_d_inner      = 0
0.00.604.785 I llm_load_print_meta: ssm_d_state      = 0
0.00.604.785 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.604.785 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.604.786 I llm_load_print_meta: model type       = 2B
0.00.604.787 I llm_load_print_meta: model ftype      = Q8_0
0.00.604.788 I llm_load_print_meta: model params     = 2.51 B
0.00.604.798 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.604.800 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.604.801 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.604.801 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.604.802 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.604.802 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.604.803 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.604.803 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.604.808 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.604.810 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.604.810 I llm_load_print_meta: max token length = 93
0.00.678.704 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.678.714 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.684.882 I llama_new_context_with_model: n_seq_max     = 1
0.00.684.889 I llama_new_context_with_model: n_ctx         = 4096
0.00.684.889 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.684.890 I llama_new_context_with_model: n_batch       = 2048
0.00.684.890 I llama_new_context_with_model: n_ubatch      = 512
0.00.684.890 I llama_new_context_with_model: flash_attn    = 0
0.00.684.893 I llama_new_context_with_model: freq_base     = 10000.0
0.00.684.894 I llama_new_context_with_model: freq_scale    = 1
0.00.684.894 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.699.457 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.699.494 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.699.617 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.107 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.702.110 I llama_new_context_with_model: graph nodes  = 601
0.00.702.110 I llama_new_context_with_model: graph splits = 1
0.00.702.134 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.309.268 I main: llama threadpool init, n_threads = 4
0.01.309.280 I 
0.01.309.395 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.309.400 I 
0.01.309.636 I sampler seed: 2727092538
0.01.309.649 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.309.656 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.309.659 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.309.659 I 
 increasities and their impact on the economy.

**Answer:**

**1. Definition of Declining Real Output (DRO):**

Declining real

0.14.786.054 I llama_perf_sampler_print:    sampling time =      49.01 ms /    33 runs   (    1.49 ms per token,   673.37 tokens per second)
0.14.786.056 I llama_perf_context_print:        load time =    1306.34 ms
0.14.786.070 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.786.072 I llama_perf_context_print:        eval time =   13387.43 ms /    32 runs   (  418.36 ms per token,     2.39 tokens per second)
0.14.786.073 I llama_perf_context_print:       total time =   13476.79 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m4.208s
user	3m25.117s
sys	0m9.529s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4013 (b49b9d17)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198892.91 ms
main:    total time = 198892.91 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.620 I build: 4013 (b49b9d17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.823 I main: llama backend init
0.00.002.760 I main: load the model and apply lora adapter, if any
0.00.025.483 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.494 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.580 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.591 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.593 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.596 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.598 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.599 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.600 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.601 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.602 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.608 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.609 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.610 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.612 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.613 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.827 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.715 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.210 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.218 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.219 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.220 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.221 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.222 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.224 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.227 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.228 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.229 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.230 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.232 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.239 I llama_model_loader: - type  f32:   37 tensors
0.00.266.242 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.242 I llama_model_loader: - type q6_K:   19 tensors
0.00.436.811 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.494.619 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.495.493 I llm_load_vocab: special tokens cache size = 5
0.00.594.894 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.594.966 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.594.968 I llm_load_print_meta: arch             = gemma
0.00.594.968 I llm_load_print_meta: vocab type       = SPM
0.00.594.969 I llm_load_print_meta: n_vocab          = 256000
0.00.594.972 I llm_load_print_meta: n_merges         = 0
0.00.594.972 I llm_load_print_meta: vocab_only       = 0
0.00.594.973 I llm_load_print_meta: n_ctx_train      = 8192
0.00.594.973 I llm_load_print_meta: n_embd           = 2048
0.00.594.973 I llm_load_print_meta: n_layer          = 18
0.00.595.039 I llm_load_print_meta: n_head           = 8
0.00.595.048 I llm_load_print_meta: n_head_kv        = 1
0.00.595.050 I llm_load_print_meta: n_rot            = 256
0.00.595.056 I llm_load_print_meta: n_swa            = 0
0.00.595.056 I llm_load_print_meta: n_embd_head_k    = 256
0.00.595.056 I llm_load_print_meta: n_embd_head_v    = 256
0.00.595.061 I llm_load_print_meta: n_gqa            = 8
0.00.595.075 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.595.080 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.595.082 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.595.084 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.595.085 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.595.086 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.595.086 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.595.103 I llm_load_print_meta: n_ff             = 16384
0.00.595.106 I llm_load_print_meta: n_expert         = 0
0.00.595.107 I llm_load_print_meta: n_expert_used    = 0
0.00.595.107 I llm_load_print_meta: causal attn      = 1
0.00.595.108 I llm_load_print_meta: pooling type     = 0
0.00.595.108 I llm_load_print_meta: rope type        = 2
0.00.595.109 I llm_load_print_meta: rope scaling     = linear
0.00.595.110 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.595.111 I llm_load_print_meta: freq_scale_train = 1
0.00.595.111 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.595.112 I llm_load_print_meta: rope_finetuned   = unknown
0.00.595.112 I llm_load_print_meta: ssm_d_conv       = 0
0.00.595.112 I llm_load_print_meta: ssm_d_inner      = 0
0.00.595.112 I llm_load_print_meta: ssm_d_state      = 0
0.00.595.113 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.595.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.595.121 I llm_load_print_meta: model type       = 2B
0.00.595.122 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.595.123 I llm_load_print_meta: model params     = 2.51 B
0.00.595.132 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.595.132 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.595.133 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.595.134 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.595.135 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.595.135 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.595.136 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.595.137 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.595.142 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.595.144 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.595.145 I llm_load_print_meta: max token length = 93
0.00.658.835 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.658.844 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.658.845 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.658.846 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.658.847 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.658.847 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.664.635 I llama_new_context_with_model: n_seq_max     = 1
0.00.664.643 I llama_new_context_with_model: n_ctx         = 4096
0.00.664.643 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.664.644 I llama_new_context_with_model: n_batch       = 2048
0.00.664.644 I llama_new_context_with_model: n_ubatch      = 512
0.00.664.644 I llama_new_context_with_model: flash_attn    = 0
0.00.664.647 I llama_new_context_with_model: freq_base     = 10000.0
0.00.664.648 I llama_new_context_with_model: freq_scale    = 1
0.00.664.648 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.679.248 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.679.287 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.679.433 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.681.993 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.681.997 I llama_new_context_with_model: graph nodes  = 601
0.00.681.997 I llama_new_context_with_model: graph splits = 1
0.00.682.021 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.251.646 I main: llama threadpool init, n_threads = 4
0.01.251.659 I 
0.01.251.762 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.251.766 I 
0.01.252.000 I sampler seed: 765623484
0.01.252.012 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.252.020 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.252.020 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.252.021 I 
 increamically. I'm so excited to share this incredible journey with you all! 🎉 [end of text]


0.07.679.380 I llama_perf_sampler_print:    sampling time =      29.16 ms /    20 runs   (    1.46 ms per token,   685.94 tokens per second)
0.07.679.383 I llama_perf_context_print:        load time =    1248.79 ms
0.07.679.384 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.679.386 I llama_perf_context_print:        eval time =    6372.78 ms /    19 runs   (  335.41 ms per token,     2.98 tokens per second)
0.07.679.386 I llama_perf_context_print:       total time =    6427.74 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4013 (b49b9d17)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198893.62 ms
main:    total time = 198893.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.615 I build: 4013 (b49b9d17) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.818 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.025.578 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.677 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.691 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.693 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.697 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.699 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.700 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.702 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.704 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.705 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.712 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.713 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.714 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.715 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.716 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.840 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.450 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.595 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.603 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.605 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.606 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.607 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.608 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.610 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.614 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.615 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.623 I llama_model_loader: - type  f32:   37 tensors
0.00.265.626 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.626 I llama_model_loader: - type q6_K:   19 tensors
0.00.433.437 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.493.421 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.494.375 I llm_load_vocab: special tokens cache size = 5
0.00.592.620 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.592.691 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.592.692 I llm_load_print_meta: arch             = gemma
0.00.592.692 I llm_load_print_meta: vocab type       = SPM
0.00.592.693 I llm_load_print_meta: n_vocab          = 256000
0.00.592.696 I llm_load_print_meta: n_merges         = 0
0.00.592.696 I llm_load_print_meta: vocab_only       = 0
0.00.592.697 I llm_load_print_meta: n_ctx_train      = 8192
0.00.592.697 I llm_load_print_meta: n_embd           = 2048
0.00.592.697 I llm_load_print_meta: n_layer          = 18
0.00.592.762 I llm_load_print_meta: n_head           = 8
0.00.592.769 I llm_load_print_meta: n_head_kv        = 1
0.00.592.770 I llm_load_print_meta: n_rot            = 256
0.00.592.770 I llm_load_print_meta: n_swa            = 0
0.00.592.771 I llm_load_print_meta: n_embd_head_k    = 256
0.00.592.771 I llm_load_print_meta: n_embd_head_v    = 256
0.00.592.776 I llm_load_print_meta: n_gqa            = 8
0.00.592.781 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.592.787 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.592.788 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.592.790 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.592.791 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.592.791 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.592.793 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.592.809 I llm_load_print_meta: n_ff             = 16384
0.00.592.810 I llm_load_print_meta: n_expert         = 0
0.00.592.811 I llm_load_print_meta: n_expert_used    = 0
0.00.592.812 I llm_load_print_meta: causal attn      = 1
0.00.592.812 I llm_load_print_meta: pooling type     = 0
0.00.592.813 I llm_load_print_meta: rope type        = 2
0.00.592.814 I llm_load_print_meta: rope scaling     = linear
0.00.592.815 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.592.816 I llm_load_print_meta: freq_scale_train = 1
0.00.592.816 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.592.817 I llm_load_print_meta: rope_finetuned   = unknown
0.00.592.817 I llm_load_print_meta: ssm_d_conv       = 0
0.00.592.817 I llm_load_print_meta: ssm_d_inner      = 0
0.00.592.818 I llm_load_print_meta: ssm_d_state      = 0
0.00.592.819 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.592.819 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.592.819 I llm_load_print_meta: model type       = 2B
0.00.592.821 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.592.822 I llm_load_print_meta: model params     = 2.51 B
0.00.592.831 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.592.831 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.592.832 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.592.833 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.592.834 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.592.834 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.592.836 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.592.836 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.592.842 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.592.856 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.592.861 I llm_load_print_meta: max token length = 93
0.00.654.057 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.660.048 I llama_new_context_with_model: n_seq_max     = 1
0.00.660.056 I llama_new_context_with_model: n_ctx         = 4096
0.00.660.057 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.660.057 I llama_new_context_with_model: n_batch       = 2048
0.00.660.058 I llama_new_context_with_model: n_ubatch      = 512
0.00.660.059 I llama_new_context_with_model: flash_attn    = 0
0.00.660.062 I llama_new_context_with_model: freq_base     = 10000.0
0.00.660.063 I llama_new_context_with_model: freq_scale    = 1
0.00.660.064 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.675.110 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.675.155 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.675.288 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.677.860 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.677.864 I llama_new_context_with_model: graph nodes  = 601
0.00.677.865 I llama_new_context_with_model: graph splits = 1
0.00.677.892 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.247.669 I main: llama threadpool init, n_threads = 4
0.01.247.681 I 
0.01.247.802 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.247.805 I 
0.01.248.045 I sampler seed: 794751708
0.01.248.060 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.248.068 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.248.070 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.248.070 I 
 seconally with an adverb.

The sun shone brightly in the sky, casting a warm glow over the landscape. [end of text]


0.09.369.570 I llama_perf_sampler_print:    sampling time =      36.79 ms /    25 runs   (    1.47 ms per token,   679.51 tokens per second)
0.09.369.573 I llama_perf_context_print:        load time =    1244.80 ms
0.09.369.575 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.369.577 I llama_perf_context_print:        eval time =    8054.03 ms /    24 runs   (  335.58 ms per token,     2.98 tokens per second)
0.09.369.588 I llama_perf_context_print:       total time =    8121.91 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m57.740s
user	49m37.156s
sys	0m6.318s
