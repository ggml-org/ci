+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.686 I build: 3972 (167a5156) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.885 I main: llama backend init
0.00.002.821 I main: load the model and apply lora adapter, if any
0.00.024.844 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.063 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.158 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.170 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.171 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.176 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.177 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.179 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.180 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.182 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.184 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.191 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.193 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.194 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.195 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.197 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.659 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.352 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.564 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.572 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.573 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.574 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.575 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.576 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.577 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.581 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.582 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.583 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.584 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.270.603 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.615 I llama_model_loader: - type  f32:   37 tensors
0.00.270.618 I llama_model_loader: - type q8_0:  127 tensors
0.00.442.929 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.555 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.560 I llm_load_vocab: special tokens cache size = 5
0.00.608.963 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.609.035 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.609.036 I llm_load_print_meta: arch             = gemma
0.00.609.036 I llm_load_print_meta: vocab type       = SPM
0.00.609.037 I llm_load_print_meta: n_vocab          = 256000
0.00.609.039 I llm_load_print_meta: n_merges         = 0
0.00.609.040 I llm_load_print_meta: vocab_only       = 0
0.00.609.040 I llm_load_print_meta: n_ctx_train      = 8192
0.00.609.041 I llm_load_print_meta: n_embd           = 2048
0.00.609.041 I llm_load_print_meta: n_layer          = 18
0.00.609.106 I llm_load_print_meta: n_head           = 8
0.00.609.113 I llm_load_print_meta: n_head_kv        = 1
0.00.609.113 I llm_load_print_meta: n_rot            = 256
0.00.609.115 I llm_load_print_meta: n_swa            = 0
0.00.609.115 I llm_load_print_meta: n_embd_head_k    = 256
0.00.609.116 I llm_load_print_meta: n_embd_head_v    = 256
0.00.609.121 I llm_load_print_meta: n_gqa            = 8
0.00.609.127 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.609.150 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.609.155 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.609.157 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.609.158 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.609.158 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.609.158 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.609.164 I llm_load_print_meta: n_ff             = 16384
0.00.609.173 I llm_load_print_meta: n_expert         = 0
0.00.609.174 I llm_load_print_meta: n_expert_used    = 0
0.00.609.176 I llm_load_print_meta: causal attn      = 1
0.00.609.176 I llm_load_print_meta: pooling type     = 0
0.00.609.176 I llm_load_print_meta: rope type        = 2
0.00.609.177 I llm_load_print_meta: rope scaling     = linear
0.00.609.186 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.609.187 I llm_load_print_meta: freq_scale_train = 1
0.00.609.188 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.609.188 I llm_load_print_meta: rope_finetuned   = unknown
0.00.609.189 I llm_load_print_meta: ssm_d_conv       = 0
0.00.609.189 I llm_load_print_meta: ssm_d_inner      = 0
0.00.609.190 I llm_load_print_meta: ssm_d_state      = 0
0.00.609.190 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.609.198 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.609.200 I llm_load_print_meta: model type       = 2B
0.00.609.201 I llm_load_print_meta: model ftype      = Q8_0
0.00.609.202 I llm_load_print_meta: model params     = 2.51 B
0.00.609.203 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.609.203 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.609.204 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.609.204 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.609.205 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.609.205 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.609.213 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.609.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.609.220 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.609.221 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.609.222 I llm_load_print_meta: max token length = 93
0.00.609.386 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.710.176 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.710.187 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.710.188 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.710.189 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.710.190 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.710.190 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.715.742 I llama_new_context_with_model: n_ctx      = 8192
0.00.715.749 I llama_new_context_with_model: n_batch    = 2048
0.00.715.750 I llama_new_context_with_model: n_ubatch   = 512
0.00.715.750 I llama_new_context_with_model: flash_attn = 0
0.00.715.753 I llama_new_context_with_model: freq_base  = 10000.0
0.00.715.754 I llama_new_context_with_model: freq_scale = 1
0.00.745.128 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.745.170 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.745.286 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.746.714 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.746.719 I llama_new_context_with_model: graph nodes  = 601
0.00.746.720 I llama_new_context_with_model: graph splits = 1
0.00.746.735 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.358.382 I main: llama threadpool init, n_threads = 4
0.01.358.395 I 
0.01.358.500 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.358.501 I 
0.01.358.677 I sampler seed: 1424808978
0.01.358.690 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.358.696 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.358.700 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.358.700 I 
 increasities in the context of large language models (LLMs).

**Background:**

* LLMs are powerful language models capable of generating human-quality text

0.14.793.986 I llama_perf_sampler_print:    sampling time =      50.37 ms /    33 runs   (    1.53 ms per token,   655.16 tokens per second)
0.14.793.989 I llama_perf_context_print:        load time =    1355.47 ms
0.14.793.990 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.793.991 I llama_perf_context_print:        eval time =   13338.61 ms /    32 runs   (  416.83 ms per token,     2.40 tokens per second)
0.14.793.992 I llama_perf_context_print:       total time =   13435.61 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.693 I build: 3972 (167a5156) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.903 I main: llama backend init
0.00.002.838 I main: load the model and apply lora adapter, if any
0.00.025.181 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.278 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.293 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.297 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.302 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.304 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.305 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.307 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.307 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.309 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.317 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.326 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.329 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.330 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.331 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.355 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.254.449 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.272.685 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.272.692 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.272.693 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.272.694 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.272.695 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.272.697 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.272.698 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.272.701 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.272.702 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.272.703 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.272.711 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.272.712 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.272.722 I llama_model_loader: - type  f32:   37 tensors
0.00.272.726 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.229 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.514.599 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.515.627 I llm_load_vocab: special tokens cache size = 5
0.00.610.692 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.610.762 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.610.765 I llm_load_print_meta: arch             = gemma
0.00.610.766 I llm_load_print_meta: vocab type       = SPM
0.00.610.767 I llm_load_print_meta: n_vocab          = 256000
0.00.610.769 I llm_load_print_meta: n_merges         = 0
0.00.610.770 I llm_load_print_meta: vocab_only       = 0
0.00.610.770 I llm_load_print_meta: n_ctx_train      = 8192
0.00.610.771 I llm_load_print_meta: n_embd           = 2048
0.00.610.771 I llm_load_print_meta: n_layer          = 18
0.00.610.837 I llm_load_print_meta: n_head           = 8
0.00.610.846 I llm_load_print_meta: n_head_kv        = 1
0.00.610.847 I llm_load_print_meta: n_rot            = 256
0.00.610.848 I llm_load_print_meta: n_swa            = 0
0.00.610.848 I llm_load_print_meta: n_embd_head_k    = 256
0.00.610.848 I llm_load_print_meta: n_embd_head_v    = 256
0.00.610.853 I llm_load_print_meta: n_gqa            = 8
0.00.610.858 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.610.864 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.610.865 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.610.867 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.610.867 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.610.868 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.610.869 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.610.874 I llm_load_print_meta: n_ff             = 16384
0.00.610.875 I llm_load_print_meta: n_expert         = 0
0.00.610.875 I llm_load_print_meta: n_expert_used    = 0
0.00.610.876 I llm_load_print_meta: causal attn      = 1
0.00.610.876 I llm_load_print_meta: pooling type     = 0
0.00.610.876 I llm_load_print_meta: rope type        = 2
0.00.610.877 I llm_load_print_meta: rope scaling     = linear
0.00.610.878 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.610.879 I llm_load_print_meta: freq_scale_train = 1
0.00.610.879 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.610.880 I llm_load_print_meta: rope_finetuned   = unknown
0.00.610.880 I llm_load_print_meta: ssm_d_conv       = 0
0.00.610.881 I llm_load_print_meta: ssm_d_inner      = 0
0.00.610.881 I llm_load_print_meta: ssm_d_state      = 0
0.00.610.881 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.610.882 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.610.882 I llm_load_print_meta: model type       = 2B
0.00.610.883 I llm_load_print_meta: model ftype      = Q8_0
0.00.610.884 I llm_load_print_meta: model params     = 2.51 B
0.00.610.885 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.610.886 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.610.889 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.610.889 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.610.890 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.610.890 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.610.890 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.610.891 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.610.897 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.610.898 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.610.899 I llm_load_print_meta: max token length = 93
0.00.611.065 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.706.450 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.712.204 I llama_new_context_with_model: n_ctx      = 8192
0.00.712.211 I llama_new_context_with_model: n_batch    = 2048
0.00.712.211 I llama_new_context_with_model: n_ubatch   = 512
0.00.712.212 I llama_new_context_with_model: flash_attn = 0
0.00.712.216 I llama_new_context_with_model: freq_base  = 10000.0
0.00.712.217 I llama_new_context_with_model: freq_scale = 1
0.00.742.339 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.742.386 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.742.508 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.743.927 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.743.933 I llama_new_context_with_model: graph nodes  = 601
0.00.743.933 I llama_new_context_with_model: graph splits = 1
0.00.743.948 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.354.277 I main: llama threadpool init, n_threads = 4
0.01.354.291 I 
0.01.354.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.354.413 I 
0.01.354.597 I sampler seed: 2580184209
0.01.354.609 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.354.616 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.354.619 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.354.619 I 
 increasities, but did not take place.

**Answer:** The provided text does not contain any information regarding any historical events or occurrences, so I am unable

0.14.944.435 I llama_perf_sampler_print:    sampling time =      49.24 ms /    33 runs   (    1.49 ms per token,   670.15 tokens per second)
0.14.944.449 I llama_perf_context_print:        load time =    1351.35 ms
0.14.944.451 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.944.453 I llama_perf_context_print:        eval time =   13495.33 ms /    32 runs   (  421.73 ms per token,     2.37 tokens per second)
0.14.944.454 I llama_perf_context_print:       total time =   13590.17 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.664 I build: 3972 (167a5156) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.859 I main: llama backend init
0.00.002.828 I main: load the model and apply lora adapter, if any
0.00.024.854 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.056 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.150 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.162 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.163 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.168 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.172 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.173 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.174 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.175 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.175 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.183 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.184 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.185 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.186 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.188 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.153.031 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.721 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.929 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.938 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.941 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.943 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.944 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.947 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.948 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.949 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.270.951 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.270.952 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.270.960 I llama_model_loader: - type  f32:   37 tensors
0.00.270.964 I llama_model_loader: - type q8_0:  127 tensors
0.00.451.268 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.516.494 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.517.452 I llm_load_vocab: special tokens cache size = 5
0.00.612.595 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.612.671 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.612.671 I llm_load_print_meta: arch             = gemma
0.00.612.672 I llm_load_print_meta: vocab type       = SPM
0.00.612.673 I llm_load_print_meta: n_vocab          = 256000
0.00.612.675 I llm_load_print_meta: n_merges         = 0
0.00.612.676 I llm_load_print_meta: vocab_only       = 0
0.00.612.676 I llm_load_print_meta: n_ctx_train      = 8192
0.00.612.677 I llm_load_print_meta: n_embd           = 2048
0.00.612.677 I llm_load_print_meta: n_layer          = 18
0.00.612.742 I llm_load_print_meta: n_head           = 8
0.00.612.749 I llm_load_print_meta: n_head_kv        = 1
0.00.612.750 I llm_load_print_meta: n_rot            = 256
0.00.612.750 I llm_load_print_meta: n_swa            = 0
0.00.612.750 I llm_load_print_meta: n_embd_head_k    = 256
0.00.612.751 I llm_load_print_meta: n_embd_head_v    = 256
0.00.612.755 I llm_load_print_meta: n_gqa            = 8
0.00.612.760 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.612.765 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.612.767 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.612.768 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.612.768 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.612.769 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.612.769 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.612.774 I llm_load_print_meta: n_ff             = 16384
0.00.612.774 I llm_load_print_meta: n_expert         = 0
0.00.612.775 I llm_load_print_meta: n_expert_used    = 0
0.00.612.775 I llm_load_print_meta: causal attn      = 1
0.00.612.775 I llm_load_print_meta: pooling type     = 0
0.00.612.776 I llm_load_print_meta: rope type        = 2
0.00.612.776 I llm_load_print_meta: rope scaling     = linear
0.00.612.778 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.612.778 I llm_load_print_meta: freq_scale_train = 1
0.00.612.779 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.612.779 I llm_load_print_meta: rope_finetuned   = unknown
0.00.612.779 I llm_load_print_meta: ssm_d_conv       = 0
0.00.612.779 I llm_load_print_meta: ssm_d_inner      = 0
0.00.612.780 I llm_load_print_meta: ssm_d_state      = 0
0.00.612.780 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.612.780 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.612.781 I llm_load_print_meta: model type       = 2B
0.00.612.782 I llm_load_print_meta: model ftype      = Q8_0
0.00.612.782 I llm_load_print_meta: model params     = 2.51 B
0.00.612.783 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.612.783 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.612.784 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.612.784 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.612.785 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.612.785 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.612.786 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.612.787 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.612.793 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.612.794 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.612.803 I llm_load_print_meta: max token length = 93
0.00.612.973 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.690.334 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.690.343 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.690.344 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.690.344 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.690.345 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.690.346 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.696.203 I llama_new_context_with_model: n_ctx      = 8192
0.00.696.210 I llama_new_context_with_model: n_batch    = 2048
0.00.696.211 I llama_new_context_with_model: n_ubatch   = 512
0.00.696.211 I llama_new_context_with_model: flash_attn = 0
0.00.696.214 I llama_new_context_with_model: freq_base  = 10000.0
0.00.696.215 I llama_new_context_with_model: freq_scale = 1
0.00.726.130 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.726.172 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.726.286 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.727.694 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.727.699 I llama_new_context_with_model: graph nodes  = 601
0.00.727.699 I llama_new_context_with_model: graph splits = 1
0.00.727.714 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.338.527 I main: llama threadpool init, n_threads = 4
0.01.338.541 I 
0.01.338.645 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.338.648 I 
0.01.338.828 I sampler seed: 1782587491
0.01.338.840 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.338.846 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.338.847 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.338.847 I 
 increasities and their role in speciation.

**Explanation of Key Terms:**

* **Speciation:** The process by which new species arise.
* **

0.14.831.578 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.87 tokens per second)
0.14.831.581 I llama_perf_context_print:        load time =    1335.61 ms
0.14.831.595 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.831.597 I llama_perf_context_print:        eval time =   13397.36 ms /    32 runs   (  418.67 ms per token,     2.39 tokens per second)
0.14.831.598 I llama_perf_context_print:       total time =   13493.06 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.638 I build: 3972 (167a5156) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.830 I main: llama backend init
0.00.002.758 I main: load the model and apply lora adapter, if any
0.00.024.491 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.713 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.807 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.820 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.822 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.828 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.832 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.833 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.834 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.835 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.836 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.845 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.846 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.847 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.848 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.849 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.159.699 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.265.164 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.287.917 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.287.927 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.287.928 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.287.929 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.287.930 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.287.932 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.287.933 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.287.937 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.287.938 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.287.939 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.287.940 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.287.942 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.287.953 I llama_model_loader: - type  f32:   37 tensors
0.00.287.958 I llama_model_loader: - type q8_0:  127 tensors
0.00.465.910 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.527.045 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.528.080 I llm_load_vocab: special tokens cache size = 5
0.00.623.139 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.623.210 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.623.214 I llm_load_print_meta: arch             = gemma
0.00.623.215 I llm_load_print_meta: vocab type       = SPM
0.00.623.215 I llm_load_print_meta: n_vocab          = 256000
0.00.623.218 I llm_load_print_meta: n_merges         = 0
0.00.623.219 I llm_load_print_meta: vocab_only       = 0
0.00.623.219 I llm_load_print_meta: n_ctx_train      = 8192
0.00.623.220 I llm_load_print_meta: n_embd           = 2048
0.00.623.220 I llm_load_print_meta: n_layer          = 18
0.00.623.282 I llm_load_print_meta: n_head           = 8
0.00.623.292 I llm_load_print_meta: n_head_kv        = 1
0.00.623.293 I llm_load_print_meta: n_rot            = 256
0.00.623.293 I llm_load_print_meta: n_swa            = 0
0.00.623.294 I llm_load_print_meta: n_embd_head_k    = 256
0.00.623.294 I llm_load_print_meta: n_embd_head_v    = 256
0.00.623.298 I llm_load_print_meta: n_gqa            = 8
0.00.623.303 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.623.309 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.623.313 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.623.314 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.623.314 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.623.315 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.623.315 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.623.320 I llm_load_print_meta: n_ff             = 16384
0.00.623.321 I llm_load_print_meta: n_expert         = 0
0.00.623.321 I llm_load_print_meta: n_expert_used    = 0
0.00.623.321 I llm_load_print_meta: causal attn      = 1
0.00.623.322 I llm_load_print_meta: pooling type     = 0
0.00.623.322 I llm_load_print_meta: rope type        = 2
0.00.623.322 I llm_load_print_meta: rope scaling     = linear
0.00.623.324 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.623.324 I llm_load_print_meta: freq_scale_train = 1
0.00.623.325 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.623.325 I llm_load_print_meta: rope_finetuned   = unknown
0.00.623.326 I llm_load_print_meta: ssm_d_conv       = 0
0.00.623.327 I llm_load_print_meta: ssm_d_inner      = 0
0.00.623.327 I llm_load_print_meta: ssm_d_state      = 0
0.00.623.328 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.623.329 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.623.329 I llm_load_print_meta: model type       = 2B
0.00.623.331 I llm_load_print_meta: model ftype      = Q8_0
0.00.623.331 I llm_load_print_meta: model params     = 2.51 B
0.00.623.332 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.623.332 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.623.333 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.623.334 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.623.334 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.623.335 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.623.335 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.623.336 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.623.342 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.623.343 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.623.343 I llm_load_print_meta: max token length = 93
0.00.623.510 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.694.572 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.694.582 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.700.138 I llama_new_context_with_model: n_ctx      = 8192
0.00.700.145 I llama_new_context_with_model: n_batch    = 2048
0.00.700.145 I llama_new_context_with_model: n_ubatch   = 512
0.00.700.146 I llama_new_context_with_model: flash_attn = 0
0.00.700.148 I llama_new_context_with_model: freq_base  = 10000.0
0.00.700.149 I llama_new_context_with_model: freq_scale = 1
0.00.729.223 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.265 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.375 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.744 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.749 I llama_new_context_with_model: graph nodes  = 601
0.00.730.750 I llama_new_context_with_model: graph splits = 1
0.00.730.766 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.340.310 I main: llama threadpool init, n_threads = 4
0.01.340.323 I 
0.01.340.430 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.340.434 I 
0.01.340.609 I sampler seed: 935905687
0.01.340.621 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.340.626 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.340.627 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.340.629 I 
 seconally, and then answer the questions.

The sum of the first n natural numbers is given by the formula n(n+1)/2. Find

0.14.773.482 I llama_perf_sampler_print:    sampling time =      49.91 ms /    33 runs   (    1.51 ms per token,   661.22 tokens per second)
0.14.773.488 I llama_perf_context_print:        load time =    1337.47 ms
0.14.773.490 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.773.491 I llama_perf_context_print:        eval time =   13338.46 ms /    32 runs   (  416.83 ms per token,     2.40 tokens per second)
0.14.773.492 I llama_perf_context_print:       total time =   13433.18 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m9.555s
user	3m48.362s
sys	0m9.626s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3972 (167a5156)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199795.52 ms
main:    total time = 199795.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 3972 (167a5156) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.832 I main: llama backend init
0.00.002.777 I main: load the model and apply lora adapter, if any
0.00.024.652 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.853 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.943 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.955 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.958 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.962 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.966 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.967 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.968 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.976 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.978 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.985 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.986 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.987 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.988 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.989 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.001 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.482 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.269.698 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.269.705 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.269.706 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.269.707 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.269.708 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.269.709 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.269.710 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.269.714 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.269.715 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.269.716 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.269.717 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.269.718 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.269.727 I llama_model_loader: - type  f32:   37 tensors
0.00.269.730 I llama_model_loader: - type q4_K:  108 tensors
0.00.269.731 I llama_model_loader: - type q6_K:   19 tensors
0.00.441.490 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.197 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.215 I llm_load_vocab: special tokens cache size = 5
0.00.607.402 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.474 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.475 I llm_load_print_meta: arch             = gemma
0.00.607.476 I llm_load_print_meta: vocab type       = SPM
0.00.607.477 I llm_load_print_meta: n_vocab          = 256000
0.00.607.479 I llm_load_print_meta: n_merges         = 0
0.00.607.479 I llm_load_print_meta: vocab_only       = 0
0.00.607.480 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.480 I llm_load_print_meta: n_embd           = 2048
0.00.607.481 I llm_load_print_meta: n_layer          = 18
0.00.607.543 I llm_load_print_meta: n_head           = 8
0.00.607.550 I llm_load_print_meta: n_head_kv        = 1
0.00.607.551 I llm_load_print_meta: n_rot            = 256
0.00.607.552 I llm_load_print_meta: n_swa            = 0
0.00.607.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.563 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.571 I llm_load_print_meta: n_gqa            = 8
0.00.607.576 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.581 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.582 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.585 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.585 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.586 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.587 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.592 I llm_load_print_meta: n_ff             = 16384
0.00.607.594 I llm_load_print_meta: n_expert         = 0
0.00.607.594 I llm_load_print_meta: n_expert_used    = 0
0.00.607.594 I llm_load_print_meta: causal attn      = 1
0.00.607.595 I llm_load_print_meta: pooling type     = 0
0.00.607.611 I llm_load_print_meta: rope type        = 2
0.00.607.611 I llm_load_print_meta: rope scaling     = linear
0.00.607.613 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.613 I llm_load_print_meta: freq_scale_train = 1
0.00.607.614 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.614 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.615 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.615 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.615 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.616 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.617 I llm_load_print_meta: model type       = 2B
0.00.607.618 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.607.619 I llm_load_print_meta: model params     = 2.51 B
0.00.607.630 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.607.631 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.632 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.657 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.659 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.660 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.661 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.661 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.668 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.670 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.671 I llm_load_print_meta: max token length = 93
0.00.607.840 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.669.493 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.669.504 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.669.505 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.669.506 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.669.507 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.669.507 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.675.136 I llama_new_context_with_model: n_ctx      = 8192
0.00.675.144 I llama_new_context_with_model: n_batch    = 2048
0.00.675.144 I llama_new_context_with_model: n_ubatch   = 512
0.00.675.145 I llama_new_context_with_model: flash_attn = 0
0.00.675.147 I llama_new_context_with_model: freq_base  = 10000.0
0.00.675.148 I llama_new_context_with_model: freq_scale = 1
0.00.705.924 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.705.965 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.706.087 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.707.520 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.707.525 I llama_new_context_with_model: graph nodes  = 601
0.00.707.525 I llama_new_context_with_model: graph splits = 1
0.00.707.541 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.288.605 I main: llama threadpool init, n_threads = 4
0.01.288.618 I 
0.01.288.727 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.288.732 I 
0.01.288.914 I sampler seed: 2381026676
0.01.288.925 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.288.932 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.288.933 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.288.933 I 
 maneuvously, their eyes gleaming with mischief. The air crackled with anticipation as the moment arrived.

The dancer, a vision of ethereal grace and effortless

0.12.180.166 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.81 tokens per second)
0.12.180.169 I llama_perf_context_print:        load time =    1285.74 ms
0.12.180.171 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.180.182 I llama_perf_context_print:        eval time =   10796.33 ms /    32 runs   (  337.39 ms per token,     2.96 tokens per second)
0.12.180.184 I llama_perf_context_print:       total time =   10891.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3972 (167a5156)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 199162.81 ms
main:    total time = 199162.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.658 I build: 3972 (167a5156) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.867 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.024.731 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.831 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.847 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.848 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.853 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.857 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.858 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.859 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.860 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.862 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.875 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.877 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.879 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.880 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.882 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.152.886 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.722 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.270.944 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.270.952 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.270.953 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.270.954 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.270.955 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.270.957 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.270.959 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.270.963 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.270.964 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.270.972 I llama_model_loader: - type  f32:   37 tensors
0.00.270.977 I llama_model_loader: - type q4_K:  108 tensors
0.00.270.978 I llama_model_loader: - type q6_K:   19 tensors
0.00.452.253 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.512.969 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.513.918 I llm_load_vocab: special tokens cache size = 5
0.00.615.993 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.069 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.073 I llm_load_print_meta: arch             = gemma
0.00.616.074 I llm_load_print_meta: vocab type       = SPM
0.00.616.075 I llm_load_print_meta: n_vocab          = 256000
0.00.616.077 I llm_load_print_meta: n_merges         = 0
0.00.616.078 I llm_load_print_meta: vocab_only       = 0
0.00.616.078 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.079 I llm_load_print_meta: n_embd           = 2048
0.00.616.079 I llm_load_print_meta: n_layer          = 18
0.00.616.144 I llm_load_print_meta: n_head           = 8
0.00.616.154 I llm_load_print_meta: n_head_kv        = 1
0.00.616.155 I llm_load_print_meta: n_rot            = 256
0.00.616.155 I llm_load_print_meta: n_swa            = 0
0.00.616.156 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.157 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.162 I llm_load_print_meta: n_gqa            = 8
0.00.616.167 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.171 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.175 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.176 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.177 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.177 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.178 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.183 I llm_load_print_meta: n_ff             = 16384
0.00.616.183 I llm_load_print_meta: n_expert         = 0
0.00.616.184 I llm_load_print_meta: n_expert_used    = 0
0.00.616.184 I llm_load_print_meta: causal attn      = 1
0.00.616.184 I llm_load_print_meta: pooling type     = 0
0.00.616.185 I llm_load_print_meta: rope type        = 2
0.00.616.185 I llm_load_print_meta: rope scaling     = linear
0.00.616.187 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.187 I llm_load_print_meta: freq_scale_train = 1
0.00.616.188 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.197 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.198 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.209 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.209 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.210 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.217 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.218 I llm_load_print_meta: model type       = 2B
0.00.616.220 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.616.221 I llm_load_print_meta: model params     = 2.51 B
0.00.616.222 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.616.223 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.224 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.224 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.225 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.225 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.225 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.226 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.233 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.234 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.234 I llm_load_print_meta: max token length = 93
0.00.616.413 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.674.394 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.680.118 I llama_new_context_with_model: n_ctx      = 8192
0.00.680.124 I llama_new_context_with_model: n_batch    = 2048
0.00.680.125 I llama_new_context_with_model: n_ubatch   = 512
0.00.680.125 I llama_new_context_with_model: flash_attn = 0
0.00.680.128 I llama_new_context_with_model: freq_base  = 10000.0
0.00.680.128 I llama_new_context_with_model: freq_scale = 1
0.00.709.760 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.709.805 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.709.930 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.711.285 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.711.290 I llama_new_context_with_model: graph nodes  = 601
0.00.711.290 I llama_new_context_with_model: graph splits = 1
0.00.711.306 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.291.551 I main: llama threadpool init, n_threads = 4
0.01.291.564 I 
0.01.291.684 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.291.690 I 
0.01.291.903 I sampler seed: 2114864303
0.01.291.915 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.291.922 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.291.923 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.291.923 I 
 effega,
I am unable to access the internet at the moment. Is there a way I can access my files remotely?

I have a number of

0.12.207.437 I llama_perf_sampler_print:    sampling time =      49.11 ms /    33 runs   (    1.49 ms per token,   671.96 tokens per second)
0.12.207.441 I llama_perf_context_print:        load time =    1288.64 ms
0.12.207.442 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.207.443 I llama_perf_context_print:        eval time =   10821.70 ms /    32 runs   (  338.18 ms per token,     2.96 tokens per second)
0.12.207.444 I llama_perf_context_print:       total time =   10915.90 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m6.259s
user	50m15.897s
sys	0m6.446s
