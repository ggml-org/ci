+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.173 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.382 I main: llama backend init
0.00.000.391 I main: load the model and apply lora adapter, if any
0.00.020.685 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.695 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.703 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.711 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.716 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.719 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.719 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.720 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.721 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.722 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.723 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.727 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.728 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.729 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.730 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.731 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.862 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.216 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.027 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.033 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.034 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.034 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.035 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.036 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.037 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.038 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.039 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.040 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.040 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.041 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.044 I llama_model_loader: - type  f32:   37 tensors
0.00.130.045 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.371 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.240.606 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.241.142 I llm_load_vocab: special tokens cache size = 5
0.00.261.875 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.261.890 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.261.890 I llm_load_print_meta: arch             = gemma
0.00.261.891 I llm_load_print_meta: vocab type       = SPM
0.00.261.891 I llm_load_print_meta: n_vocab          = 256000
0.00.261.892 I llm_load_print_meta: n_merges         = 0
0.00.261.892 I llm_load_print_meta: vocab_only       = 0
0.00.261.892 I llm_load_print_meta: n_ctx_train      = 8192
0.00.261.893 I llm_load_print_meta: n_embd           = 2048
0.00.261.893 I llm_load_print_meta: n_layer          = 18
0.00.261.902 I llm_load_print_meta: n_head           = 8
0.00.261.903 I llm_load_print_meta: n_head_kv        = 1
0.00.261.904 I llm_load_print_meta: n_rot            = 256
0.00.261.904 I llm_load_print_meta: n_swa            = 0
0.00.261.904 I llm_load_print_meta: n_embd_head_k    = 256
0.00.261.905 I llm_load_print_meta: n_embd_head_v    = 256
0.00.261.906 I llm_load_print_meta: n_gqa            = 8
0.00.261.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.261.907 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.261.908 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.261.909 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.261.909 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.261.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.261.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.261.911 I llm_load_print_meta: n_ff             = 16384
0.00.261.911 I llm_load_print_meta: n_expert         = 0
0.00.261.911 I llm_load_print_meta: n_expert_used    = 0
0.00.261.912 I llm_load_print_meta: causal attn      = 1
0.00.261.912 I llm_load_print_meta: pooling type     = 0
0.00.261.912 I llm_load_print_meta: rope type        = 2
0.00.261.913 I llm_load_print_meta: rope scaling     = linear
0.00.261.914 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.261.914 I llm_load_print_meta: freq_scale_train = 1
0.00.261.915 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.261.915 I llm_load_print_meta: rope_finetuned   = unknown
0.00.261.915 I llm_load_print_meta: ssm_d_conv       = 0
0.00.261.915 I llm_load_print_meta: ssm_d_inner      = 0
0.00.261.916 I llm_load_print_meta: ssm_d_state      = 0
0.00.261.916 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.261.916 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.261.917 I llm_load_print_meta: model type       = 2B
0.00.261.917 I llm_load_print_meta: model ftype      = Q8_0
0.00.261.918 I llm_load_print_meta: model params     = 2.51 B
0.00.261.919 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.261.919 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.261.920 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.261.920 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.261.920 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.261.921 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.261.921 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.261.921 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.261.921 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.261.922 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.261.922 I llm_load_print_meta: max token length = 93
0.00.364.100 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.364.106 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.364.107 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.364.108 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.364.108 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.364.109 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.369.369 I llama_new_context_with_model: n_seq_max     = 1
0.00.369.376 I llama_new_context_with_model: n_ctx         = 4096
0.00.369.376 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.369.376 I llama_new_context_with_model: n_batch       = 2048
0.00.369.377 I llama_new_context_with_model: n_ubatch      = 512
0.00.369.377 I llama_new_context_with_model: flash_attn    = 0
0.00.369.380 I llama_new_context_with_model: freq_base     = 10000.0
0.00.369.381 I llama_new_context_with_model: freq_scale    = 1
0.00.369.382 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.401 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.383.722 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.383.736 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.383.833 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.385.095 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.385.102 I llama_new_context_with_model: graph nodes  = 601
0.00.385.102 I llama_new_context_with_model: graph splits = 1
0.00.385.105 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.385.105 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.470.444 I main: llama threadpool init, n_threads = 4
0.00.470.474 I 
0.00.470.559 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.470.563 I 
0.00.470.610 I sampler seed: 1401760476
0.00.470.621 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.470.633 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.470.637 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.470.637 I 
 increasively. [end of text]


0.00.756.638 I llama_perf_sampler_print:    sampling time =       0.65 ms /     5 runs   (    0.13 ms per token,  7751.94 tokens per second)
0.00.756.640 I llama_perf_context_print:        load time =     470.03 ms
0.00.756.641 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.756.642 I llama_perf_context_print:        eval time =     282.54 ms /     4 runs   (   70.63 ms per token,    14.16 tokens per second)
0.00.756.643 I llama_perf_context_print:       total time =     286.20 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.422 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.620 I main: llama backend init
0.00.000.627 I main: load the model and apply lora adapter, if any
0.00.020.910 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.928 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.935 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.939 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.942 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.942 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.943 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.944 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.944 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.944 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.949 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.950 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.951 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.952 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.952 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.178 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.069 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.898 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.905 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.905 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.906 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.906 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.907 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.908 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.910 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.911 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.911 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.913 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.129.913 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.916 I llama_model_loader: - type  f32:   37 tensors
0.00.129.917 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.967 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.238.645 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.057 I llm_load_vocab: special tokens cache size = 5
0.00.259.699 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.259.717 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.259.717 I llm_load_print_meta: arch             = gemma
0.00.259.718 I llm_load_print_meta: vocab type       = SPM
0.00.259.718 I llm_load_print_meta: n_vocab          = 256000
0.00.259.719 I llm_load_print_meta: n_merges         = 0
0.00.259.719 I llm_load_print_meta: vocab_only       = 0
0.00.259.719 I llm_load_print_meta: n_ctx_train      = 8192
0.00.259.720 I llm_load_print_meta: n_embd           = 2048
0.00.259.720 I llm_load_print_meta: n_layer          = 18
0.00.259.732 I llm_load_print_meta: n_head           = 8
0.00.259.733 I llm_load_print_meta: n_head_kv        = 1
0.00.259.733 I llm_load_print_meta: n_rot            = 256
0.00.259.733 I llm_load_print_meta: n_swa            = 0
0.00.259.734 I llm_load_print_meta: n_embd_head_k    = 256
0.00.259.734 I llm_load_print_meta: n_embd_head_v    = 256
0.00.259.735 I llm_load_print_meta: n_gqa            = 8
0.00.259.736 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.259.737 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.259.738 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.259.739 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.259.740 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.259.740 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.259.740 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.259.741 I llm_load_print_meta: n_ff             = 16384
0.00.259.741 I llm_load_print_meta: n_expert         = 0
0.00.259.742 I llm_load_print_meta: n_expert_used    = 0
0.00.259.742 I llm_load_print_meta: causal attn      = 1
0.00.259.742 I llm_load_print_meta: pooling type     = 0
0.00.259.743 I llm_load_print_meta: rope type        = 2
0.00.259.743 I llm_load_print_meta: rope scaling     = linear
0.00.259.745 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.259.745 I llm_load_print_meta: freq_scale_train = 1
0.00.259.746 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.259.746 I llm_load_print_meta: rope_finetuned   = unknown
0.00.259.746 I llm_load_print_meta: ssm_d_conv       = 0
0.00.259.747 I llm_load_print_meta: ssm_d_inner      = 0
0.00.259.747 I llm_load_print_meta: ssm_d_state      = 0
0.00.259.747 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.259.747 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.259.748 I llm_load_print_meta: model type       = 2B
0.00.259.748 I llm_load_print_meta: model ftype      = Q8_0
0.00.259.749 I llm_load_print_meta: model params     = 2.51 B
0.00.259.750 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.259.750 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.259.751 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.259.751 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.259.752 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.259.752 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.259.752 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.259.752 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.259.753 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.259.753 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.259.754 I llm_load_print_meta: max token length = 93
0.00.356.127 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.212 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.218 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.218 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.218 I llama_new_context_with_model: n_batch       = 2048
0.00.361.219 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.219 I llama_new_context_with_model: flash_attn    = 0
0.00.361.221 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.222 I llama_new_context_with_model: freq_scale    = 1
0.00.361.223 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.243 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.375.510 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.375.525 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.375.617 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.849 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.855 I llama_new_context_with_model: graph nodes  = 601
0.00.376.855 I llama_new_context_with_model: graph splits = 1
0.00.376.857 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.376.858 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.458.315 I main: llama threadpool init, n_threads = 4
0.00.458.331 I 
0.00.458.406 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.458.409 I 
0.00.458.451 I sampler seed: 1687286577
0.00.458.462 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.458.473 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.458.477 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.458.477 I 
 increasively through the passage.

The passage is about a young boy named Billy who is experiencing a difficult time. He feels sad, lonely, and frustrated.

0.02.632.571 I llama_perf_sampler_print:    sampling time =       4.66 ms /    33 runs   (    0.14 ms per token,  7087.63 tokens per second)
0.02.632.574 I llama_perf_context_print:        load time =     457.67 ms
0.02.632.576 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.632.578 I llama_perf_context_print:        eval time =    2156.03 ms /    32 runs   (   67.38 ms per token,    14.84 tokens per second)
0.02.632.578 I llama_perf_context_print:       total time =    2174.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.574 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.776 I main: llama backend init
0.00.000.783 I main: load the model and apply lora adapter, if any
0.00.021.426 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.436 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.445 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.450 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.451 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.454 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.455 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.456 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.456 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.457 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.457 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.462 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.463 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.464 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.465 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.465 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.431 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.052 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.844 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.850 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.851 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.852 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.852 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.853 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.854 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.856 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.856 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.857 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.858 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.131.858 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.861 I llama_model_loader: - type  f32:   37 tensors
0.00.131.863 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.598 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.245.528 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.245.984 I llm_load_vocab: special tokens cache size = 5
0.00.266.496 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.266.512 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.266.513 I llm_load_print_meta: arch             = gemma
0.00.266.514 I llm_load_print_meta: vocab type       = SPM
0.00.266.515 I llm_load_print_meta: n_vocab          = 256000
0.00.266.516 I llm_load_print_meta: n_merges         = 0
0.00.266.516 I llm_load_print_meta: vocab_only       = 0
0.00.266.516 I llm_load_print_meta: n_ctx_train      = 8192
0.00.266.517 I llm_load_print_meta: n_embd           = 2048
0.00.266.517 I llm_load_print_meta: n_layer          = 18
0.00.266.528 I llm_load_print_meta: n_head           = 8
0.00.266.530 I llm_load_print_meta: n_head_kv        = 1
0.00.266.530 I llm_load_print_meta: n_rot            = 256
0.00.266.530 I llm_load_print_meta: n_swa            = 0
0.00.266.531 I llm_load_print_meta: n_embd_head_k    = 256
0.00.266.531 I llm_load_print_meta: n_embd_head_v    = 256
0.00.266.532 I llm_load_print_meta: n_gqa            = 8
0.00.266.533 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.266.534 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.266.535 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.266.537 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.266.537 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.266.537 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.266.538 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.266.539 I llm_load_print_meta: n_ff             = 16384
0.00.266.542 I llm_load_print_meta: n_expert         = 0
0.00.266.542 I llm_load_print_meta: n_expert_used    = 0
0.00.266.542 I llm_load_print_meta: causal attn      = 1
0.00.266.543 I llm_load_print_meta: pooling type     = 0
0.00.266.543 I llm_load_print_meta: rope type        = 2
0.00.266.543 I llm_load_print_meta: rope scaling     = linear
0.00.266.545 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.266.545 I llm_load_print_meta: freq_scale_train = 1
0.00.266.546 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.266.546 I llm_load_print_meta: rope_finetuned   = unknown
0.00.266.546 I llm_load_print_meta: ssm_d_conv       = 0
0.00.266.547 I llm_load_print_meta: ssm_d_inner      = 0
0.00.266.547 I llm_load_print_meta: ssm_d_state      = 0
0.00.266.547 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.266.548 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.266.549 I llm_load_print_meta: model type       = 2B
0.00.266.549 I llm_load_print_meta: model ftype      = Q8_0
0.00.266.550 I llm_load_print_meta: model params     = 2.51 B
0.00.266.560 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.266.561 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.266.562 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.266.562 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.266.563 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.266.563 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.266.564 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.266.564 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.266.565 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.266.565 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.266.565 I llm_load_print_meta: max token length = 93
0.00.344.786 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.344.792 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.793 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.344.794 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.344.795 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.344.795 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.349.891 I llama_new_context_with_model: n_seq_max     = 1
0.00.349.898 I llama_new_context_with_model: n_ctx         = 4096
0.00.349.898 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.349.898 I llama_new_context_with_model: n_batch       = 2048
0.00.349.899 I llama_new_context_with_model: n_ubatch      = 512
0.00.349.899 I llama_new_context_with_model: flash_attn    = 0
0.00.349.902 I llama_new_context_with_model: freq_base     = 10000.0
0.00.349.903 I llama_new_context_with_model: freq_scale    = 1
0.00.349.903 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.349.922 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.363.947 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.363.961 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.050 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.365.290 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.365.297 I llama_new_context_with_model: graph nodes  = 601
0.00.365.297 I llama_new_context_with_model: graph splits = 1
0.00.365.299 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.365.300 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.029 I main: llama threadpool init, n_threads = 4
0.00.451.044 I 
0.00.451.115 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.115 I 
0.00.451.155 I sampler seed: 1324305726
0.00.451.164 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.171 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.172 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.172 I 
 increasities is a common feature of many species. 

**What are increasities?**

- The production of new offspring before the parents have had a

0.02.691.000 I llama_perf_sampler_print:    sampling time =       4.82 ms /    33 runs   (    0.15 ms per token,  6845.05 tokens per second)
0.02.691.002 I llama_perf_context_print:        load time =     450.23 ms
0.02.691.004 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.691.005 I llama_perf_context_print:        eval time =    2221.70 ms /    32 runs   (   69.43 ms per token,    14.40 tokens per second)
0.02.691.006 I llama_perf_context_print:       total time =    2239.98 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.176 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.360 I main: llama backend init
0.00.000.366 I main: load the model and apply lora adapter, if any
0.00.019.985 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.019.994 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.020.005 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.009 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.013 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.015 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.015 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.016 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.016 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.029 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.033 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.034 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.035 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.035 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.036 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.047.396 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.528 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.403 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.410 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.411 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.411 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.412 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.413 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.414 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.416 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.416 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.417 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.417 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.129.419 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.422 I llama_model_loader: - type  f32:   37 tensors
0.00.129.423 I llama_model_loader: - type q8_0:  127 tensors
0.00.204.891 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.255.767 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.256.510 I llm_load_vocab: special tokens cache size = 5
0.00.277.726 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.277.745 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.277.747 I llm_load_print_meta: arch             = gemma
0.00.277.748 I llm_load_print_meta: vocab type       = SPM
0.00.277.749 I llm_load_print_meta: n_vocab          = 256000
0.00.277.749 I llm_load_print_meta: n_merges         = 0
0.00.277.749 I llm_load_print_meta: vocab_only       = 0
0.00.277.750 I llm_load_print_meta: n_ctx_train      = 8192
0.00.277.750 I llm_load_print_meta: n_embd           = 2048
0.00.277.750 I llm_load_print_meta: n_layer          = 18
0.00.277.763 I llm_load_print_meta: n_head           = 8
0.00.277.765 I llm_load_print_meta: n_head_kv        = 1
0.00.277.765 I llm_load_print_meta: n_rot            = 256
0.00.277.765 I llm_load_print_meta: n_swa            = 0
0.00.277.766 I llm_load_print_meta: n_embd_head_k    = 256
0.00.277.766 I llm_load_print_meta: n_embd_head_v    = 256
0.00.277.767 I llm_load_print_meta: n_gqa            = 8
0.00.277.768 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.277.769 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.277.770 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.277.771 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.277.771 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.277.771 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.277.772 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.277.772 I llm_load_print_meta: n_ff             = 16384
0.00.277.773 I llm_load_print_meta: n_expert         = 0
0.00.277.773 I llm_load_print_meta: n_expert_used    = 0
0.00.277.774 I llm_load_print_meta: causal attn      = 1
0.00.277.774 I llm_load_print_meta: pooling type     = 0
0.00.277.774 I llm_load_print_meta: rope type        = 2
0.00.277.775 I llm_load_print_meta: rope scaling     = linear
0.00.277.777 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.277.777 I llm_load_print_meta: freq_scale_train = 1
0.00.277.778 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.277.778 I llm_load_print_meta: rope_finetuned   = unknown
0.00.277.778 I llm_load_print_meta: ssm_d_conv       = 0
0.00.277.778 I llm_load_print_meta: ssm_d_inner      = 0
0.00.277.779 I llm_load_print_meta: ssm_d_state      = 0
0.00.277.779 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.277.779 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.277.780 I llm_load_print_meta: model type       = 2B
0.00.277.780 I llm_load_print_meta: model ftype      = Q8_0
0.00.277.781 I llm_load_print_meta: model params     = 2.51 B
0.00.277.782 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.277.782 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.277.782 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.277.783 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.277.783 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.277.783 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.277.784 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.277.784 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.277.785 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.277.785 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.277.786 I llm_load_print_meta: max token length = 93
0.00.350.496 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.350.505 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.355.525 I llama_new_context_with_model: n_seq_max     = 1
0.00.355.531 I llama_new_context_with_model: n_ctx         = 4096
0.00.355.531 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.355.531 I llama_new_context_with_model: n_batch       = 2048
0.00.355.532 I llama_new_context_with_model: n_ubatch      = 512
0.00.355.532 I llama_new_context_with_model: flash_attn    = 0
0.00.355.534 I llama_new_context_with_model: freq_base     = 10000.0
0.00.355.535 I llama_new_context_with_model: freq_scale    = 1
0.00.355.536 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.555 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.369.944 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.958 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.370.048 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.371.298 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.371.304 I llama_new_context_with_model: graph nodes  = 601
0.00.371.305 I llama_new_context_with_model: graph splits = 1
0.00.371.307 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.371.308 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.459.062 I main: llama threadpool init, n_threads = 4
0.00.459.079 I 
0.00.459.154 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.459.157 I 
0.00.459.201 I sampler seed: 732062720
0.00.459.212 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.459.214 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.459.215 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.459.215 I 
 seconals.
I am unable to generate a response that meets the safety and ethical guidelines, as it involves sexually suggestive or inappropriate content. [end of text]


0.02.652.317 I llama_perf_sampler_print:    sampling time =       5.04 ms /    30 runs   (    0.17 ms per token,  5954.74 tokens per second)
0.02.652.319 I llama_perf_context_print:        load time =     458.68 ms
0.02.652.320 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.652.322 I llama_perf_context_print:        eval time =    2174.87 ms /    29 runs   (   75.00 ms per token,    13.33 tokens per second)
0.02.652.322 I llama_perf_context_print:       total time =    2193.26 ms /    30 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.233s
user	0m30.399s
sys	0m9.310s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4394 (16cdce7b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40256.62 ms
main:    total time = 40256.62 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.524 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.713 I main: llama backend init
0.00.000.721 I main: load the model and apply lora adapter, if any
0.00.021.419 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.430 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.442 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.449 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.450 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.453 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.453 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.454 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.455 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.455 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.455 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.459 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.459 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.460 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.460 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.461 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.595 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.051 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.939 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.947 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.948 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.948 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.949 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.950 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.950 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.953 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.954 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.955 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.955 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.956 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.960 I llama_model_loader: - type  f32:   37 tensors
0.00.130.962 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.962 I llama_model_loader: - type q6_K:   19 tensors
0.00.210.670 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.435 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.969 I llm_load_vocab: special tokens cache size = 5
0.00.270.994 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.271.009 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.271.009 I llm_load_print_meta: arch             = gemma
0.00.271.010 I llm_load_print_meta: vocab type       = SPM
0.00.271.010 I llm_load_print_meta: n_vocab          = 256000
0.00.271.011 I llm_load_print_meta: n_merges         = 0
0.00.271.011 I llm_load_print_meta: vocab_only       = 0
0.00.271.012 I llm_load_print_meta: n_ctx_train      = 8192
0.00.271.012 I llm_load_print_meta: n_embd           = 2048
0.00.271.012 I llm_load_print_meta: n_layer          = 18
0.00.271.023 I llm_load_print_meta: n_head           = 8
0.00.271.024 I llm_load_print_meta: n_head_kv        = 1
0.00.271.024 I llm_load_print_meta: n_rot            = 256
0.00.271.025 I llm_load_print_meta: n_swa            = 0
0.00.271.025 I llm_load_print_meta: n_embd_head_k    = 256
0.00.271.025 I llm_load_print_meta: n_embd_head_v    = 256
0.00.271.026 I llm_load_print_meta: n_gqa            = 8
0.00.271.027 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.271.028 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.271.029 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.271.030 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.271.031 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.271.031 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.271.031 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.271.032 I llm_load_print_meta: n_ff             = 16384
0.00.271.033 I llm_load_print_meta: n_expert         = 0
0.00.271.033 I llm_load_print_meta: n_expert_used    = 0
0.00.271.033 I llm_load_print_meta: causal attn      = 1
0.00.271.034 I llm_load_print_meta: pooling type     = 0
0.00.271.034 I llm_load_print_meta: rope type        = 2
0.00.271.035 I llm_load_print_meta: rope scaling     = linear
0.00.271.036 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.271.037 I llm_load_print_meta: freq_scale_train = 1
0.00.271.037 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.271.038 I llm_load_print_meta: rope_finetuned   = unknown
0.00.271.038 I llm_load_print_meta: ssm_d_conv       = 0
0.00.271.038 I llm_load_print_meta: ssm_d_inner      = 0
0.00.271.038 I llm_load_print_meta: ssm_d_state      = 0
0.00.271.039 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.271.039 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.271.040 I llm_load_print_meta: model type       = 2B
0.00.271.040 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.271.041 I llm_load_print_meta: model params     = 2.51 B
0.00.271.042 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.271.042 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.271.043 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.271.043 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.271.043 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.271.044 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.271.044 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.271.045 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.271.045 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.271.046 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.271.046 I llm_load_print_meta: max token length = 93
0.00.332.189 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.332.195 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.332.196 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.332.196 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.332.197 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.332.197 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.337.314 I llama_new_context_with_model: n_seq_max     = 1
0.00.337.320 I llama_new_context_with_model: n_ctx         = 4096
0.00.337.321 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.337.321 I llama_new_context_with_model: n_batch       = 2048
0.00.337.321 I llama_new_context_with_model: n_ubatch      = 512
0.00.337.322 I llama_new_context_with_model: flash_attn    = 0
0.00.337.324 I llama_new_context_with_model: freq_base     = 10000.0
0.00.337.325 I llama_new_context_with_model: freq_scale    = 1
0.00.337.326 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.337.343 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.351.412 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.351.425 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.351.511 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.352.819 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.352.826 I llama_new_context_with_model: graph nodes  = 601
0.00.352.826 I llama_new_context_with_model: graph splits = 1
0.00.352.828 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.352.828 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.413 I main: llama threadpool init, n_threads = 4
0.00.427.427 I 
0.00.427.500 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.427.503 I 
0.00.427.544 I sampler seed: 471856264
0.00.427.555 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.559 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.427.560 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.427.560 I 
 increamically, and with great fervor.

What is the meaning of this passage?

The passage is a quote from a poem about a moment of intense excitement

0.02.008.037 I llama_perf_sampler_print:    sampling time =       5.14 ms /    33 runs   (    0.16 ms per token,  6417.74 tokens per second)
0.02.008.040 I llama_perf_context_print:        load time =     426.68 ms
0.02.008.041 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.008.042 I llama_perf_context_print:        eval time =    1562.24 ms /    32 runs   (   48.82 ms per token,    20.48 tokens per second)
0.02.008.043 I llama_perf_context_print:       total time =    1580.63 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4394 (16cdce7b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40267.25 ms
main:    total time = 40267.25 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.580 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.784 I main: llama backend init
0.00.000.790 I main: load the model and apply lora adapter, if any
0.00.021.486 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.506 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.518 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.522 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.530 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.531 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.532 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.532 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.533 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.534 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.538 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.539 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.540 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.540 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.541 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.354 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.940 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.732 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.738 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.739 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.740 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.740 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.741 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.742 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.744 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.745 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.749 I llama_model_loader: - type  f32:   37 tensors
0.00.131.750 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.751 I llama_model_loader: - type q6_K:   19 tensors
0.00.207.027 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.250.598 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.251.206 I llm_load_vocab: special tokens cache size = 5
0.00.272.127 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.272.144 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.272.144 I llm_load_print_meta: arch             = gemma
0.00.272.145 I llm_load_print_meta: vocab type       = SPM
0.00.272.145 I llm_load_print_meta: n_vocab          = 256000
0.00.272.146 I llm_load_print_meta: n_merges         = 0
0.00.272.146 I llm_load_print_meta: vocab_only       = 0
0.00.272.146 I llm_load_print_meta: n_ctx_train      = 8192
0.00.272.147 I llm_load_print_meta: n_embd           = 2048
0.00.272.147 I llm_load_print_meta: n_layer          = 18
0.00.272.158 I llm_load_print_meta: n_head           = 8
0.00.272.159 I llm_load_print_meta: n_head_kv        = 1
0.00.272.159 I llm_load_print_meta: n_rot            = 256
0.00.272.159 I llm_load_print_meta: n_swa            = 0
0.00.272.160 I llm_load_print_meta: n_embd_head_k    = 256
0.00.272.160 I llm_load_print_meta: n_embd_head_v    = 256
0.00.272.161 I llm_load_print_meta: n_gqa            = 8
0.00.272.162 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.272.163 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.272.164 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.272.165 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.272.166 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.272.166 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.272.166 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.272.167 I llm_load_print_meta: n_ff             = 16384
0.00.272.168 I llm_load_print_meta: n_expert         = 0
0.00.272.168 I llm_load_print_meta: n_expert_used    = 0
0.00.272.168 I llm_load_print_meta: causal attn      = 1
0.00.272.168 I llm_load_print_meta: pooling type     = 0
0.00.272.169 I llm_load_print_meta: rope type        = 2
0.00.272.169 I llm_load_print_meta: rope scaling     = linear
0.00.272.170 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.272.171 I llm_load_print_meta: freq_scale_train = 1
0.00.272.171 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.272.172 I llm_load_print_meta: rope_finetuned   = unknown
0.00.272.172 I llm_load_print_meta: ssm_d_conv       = 0
0.00.272.172 I llm_load_print_meta: ssm_d_inner      = 0
0.00.272.173 I llm_load_print_meta: ssm_d_state      = 0
0.00.272.173 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.272.173 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.272.174 I llm_load_print_meta: model type       = 2B
0.00.272.174 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.272.175 I llm_load_print_meta: model params     = 2.51 B
0.00.272.175 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.272.176 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.272.176 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.272.177 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.272.177 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.272.177 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.272.178 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.272.178 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.272.178 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.272.179 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.272.179 I llm_load_print_meta: max token length = 93
0.00.330.534 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.335.636 I llama_new_context_with_model: n_seq_max     = 1
0.00.335.642 I llama_new_context_with_model: n_ctx         = 4096
0.00.335.643 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.335.643 I llama_new_context_with_model: n_batch       = 2048
0.00.335.644 I llama_new_context_with_model: n_ubatch      = 512
0.00.335.644 I llama_new_context_with_model: flash_attn    = 0
0.00.335.646 I llama_new_context_with_model: freq_base     = 10000.0
0.00.335.647 I llama_new_context_with_model: freq_scale    = 1
0.00.335.648 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.335.669 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.350.551 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.350.567 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.350.659 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.351.905 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.351.911 I llama_new_context_with_model: graph nodes  = 601
0.00.351.912 I llama_new_context_with_model: graph splits = 1
0.00.351.914 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.351.915 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.425.658 I main: llama threadpool init, n_threads = 4
0.00.425.673 I 
0.00.425.752 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.425.755 I 
0.00.425.797 I sampler seed: 2322499840
0.00.425.808 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.425.821 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.425.824 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.425.825 I 
 seconded the two previous questions.

**Question 1:** What are the main challenges and opportunities associated with implementing a blockchain-based governance model?

**

0.01.964.030 I llama_perf_sampler_print:    sampling time =       4.96 ms /    33 runs   (    0.15 ms per token,  6650.54 tokens per second)
0.01.964.032 I llama_perf_context_print:        load time =     424.85 ms
0.01.964.035 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.964.037 I llama_perf_context_print:        eval time =    1520.11 ms /    32 runs   (   47.50 ms per token,    21.05 tokens per second)
0.01.964.037 I llama_perf_context_print:       total time =    1538.38 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.660s
user	10m23.910s
sys	0m6.960s
