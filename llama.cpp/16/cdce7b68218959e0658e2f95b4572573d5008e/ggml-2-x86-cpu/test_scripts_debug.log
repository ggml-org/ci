+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.640 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.000.874 I main: load the model and apply lora adapter, if any
0.00.023.110 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.121 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.209 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.221 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.223 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.227 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.230 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.232 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.233 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.234 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.235 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.243 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.244 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.246 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.247 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.248 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.225.267 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.327.568 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.351.630 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.351.639 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.351.640 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.351.642 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.351.643 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.351.645 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.351.646 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.351.650 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.351.651 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.351.653 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.351.654 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.351.656 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.351.666 I llama_model_loader: - type  f32:   37 tensors
0.00.351.669 I llama_model_loader: - type q8_0:  127 tensors
0.00.556.018 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.615.552 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.616.468 I llm_load_vocab: special tokens cache size = 5
0.00.821.616 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.821.692 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.821.696 I llm_load_print_meta: arch             = gemma
0.00.821.697 I llm_load_print_meta: vocab type       = SPM
0.00.821.698 I llm_load_print_meta: n_vocab          = 256000
0.00.821.700 I llm_load_print_meta: n_merges         = 0
0.00.821.701 I llm_load_print_meta: vocab_only       = 0
0.00.821.701 I llm_load_print_meta: n_ctx_train      = 8192
0.00.821.702 I llm_load_print_meta: n_embd           = 2048
0.00.821.702 I llm_load_print_meta: n_layer          = 18
0.00.821.770 I llm_load_print_meta: n_head           = 8
0.00.821.780 I llm_load_print_meta: n_head_kv        = 1
0.00.821.781 I llm_load_print_meta: n_rot            = 256
0.00.821.782 I llm_load_print_meta: n_swa            = 0
0.00.821.782 I llm_load_print_meta: n_embd_head_k    = 256
0.00.821.782 I llm_load_print_meta: n_embd_head_v    = 256
0.00.821.787 I llm_load_print_meta: n_gqa            = 8
0.00.821.792 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.821.798 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.821.799 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.821.800 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.821.801 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.821.802 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.821.802 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.821.807 I llm_load_print_meta: n_ff             = 16384
0.00.821.809 I llm_load_print_meta: n_expert         = 0
0.00.821.809 I llm_load_print_meta: n_expert_used    = 0
0.00.821.809 I llm_load_print_meta: causal attn      = 1
0.00.821.809 I llm_load_print_meta: pooling type     = 0
0.00.821.810 I llm_load_print_meta: rope type        = 2
0.00.821.810 I llm_load_print_meta: rope scaling     = linear
0.00.821.812 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.821.813 I llm_load_print_meta: freq_scale_train = 1
0.00.821.813 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.821.814 I llm_load_print_meta: rope_finetuned   = unknown
0.00.821.814 I llm_load_print_meta: ssm_d_conv       = 0
0.00.821.815 I llm_load_print_meta: ssm_d_inner      = 0
0.00.821.815 I llm_load_print_meta: ssm_d_state      = 0
0.00.821.816 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.821.816 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.821.817 I llm_load_print_meta: model type       = 2B
0.00.821.818 I llm_load_print_meta: model ftype      = Q8_0
0.00.821.819 I llm_load_print_meta: model params     = 2.51 B
0.00.821.820 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.821.820 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.821.822 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.821.822 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.821.823 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.821.823 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.821.823 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.821.824 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.821.831 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.821.832 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.821.833 I llm_load_print_meta: max token length = 93
0.00.924.548 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.924.559 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.924.561 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.924.561 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.924.562 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.924.563 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.930.368 I llama_new_context_with_model: n_seq_max     = 1
0.00.930.375 I llama_new_context_with_model: n_ctx         = 4096
0.00.930.375 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.930.375 I llama_new_context_with_model: n_batch       = 2048
0.00.930.376 I llama_new_context_with_model: n_ubatch      = 512
0.00.930.376 I llama_new_context_with_model: flash_attn    = 0
0.00.930.379 I llama_new_context_with_model: freq_base     = 10000.0
0.00.930.380 I llama_new_context_with_model: freq_scale    = 1
0.00.930.380 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.930.465 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.944.615 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.944.654 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.944.774 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.947.470 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.947.473 I llama_new_context_with_model: graph nodes  = 601
0.00.947.474 I llama_new_context_with_model: graph splits = 1
0.00.947.498 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.947.501 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.557.296 I main: llama threadpool init, n_threads = 4
0.01.557.314 I 
0.01.557.434 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.557.439 I 
0.01.557.675 I sampler seed: 2303542541
0.01.557.690 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.557.699 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.557.703 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.557.703 I 
 increasities, and the development of a strong sense of national identity are some of the potential outcomes of the process. [end of text]


0.11.720.230 I llama_perf_sampler_print:    sampling time =      37.46 ms /    25 runs   (    1.50 ms per token,   667.43 tokens per second)
0.11.720.234 I llama_perf_context_print:        load time =    1556.33 ms
0.11.720.237 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.720.238 I llama_perf_context_print:        eval time =   10095.14 ms /    24 runs   (  420.63 ms per token,     2.38 tokens per second)
0.11.720.239 I llama_perf_context_print:       total time =   10162.94 ms /    25 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.704 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.915 I main: llama backend init
0.00.000.923 I main: load the model and apply lora adapter, if any
0.00.023.490 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.591 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.605 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.607 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.611 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.613 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.615 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.616 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.617 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.618 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.624 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.625 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.628 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.629 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.630 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.226.186 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.328.594 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.352.765 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.352.778 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.352.779 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.352.780 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.352.782 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.352.783 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.352.785 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.352.789 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.352.790 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.352.792 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.352.793 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.352.795 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.352.805 I llama_model_loader: - type  f32:   37 tensors
0.00.352.807 I llama_model_loader: - type q8_0:  127 tensors
0.00.588.140 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.649.376 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.650.349 I llm_load_vocab: special tokens cache size = 5
0.00.858.688 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.858.764 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.858.765 I llm_load_print_meta: arch             = gemma
0.00.858.766 I llm_load_print_meta: vocab type       = SPM
0.00.858.767 I llm_load_print_meta: n_vocab          = 256000
0.00.858.769 I llm_load_print_meta: n_merges         = 0
0.00.858.770 I llm_load_print_meta: vocab_only       = 0
0.00.858.770 I llm_load_print_meta: n_ctx_train      = 8192
0.00.858.770 I llm_load_print_meta: n_embd           = 2048
0.00.858.771 I llm_load_print_meta: n_layer          = 18
0.00.858.837 I llm_load_print_meta: n_head           = 8
0.00.858.845 I llm_load_print_meta: n_head_kv        = 1
0.00.858.846 I llm_load_print_meta: n_rot            = 256
0.00.858.846 I llm_load_print_meta: n_swa            = 0
0.00.858.852 I llm_load_print_meta: n_embd_head_k    = 256
0.00.858.852 I llm_load_print_meta: n_embd_head_v    = 256
0.00.858.857 I llm_load_print_meta: n_gqa            = 8
0.00.858.862 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.858.867 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.858.869 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.858.870 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.858.871 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.858.871 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.858.872 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.858.877 I llm_load_print_meta: n_ff             = 16384
0.00.858.877 I llm_load_print_meta: n_expert         = 0
0.00.858.888 I llm_load_print_meta: n_expert_used    = 0
0.00.858.889 I llm_load_print_meta: causal attn      = 1
0.00.858.890 I llm_load_print_meta: pooling type     = 0
0.00.858.896 I llm_load_print_meta: rope type        = 2
0.00.858.897 I llm_load_print_meta: rope scaling     = linear
0.00.858.898 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.858.910 I llm_load_print_meta: freq_scale_train = 1
0.00.858.911 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.858.914 I llm_load_print_meta: rope_finetuned   = unknown
0.00.858.914 I llm_load_print_meta: ssm_d_conv       = 0
0.00.858.915 I llm_load_print_meta: ssm_d_inner      = 0
0.00.858.917 I llm_load_print_meta: ssm_d_state      = 0
0.00.858.917 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.858.918 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.858.919 I llm_load_print_meta: model type       = 2B
0.00.858.920 I llm_load_print_meta: model ftype      = Q8_0
0.00.858.920 I llm_load_print_meta: model params     = 2.51 B
0.00.858.921 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.858.922 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.858.923 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.858.923 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.858.924 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.858.924 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.858.924 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.858.925 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.858.931 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.858.932 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.858.933 I llm_load_print_meta: max token length = 93
0.00.956.739 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.962.671 I llama_new_context_with_model: n_seq_max     = 1
0.00.962.679 I llama_new_context_with_model: n_ctx         = 4096
0.00.962.679 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.962.679 I llama_new_context_with_model: n_batch       = 2048
0.00.962.680 I llama_new_context_with_model: n_ubatch      = 512
0.00.962.681 I llama_new_context_with_model: flash_attn    = 0
0.00.962.683 I llama_new_context_with_model: freq_base     = 10000.0
0.00.962.684 I llama_new_context_with_model: freq_scale    = 1
0.00.962.685 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.962.774 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.977.222 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.977.262 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.977.394 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.980.041 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.980.045 I llama_new_context_with_model: graph nodes  = 601
0.00.980.046 I llama_new_context_with_model: graph splits = 1
0.00.980.070 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.980.073 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.603.227 I main: llama threadpool init, n_threads = 4
0.01.603.244 I 
0.01.603.367 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.603.367 I 
0.01.603.623 I sampler seed: 259523770
0.01.603.638 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.603.652 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.603.656 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.603.656 I 
 seconary.

**Assistant**

I understand. I will provide assistance with any questions or tasks you may have.

**Please provide me with the following

0.15.212.935 I llama_perf_sampler_print:    sampling time =      49.63 ms /    33 runs   (    1.50 ms per token,   664.93 tokens per second)
0.15.212.938 I llama_perf_context_print:        load time =    1602.22 ms
0.15.212.939 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.212.941 I llama_perf_context_print:        eval time =   13519.73 ms /    32 runs   (  422.49 ms per token,     2.37 tokens per second)
0.15.212.964 I llama_perf_context_print:       total time =   13609.72 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.654 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.887 I main: llama backend init
0.00.000.895 I main: load the model and apply lora adapter, if any
0.00.023.554 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.566 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.657 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.671 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.673 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.676 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.681 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.682 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.683 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.685 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.686 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.692 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.693 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.694 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.696 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.698 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.228.642 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.330.311 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.354.382 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.354.392 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.354.393 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.354.395 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.354.396 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.354.398 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.354.399 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.354.403 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.354.404 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.354.406 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.354.407 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.354.409 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.354.417 I llama_model_loader: - type  f32:   37 tensors
0.00.354.420 I llama_model_loader: - type q8_0:  127 tensors
0.00.558.452 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.619.486 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.620.409 I llm_load_vocab: special tokens cache size = 5
0.00.840.884 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.840.959 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.840.961 I llm_load_print_meta: arch             = gemma
0.00.840.961 I llm_load_print_meta: vocab type       = SPM
0.00.840.962 I llm_load_print_meta: n_vocab          = 256000
0.00.840.965 I llm_load_print_meta: n_merges         = 0
0.00.840.965 I llm_load_print_meta: vocab_only       = 0
0.00.840.965 I llm_load_print_meta: n_ctx_train      = 8192
0.00.840.966 I llm_load_print_meta: n_embd           = 2048
0.00.840.966 I llm_load_print_meta: n_layer          = 18
0.00.841.033 I llm_load_print_meta: n_head           = 8
0.00.841.041 I llm_load_print_meta: n_head_kv        = 1
0.00.841.042 I llm_load_print_meta: n_rot            = 256
0.00.841.047 I llm_load_print_meta: n_swa            = 0
0.00.841.048 I llm_load_print_meta: n_embd_head_k    = 256
0.00.841.048 I llm_load_print_meta: n_embd_head_v    = 256
0.00.841.053 I llm_load_print_meta: n_gqa            = 8
0.00.841.058 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.841.063 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.841.065 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.841.066 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.841.066 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.841.067 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.841.067 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.841.072 I llm_load_print_meta: n_ff             = 16384
0.00.841.073 I llm_load_print_meta: n_expert         = 0
0.00.841.073 I llm_load_print_meta: n_expert_used    = 0
0.00.841.074 I llm_load_print_meta: causal attn      = 1
0.00.841.074 I llm_load_print_meta: pooling type     = 0
0.00.841.075 I llm_load_print_meta: rope type        = 2
0.00.841.076 I llm_load_print_meta: rope scaling     = linear
0.00.841.078 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.841.078 I llm_load_print_meta: freq_scale_train = 1
0.00.841.078 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.841.079 I llm_load_print_meta: rope_finetuned   = unknown
0.00.841.079 I llm_load_print_meta: ssm_d_conv       = 0
0.00.841.102 I llm_load_print_meta: ssm_d_inner      = 0
0.00.841.104 I llm_load_print_meta: ssm_d_state      = 0
0.00.841.104 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.841.105 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.841.105 I llm_load_print_meta: model type       = 2B
0.00.841.107 I llm_load_print_meta: model ftype      = Q8_0
0.00.841.107 I llm_load_print_meta: model params     = 2.51 B
0.00.841.108 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.841.109 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.841.112 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.841.113 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.841.113 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.841.113 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.841.114 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.841.114 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.841.121 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.841.122 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.841.124 I llm_load_print_meta: max token length = 93
0.00.920.453 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.920.463 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.920.464 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.920.465 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.920.466 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.920.467 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.926.348 I llama_new_context_with_model: n_seq_max     = 1
0.00.926.355 I llama_new_context_with_model: n_ctx         = 4096
0.00.926.356 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.926.356 I llama_new_context_with_model: n_batch       = 2048
0.00.926.357 I llama_new_context_with_model: n_ubatch      = 512
0.00.926.357 I llama_new_context_with_model: flash_attn    = 0
0.00.926.360 I llama_new_context_with_model: freq_base     = 10000.0
0.00.926.360 I llama_new_context_with_model: freq_scale    = 1
0.00.926.361 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.926.452 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.941.485 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.941.527 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.941.652 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.944.289 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.944.293 I llama_new_context_with_model: graph nodes  = 601
0.00.944.294 I llama_new_context_with_model: graph splits = 1
0.00.944.318 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.944.321 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.553.764 I main: llama threadpool init, n_threads = 4
0.01.553.780 I 
0.01.553.901 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.553.905 I 
0.01.554.138 I sampler seed: 2449577906
0.01.554.151 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.554.163 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.554.164 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.554.164 I 
 increasities and anxieties in a variety of settings and circumstances. [end of text]


0.07.049.198 I llama_perf_sampler_print:    sampling time =      20.36 ms /    14 runs   (    1.45 ms per token,   687.69 tokens per second)
0.07.049.203 I llama_perf_context_print:        load time =    1552.78 ms
0.07.049.205 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.049.207 I llama_perf_context_print:        eval time =    5457.52 ms /    13 runs   (  419.81 ms per token,     2.38 tokens per second)
0.07.049.208 I llama_perf_context_print:       total time =    5495.44 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.857 I main: load the model and apply lora adapter, if any
0.00.023.100 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.109 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.192 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.203 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.205 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.208 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.210 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.211 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.213 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.214 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.216 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.222 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.223 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.225 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.226 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.228 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.236.844 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.338.884 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.362.960 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.362.968 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.362.969 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.362.971 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.362.972 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.362.974 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.362.975 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.362.979 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.362.980 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.362.982 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.362.983 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.362.985 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.362.992 I llama_model_loader: - type  f32:   37 tensors
0.00.362.994 I llama_model_loader: - type q8_0:  127 tensors
0.00.574.636 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.638.953 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.639.896 I llm_load_vocab: special tokens cache size = 5
0.00.856.262 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.856.334 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.856.335 I llm_load_print_meta: arch             = gemma
0.00.856.336 I llm_load_print_meta: vocab type       = SPM
0.00.856.337 I llm_load_print_meta: n_vocab          = 256000
0.00.856.339 I llm_load_print_meta: n_merges         = 0
0.00.856.340 I llm_load_print_meta: vocab_only       = 0
0.00.856.340 I llm_load_print_meta: n_ctx_train      = 8192
0.00.856.341 I llm_load_print_meta: n_embd           = 2048
0.00.856.341 I llm_load_print_meta: n_layer          = 18
0.00.856.406 I llm_load_print_meta: n_head           = 8
0.00.856.412 I llm_load_print_meta: n_head_kv        = 1
0.00.856.413 I llm_load_print_meta: n_rot            = 256
0.00.856.413 I llm_load_print_meta: n_swa            = 0
0.00.856.414 I llm_load_print_meta: n_embd_head_k    = 256
0.00.856.414 I llm_load_print_meta: n_embd_head_v    = 256
0.00.856.419 I llm_load_print_meta: n_gqa            = 8
0.00.856.424 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.856.428 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.856.431 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.856.433 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.856.433 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.856.445 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.856.446 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.856.451 I llm_load_print_meta: n_ff             = 16384
0.00.856.452 I llm_load_print_meta: n_expert         = 0
0.00.856.453 I llm_load_print_meta: n_expert_used    = 0
0.00.856.453 I llm_load_print_meta: causal attn      = 1
0.00.856.454 I llm_load_print_meta: pooling type     = 0
0.00.856.454 I llm_load_print_meta: rope type        = 2
0.00.856.455 I llm_load_print_meta: rope scaling     = linear
0.00.856.457 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.856.458 I llm_load_print_meta: freq_scale_train = 1
0.00.856.458 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.856.459 I llm_load_print_meta: rope_finetuned   = unknown
0.00.856.460 I llm_load_print_meta: ssm_d_conv       = 0
0.00.856.460 I llm_load_print_meta: ssm_d_inner      = 0
0.00.856.461 I llm_load_print_meta: ssm_d_state      = 0
0.00.856.461 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.856.462 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.856.463 I llm_load_print_meta: model type       = 2B
0.00.856.464 I llm_load_print_meta: model ftype      = Q8_0
0.00.856.465 I llm_load_print_meta: model params     = 2.51 B
0.00.856.466 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.856.467 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.856.468 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.856.469 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.856.469 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.856.470 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.856.470 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.856.471 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.856.477 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.856.479 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.856.480 I llm_load_print_meta: max token length = 93
0.00.929.926 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.929.937 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.935.739 I llama_new_context_with_model: n_seq_max     = 1
0.00.935.746 I llama_new_context_with_model: n_ctx         = 4096
0.00.935.747 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.935.747 I llama_new_context_with_model: n_batch       = 2048
0.00.935.748 I llama_new_context_with_model: n_ubatch      = 512
0.00.935.748 I llama_new_context_with_model: flash_attn    = 0
0.00.935.751 I llama_new_context_with_model: freq_base     = 10000.0
0.00.935.752 I llama_new_context_with_model: freq_scale    = 1
0.00.935.753 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.935.840 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.950.038 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.950.077 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.950.199 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.952.769 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.952.773 I llama_new_context_with_model: graph nodes  = 601
0.00.952.774 I llama_new_context_with_model: graph splits = 1
0.00.952.796 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.952.798 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.562.887 I main: llama threadpool init, n_threads = 4
0.01.562.903 I 
0.01.563.019 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.563.023 I 
0.01.563.259 I sampler seed: 3725704102
0.01.563.273 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.563.282 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.563.285 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.563.285 I 
 increasities and the limitations of their use in understanding human cognition.

**Discussion:**

**1. The limitations of introspection and self-awareness:**

*

0.15.094.373 I llama_perf_sampler_print:    sampling time =      49.76 ms /    33 runs   (    1.51 ms per token,   663.17 tokens per second)
0.15.094.377 I llama_perf_context_print:        load time =    1561.94 ms
0.15.094.379 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.094.381 I llama_perf_context_print:        eval time =   13441.34 ms /    32 runs   (  420.04 ms per token,     2.38 tokens per second)
0.15.094.382 I llama_perf_context_print:       total time =   13531.50 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m58.743s
user	3m4.877s
sys	0m9.409s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4394 (16cdce7b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185941.50 ms
main:    total time = 185941.50 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.891 I main: llama backend init
0.00.000.899 I main: load the model and apply lora adapter, if any
0.00.026.604 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.026.615 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.026.713 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.727 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.729 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.734 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.736 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.737 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.738 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.740 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.741 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.748 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.749 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.751 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.752 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.754 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.239.105 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.340.879 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.364.848 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.364.856 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.364.858 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.364.859 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.364.860 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.364.861 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.364.863 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.364.866 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.364.884 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.364.887 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.364.889 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.364.890 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.364.898 I llama_model_loader: - type  f32:   37 tensors
0.00.364.900 I llama_model_loader: - type q4_K:  108 tensors
0.00.364.901 I llama_model_loader: - type q6_K:   19 tensors
0.00.583.122 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.639.652 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.640.514 I llm_load_vocab: special tokens cache size = 5
0.00.853.258 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.853.328 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.853.329 I llm_load_print_meta: arch             = gemma
0.00.853.329 I llm_load_print_meta: vocab type       = SPM
0.00.853.330 I llm_load_print_meta: n_vocab          = 256000
0.00.853.332 I llm_load_print_meta: n_merges         = 0
0.00.853.333 I llm_load_print_meta: vocab_only       = 0
0.00.853.333 I llm_load_print_meta: n_ctx_train      = 8192
0.00.853.334 I llm_load_print_meta: n_embd           = 2048
0.00.853.334 I llm_load_print_meta: n_layer          = 18
0.00.853.396 I llm_load_print_meta: n_head           = 8
0.00.853.404 I llm_load_print_meta: n_head_kv        = 1
0.00.853.404 I llm_load_print_meta: n_rot            = 256
0.00.853.405 I llm_load_print_meta: n_swa            = 0
0.00.853.406 I llm_load_print_meta: n_embd_head_k    = 256
0.00.853.406 I llm_load_print_meta: n_embd_head_v    = 256
0.00.853.411 I llm_load_print_meta: n_gqa            = 8
0.00.853.416 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.853.421 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.853.426 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.853.428 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.853.428 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.853.430 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.853.430 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.853.435 I llm_load_print_meta: n_ff             = 16384
0.00.853.436 I llm_load_print_meta: n_expert         = 0
0.00.853.436 I llm_load_print_meta: n_expert_used    = 0
0.00.853.437 I llm_load_print_meta: causal attn      = 1
0.00.853.438 I llm_load_print_meta: pooling type     = 0
0.00.853.438 I llm_load_print_meta: rope type        = 2
0.00.853.438 I llm_load_print_meta: rope scaling     = linear
0.00.853.440 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.853.441 I llm_load_print_meta: freq_scale_train = 1
0.00.853.451 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.853.452 I llm_load_print_meta: rope_finetuned   = unknown
0.00.853.453 I llm_load_print_meta: ssm_d_conv       = 0
0.00.853.453 I llm_load_print_meta: ssm_d_inner      = 0
0.00.853.453 I llm_load_print_meta: ssm_d_state      = 0
0.00.853.465 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.853.468 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.853.469 I llm_load_print_meta: model type       = 2B
0.00.853.470 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.853.471 I llm_load_print_meta: model params     = 2.51 B
0.00.853.472 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.853.473 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.853.475 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.853.476 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.853.476 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.853.476 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.853.477 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.853.482 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.853.488 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.853.490 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.853.491 I llm_load_print_meta: max token length = 93
0.00.917.986 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.917.994 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.917.995 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.917.996 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.917.996 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.917.997 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.923.856 I llama_new_context_with_model: n_seq_max     = 1
0.00.923.863 I llama_new_context_with_model: n_ctx         = 4096
0.00.923.863 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.923.863 I llama_new_context_with_model: n_batch       = 2048
0.00.923.864 I llama_new_context_with_model: n_ubatch      = 512
0.00.923.864 I llama_new_context_with_model: flash_attn    = 0
0.00.923.867 I llama_new_context_with_model: freq_base     = 10000.0
0.00.923.867 I llama_new_context_with_model: freq_scale    = 1
0.00.923.868 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.923.962 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.938.340 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.938.380 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.938.496 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.941.095 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.941.099 I llama_new_context_with_model: graph nodes  = 601
0.00.941.100 I llama_new_context_with_model: graph splits = 1
0.00.941.123 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.941.126 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.521.233 I main: llama threadpool init, n_threads = 4
0.01.521.250 I 
0.01.521.368 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.521.371 I 
0.01.521.604 I sampler seed: 3308983162
0.01.521.618 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.521.628 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.521.632 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.521.632 I 
 seconded branches of ancient oak trees stand tall, their gnarled trunks reaching towards the sky.

The air is thick with the scent of fallen leaves and decaying

0.12.609.532 I llama_perf_sampler_print:    sampling time =      49.55 ms /    33 runs   (    1.50 ms per token,   665.99 tokens per second)
0.12.609.536 I llama_perf_context_print:        load time =    1520.23 ms
0.12.609.537 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.609.539 I llama_perf_context_print:        eval time =   10998.50 ms /    32 runs   (  343.70 ms per token,     2.91 tokens per second)
0.12.609.540 I llama_perf_context_print:       total time =   11088.31 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4394 (16cdce7b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 185788.83 ms
main:    total time = 185788.83 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.633 I build: 4394 (16cdce7b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.849 I main: llama backend init
0.00.000.858 I main: load the model and apply lora adapter, if any
0.00.023.034 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.023.138 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.153 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.158 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.162 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.164 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.166 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.169 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.171 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.173 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.184 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.186 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.189 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.191 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.194 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.246.330 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.348.138 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.372.167 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.372.175 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.372.177 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.372.178 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.372.179 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.372.181 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.372.182 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.372.186 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.372.187 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.372.195 I llama_model_loader: - type  f32:   37 tensors
0.00.372.197 I llama_model_loader: - type q4_K:  108 tensors
0.00.372.198 I llama_model_loader: - type q6_K:   19 tensors
0.00.588.128 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.644.192 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.645.119 I llm_load_vocab: special tokens cache size = 5
0.00.863.156 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.863.237 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.863.238 I llm_load_print_meta: arch             = gemma
0.00.863.238 I llm_load_print_meta: vocab type       = SPM
0.00.863.239 I llm_load_print_meta: n_vocab          = 256000
0.00.863.242 I llm_load_print_meta: n_merges         = 0
0.00.863.243 I llm_load_print_meta: vocab_only       = 0
0.00.863.243 I llm_load_print_meta: n_ctx_train      = 8192
0.00.863.243 I llm_load_print_meta: n_embd           = 2048
0.00.863.244 I llm_load_print_meta: n_layer          = 18
0.00.863.312 I llm_load_print_meta: n_head           = 8
0.00.863.318 I llm_load_print_meta: n_head_kv        = 1
0.00.863.320 I llm_load_print_meta: n_rot            = 256
0.00.863.321 I llm_load_print_meta: n_swa            = 0
0.00.863.322 I llm_load_print_meta: n_embd_head_k    = 256
0.00.863.327 I llm_load_print_meta: n_embd_head_v    = 256
0.00.863.331 I llm_load_print_meta: n_gqa            = 8
0.00.863.336 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.863.342 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.863.343 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.863.345 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.863.346 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.863.347 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.863.348 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.863.364 I llm_load_print_meta: n_ff             = 16384
0.00.863.368 I llm_load_print_meta: n_expert         = 0
0.00.863.369 I llm_load_print_meta: n_expert_used    = 0
0.00.863.369 I llm_load_print_meta: causal attn      = 1
0.00.863.370 I llm_load_print_meta: pooling type     = 0
0.00.863.370 I llm_load_print_meta: rope type        = 2
0.00.863.370 I llm_load_print_meta: rope scaling     = linear
0.00.863.372 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.863.372 I llm_load_print_meta: freq_scale_train = 1
0.00.863.373 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.863.373 I llm_load_print_meta: rope_finetuned   = unknown
0.00.863.373 I llm_load_print_meta: ssm_d_conv       = 0
0.00.863.374 I llm_load_print_meta: ssm_d_inner      = 0
0.00.863.374 I llm_load_print_meta: ssm_d_state      = 0
0.00.863.374 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.863.375 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.863.375 I llm_load_print_meta: model type       = 2B
0.00.863.376 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.863.377 I llm_load_print_meta: model params     = 2.51 B
0.00.863.378 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.863.379 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.863.380 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.863.381 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.863.381 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.863.382 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.863.383 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.863.383 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.863.389 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.863.391 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.863.391 I llm_load_print_meta: max token length = 93
0.00.922.729 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.928.723 I llama_new_context_with_model: n_seq_max     = 1
0.00.928.730 I llama_new_context_with_model: n_ctx         = 4096
0.00.928.730 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.928.731 I llama_new_context_with_model: n_batch       = 2048
0.00.928.731 I llama_new_context_with_model: n_ubatch      = 512
0.00.928.732 I llama_new_context_with_model: flash_attn    = 0
0.00.928.734 I llama_new_context_with_model: freq_base     = 10000.0
0.00.928.735 I llama_new_context_with_model: freq_scale    = 1
0.00.928.736 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.928.828 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18
0.00.943.589 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.943.639 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.943.758 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.946.313 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.946.317 I llama_new_context_with_model: graph nodes  = 601
0.00.946.317 I llama_new_context_with_model: graph splits = 1
0.00.946.341 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.946.345 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.525.684 I main: llama threadpool init, n_threads = 4
0.01.525.701 I 
0.01.525.818 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.525.822 I 
0.01.526.068 I sampler seed: 1516995081
0.01.526.082 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.526.095 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.526.099 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.526.099 I 
 increasities and other forms of flattery that may unconsciously lead to one's own self-deception.

**Answer:**

**Self-deception is

0.12.639.312 I llama_perf_sampler_print:    sampling time =      49.65 ms /    33 runs   (    1.50 ms per token,   664.72 tokens per second)
0.12.639.316 I llama_perf_context_print:        load time =    1524.73 ms
0.12.639.318 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.639.320 I llama_perf_context_print:        eval time =   11023.68 ms /    32 runs   (  344.49 ms per token,     2.90 tokens per second)
0.12.639.324 I llama_perf_context_print:       total time =   11113.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m39.905s
user	46m42.958s
sys	0m6.332s
