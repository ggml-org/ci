+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.529 I build: 4337 (160bc039) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.722 I main: llama backend init
0.00.000.729 I main: load the model and apply lora adapter, if any
0.00.021.380 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.391 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.398 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.403 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.405 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.409 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.409 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.411 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.412 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.412 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.412 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.417 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.418 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.418 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.419 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.420 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.968 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.127 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.123 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.132 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.133 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.133 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.134 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.135 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.136 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.138 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.139 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.140 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.140 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.133.141 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.145 I llama_model_loader: - type  f32:   37 tensors
0.00.133.146 I llama_model_loader: - type q8_0:  127 tensors
0.00.227.380 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.279.642 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.280.270 I llm_load_vocab: special tokens cache size = 5
0.00.301.340 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.301.359 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.301.360 I llm_load_print_meta: arch             = gemma
0.00.301.360 I llm_load_print_meta: vocab type       = SPM
0.00.301.361 I llm_load_print_meta: n_vocab          = 256000
0.00.301.362 I llm_load_print_meta: n_merges         = 0
0.00.301.362 I llm_load_print_meta: vocab_only       = 0
0.00.301.363 I llm_load_print_meta: n_ctx_train      = 8192
0.00.301.363 I llm_load_print_meta: n_embd           = 2048
0.00.301.363 I llm_load_print_meta: n_layer          = 18
0.00.301.374 I llm_load_print_meta: n_head           = 8
0.00.301.376 I llm_load_print_meta: n_head_kv        = 1
0.00.301.376 I llm_load_print_meta: n_rot            = 256
0.00.301.376 I llm_load_print_meta: n_swa            = 0
0.00.301.377 I llm_load_print_meta: n_embd_head_k    = 256
0.00.301.377 I llm_load_print_meta: n_embd_head_v    = 256
0.00.301.378 I llm_load_print_meta: n_gqa            = 8
0.00.301.379 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.301.379 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.301.380 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.301.381 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.301.382 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.301.383 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.301.383 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.301.385 I llm_load_print_meta: n_ff             = 16384
0.00.301.385 I llm_load_print_meta: n_expert         = 0
0.00.301.385 I llm_load_print_meta: n_expert_used    = 0
0.00.301.386 I llm_load_print_meta: causal attn      = 1
0.00.301.386 I llm_load_print_meta: pooling type     = 0
0.00.301.386 I llm_load_print_meta: rope type        = 2
0.00.301.386 I llm_load_print_meta: rope scaling     = linear
0.00.301.388 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.301.388 I llm_load_print_meta: freq_scale_train = 1
0.00.301.389 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.301.389 I llm_load_print_meta: rope_finetuned   = unknown
0.00.301.389 I llm_load_print_meta: ssm_d_conv       = 0
0.00.301.390 I llm_load_print_meta: ssm_d_inner      = 0
0.00.301.390 I llm_load_print_meta: ssm_d_state      = 0
0.00.301.390 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.301.390 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.301.391 I llm_load_print_meta: model type       = 2B
0.00.301.392 I llm_load_print_meta: model ftype      = Q8_0
0.00.301.392 I llm_load_print_meta: model params     = 2.51 B
0.00.301.393 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.301.393 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.301.394 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.301.394 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.301.394 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.301.394 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.301.395 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.301.395 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.301.395 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.301.396 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.301.396 I llm_load_print_meta: max token length = 93
0.00.400.411 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.400.419 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.400.420 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.400.421 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.400.421 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.400.422 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.406.661 I llama_new_context_with_model: n_seq_max     = 1
0.00.406.667 I llama_new_context_with_model: n_ctx         = 4096
0.00.406.668 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.406.668 I llama_new_context_with_model: n_batch       = 2048
0.00.406.669 I llama_new_context_with_model: n_ubatch      = 512
0.00.406.670 I llama_new_context_with_model: flash_attn    = 0
0.00.406.673 I llama_new_context_with_model: freq_base     = 10000.0
0.00.406.674 I llama_new_context_with_model: freq_scale    = 1
0.00.406.675 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.420.962 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.420.976 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.421.063 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.422.367 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.422.373 I llama_new_context_with_model: graph nodes  = 601
0.00.422.374 I llama_new_context_with_model: graph splits = 1
0.00.422.376 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.422.376 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.508.542 I main: llama threadpool init, n_threads = 4
0.00.508.558 I 
0.00.508.633 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.508.637 I 
0.00.508.679 I sampler seed: 3491890239
0.00.508.689 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.508.700 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.508.704 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.508.704 I 
 increamentalism in the 19th century. This theory explained the development of the human mind by proposing that mental development proceeds in stages, each with its

0.02.801.789 I llama_perf_sampler_print:    sampling time =       4.77 ms /    33 runs   (    0.14 ms per token,  6915.34 tokens per second)
0.02.801.792 I llama_perf_context_print:        load time =     507.80 ms
0.02.801.794 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.801.795 I llama_perf_context_print:        eval time =    2274.09 ms /    32 runs   (   71.07 ms per token,    14.07 tokens per second)
0.02.801.796 I llama_perf_context_print:       total time =    2293.26 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.171 I build: 4337 (160bc039) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.385 I main: llama backend init
0.00.000.392 I main: load the model and apply lora adapter, if any
0.00.020.728 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.020.747 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.759 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.762 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.767 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.767 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.768 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.769 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.770 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.771 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.780 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.780 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.781 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.783 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.784 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.662 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.616 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.665 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.673 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.674 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.674 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.675 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.676 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.676 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.679 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.679 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.680 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.681 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.682 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.685 I llama_model_loader: - type  f32:   37 tensors
0.00.131.686 I llama_model_loader: - type q8_0:  127 tensors
0.00.221.935 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.265.234 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.265.736 I llm_load_vocab: special tokens cache size = 5
0.00.286.314 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.286.333 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.286.333 I llm_load_print_meta: arch             = gemma
0.00.286.334 I llm_load_print_meta: vocab type       = SPM
0.00.286.335 I llm_load_print_meta: n_vocab          = 256000
0.00.286.335 I llm_load_print_meta: n_merges         = 0
0.00.286.335 I llm_load_print_meta: vocab_only       = 0
0.00.286.336 I llm_load_print_meta: n_ctx_train      = 8192
0.00.286.336 I llm_load_print_meta: n_embd           = 2048
0.00.286.336 I llm_load_print_meta: n_layer          = 18
0.00.286.348 I llm_load_print_meta: n_head           = 8
0.00.286.349 I llm_load_print_meta: n_head_kv        = 1
0.00.286.350 I llm_load_print_meta: n_rot            = 256
0.00.286.350 I llm_load_print_meta: n_swa            = 0
0.00.286.351 I llm_load_print_meta: n_embd_head_k    = 256
0.00.286.352 I llm_load_print_meta: n_embd_head_v    = 256
0.00.286.353 I llm_load_print_meta: n_gqa            = 8
0.00.286.354 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.286.355 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.286.356 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.286.357 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.286.358 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.286.359 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.286.359 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.286.360 I llm_load_print_meta: n_ff             = 16384
0.00.286.361 I llm_load_print_meta: n_expert         = 0
0.00.286.361 I llm_load_print_meta: n_expert_used    = 0
0.00.286.361 I llm_load_print_meta: causal attn      = 1
0.00.286.361 I llm_load_print_meta: pooling type     = 0
0.00.286.362 I llm_load_print_meta: rope type        = 2
0.00.286.362 I llm_load_print_meta: rope scaling     = linear
0.00.286.363 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.286.364 I llm_load_print_meta: freq_scale_train = 1
0.00.286.364 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.286.365 I llm_load_print_meta: rope_finetuned   = unknown
0.00.286.365 I llm_load_print_meta: ssm_d_conv       = 0
0.00.286.365 I llm_load_print_meta: ssm_d_inner      = 0
0.00.286.366 I llm_load_print_meta: ssm_d_state      = 0
0.00.286.366 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.286.367 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.286.367 I llm_load_print_meta: model type       = 2B
0.00.286.368 I llm_load_print_meta: model ftype      = Q8_0
0.00.286.369 I llm_load_print_meta: model params     = 2.51 B
0.00.286.369 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.286.370 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.286.373 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.286.373 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.286.374 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.286.374 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.286.374 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.286.375 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.286.375 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.286.376 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.286.376 I llm_load_print_meta: max token length = 93
0.00.380.834 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.385.975 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.981 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.981 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.982 I llama_new_context_with_model: n_batch       = 2048
0.00.385.982 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.983 I llama_new_context_with_model: flash_attn    = 0
0.00.385.985 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.986 I llama_new_context_with_model: freq_scale    = 1
0.00.385.987 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.400.442 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.400.457 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.400.543 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.401.853 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.401.858 I llama_new_context_with_model: graph nodes  = 601
0.00.401.859 I llama_new_context_with_model: graph splits = 1
0.00.401.861 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.401.861 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.483.970 I main: llama threadpool init, n_threads = 4
0.00.483.984 I 
0.00.484.068 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.484.072 I 
0.00.484.126 I sampler seed: 793918354
0.00.484.137 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.484.153 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.484.158 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.484.158 I 
 increably. 

**Assistant**
I understand. I will adjust my language to be more conversational and engaging. [end of text]


0.02.212.439 I llama_perf_sampler_print:    sampling time =       3.96 ms /    26 runs   (    0.15 ms per token,  6560.69 tokens per second)
0.02.212.442 I llama_perf_context_print:        load time =     483.56 ms
0.02.212.443 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.212.444 I llama_perf_context_print:        eval time =    1712.68 ms /    25 runs   (   68.51 ms per token,    14.60 tokens per second)
0.02.212.445 I llama_perf_context_print:       total time =    1728.48 ms /    26 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.536 I build: 4337 (160bc039) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.736 I main: load the model and apply lora adapter, if any
0.00.021.495 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.506 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.518 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.523 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.524 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.528 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.529 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.530 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.530 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.531 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.531 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.536 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.537 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.537 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.538 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.538 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.051.604 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.130.218 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.137.147 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.137.153 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.137.154 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.137.155 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.137.156 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.137.157 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.137.157 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.137.159 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.137.160 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.137.161 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.137.162 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.137.163 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.137.166 I llama_model_loader: - type  f32:   37 tensors
0.00.137.167 I llama_model_loader: - type q8_0:  127 tensors
0.00.214.875 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.052 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.633 I llm_load_vocab: special tokens cache size = 5
0.00.278.297 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.313 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.313 I llm_load_print_meta: arch             = gemma
0.00.278.314 I llm_load_print_meta: vocab type       = SPM
0.00.278.314 I llm_load_print_meta: n_vocab          = 256000
0.00.278.315 I llm_load_print_meta: n_merges         = 0
0.00.278.315 I llm_load_print_meta: vocab_only       = 0
0.00.278.315 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.316 I llm_load_print_meta: n_embd           = 2048
0.00.278.316 I llm_load_print_meta: n_layer          = 18
0.00.278.329 I llm_load_print_meta: n_head           = 8
0.00.278.330 I llm_load_print_meta: n_head_kv        = 1
0.00.278.330 I llm_load_print_meta: n_rot            = 256
0.00.278.330 I llm_load_print_meta: n_swa            = 0
0.00.278.331 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.331 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.332 I llm_load_print_meta: n_gqa            = 8
0.00.278.333 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.334 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.335 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.336 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.337 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.337 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.337 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.338 I llm_load_print_meta: n_ff             = 16384
0.00.278.339 I llm_load_print_meta: n_expert         = 0
0.00.278.339 I llm_load_print_meta: n_expert_used    = 0
0.00.278.339 I llm_load_print_meta: causal attn      = 1
0.00.278.339 I llm_load_print_meta: pooling type     = 0
0.00.278.340 I llm_load_print_meta: rope type        = 2
0.00.278.340 I llm_load_print_meta: rope scaling     = linear
0.00.278.341 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.341 I llm_load_print_meta: freq_scale_train = 1
0.00.278.342 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.342 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.343 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.343 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.343 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.343 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.344 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.344 I llm_load_print_meta: model type       = 2B
0.00.278.345 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.345 I llm_load_print_meta: model params     = 2.51 B
0.00.278.346 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.346 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.347 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.347 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.347 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.347 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.348 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.348 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.348 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.349 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.349 I llm_load_print_meta: max token length = 93
0.00.355.076 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.355.082 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.083 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.355.084 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.355.085 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.355.085 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.360.301 I llama_new_context_with_model: n_seq_max     = 1
0.00.360.308 I llama_new_context_with_model: n_ctx         = 4096
0.00.360.308 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.360.309 I llama_new_context_with_model: n_batch       = 2048
0.00.360.309 I llama_new_context_with_model: n_ubatch      = 512
0.00.360.310 I llama_new_context_with_model: flash_attn    = 0
0.00.360.312 I llama_new_context_with_model: freq_base     = 10000.0
0.00.360.313 I llama_new_context_with_model: freq_scale    = 1
0.00.360.314 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.374.842 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.374.856 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.374.952 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.376.232 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.376.238 I llama_new_context_with_model: graph nodes  = 601
0.00.376.239 I llama_new_context_with_model: graph splits = 1
0.00.376.241 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.376.242 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.017 I main: llama threadpool init, n_threads = 4
0.00.463.033 I 
0.00.463.111 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.463.114 I 
0.00.463.158 I sampler seed: 3579276813
0.00.463.170 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.177 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.179 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.179 I 
 increasities. 

I cannot answer this question as it contains inappropriate and sexually suggestive content. [end of text]


0.01.908.536 I llama_perf_sampler_print:    sampling time =       3.01 ms /    21 runs   (    0.14 ms per token,  6979.06 tokens per second)
0.01.908.538 I llama_perf_context_print:        load time =     462.26 ms
0.01.908.539 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.908.541 I llama_perf_context_print:        eval time =    1432.77 ms /    20 runs   (   71.64 ms per token,    13.96 tokens per second)
0.01.908.541 I llama_perf_context_print:       total time =    1445.53 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.550 I build: 4337 (160bc039) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.000.776 I main: load the model and apply lora adapter, if any
0.00.022.066 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.022.076 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.022.085 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.089 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.090 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.094 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.095 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.095 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.096 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.096 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.097 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.101 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.102 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.103 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.104 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.104 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.345 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.457 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.432 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.439 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.439 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.440 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.441 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.442 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.443 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.445 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.446 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.447 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.447 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.448 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.451 I llama_model_loader: - type  f32:   37 tensors
0.00.133.452 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.663 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.249.040 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.249.667 I llm_load_vocab: special tokens cache size = 5
0.00.270.438 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.270.454 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.270.454 I llm_load_print_meta: arch             = gemma
0.00.270.455 I llm_load_print_meta: vocab type       = SPM
0.00.270.455 I llm_load_print_meta: n_vocab          = 256000
0.00.270.455 I llm_load_print_meta: n_merges         = 0
0.00.270.456 I llm_load_print_meta: vocab_only       = 0
0.00.270.456 I llm_load_print_meta: n_ctx_train      = 8192
0.00.270.456 I llm_load_print_meta: n_embd           = 2048
0.00.270.457 I llm_load_print_meta: n_layer          = 18
0.00.270.468 I llm_load_print_meta: n_head           = 8
0.00.270.469 I llm_load_print_meta: n_head_kv        = 1
0.00.270.470 I llm_load_print_meta: n_rot            = 256
0.00.270.470 I llm_load_print_meta: n_swa            = 0
0.00.270.470 I llm_load_print_meta: n_embd_head_k    = 256
0.00.270.471 I llm_load_print_meta: n_embd_head_v    = 256
0.00.270.471 I llm_load_print_meta: n_gqa            = 8
0.00.270.473 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.270.474 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.270.475 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.270.476 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.270.477 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.270.477 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.270.478 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.270.480 I llm_load_print_meta: n_ff             = 16384
0.00.270.480 I llm_load_print_meta: n_expert         = 0
0.00.270.481 I llm_load_print_meta: n_expert_used    = 0
0.00.270.481 I llm_load_print_meta: causal attn      = 1
0.00.270.481 I llm_load_print_meta: pooling type     = 0
0.00.270.481 I llm_load_print_meta: rope type        = 2
0.00.270.482 I llm_load_print_meta: rope scaling     = linear
0.00.270.483 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.270.484 I llm_load_print_meta: freq_scale_train = 1
0.00.270.484 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.270.485 I llm_load_print_meta: rope_finetuned   = unknown
0.00.270.485 I llm_load_print_meta: ssm_d_conv       = 0
0.00.270.486 I llm_load_print_meta: ssm_d_inner      = 0
0.00.270.486 I llm_load_print_meta: ssm_d_state      = 0
0.00.270.487 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.270.487 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.270.488 I llm_load_print_meta: model type       = 2B
0.00.270.488 I llm_load_print_meta: model ftype      = Q8_0
0.00.270.489 I llm_load_print_meta: model params     = 2.51 B
0.00.270.490 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.270.490 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.270.491 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.270.491 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.270.492 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.270.492 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.270.492 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.270.492 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.270.493 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.270.494 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.270.494 I llm_load_print_meta: max token length = 93
0.00.341.532 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.341.538 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.346.894 I llama_new_context_with_model: n_seq_max     = 1
0.00.346.902 I llama_new_context_with_model: n_ctx         = 4096
0.00.346.903 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.346.903 I llama_new_context_with_model: n_batch       = 2048
0.00.346.904 I llama_new_context_with_model: n_ubatch      = 512
0.00.346.904 I llama_new_context_with_model: flash_attn    = 0
0.00.346.909 I llama_new_context_with_model: freq_base     = 10000.0
0.00.346.910 I llama_new_context_with_model: freq_scale    = 1
0.00.346.911 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.361.548 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.361.564 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.361.654 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.362.935 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.362.941 I llama_new_context_with_model: graph nodes  = 601
0.00.362.942 I llama_new_context_with_model: graph splits = 1
0.00.362.944 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.362.944 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.451.704 I main: llama threadpool init, n_threads = 4
0.00.451.718 I 
0.00.451.800 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.451.805 I 
0.00.451.855 I sampler seed: 3522420381
0.00.451.866 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.451.884 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.451.888 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.451.889 I 
 increasities, and other forms of flattery. [end of text]


0.01.225.384 I llama_perf_sampler_print:    sampling time =       1.54 ms /    11 runs   (    0.14 ms per token,  7166.12 tokens per second)
0.01.225.386 I llama_perf_context_print:        load time =     450.91 ms
0.01.225.387 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.225.389 I llama_perf_context_print:        eval time =     766.51 ms /    10 runs   (   76.65 ms per token,    13.05 tokens per second)
0.01.225.389 I llama_perf_context_print:       total time =     773.69 ms /    11 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.990s
user	0m27.982s
sys	0m9.398s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4337 (160bc039)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40444.42 ms
main:    total time = 40444.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.566 I build: 4337 (160bc039) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.764 I main: llama backend init
0.00.000.771 I main: load the model and apply lora adapter, if any
0.00.022.719 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.731 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.743 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.749 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.750 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.755 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.756 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.757 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.758 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.758 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.758 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.763 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.763 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.764 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.765 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.766 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.872 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.127.728 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.134.629 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.134.635 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.134.636 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.134.636 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.134.637 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.134.638 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.134.639 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.134.641 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.134.641 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.134.642 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.134.643 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.134.645 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.134.648 I llama_model_loader: - type  f32:   37 tensors
0.00.134.649 I llama_model_loader: - type q4_K:  108 tensors
0.00.134.650 I llama_model_loader: - type q6_K:   19 tensors
0.00.216.568 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.264.281 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.264.900 I llm_load_vocab: special tokens cache size = 5
0.00.285.725 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.285.744 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.285.744 I llm_load_print_meta: arch             = gemma
0.00.285.745 I llm_load_print_meta: vocab type       = SPM
0.00.285.745 I llm_load_print_meta: n_vocab          = 256000
0.00.285.746 I llm_load_print_meta: n_merges         = 0
0.00.285.746 I llm_load_print_meta: vocab_only       = 0
0.00.285.747 I llm_load_print_meta: n_ctx_train      = 8192
0.00.285.747 I llm_load_print_meta: n_embd           = 2048
0.00.285.747 I llm_load_print_meta: n_layer          = 18
0.00.285.759 I llm_load_print_meta: n_head           = 8
0.00.285.761 I llm_load_print_meta: n_head_kv        = 1
0.00.285.761 I llm_load_print_meta: n_rot            = 256
0.00.285.761 I llm_load_print_meta: n_swa            = 0
0.00.285.762 I llm_load_print_meta: n_embd_head_k    = 256
0.00.285.762 I llm_load_print_meta: n_embd_head_v    = 256
0.00.285.763 I llm_load_print_meta: n_gqa            = 8
0.00.285.764 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.285.765 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.285.766 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.285.767 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.285.767 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.285.768 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.285.768 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.285.769 I llm_load_print_meta: n_ff             = 16384
0.00.285.769 I llm_load_print_meta: n_expert         = 0
0.00.285.770 I llm_load_print_meta: n_expert_used    = 0
0.00.285.770 I llm_load_print_meta: causal attn      = 1
0.00.285.770 I llm_load_print_meta: pooling type     = 0
0.00.285.770 I llm_load_print_meta: rope type        = 2
0.00.285.771 I llm_load_print_meta: rope scaling     = linear
0.00.285.772 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.285.773 I llm_load_print_meta: freq_scale_train = 1
0.00.285.773 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.285.774 I llm_load_print_meta: rope_finetuned   = unknown
0.00.285.774 I llm_load_print_meta: ssm_d_conv       = 0
0.00.285.774 I llm_load_print_meta: ssm_d_inner      = 0
0.00.285.775 I llm_load_print_meta: ssm_d_state      = 0
0.00.285.775 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.285.775 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.285.776 I llm_load_print_meta: model type       = 2B
0.00.285.777 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.285.777 I llm_load_print_meta: model params     = 2.51 B
0.00.285.778 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.285.778 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.285.779 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.285.779 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.285.779 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.285.780 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.285.780 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.285.780 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.285.781 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.285.781 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.285.782 I llm_load_print_meta: max token length = 93
0.00.345.217 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.345.223 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.345.224 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.345.225 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.345.225 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.345.226 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.350.481 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.487 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.488 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.488 I llama_new_context_with_model: n_batch       = 2048
0.00.350.489 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.489 I llama_new_context_with_model: flash_attn    = 0
0.00.350.491 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.492 I llama_new_context_with_model: freq_scale    = 1
0.00.350.493 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.364.894 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.364.909 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.364.999 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.298 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.305 I llama_new_context_with_model: graph nodes  = 601
0.00.366.306 I llama_new_context_with_model: graph splits = 1
0.00.366.308 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.366.308 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.442.001 I main: llama threadpool init, n_threads = 4
0.00.442.017 I 
0.00.442.091 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.442.094 I 
0.00.442.136 I sampler seed: 70722948
0.00.442.147 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.442.154 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.442.157 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.442.157 I 
 squaRED's "A Night Like This" is a haunting melody with a melancholic charm. The song evokes a sense of longing and regret, which resonates

0.02.088.957 I llama_perf_sampler_print:    sampling time =       5.57 ms /    33 runs   (    0.17 ms per token,  5921.41 tokens per second)
0.02.088.959 I llama_perf_context_print:        load time =     441.21 ms
0.02.088.960 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.088.962 I llama_perf_context_print:        eval time =    1626.26 ms /    32 runs   (   50.82 ms per token,    19.68 tokens per second)
0.02.088.962 I llama_perf_context_print:       total time =    1646.97 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4337 (160bc039)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40210.33 ms
main:    total time = 40210.33 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.582 I build: 4337 (160bc039) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.785 I main: llama backend init
0.00.000.791 I main: load the model and apply lora adapter, if any
0.00.021.307 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.323 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.330 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.331 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.336 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.337 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.338 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.339 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.339 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.340 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.346 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.346 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.347 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.347 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.348 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.170 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.778 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.710 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.717 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.718 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.719 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.719 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.720 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.721 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.723 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.724 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.727 I llama_model_loader: - type  f32:   37 tensors
0.00.132.729 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.729 I llama_model_loader: - type q6_K:   19 tensors
0.00.208.194 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.116 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.759 I llm_load_vocab: special tokens cache size = 5
0.00.280.667 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.683 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.684 I llm_load_print_meta: arch             = gemma
0.00.280.685 I llm_load_print_meta: vocab type       = SPM
0.00.280.686 I llm_load_print_meta: n_vocab          = 256000
0.00.280.686 I llm_load_print_meta: n_merges         = 0
0.00.280.686 I llm_load_print_meta: vocab_only       = 0
0.00.280.687 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.687 I llm_load_print_meta: n_embd           = 2048
0.00.280.687 I llm_load_print_meta: n_layer          = 18
0.00.280.698 I llm_load_print_meta: n_head           = 8
0.00.280.699 I llm_load_print_meta: n_head_kv        = 1
0.00.280.699 I llm_load_print_meta: n_rot            = 256
0.00.280.700 I llm_load_print_meta: n_swa            = 0
0.00.280.700 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.700 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.701 I llm_load_print_meta: n_gqa            = 8
0.00.280.702 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.703 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.704 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.705 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.705 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.706 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.706 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.707 I llm_load_print_meta: n_ff             = 16384
0.00.280.707 I llm_load_print_meta: n_expert         = 0
0.00.280.708 I llm_load_print_meta: n_expert_used    = 0
0.00.280.708 I llm_load_print_meta: causal attn      = 1
0.00.280.708 I llm_load_print_meta: pooling type     = 0
0.00.280.709 I llm_load_print_meta: rope type        = 2
0.00.280.709 I llm_load_print_meta: rope scaling     = linear
0.00.280.710 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.711 I llm_load_print_meta: freq_scale_train = 1
0.00.280.711 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.711 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.711 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.712 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.712 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.712 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.712 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.713 I llm_load_print_meta: model type       = 2B
0.00.280.713 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.714 I llm_load_print_meta: model params     = 2.51 B
0.00.280.715 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.715 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.716 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.716 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.716 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.716 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.717 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.717 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.717 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.718 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.718 I llm_load_print_meta: max token length = 93
0.00.338.613 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.343.926 I llama_new_context_with_model: n_seq_max     = 1
0.00.343.932 I llama_new_context_with_model: n_ctx         = 4096
0.00.343.933 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.343.933 I llama_new_context_with_model: n_batch       = 2048
0.00.343.934 I llama_new_context_with_model: n_ubatch      = 512
0.00.343.934 I llama_new_context_with_model: flash_attn    = 0
0.00.343.937 I llama_new_context_with_model: freq_base     = 10000.0
0.00.343.938 I llama_new_context_with_model: freq_scale    = 1
0.00.343.939 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.358.961 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.358.975 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.359.072 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.360.333 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.360.340 I llama_new_context_with_model: graph nodes  = 601
0.00.360.340 I llama_new_context_with_model: graph splits = 1
0.00.360.342 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.00.360.343 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.436.192 I main: llama threadpool init, n_threads = 4
0.00.436.208 I 
0.00.436.282 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.00.436.285 I 
0.00.436.333 I sampler seed: 2739673382
0.00.436.343 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.436.355 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.436.359 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.436.359 I 
 maneuvously. 

**Answer:**

I am unable to generate responses that contain potentially offensive or inappropriate language. My purpose is to assist with tasks and

0.02.065.299 I llama_perf_sampler_print:    sampling time =       5.40 ms /    33 runs   (    0.16 ms per token,  6116.77 tokens per second)
0.02.065.301 I llama_perf_context_print:        load time =     435.38 ms
0.02.065.302 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.065.304 I llama_perf_context_print:        eval time =    1608.86 ms /    32 runs   (   50.28 ms per token,    19.89 tokens per second)
0.02.065.304 I llama_perf_context_print:       total time =    1629.11 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.672s
user	10m24.896s
sys	0m7.087s
