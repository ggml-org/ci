+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.642 I build: 3978 (ff252ea4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.834 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.024.780 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.996 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.091 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.104 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.105 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.110 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.114 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.115 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.116 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.117 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.118 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.127 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.128 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.129 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.130 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.131 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.174 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.249.316 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.989 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.998 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.999 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.268.000 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.268.001 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.268.002 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.268.003 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.268.007 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.268.008 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.268.009 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.268.010 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.268.012 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.268.020 I llama_model_loader: - type  f32:   37 tensors
0.00.268.024 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.371 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.961 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.530.939 I llm_load_vocab: special tokens cache size = 5
0.00.629.110 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.629.179 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.629.180 I llm_load_print_meta: arch             = gemma
0.00.629.180 I llm_load_print_meta: vocab type       = SPM
0.00.629.181 I llm_load_print_meta: n_vocab          = 256000
0.00.629.184 I llm_load_print_meta: n_merges         = 0
0.00.629.184 I llm_load_print_meta: vocab_only       = 0
0.00.629.184 I llm_load_print_meta: n_ctx_train      = 8192
0.00.629.185 I llm_load_print_meta: n_embd           = 2048
0.00.629.185 I llm_load_print_meta: n_layer          = 18
0.00.629.248 I llm_load_print_meta: n_head           = 8
0.00.629.255 I llm_load_print_meta: n_head_kv        = 1
0.00.629.255 I llm_load_print_meta: n_rot            = 256
0.00.629.256 I llm_load_print_meta: n_swa            = 0
0.00.629.257 I llm_load_print_meta: n_embd_head_k    = 256
0.00.629.258 I llm_load_print_meta: n_embd_head_v    = 256
0.00.629.262 I llm_load_print_meta: n_gqa            = 8
0.00.629.267 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.629.272 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.629.273 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.629.275 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.629.276 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.629.276 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.629.277 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.629.282 I llm_load_print_meta: n_ff             = 16384
0.00.629.282 I llm_load_print_meta: n_expert         = 0
0.00.629.283 I llm_load_print_meta: n_expert_used    = 0
0.00.629.284 I llm_load_print_meta: causal attn      = 1
0.00.629.284 I llm_load_print_meta: pooling type     = 0
0.00.629.284 I llm_load_print_meta: rope type        = 2
0.00.629.285 I llm_load_print_meta: rope scaling     = linear
0.00.629.287 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.629.288 I llm_load_print_meta: freq_scale_train = 1
0.00.629.288 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.629.289 I llm_load_print_meta: rope_finetuned   = unknown
0.00.629.290 I llm_load_print_meta: ssm_d_conv       = 0
0.00.629.290 I llm_load_print_meta: ssm_d_inner      = 0
0.00.629.290 I llm_load_print_meta: ssm_d_state      = 0
0.00.629.291 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.629.291 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.629.292 I llm_load_print_meta: model type       = 2B
0.00.629.293 I llm_load_print_meta: model ftype      = Q8_0
0.00.629.294 I llm_load_print_meta: model params     = 2.51 B
0.00.629.295 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.629.295 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.629.296 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.629.296 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.629.319 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.629.320 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.629.321 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.629.321 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.629.327 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.629.328 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.629.329 I llm_load_print_meta: max token length = 93
0.00.629.495 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.729.817 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.729.828 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.729.829 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.729.830 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.729.830 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.729.831 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.735.562 I llama_new_context_with_model: n_ctx      = 8192
0.00.735.569 I llama_new_context_with_model: n_batch    = 2048
0.00.735.569 I llama_new_context_with_model: n_ubatch   = 512
0.00.735.570 I llama_new_context_with_model: flash_attn = 0
0.00.735.573 I llama_new_context_with_model: freq_base  = 10000.0
0.00.735.574 I llama_new_context_with_model: freq_scale = 1
0.00.766.331 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.766.371 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.766.484 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.767.845 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.767.850 I llama_new_context_with_model: graph nodes  = 601
0.00.767.850 I llama_new_context_with_model: graph splits = 1
0.00.767.867 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.384.177 I main: llama threadpool init, n_threads = 4
0.01.384.192 I 
0.01.384.304 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.384.308 I 
0.01.384.544 I sampler seed: 3618424421
0.01.384.556 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.384.564 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.384.565 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.384.565 I 
 increasels, but sometimes they don't.

What could be the reason for the discrepancy?

The discrepancy could be caused by:

* Different species

0.14.826.293 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.84 tokens per second)
0.14.826.297 I llama_perf_context_print:        load time =    1381.33 ms
0.14.826.299 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.826.301 I llama_perf_context_print:        eval time =   13347.36 ms /    32 runs   (  417.11 ms per token,     2.40 tokens per second)
0.14.826.302 I llama_perf_context_print:       total time =   13442.13 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 3978 (ff252ea4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.753 I main: load the model and apply lora adapter, if any
0.00.024.677 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.769 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.783 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.785 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.789 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.790 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.791 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.794 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.802 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.803 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.810 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.814 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.815 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.816 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.817 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.295 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.258.672 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.277.246 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.277.256 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.277.257 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.277.258 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.277.259 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.277.261 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.277.262 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.277.266 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.277.267 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.277.268 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.277.269 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.277.270 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.277.280 I llama_model_loader: - type  f32:   37 tensors
0.00.277.285 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.324 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.529.012 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.951 I llm_load_vocab: special tokens cache size = 5
0.00.637.295 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.637.367 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.637.368 I llm_load_print_meta: arch             = gemma
0.00.637.369 I llm_load_print_meta: vocab type       = SPM
0.00.637.370 I llm_load_print_meta: n_vocab          = 256000
0.00.637.372 I llm_load_print_meta: n_merges         = 0
0.00.637.373 I llm_load_print_meta: vocab_only       = 0
0.00.637.373 I llm_load_print_meta: n_ctx_train      = 8192
0.00.637.373 I llm_load_print_meta: n_embd           = 2048
0.00.637.374 I llm_load_print_meta: n_layer          = 18
0.00.637.439 I llm_load_print_meta: n_head           = 8
0.00.637.446 I llm_load_print_meta: n_head_kv        = 1
0.00.637.446 I llm_load_print_meta: n_rot            = 256
0.00.637.447 I llm_load_print_meta: n_swa            = 0
0.00.637.447 I llm_load_print_meta: n_embd_head_k    = 256
0.00.637.447 I llm_load_print_meta: n_embd_head_v    = 256
0.00.637.453 I llm_load_print_meta: n_gqa            = 8
0.00.637.458 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.637.463 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.637.464 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.637.466 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.637.467 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.637.467 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.637.468 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.637.473 I llm_load_print_meta: n_ff             = 16384
0.00.637.474 I llm_load_print_meta: n_expert         = 0
0.00.637.474 I llm_load_print_meta: n_expert_used    = 0
0.00.637.475 I llm_load_print_meta: causal attn      = 1
0.00.637.476 I llm_load_print_meta: pooling type     = 0
0.00.637.476 I llm_load_print_meta: rope type        = 2
0.00.637.476 I llm_load_print_meta: rope scaling     = linear
0.00.637.478 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.637.478 I llm_load_print_meta: freq_scale_train = 1
0.00.637.479 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.637.480 I llm_load_print_meta: rope_finetuned   = unknown
0.00.637.480 I llm_load_print_meta: ssm_d_conv       = 0
0.00.637.481 I llm_load_print_meta: ssm_d_inner      = 0
0.00.637.481 I llm_load_print_meta: ssm_d_state      = 0
0.00.637.481 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.637.493 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.637.494 I llm_load_print_meta: model type       = 2B
0.00.637.495 I llm_load_print_meta: model ftype      = Q8_0
0.00.637.496 I llm_load_print_meta: model params     = 2.51 B
0.00.637.497 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.637.497 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.637.498 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.637.499 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.637.499 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.637.515 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.637.517 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.637.517 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.637.524 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.637.526 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.637.526 I llm_load_print_meta: max token length = 93
0.00.637.694 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.733.151 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.738.824 I llama_new_context_with_model: n_ctx      = 8192
0.00.738.832 I llama_new_context_with_model: n_batch    = 2048
0.00.738.833 I llama_new_context_with_model: n_ubatch   = 512
0.00.738.833 I llama_new_context_with_model: flash_attn = 0
0.00.738.836 I llama_new_context_with_model: freq_base  = 10000.0
0.00.738.837 I llama_new_context_with_model: freq_scale = 1
0.00.769.298 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.769.346 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.769.459 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.770.884 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.770.889 I llama_new_context_with_model: graph nodes  = 601
0.00.770.889 I llama_new_context_with_model: graph splits = 1
0.00.770.905 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.418.871 I main: llama threadpool init, n_threads = 4
0.01.418.885 I 
0.01.418.993 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.418.997 I 
0.01.419.227 I sampler seed: 2728533262
0.01.419.238 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.419.245 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.419.247 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.419.248 I 
 increasities. [end of text]


0.03.110.448 I llama_perf_sampler_print:    sampling time =       6.22 ms /     5 runs   (    1.24 ms per token,   803.86 tokens per second)
0.03.110.462 I llama_perf_context_print:        load time =    1416.03 ms
0.03.110.464 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.110.466 I llama_perf_context_print:        eval time =    1677.80 ms /     4 runs   (  419.45 ms per token,     2.38 tokens per second)
0.03.110.467 I llama_perf_context_print:       total time =    1691.58 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.667 I build: 3978 (ff252ea4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.866 I main: llama backend init
0.00.002.799 I main: load the model and apply lora adapter, if any
0.00.024.809 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.025 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.120 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.131 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.133 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.138 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.139 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.141 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.142 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.143 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.144 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.151 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.153 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.154 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.156 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.165 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.122 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.367 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.059 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.068 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.069 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.070 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.071 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.072 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.073 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.078 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.079 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.102 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.105 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.267.107 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.115 I llama_model_loader: - type  f32:   37 tensors
0.00.267.120 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.354 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.405 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.389 I llm_load_vocab: special tokens cache size = 5
0.00.615.192 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.615.265 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.615.267 I llm_load_print_meta: arch             = gemma
0.00.615.267 I llm_load_print_meta: vocab type       = SPM
0.00.615.268 I llm_load_print_meta: n_vocab          = 256000
0.00.615.270 I llm_load_print_meta: n_merges         = 0
0.00.615.270 I llm_load_print_meta: vocab_only       = 0
0.00.615.271 I llm_load_print_meta: n_ctx_train      = 8192
0.00.615.271 I llm_load_print_meta: n_embd           = 2048
0.00.615.271 I llm_load_print_meta: n_layer          = 18
0.00.615.336 I llm_load_print_meta: n_head           = 8
0.00.615.345 I llm_load_print_meta: n_head_kv        = 1
0.00.615.346 I llm_load_print_meta: n_rot            = 256
0.00.615.346 I llm_load_print_meta: n_swa            = 0
0.00.615.347 I llm_load_print_meta: n_embd_head_k    = 256
0.00.615.347 I llm_load_print_meta: n_embd_head_v    = 256
0.00.615.352 I llm_load_print_meta: n_gqa            = 8
0.00.615.357 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.615.362 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.615.363 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.615.364 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.615.365 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.615.365 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.615.366 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.615.371 I llm_load_print_meta: n_ff             = 16384
0.00.615.371 I llm_load_print_meta: n_expert         = 0
0.00.615.371 I llm_load_print_meta: n_expert_used    = 0
0.00.615.372 I llm_load_print_meta: causal attn      = 1
0.00.615.372 I llm_load_print_meta: pooling type     = 0
0.00.615.384 I llm_load_print_meta: rope type        = 2
0.00.615.385 I llm_load_print_meta: rope scaling     = linear
0.00.615.386 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.615.387 I llm_load_print_meta: freq_scale_train = 1
0.00.615.387 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.615.388 I llm_load_print_meta: rope_finetuned   = unknown
0.00.615.388 I llm_load_print_meta: ssm_d_conv       = 0
0.00.615.388 I llm_load_print_meta: ssm_d_inner      = 0
0.00.615.388 I llm_load_print_meta: ssm_d_state      = 0
0.00.615.389 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.615.390 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.615.391 I llm_load_print_meta: model type       = 2B
0.00.615.392 I llm_load_print_meta: model ftype      = Q8_0
0.00.615.398 I llm_load_print_meta: model params     = 2.51 B
0.00.615.399 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.615.399 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.615.400 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.615.400 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.615.400 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.615.401 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.615.404 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.615.405 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.615.411 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.615.412 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.615.413 I llm_load_print_meta: max token length = 93
0.00.615.578 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.694.138 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.694.148 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.694.149 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.694.150 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.694.150 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.694.151 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.699.868 I llama_new_context_with_model: n_ctx      = 8192
0.00.699.875 I llama_new_context_with_model: n_batch    = 2048
0.00.699.876 I llama_new_context_with_model: n_ubatch   = 512
0.00.699.876 I llama_new_context_with_model: flash_attn = 0
0.00.699.879 I llama_new_context_with_model: freq_base  = 10000.0
0.00.699.880 I llama_new_context_with_model: freq_scale = 1
0.00.731.421 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.731.466 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.731.584 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.733.040 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.733.045 I llama_new_context_with_model: graph nodes  = 601
0.00.733.045 I llama_new_context_with_model: graph splits = 1
0.00.733.062 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.845 I main: llama threadpool init, n_threads = 4
0.01.347.860 I 
0.01.347.984 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.985 I 
0.01.348.224 I sampler seed: 1806844471
0.01.348.239 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.348.250 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.348.253 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.348.254 I 
 maneurors and they can't be bothered.

Is there a way to make them care?

I am unable to provide responses that promote manipulation or deception

0.14.898.565 I llama_perf_sampler_print:    sampling time =      49.29 ms /    33 runs   (    1.49 ms per token,   669.53 tokens per second)
0.14.898.568 I llama_perf_context_print:        load time =    1344.96 ms
0.14.898.582 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.898.584 I llama_perf_context_print:        eval time =   13454.57 ms /    32 runs   (  420.46 ms per token,     2.38 tokens per second)
0.14.898.585 I llama_perf_context_print:       total time =   13550.73 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.670 I build: 3978 (ff252ea4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.875 I main: llama backend init
0.00.002.811 I main: load the model and apply lora adapter, if any
0.00.024.708 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.917 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.025.009 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.020 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.022 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.026 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.029 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.030 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.039 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.040 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.047 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.049 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.050 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.052 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.053 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.863 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.896 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.267.511 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.267.521 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.267.522 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.267.523 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.267.524 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.267.526 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.267.527 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.267.531 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.267.532 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.267.533 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.267.534 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.267.535 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.267.544 I llama_model_loader: - type  f32:   37 tensors
0.00.267.549 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.192 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.520.495 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.521.474 I llm_load_vocab: special tokens cache size = 5
0.00.620.684 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.620.756 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.620.757 I llm_load_print_meta: arch             = gemma
0.00.620.757 I llm_load_print_meta: vocab type       = SPM
0.00.620.758 I llm_load_print_meta: n_vocab          = 256000
0.00.620.761 I llm_load_print_meta: n_merges         = 0
0.00.620.761 I llm_load_print_meta: vocab_only       = 0
0.00.620.762 I llm_load_print_meta: n_ctx_train      = 8192
0.00.620.762 I llm_load_print_meta: n_embd           = 2048
0.00.620.762 I llm_load_print_meta: n_layer          = 18
0.00.620.825 I llm_load_print_meta: n_head           = 8
0.00.620.832 I llm_load_print_meta: n_head_kv        = 1
0.00.620.833 I llm_load_print_meta: n_rot            = 256
0.00.620.833 I llm_load_print_meta: n_swa            = 0
0.00.620.833 I llm_load_print_meta: n_embd_head_k    = 256
0.00.620.834 I llm_load_print_meta: n_embd_head_v    = 256
0.00.620.838 I llm_load_print_meta: n_gqa            = 8
0.00.620.843 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.620.872 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.620.874 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.620.875 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.620.876 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.620.877 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.620.877 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.620.883 I llm_load_print_meta: n_ff             = 16384
0.00.620.883 I llm_load_print_meta: n_expert         = 0
0.00.620.883 I llm_load_print_meta: n_expert_used    = 0
0.00.620.885 I llm_load_print_meta: causal attn      = 1
0.00.620.885 I llm_load_print_meta: pooling type     = 0
0.00.620.885 I llm_load_print_meta: rope type        = 2
0.00.620.886 I llm_load_print_meta: rope scaling     = linear
0.00.620.887 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.620.887 I llm_load_print_meta: freq_scale_train = 1
0.00.620.888 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.620.888 I llm_load_print_meta: rope_finetuned   = unknown
0.00.620.889 I llm_load_print_meta: ssm_d_conv       = 0
0.00.620.889 I llm_load_print_meta: ssm_d_inner      = 0
0.00.620.890 I llm_load_print_meta: ssm_d_state      = 0
0.00.620.890 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.620.890 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.620.891 I llm_load_print_meta: model type       = 2B
0.00.620.892 I llm_load_print_meta: model ftype      = Q8_0
0.00.620.893 I llm_load_print_meta: model params     = 2.51 B
0.00.620.894 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.620.894 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.620.895 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.620.896 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.620.896 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.620.897 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.620.898 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.620.898 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.620.912 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.620.913 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.620.914 I llm_load_print_meta: max token length = 93
0.00.621.090 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.692.949 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.692.958 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.698.879 I llama_new_context_with_model: n_ctx      = 8192
0.00.698.888 I llama_new_context_with_model: n_batch    = 2048
0.00.698.888 I llama_new_context_with_model: n_ubatch   = 512
0.00.698.889 I llama_new_context_with_model: flash_attn = 0
0.00.698.892 I llama_new_context_with_model: freq_base  = 10000.0
0.00.698.893 I llama_new_context_with_model: freq_scale = 1
0.00.729.153 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.729.196 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.729.309 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.730.703 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.730.705 I llama_new_context_with_model: graph nodes  = 601
0.00.730.706 I llama_new_context_with_model: graph splits = 1
0.00.730.722 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.343.248 I main: llama threadpool init, n_threads = 4
0.01.343.260 I 
0.01.343.370 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.343.374 I 
0.01.343.605 I sampler seed: 647322039
0.01.343.617 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.343.624 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.343.626 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.343.626 I 
 increasively, signifying a gradual increase in the intensity of the activity. [end of text]


0.07.635.530 I llama_perf_sampler_print:    sampling time =      23.13 ms /    16 runs   (    1.45 ms per token,   691.83 tokens per second)
0.07.635.534 I llama_perf_context_print:        load time =    1340.35 ms
0.07.635.535 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.07.635.536 I llama_perf_context_print:        eval time =    6246.64 ms /    15 runs   (  416.44 ms per token,     2.40 tokens per second)
0.07.635.537 I llama_perf_context_print:       total time =    6292.29 ms /    16 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m50.205s
user	2m32.815s
sys	0m9.561s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3978 (ff252ea4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198698.76 ms
main:    total time = 198698.76 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.657 I build: 3978 (ff252ea4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.858 I main: llama backend init
0.00.002.805 I main: load the model and apply lora adapter, if any
0.00.024.882 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.099 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.192 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.203 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.205 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.209 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.213 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.214 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.215 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.216 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.219 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.226 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.227 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.229 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.230 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.171 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.986 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.468 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.476 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.477 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.478 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.479 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.481 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.482 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.485 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.487 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.488 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.489 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.490 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.498 I llama_model_loader: - type  f32:   37 tensors
0.00.266.503 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.503 I llama_model_loader: - type q6_K:   19 tensors
0.00.444.078 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.510.755 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.511.705 I llm_load_vocab: special tokens cache size = 5
0.00.604.952 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.019 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.020 I llm_load_print_meta: arch             = gemma
0.00.605.021 I llm_load_print_meta: vocab type       = SPM
0.00.605.022 I llm_load_print_meta: n_vocab          = 256000
0.00.605.024 I llm_load_print_meta: n_merges         = 0
0.00.605.024 I llm_load_print_meta: vocab_only       = 0
0.00.605.025 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.025 I llm_load_print_meta: n_embd           = 2048
0.00.605.025 I llm_load_print_meta: n_layer          = 18
0.00.605.090 I llm_load_print_meta: n_head           = 8
0.00.605.097 I llm_load_print_meta: n_head_kv        = 1
0.00.605.097 I llm_load_print_meta: n_rot            = 256
0.00.605.098 I llm_load_print_meta: n_swa            = 0
0.00.605.098 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.100 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.104 I llm_load_print_meta: n_gqa            = 8
0.00.605.109 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.114 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.115 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.117 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.118 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.118 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.119 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.123 I llm_load_print_meta: n_ff             = 16384
0.00.605.124 I llm_load_print_meta: n_expert         = 0
0.00.605.124 I llm_load_print_meta: n_expert_used    = 0
0.00.605.133 I llm_load_print_meta: causal attn      = 1
0.00.605.134 I llm_load_print_meta: pooling type     = 0
0.00.605.134 I llm_load_print_meta: rope type        = 2
0.00.605.135 I llm_load_print_meta: rope scaling     = linear
0.00.605.137 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.148 I llm_load_print_meta: freq_scale_train = 1
0.00.605.149 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.150 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.150 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.150 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.158 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.159 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.160 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.160 I llm_load_print_meta: model type       = 2B
0.00.605.161 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.163 I llm_load_print_meta: model params     = 2.51 B
0.00.605.163 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.164 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.164 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.172 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.179 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.180 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.187 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.188 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.199 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.202 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.202 I llm_load_print_meta: max token length = 93
0.00.605.373 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.665.396 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.665.408 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.665.409 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.665.409 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.665.410 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.665.411 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.671.087 I llama_new_context_with_model: n_ctx      = 8192
0.00.671.094 I llama_new_context_with_model: n_batch    = 2048
0.00.671.095 I llama_new_context_with_model: n_ubatch   = 512
0.00.671.095 I llama_new_context_with_model: flash_attn = 0
0.00.671.098 I llama_new_context_with_model: freq_base  = 10000.0
0.00.671.099 I llama_new_context_with_model: freq_scale = 1
0.00.701.141 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.701.183 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.701.303 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.702.713 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.702.718 I llama_new_context_with_model: graph nodes  = 601
0.00.702.718 I llama_new_context_with_model: graph splits = 1
0.00.702.733 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.282.923 I main: llama threadpool init, n_threads = 4
0.01.282.937 I 
0.01.283.048 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.283.052 I 
0.01.283.285 I sampler seed: 322355888
0.01.283.297 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.283.305 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.283.306 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.283.306 I 
 encompates a vast array of tasks, including:

**Strategic planning and analysis:**
* Conducting SWOT analysis
* Developing strategic objectives and action plans
*

0.12.293.963 I llama_perf_sampler_print:    sampling time =      49.04 ms /    33 runs   (    1.49 ms per token,   672.93 tokens per second)
0.12.293.968 I llama_perf_context_print:        load time =    1280.03 ms
0.12.293.969 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.293.972 I llama_perf_context_print:        eval time =   10915.48 ms /    32 runs   (  341.11 ms per token,     2.93 tokens per second)
0.12.293.974 I llama_perf_context_print:       total time =   11011.05 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3978 (ff252ea4)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198621.99 ms
main:    total time = 198621.99 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.627 I build: 3978 (ff252ea4) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.826 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.024.867 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.967 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.983 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.984 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.989 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.991 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.992 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.994 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.995 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.996 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.004 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.008 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.009 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.010 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.011 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.108 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.783 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.278 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.285 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.286 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.287 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.288 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.290 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.291 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.295 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.296 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.304 I llama_model_loader: - type  f32:   37 tensors
0.00.266.309 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.310 I llama_model_loader: - type q6_K:   19 tensors
0.00.450.119 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.511.284 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.512.200 I llm_load_vocab: special tokens cache size = 5
0.00.605.487 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.605.555 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.605.556 I llm_load_print_meta: arch             = gemma
0.00.605.557 I llm_load_print_meta: vocab type       = SPM
0.00.605.558 I llm_load_print_meta: n_vocab          = 256000
0.00.605.559 I llm_load_print_meta: n_merges         = 0
0.00.605.560 I llm_load_print_meta: vocab_only       = 0
0.00.605.560 I llm_load_print_meta: n_ctx_train      = 8192
0.00.605.561 I llm_load_print_meta: n_embd           = 2048
0.00.605.561 I llm_load_print_meta: n_layer          = 18
0.00.605.625 I llm_load_print_meta: n_head           = 8
0.00.605.632 I llm_load_print_meta: n_head_kv        = 1
0.00.605.633 I llm_load_print_meta: n_rot            = 256
0.00.605.633 I llm_load_print_meta: n_swa            = 0
0.00.605.634 I llm_load_print_meta: n_embd_head_k    = 256
0.00.605.634 I llm_load_print_meta: n_embd_head_v    = 256
0.00.605.638 I llm_load_print_meta: n_gqa            = 8
0.00.605.643 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.605.648 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.605.649 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.605.651 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.605.652 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.605.652 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.605.653 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.605.657 I llm_load_print_meta: n_ff             = 16384
0.00.605.658 I llm_load_print_meta: n_expert         = 0
0.00.605.658 I llm_load_print_meta: n_expert_used    = 0
0.00.605.658 I llm_load_print_meta: causal attn      = 1
0.00.605.660 I llm_load_print_meta: pooling type     = 0
0.00.605.660 I llm_load_print_meta: rope type        = 2
0.00.605.660 I llm_load_print_meta: rope scaling     = linear
0.00.605.662 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.605.662 I llm_load_print_meta: freq_scale_train = 1
0.00.605.663 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.605.663 I llm_load_print_meta: rope_finetuned   = unknown
0.00.605.663 I llm_load_print_meta: ssm_d_conv       = 0
0.00.605.664 I llm_load_print_meta: ssm_d_inner      = 0
0.00.605.664 I llm_load_print_meta: ssm_d_state      = 0
0.00.605.665 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.605.665 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.605.666 I llm_load_print_meta: model type       = 2B
0.00.605.675 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.605.677 I llm_load_print_meta: model params     = 2.51 B
0.00.605.677 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.605.678 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.605.679 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.605.680 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.605.680 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.605.681 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.605.681 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.605.682 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.605.688 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.605.689 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.605.691 I llm_load_print_meta: max token length = 93
0.00.605.853 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.664.470 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.670.068 I llama_new_context_with_model: n_ctx      = 8192
0.00.670.075 I llama_new_context_with_model: n_batch    = 2048
0.00.670.076 I llama_new_context_with_model: n_ubatch   = 512
0.00.670.076 I llama_new_context_with_model: flash_attn = 0
0.00.670.080 I llama_new_context_with_model: freq_base  = 10000.0
0.00.670.080 I llama_new_context_with_model: freq_scale = 1
0.00.699.123 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.699.168 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.699.300 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.700.700 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.700.705 I llama_new_context_with_model: graph nodes  = 601
0.00.700.705 I llama_new_context_with_model: graph splits = 1
0.00.700.721 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.013 I main: llama threadpool init, n_threads = 4
0.01.279.026 I 
0.01.279.136 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.140 I 
0.01.279.381 I sampler seed: 1276635659
0.01.279.393 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.410 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.279.411 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.279.411 I 
 increamically.

I am unable to generate a response as requested because generating text that exaggerates or misrepresents information would violate my safety principles. [end of text]


0.11.600.991 I llama_perf_sampler_print:    sampling time =      46.02 ms /    31 runs   (    1.48 ms per token,   673.59 tokens per second)
0.11.600.994 I llama_perf_context_print:        load time =    1276.16 ms
0.11.600.997 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.11.600.999 I llama_perf_context_print:        eval time =   10233.44 ms /    30 runs   (  341.11 ms per token,     2.93 tokens per second)
0.11.601.005 I llama_perf_context_print:       total time =   10321.99 ms /    31 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m4.204s
user	50m8.066s
sys	0m6.422s
