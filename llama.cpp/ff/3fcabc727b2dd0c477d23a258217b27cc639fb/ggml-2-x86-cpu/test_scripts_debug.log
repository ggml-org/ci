+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4459 (ff3fcabc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.832 I main: load the model and apply lora adapter, if any
0.00.085.441 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.453 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.546 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.564 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.566 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.571 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.573 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.575 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.577 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.578 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.580 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.588 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.589 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.591 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.592 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.085.594 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.289.972 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.717 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.025 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.036 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.038 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.039 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.041 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.043 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.045 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.049 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.051 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.053 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.055 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.056 I llama_model_loader: - kv  26:                                split.count u16              = 6
0.00.417.065 I llama_model_loader: - type  f32:   37 tensors
0.00.417.068 I llama_model_loader: - type q8_0:  127 tensors
0.00.690.960 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.811.802 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.812.706 I llm_load_vocab: special tokens cache size = 5
0.01.035.825 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.035.900 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.035.908 I llm_load_print_meta: arch             = gemma
0.01.035.909 I llm_load_print_meta: vocab type       = SPM
0.01.035.910 I llm_load_print_meta: n_vocab          = 256000
0.01.035.912 I llm_load_print_meta: n_merges         = 0
0.01.035.913 I llm_load_print_meta: vocab_only       = 0
0.01.035.913 I llm_load_print_meta: n_ctx_train      = 8192
0.01.035.914 I llm_load_print_meta: n_embd           = 2048
0.01.035.915 I llm_load_print_meta: n_layer          = 18
0.01.035.993 I llm_load_print_meta: n_head           = 8
0.01.036.003 I llm_load_print_meta: n_head_kv        = 1
0.01.036.004 I llm_load_print_meta: n_rot            = 256
0.01.036.005 I llm_load_print_meta: n_swa            = 0
0.01.036.006 I llm_load_print_meta: n_embd_head_k    = 256
0.01.036.006 I llm_load_print_meta: n_embd_head_v    = 256
0.01.036.029 I llm_load_print_meta: n_gqa            = 8
0.01.036.037 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.036.042 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.036.044 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.036.046 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.036.046 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.036.046 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.036.047 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.036.052 I llm_load_print_meta: n_ff             = 16384
0.01.036.053 I llm_load_print_meta: n_expert         = 0
0.01.036.053 I llm_load_print_meta: n_expert_used    = 0
0.01.036.063 I llm_load_print_meta: causal attn      = 1
0.01.036.065 I llm_load_print_meta: pooling type     = 0
0.01.036.065 I llm_load_print_meta: rope type        = 2
0.01.036.066 I llm_load_print_meta: rope scaling     = linear
0.01.036.067 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.036.068 I llm_load_print_meta: freq_scale_train = 1
0.01.036.068 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.036.068 I llm_load_print_meta: rope_finetuned   = unknown
0.01.036.069 I llm_load_print_meta: ssm_d_conv       = 0
0.01.036.070 I llm_load_print_meta: ssm_d_inner      = 0
0.01.036.070 I llm_load_print_meta: ssm_d_state      = 0
0.01.036.070 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.036.071 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.036.074 I llm_load_print_meta: model type       = 2B
0.01.036.075 I llm_load_print_meta: model ftype      = Q8_0
0.01.036.076 I llm_load_print_meta: model params     = 2.51 B
0.01.036.077 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.036.078 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.036.078 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.036.079 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.036.080 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.036.080 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.036.089 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.036.090 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.036.096 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.036.097 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.036.098 I llm_load_print_meta: max token length = 93
0.01.139.903 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.01.139.911 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.01.139.912 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.01.139.913 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.01.139.913 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.01.139.914 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.01.146.816 I llama_new_context_with_model: n_seq_max     = 1
0.01.146.821 I llama_new_context_with_model: n_ctx         = 4096
0.01.146.821 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.146.822 I llama_new_context_with_model: n_batch       = 2048
0.01.146.822 I llama_new_context_with_model: n_ubatch      = 512
0.01.146.823 I llama_new_context_with_model: flash_attn    = 0
0.01.146.825 I llama_new_context_with_model: freq_base     = 10000.0
0.01.146.826 I llama_new_context_with_model: freq_scale    = 1
0.01.146.826 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.146.909 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.161.460 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.161.497 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.161.622 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.165.203 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.165.207 I llama_new_context_with_model: graph nodes  = 601
0.01.165.207 I llama_new_context_with_model: graph splits = 1
0.01.165.232 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.165.235 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.772.529 I main: llama threadpool init, n_threads = 4
0.01.772.544 I 
0.01.772.669 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.772.673 I 
0.01.772.908 I sampler seed: 669824269
0.01.772.921 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.772.933 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.772.934 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.772.934 I 
 increasities. [end of text]


0.03.463.919 I llama_perf_sampler_print:    sampling time =       6.36 ms /     5 runs   (    1.27 ms per token,   786.53 tokens per second)
0.03.463.934 I llama_perf_context_print:        load time =    1771.61 ms
0.03.463.936 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.463.938 I llama_perf_context_print:        eval time =    1679.19 ms /     4 runs   (  419.80 ms per token,     2.38 tokens per second)
0.03.463.939 I llama_perf_context_print:       total time =    1691.40 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.621 I build: 4459 (ff3fcabc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.086.065 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.086.169 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.192 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.194 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.200 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.201 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.203 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.205 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.207 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.209 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.218 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.220 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.222 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.223 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.225 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.290.543 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.393.145 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.417.586 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.417.599 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.417.600 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.417.602 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.417.604 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.417.606 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.417.607 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.417.613 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.417.614 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.417.616 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.417.618 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.417.620 I llama_model_loader: - kv  26:                                split.count u16              = 0
0.00.417.628 I llama_model_loader: - type  f32:   37 tensors
0.00.417.630 I llama_model_loader: - type q8_0:  127 tensors
0.00.674.877 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.798.768 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.799.708 I llm_load_vocab: special tokens cache size = 5
0.01.011.644 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.011.723 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.011.728 I llm_load_print_meta: arch             = gemma
0.01.011.729 I llm_load_print_meta: vocab type       = SPM
0.01.011.729 I llm_load_print_meta: n_vocab          = 256000
0.01.011.731 I llm_load_print_meta: n_merges         = 0
0.01.011.732 I llm_load_print_meta: vocab_only       = 0
0.01.011.732 I llm_load_print_meta: n_ctx_train      = 8192
0.01.011.732 I llm_load_print_meta: n_embd           = 2048
0.01.011.733 I llm_load_print_meta: n_layer          = 18
0.01.011.815 I llm_load_print_meta: n_head           = 8
0.01.011.822 I llm_load_print_meta: n_head_kv        = 1
0.01.011.823 I llm_load_print_meta: n_rot            = 256
0.01.011.824 I llm_load_print_meta: n_swa            = 0
0.01.011.829 I llm_load_print_meta: n_embd_head_k    = 256
0.01.011.829 I llm_load_print_meta: n_embd_head_v    = 256
0.01.011.834 I llm_load_print_meta: n_gqa            = 8
0.01.011.840 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.011.855 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.011.857 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.011.858 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.011.858 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.011.859 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.011.859 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.011.864 I llm_load_print_meta: n_ff             = 16384
0.01.011.864 I llm_load_print_meta: n_expert         = 0
0.01.011.865 I llm_load_print_meta: n_expert_used    = 0
0.01.011.865 I llm_load_print_meta: causal attn      = 1
0.01.011.878 I llm_load_print_meta: pooling type     = 0
0.01.011.879 I llm_load_print_meta: rope type        = 2
0.01.011.880 I llm_load_print_meta: rope scaling     = linear
0.01.011.881 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.011.882 I llm_load_print_meta: freq_scale_train = 1
0.01.011.882 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.011.883 I llm_load_print_meta: rope_finetuned   = unknown
0.01.011.884 I llm_load_print_meta: ssm_d_conv       = 0
0.01.011.884 I llm_load_print_meta: ssm_d_inner      = 0
0.01.011.885 I llm_load_print_meta: ssm_d_state      = 0
0.01.011.885 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.011.886 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.011.890 I llm_load_print_meta: model type       = 2B
0.01.011.892 I llm_load_print_meta: model ftype      = Q8_0
0.01.011.893 I llm_load_print_meta: model params     = 2.51 B
0.01.011.893 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.011.894 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.011.895 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.011.895 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.011.896 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.011.896 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.011.897 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.011.898 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.011.904 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.011.905 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.011.906 I llm_load_print_meta: max token length = 93
0.01.110.119 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.01.117.176 I llama_new_context_with_model: n_seq_max     = 1
0.01.117.181 I llama_new_context_with_model: n_ctx         = 4096
0.01.117.182 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.117.182 I llama_new_context_with_model: n_batch       = 2048
0.01.117.182 I llama_new_context_with_model: n_ubatch      = 512
0.01.117.183 I llama_new_context_with_model: flash_attn    = 0
0.01.117.185 I llama_new_context_with_model: freq_base     = 10000.0
0.01.117.185 I llama_new_context_with_model: freq_scale    = 1
0.01.117.186 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.117.265 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.131.564 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.131.605 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.131.720 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.135.268 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.135.272 I llama_new_context_with_model: graph nodes  = 601
0.01.135.273 I llama_new_context_with_model: graph splits = 1
0.01.135.296 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.135.299 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.744.305 I main: llama threadpool init, n_threads = 4
0.01.744.321 I 
0.01.744.441 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.744.445 I 
0.01.744.682 I sampler seed: 1695399581
0.01.744.697 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.744.707 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.744.708 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.744.708 I 
 increably.

I am unable to generate the requested text due to a technical limitation. [end of text]


0.09.836.479 I llama_perf_sampler_print:    sampling time =      29.51 ms /    20 runs   (    1.48 ms per token,   677.64 tokens per second)
0.09.836.483 I llama_perf_context_print:        load time =    1743.39 ms
0.09.836.494 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.836.496 I llama_perf_context_print:        eval time =    8041.08 ms /    19 runs   (  423.21 ms per token,     2.36 tokens per second)
0.09.836.498 I llama_perf_context_print:       total time =    8092.19 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.630 I build: 4459 (ff3fcabc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.855 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.085.921 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.085.931 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.086.024 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.041 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.044 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.048 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.050 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.053 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.054 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.071 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.076 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.086 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.089 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.091 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.094 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.101 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.292.343 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.394.502 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.419.061 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.419.080 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.419.081 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.419.083 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.419.085 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.419.098 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.419.101 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.419.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.419.110 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.419.113 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.419.117 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.419.119 I llama_model_loader: - kv  26:                                split.count u16              = 7
0.00.419.129 I llama_model_loader: - type  f32:   37 tensors
0.00.419.133 I llama_model_loader: - type q8_0:  127 tensors
0.00.687.808 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.804.427 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.805.423 I llm_load_vocab: special tokens cache size = 5
0.01.029.428 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.029.508 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.029.512 I llm_load_print_meta: arch             = gemma
0.01.029.513 I llm_load_print_meta: vocab type       = SPM
0.01.029.514 I llm_load_print_meta: n_vocab          = 256000
0.01.029.516 I llm_load_print_meta: n_merges         = 0
0.01.029.517 I llm_load_print_meta: vocab_only       = 0
0.01.029.517 I llm_load_print_meta: n_ctx_train      = 8192
0.01.029.518 I llm_load_print_meta: n_embd           = 2048
0.01.029.518 I llm_load_print_meta: n_layer          = 18
0.01.029.606 I llm_load_print_meta: n_head           = 8
0.01.029.627 I llm_load_print_meta: n_head_kv        = 1
0.01.029.631 I llm_load_print_meta: n_rot            = 256
0.01.029.632 I llm_load_print_meta: n_swa            = 0
0.01.029.632 I llm_load_print_meta: n_embd_head_k    = 256
0.01.029.633 I llm_load_print_meta: n_embd_head_v    = 256
0.01.029.641 I llm_load_print_meta: n_gqa            = 8
0.01.029.648 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.029.657 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.029.663 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.029.664 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.029.664 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.029.665 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.029.665 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.029.670 I llm_load_print_meta: n_ff             = 16384
0.01.029.671 I llm_load_print_meta: n_expert         = 0
0.01.029.672 I llm_load_print_meta: n_expert_used    = 0
0.01.029.673 I llm_load_print_meta: causal attn      = 1
0.01.029.674 I llm_load_print_meta: pooling type     = 0
0.01.029.675 I llm_load_print_meta: rope type        = 2
0.01.029.676 I llm_load_print_meta: rope scaling     = linear
0.01.029.678 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.029.682 I llm_load_print_meta: freq_scale_train = 1
0.01.029.683 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.029.683 I llm_load_print_meta: rope_finetuned   = unknown
0.01.029.684 I llm_load_print_meta: ssm_d_conv       = 0
0.01.029.684 I llm_load_print_meta: ssm_d_inner      = 0
0.01.029.685 I llm_load_print_meta: ssm_d_state      = 0
0.01.029.686 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.029.687 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.029.699 I llm_load_print_meta: model type       = 2B
0.01.029.701 I llm_load_print_meta: model ftype      = Q8_0
0.01.029.703 I llm_load_print_meta: model params     = 2.51 B
0.01.029.707 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.029.713 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.029.715 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.029.716 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.029.717 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.029.717 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.029.719 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.029.720 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.029.727 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.029.729 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.029.729 I llm_load_print_meta: max token length = 93
0.01.110.711 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.01.110.718 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.110.719 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.01.110.719 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.01.110.720 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.01.110.721 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.01.118.142 I llama_new_context_with_model: n_seq_max     = 1
0.01.118.147 I llama_new_context_with_model: n_ctx         = 4096
0.01.118.148 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.118.148 I llama_new_context_with_model: n_batch       = 2048
0.01.118.149 I llama_new_context_with_model: n_ubatch      = 512
0.01.118.149 I llama_new_context_with_model: flash_attn    = 0
0.01.118.152 I llama_new_context_with_model: freq_base     = 10000.0
0.01.118.152 I llama_new_context_with_model: freq_scale    = 1
0.01.118.153 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.118.239 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.132.588 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.132.632 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.132.761 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.136.318 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.136.322 I llama_new_context_with_model: graph nodes  = 601
0.01.136.323 I llama_new_context_with_model: graph splits = 1
0.01.136.349 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.136.353 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.743.773 I main: llama threadpool init, n_threads = 4
0.01.743.790 I 
0.01.743.911 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.743.912 I 
0.01.744.149 I sampler seed: 2430756285
0.01.744.164 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.744.178 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.744.182 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.744.182 I 
 increably with the current economic and geopolitical situation.

**Assistant**
I am unable to provide a response that promotes political endorsements or makes statements about current events

0.15.412.852 I llama_perf_sampler_print:    sampling time =      50.05 ms /    33 runs   (    1.52 ms per token,   659.31 tokens per second)
0.15.412.856 I llama_perf_context_print:        load time =    1742.82 ms
0.15.412.858 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.412.860 I llama_perf_context_print:        eval time =   13583.26 ms /    32 runs   (  424.48 ms per token,     2.36 tokens per second)
0.15.412.861 I llama_perf_context_print:       total time =   13669.09 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.624 I build: 4459 (ff3fcabc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.829 I main: llama backend init
0.00.000.837 I main: load the model and apply lora adapter, if any
0.00.085.860 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.085.873 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.085.982 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.086.007 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.086.015 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.086.022 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.086.027 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.086.030 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.086.033 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.086.037 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.086.040 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.086.053 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.086.058 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.086.062 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.086.066 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.086.069 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.291.855 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.394.084 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.418.475 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.418.493 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.418.495 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.418.496 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.418.498 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.418.500 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.418.502 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.418.507 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.418.509 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.418.511 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.418.513 I llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
0.00.418.514 I llama_model_loader: - kv  26:                                split.count u16              = 2
0.00.418.524 I llama_model_loader: - type  f32:   37 tensors
0.00.418.526 I llama_model_loader: - type q8_0:  127 tensors
0.00.664.726 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.788.700 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.789.818 I llm_load_vocab: special tokens cache size = 5
0.01.007.106 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.007.194 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.007.205 I llm_load_print_meta: arch             = gemma
0.01.007.207 I llm_load_print_meta: vocab type       = SPM
0.01.007.208 I llm_load_print_meta: n_vocab          = 256000
0.01.007.212 I llm_load_print_meta: n_merges         = 0
0.01.007.213 I llm_load_print_meta: vocab_only       = 0
0.01.007.216 I llm_load_print_meta: n_ctx_train      = 8192
0.01.007.217 I llm_load_print_meta: n_embd           = 2048
0.01.007.217 I llm_load_print_meta: n_layer          = 18
0.01.007.305 I llm_load_print_meta: n_head           = 8
0.01.007.315 I llm_load_print_meta: n_head_kv        = 1
0.01.007.316 I llm_load_print_meta: n_rot            = 256
0.01.007.316 I llm_load_print_meta: n_swa            = 0
0.01.007.317 I llm_load_print_meta: n_embd_head_k    = 256
0.01.007.317 I llm_load_print_meta: n_embd_head_v    = 256
0.01.007.324 I llm_load_print_meta: n_gqa            = 8
0.01.007.332 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.007.348 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.007.353 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.007.355 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.007.356 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.007.357 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.007.358 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.007.367 I llm_load_print_meta: n_ff             = 16384
0.01.007.369 I llm_load_print_meta: n_expert         = 0
0.01.007.369 I llm_load_print_meta: n_expert_used    = 0
0.01.007.371 I llm_load_print_meta: causal attn      = 1
0.01.007.371 I llm_load_print_meta: pooling type     = 0
0.01.007.372 I llm_load_print_meta: rope type        = 2
0.01.007.376 I llm_load_print_meta: rope scaling     = linear
0.01.007.377 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.007.379 I llm_load_print_meta: freq_scale_train = 1
0.01.007.380 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.007.380 I llm_load_print_meta: rope_finetuned   = unknown
0.01.007.381 I llm_load_print_meta: ssm_d_conv       = 0
0.01.007.381 I llm_load_print_meta: ssm_d_inner      = 0
0.01.007.382 I llm_load_print_meta: ssm_d_state      = 0
0.01.007.382 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.007.385 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.007.389 I llm_load_print_meta: model type       = 2B
0.01.007.392 I llm_load_print_meta: model ftype      = Q8_0
0.01.007.402 I llm_load_print_meta: model params     = 2.51 B
0.01.007.403 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.01.007.404 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.007.407 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.007.408 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.007.410 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.007.411 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.007.411 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.007.412 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.007.421 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.007.423 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.007.426 I llm_load_print_meta: max token length = 93
0.01.080.184 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.01.080.190 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.01.087.445 I llama_new_context_with_model: n_seq_max     = 1
0.01.087.450 I llama_new_context_with_model: n_ctx         = 4096
0.01.087.451 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.087.451 I llama_new_context_with_model: n_batch       = 2048
0.01.087.452 I llama_new_context_with_model: n_ubatch      = 512
0.01.087.452 I llama_new_context_with_model: flash_attn    = 0
0.01.087.454 I llama_new_context_with_model: freq_base     = 10000.0
0.01.087.455 I llama_new_context_with_model: freq_scale    = 1
0.01.087.455 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.087.541 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.102.129 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.102.176 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.102.307 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.105.631 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.105.635 I llama_new_context_with_model: graph nodes  = 601
0.01.105.636 I llama_new_context_with_model: graph splits = 1
0.01.105.662 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.105.666 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.711.737 I main: llama threadpool init, n_threads = 4
0.01.711.753 I 
0.01.711.890 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.711.895 I 
0.01.712.137 I sampler seed: 482790010
0.01.712.152 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.712.169 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.712.170 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.712.172 I 
 increasities:
**Explanation:**
The provided text does not contain any information regarding "incredia", so I am unable to extract the requested data from the

0.15.300.965 I llama_perf_sampler_print:    sampling time =      49.88 ms /    33 runs   (    1.51 ms per token,   661.64 tokens per second)
0.15.300.968 I llama_perf_context_print:        load time =    1710.81 ms
0.15.300.969 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.15.300.997 I llama_perf_context_print:        eval time =   13502.88 ms /    32 runs   (  421.97 ms per token,     2.37 tokens per second)
0.15.300.999 I llama_perf_context_print:       total time =   13589.24 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m55.023s
user	2m43.921s
sys	0m9.307s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4459 (ff3fcabc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186622.59 ms
main:    total time = 186622.59 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4459 (ff3fcabc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.825 I main: llama backend init
0.00.000.832 I main: load the model and apply lora adapter, if any
0.00.085.255 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.085.269 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.085.371 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.392 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.395 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.400 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.402 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.404 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.405 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.407 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.409 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.416 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.418 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.420 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.421 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.289.505 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.391.734 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.328 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.341 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.343 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.345 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.346 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.348 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.351 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.355 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.357 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.416.359 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.416.361 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.416.362 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.416.364 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.416.373 I llama_model_loader: - type  f32:   37 tensors
0.00.416.375 I llama_model_loader: - type q4_K:  108 tensors
0.00.416.375 I llama_model_loader: - type q6_K:   19 tensors
0.00.680.663 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.802.762 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.803.713 I llm_load_vocab: special tokens cache size = 5
0.01.025.878 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.025.952 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.025.957 I llm_load_print_meta: arch             = gemma
0.01.025.958 I llm_load_print_meta: vocab type       = SPM
0.01.025.959 I llm_load_print_meta: n_vocab          = 256000
0.01.025.961 I llm_load_print_meta: n_merges         = 0
0.01.025.962 I llm_load_print_meta: vocab_only       = 0
0.01.025.962 I llm_load_print_meta: n_ctx_train      = 8192
0.01.025.962 I llm_load_print_meta: n_embd           = 2048
0.01.025.963 I llm_load_print_meta: n_layer          = 18
0.01.026.046 I llm_load_print_meta: n_head           = 8
0.01.026.053 I llm_load_print_meta: n_head_kv        = 1
0.01.026.055 I llm_load_print_meta: n_rot            = 256
0.01.026.055 I llm_load_print_meta: n_swa            = 0
0.01.026.055 I llm_load_print_meta: n_embd_head_k    = 256
0.01.026.056 I llm_load_print_meta: n_embd_head_v    = 256
0.01.026.060 I llm_load_print_meta: n_gqa            = 8
0.01.026.066 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.026.071 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.026.073 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.026.074 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.026.075 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.026.075 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.026.075 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.026.080 I llm_load_print_meta: n_ff             = 16384
0.01.026.081 I llm_load_print_meta: n_expert         = 0
0.01.026.081 I llm_load_print_meta: n_expert_used    = 0
0.01.026.082 I llm_load_print_meta: causal attn      = 1
0.01.026.082 I llm_load_print_meta: pooling type     = 0
0.01.026.083 I llm_load_print_meta: rope type        = 2
0.01.026.083 I llm_load_print_meta: rope scaling     = linear
0.01.026.085 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.026.086 I llm_load_print_meta: freq_scale_train = 1
0.01.026.087 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.026.087 I llm_load_print_meta: rope_finetuned   = unknown
0.01.026.088 I llm_load_print_meta: ssm_d_conv       = 0
0.01.026.088 I llm_load_print_meta: ssm_d_inner      = 0
0.01.026.112 I llm_load_print_meta: ssm_d_state      = 0
0.01.026.115 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.026.116 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.026.119 I llm_load_print_meta: model type       = 2B
0.01.026.121 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.026.121 I llm_load_print_meta: model params     = 2.51 B
0.01.026.122 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.026.124 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.026.124 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.026.125 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.026.126 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.026.127 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.026.135 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.026.136 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.026.143 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.026.144 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.026.144 I llm_load_print_meta: max token length = 93
0.01.091.725 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.01.091.733 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.01.091.734 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.01.091.735 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.01.091.736 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.01.091.737 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.01.098.697 I llama_new_context_with_model: n_seq_max     = 1
0.01.098.702 I llama_new_context_with_model: n_ctx         = 4096
0.01.098.703 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.098.703 I llama_new_context_with_model: n_batch       = 2048
0.01.098.704 I llama_new_context_with_model: n_ubatch      = 512
0.01.098.704 I llama_new_context_with_model: flash_attn    = 0
0.01.098.706 I llama_new_context_with_model: freq_base     = 10000.0
0.01.098.707 I llama_new_context_with_model: freq_scale    = 1
0.01.098.708 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.098.790 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.113.525 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.113.564 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.113.680 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.116.964 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.116.968 I llama_new_context_with_model: graph nodes  = 601
0.01.116.969 I llama_new_context_with_model: graph splits = 1
0.01.116.993 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.116.993 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.698.865 I main: llama threadpool init, n_threads = 4
0.01.698.882 I 
0.01.699.007 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.699.011 I 
0.01.699.244 I sampler seed: 3328304452
0.01.699.258 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.699.268 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.699.271 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.699.272 I 
 seconded data with the same mean and standard deviation as the original data. What is the new mean and standard deviation of the new data?

**Solution:**

0.12.800.015 I llama_perf_sampler_print:    sampling time =      49.50 ms /    33 runs   (    1.50 ms per token,   666.61 tokens per second)
0.12.800.019 I llama_perf_context_print:        load time =    1697.95 ms
0.12.800.021 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.800.023 I llama_perf_context_print:        eval time =   11016.39 ms /    32 runs   (  344.26 ms per token,     2.90 tokens per second)
0.12.800.024 I llama_perf_context_print:       total time =   11101.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4459 (ff3fcabc)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                        split.tensors.count i32              = 164
llama_model_loader: - kv  26:                                split.count u16              = 6
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_impl: model size  =  2539.66 MB
llama_model_quantize_impl: quant size  =  1548.98 MB

main: quantize time = 186555.52 ms
main:    total time = 186555.52 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.641 I build: 4459 (ff3fcabc) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.000.844 I main: load the model and apply lora adapter, if any
0.00.085.168 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.085.285 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.085.308 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.085.311 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.085.315 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.085.317 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.085.319 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.085.321 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.085.322 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.085.324 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.085.330 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.085.332 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.085.333 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.085.334 I llama_model_loader: - kv  11:                       tokenizer.ggml.model str              = llama
0.00.289.840 I llama_model_loader: - kv  12:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.392.181 I llama_model_loader: - kv  13:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.416.627 I llama_model_loader: - kv  14:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.416.643 I llama_model_loader: - kv  15:                tokenizer.ggml.bos_token_id u32              = 2
0.00.416.645 I llama_model_loader: - kv  16:                tokenizer.ggml.eos_token_id u32              = 1
0.00.416.647 I llama_model_loader: - kv  17:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.416.648 I llama_model_loader: - kv  18:            tokenizer.ggml.padding_token_id u32              = 0
0.00.416.667 I llama_model_loader: - kv  19:               tokenizer.ggml.add_bos_token bool             = true
0.00.416.670 I llama_model_loader: - kv  20:               tokenizer.ggml.add_eos_token bool             = false
0.00.416.675 I llama_model_loader: - kv  21:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.416.677 I llama_model_loader: - kv  22:               general.quantization_version u32              = 2
0.00.416.679 I llama_model_loader: - kv  23:                          general.file_type u32              = 15
0.00.416.687 I llama_model_loader: - type  f32:   37 tensors
0.00.416.690 I llama_model_loader: - type q4_K:  108 tensors
0.00.416.691 I llama_model_loader: - type q6_K:   19 tensors
0.00.682.225 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.799.110 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.800.060 I llm_load_vocab: special tokens cache size = 5
0.01.015.565 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.01.015.640 I llm_load_print_meta: format           = GGUF V3 (latest)
0.01.015.645 I llm_load_print_meta: arch             = gemma
0.01.015.646 I llm_load_print_meta: vocab type       = SPM
0.01.015.646 I llm_load_print_meta: n_vocab          = 256000
0.01.015.649 I llm_load_print_meta: n_merges         = 0
0.01.015.650 I llm_load_print_meta: vocab_only       = 0
0.01.015.650 I llm_load_print_meta: n_ctx_train      = 8192
0.01.015.650 I llm_load_print_meta: n_embd           = 2048
0.01.015.651 I llm_load_print_meta: n_layer          = 18
0.01.015.728 I llm_load_print_meta: n_head           = 8
0.01.015.739 I llm_load_print_meta: n_head_kv        = 1
0.01.015.739 I llm_load_print_meta: n_rot            = 256
0.01.015.741 I llm_load_print_meta: n_swa            = 0
0.01.015.741 I llm_load_print_meta: n_embd_head_k    = 256
0.01.015.742 I llm_load_print_meta: n_embd_head_v    = 256
0.01.015.746 I llm_load_print_meta: n_gqa            = 8
0.01.015.751 I llm_load_print_meta: n_embd_k_gqa     = 256
0.01.015.756 I llm_load_print_meta: n_embd_v_gqa     = 256
0.01.015.758 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.01.015.759 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.01.015.759 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.01.015.760 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.01.015.760 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.01.015.765 I llm_load_print_meta: n_ff             = 16384
0.01.015.765 I llm_load_print_meta: n_expert         = 0
0.01.015.766 I llm_load_print_meta: n_expert_used    = 0
0.01.015.767 I llm_load_print_meta: causal attn      = 1
0.01.015.768 I llm_load_print_meta: pooling type     = 0
0.01.015.777 I llm_load_print_meta: rope type        = 2
0.01.015.778 I llm_load_print_meta: rope scaling     = linear
0.01.015.780 I llm_load_print_meta: freq_base_train  = 10000.0
0.01.015.781 I llm_load_print_meta: freq_scale_train = 1
0.01.015.781 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.01.015.782 I llm_load_print_meta: rope_finetuned   = unknown
0.01.015.783 I llm_load_print_meta: ssm_d_conv       = 0
0.01.015.783 I llm_load_print_meta: ssm_d_inner      = 0
0.01.015.784 I llm_load_print_meta: ssm_d_state      = 0
0.01.015.785 I llm_load_print_meta: ssm_dt_rank      = 0
0.01.015.785 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.01.015.788 I llm_load_print_meta: model type       = 2B
0.01.015.790 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.01.015.791 I llm_load_print_meta: model params     = 2.51 B
0.01.015.792 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.01.015.806 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.01.015.807 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.01.015.808 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.01.015.809 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.01.015.809 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.01.015.809 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.01.015.810 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.01.015.817 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.01.015.818 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.01.015.818 I llm_load_print_meta: max token length = 93
0.01.075.761 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.01.082.628 I llama_new_context_with_model: n_seq_max     = 1
0.01.082.633 I llama_new_context_with_model: n_ctx         = 4096
0.01.082.633 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.01.082.633 I llama_new_context_with_model: n_batch       = 2048
0.01.082.634 I llama_new_context_with_model: n_ubatch      = 512
0.01.082.634 I llama_new_context_with_model: flash_attn    = 0
0.01.082.636 I llama_new_context_with_model: freq_base     = 10000.0
0.01.082.637 I llama_new_context_with_model: freq_scale    = 1
0.01.082.638 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.01.082.721 I llama_kv_cache_init: kv_size = 4096, offload = 1, type_k = 'f16', type_v = 'f16', n_layer = 18, can_shift = 1
0.01.097.269 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.01.097.311 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.01.097.436 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.01.100.789 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.01.100.793 I llama_new_context_with_model: graph nodes  = 601
0.01.100.794 I llama_new_context_with_model: graph splits = 1
0.01.100.818 I common_init_from_params: setting dry_penalty_last_n to ctx_size = 4096
0.01.100.821 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.681.868 I main: llama threadpool init, n_threads = 4
0.01.681.885 I 
0.01.682.006 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | OPENMP = 1 | AARCH64_REPACK = 1 | 
0.01.682.010 I 
0.01.682.264 I sampler seed: 2982011227
0.01.682.278 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = 4096
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.682.288 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.682.291 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.682.291 I 
 squaRED text.

**I'm sorry, but I'm not allowed to generate responses that are sexually suggestive in nature.**

I am unable to

0.12.806.013 I llama_perf_sampler_print:    sampling time =      49.65 ms /    33 runs   (    1.50 ms per token,   664.60 tokens per second)
0.12.806.036 I llama_perf_context_print:        load time =    1680.94 ms
0.12.806.038 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.806.040 I llama_perf_context_print:        eval time =   11039.34 ms /    32 runs   (  344.98 ms per token,     2.90 tokens per second)
0.12.806.041 I llama_perf_context_print:       total time =   11124.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m42.009s
user	46m44.110s
sys	0m6.336s
