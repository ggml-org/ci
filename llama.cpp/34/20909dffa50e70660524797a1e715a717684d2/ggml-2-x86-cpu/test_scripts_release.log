+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.179 I build: 4234 (3420909d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.369 I main: llama backend init
0.00.000.376 I main: load the model and apply lora adapter, if any
0.00.020.717 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.020.724 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.020.732 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.020.741 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.020.744 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.020.750 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.020.750 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.020.751 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.020.752 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.020.753 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.020.754 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.020.758 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.020.758 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.020.759 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.020.760 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.020.760 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.289 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.054 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.982 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.990 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.992 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.993 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.994 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.995 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.996 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.000 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.001 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.002 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.002 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.004 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.008 I llama_model_loader: - type  f32:   37 tensors
0.00.130.009 I llama_model_loader: - type q8_0:  127 tensors
0.00.213.976 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.256.564 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.257.151 I llm_load_vocab: special tokens cache size = 5
0.00.278.514 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.278.534 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.278.534 I llm_load_print_meta: arch             = gemma
0.00.278.535 I llm_load_print_meta: vocab type       = SPM
0.00.278.537 I llm_load_print_meta: n_vocab          = 256000
0.00.278.538 I llm_load_print_meta: n_merges         = 0
0.00.278.538 I llm_load_print_meta: vocab_only       = 0
0.00.278.539 I llm_load_print_meta: n_ctx_train      = 8192
0.00.278.539 I llm_load_print_meta: n_embd           = 2048
0.00.278.539 I llm_load_print_meta: n_layer          = 18
0.00.278.550 I llm_load_print_meta: n_head           = 8
0.00.278.551 I llm_load_print_meta: n_head_kv        = 1
0.00.278.551 I llm_load_print_meta: n_rot            = 256
0.00.278.552 I llm_load_print_meta: n_swa            = 0
0.00.278.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.278.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.278.553 I llm_load_print_meta: n_gqa            = 8
0.00.278.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.278.555 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.278.556 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.278.557 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.278.557 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.278.558 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.278.559 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.278.559 I llm_load_print_meta: n_ff             = 16384
0.00.278.560 I llm_load_print_meta: n_expert         = 0
0.00.278.560 I llm_load_print_meta: n_expert_used    = 0
0.00.278.560 I llm_load_print_meta: causal attn      = 1
0.00.278.560 I llm_load_print_meta: pooling type     = 0
0.00.278.561 I llm_load_print_meta: rope type        = 2
0.00.278.562 I llm_load_print_meta: rope scaling     = linear
0.00.278.563 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.278.564 I llm_load_print_meta: freq_scale_train = 1
0.00.278.564 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.278.565 I llm_load_print_meta: rope_finetuned   = unknown
0.00.278.565 I llm_load_print_meta: ssm_d_conv       = 0
0.00.278.565 I llm_load_print_meta: ssm_d_inner      = 0
0.00.278.566 I llm_load_print_meta: ssm_d_state      = 0
0.00.278.566 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.278.567 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.278.567 I llm_load_print_meta: model type       = 2B
0.00.278.569 I llm_load_print_meta: model ftype      = Q8_0
0.00.278.570 I llm_load_print_meta: model params     = 2.51 B
0.00.278.571 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.278.571 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.278.571 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.278.571 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.278.572 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.278.572 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.278.573 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.278.573 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.278.574 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.278.574 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.278.575 I llm_load_print_meta: max token length = 93
0.00.380.028 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.380.037 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.380.038 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.380.039 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.380.039 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.380.040 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.385.255 I llama_new_context_with_model: n_seq_max     = 1
0.00.385.260 I llama_new_context_with_model: n_ctx         = 4096
0.00.385.261 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.385.261 I llama_new_context_with_model: n_batch       = 2048
0.00.385.262 I llama_new_context_with_model: n_ubatch      = 512
0.00.385.262 I llama_new_context_with_model: flash_attn    = 0
0.00.385.265 I llama_new_context_with_model: freq_base     = 10000.0
0.00.385.265 I llama_new_context_with_model: freq_scale    = 1
0.00.385.266 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.399.490 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.399.505 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.399.592 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.400.839 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.400.844 I llama_new_context_with_model: graph nodes  = 601
0.00.400.844 I llama_new_context_with_model: graph splits = 1
0.00.400.846 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.485.252 I main: llama threadpool init, n_threads = 4
0.00.485.267 I 
0.00.485.337 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.485.340 I 
0.00.485.381 I sampler seed: 833076247
0.00.485.392 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.485.405 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.485.408 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.485.409 I 
 increasively.

I am not able to provide a response as I am not sentient and do not possess the capacity for subjective experience or emotional response. [end of text]


0.02.654.664 I llama_perf_sampler_print:    sampling time =       4.68 ms /    32 runs   (    0.15 ms per token,  6839.07 tokens per second)
0.02.654.667 I llama_perf_context_print:        load time =     484.86 ms
0.02.654.669 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.654.671 I llama_perf_context_print:        eval time =    2151.42 ms /    31 runs   (   69.40 ms per token,    14.41 tokens per second)
0.02.654.672 I llama_perf_context_print:       total time =    2169.42 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.559 I build: 4234 (3420909d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.766 I main: llama backend init
0.00.000.773 I main: load the model and apply lora adapter, if any
0.00.021.265 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.021.278 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.284 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.285 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.289 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.292 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.293 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.294 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.294 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.295 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.298 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.299 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.299 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.300 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.300 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.557 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.246 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.092 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.099 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.100 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.101 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.102 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.103 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.103 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.106 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.107 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.108 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.109 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.130.109 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.113 I llama_model_loader: - type  f32:   37 tensors
0.00.130.114 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.404 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.239.450 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.239.965 I llm_load_vocab: special tokens cache size = 5
0.00.260.789 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.260.805 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.260.806 I llm_load_print_meta: arch             = gemma
0.00.260.807 I llm_load_print_meta: vocab type       = SPM
0.00.260.807 I llm_load_print_meta: n_vocab          = 256000
0.00.260.808 I llm_load_print_meta: n_merges         = 0
0.00.260.808 I llm_load_print_meta: vocab_only       = 0
0.00.260.808 I llm_load_print_meta: n_ctx_train      = 8192
0.00.260.809 I llm_load_print_meta: n_embd           = 2048
0.00.260.809 I llm_load_print_meta: n_layer          = 18
0.00.260.821 I llm_load_print_meta: n_head           = 8
0.00.260.822 I llm_load_print_meta: n_head_kv        = 1
0.00.260.822 I llm_load_print_meta: n_rot            = 256
0.00.260.822 I llm_load_print_meta: n_swa            = 0
0.00.260.823 I llm_load_print_meta: n_embd_head_k    = 256
0.00.260.823 I llm_load_print_meta: n_embd_head_v    = 256
0.00.260.824 I llm_load_print_meta: n_gqa            = 8
0.00.260.825 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.260.826 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.260.827 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.260.828 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.260.828 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.260.829 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.260.829 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.260.830 I llm_load_print_meta: n_ff             = 16384
0.00.260.831 I llm_load_print_meta: n_expert         = 0
0.00.260.831 I llm_load_print_meta: n_expert_used    = 0
0.00.260.831 I llm_load_print_meta: causal attn      = 1
0.00.260.831 I llm_load_print_meta: pooling type     = 0
0.00.260.832 I llm_load_print_meta: rope type        = 2
0.00.260.832 I llm_load_print_meta: rope scaling     = linear
0.00.260.833 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.260.834 I llm_load_print_meta: freq_scale_train = 1
0.00.260.834 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.260.835 I llm_load_print_meta: rope_finetuned   = unknown
0.00.260.835 I llm_load_print_meta: ssm_d_conv       = 0
0.00.260.835 I llm_load_print_meta: ssm_d_inner      = 0
0.00.260.836 I llm_load_print_meta: ssm_d_state      = 0
0.00.260.836 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.260.836 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.260.837 I llm_load_print_meta: model type       = 2B
0.00.260.837 I llm_load_print_meta: model ftype      = Q8_0
0.00.260.838 I llm_load_print_meta: model params     = 2.51 B
0.00.260.839 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.260.839 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.260.840 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.260.840 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.260.840 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.260.840 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.260.841 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.260.841 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.260.842 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.260.842 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.260.842 I llm_load_print_meta: max token length = 93
0.00.356.455 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.361.883 I llama_new_context_with_model: n_seq_max     = 1
0.00.361.890 I llama_new_context_with_model: n_ctx         = 4096
0.00.361.890 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.361.890 I llama_new_context_with_model: n_batch       = 2048
0.00.361.891 I llama_new_context_with_model: n_ubatch      = 512
0.00.361.891 I llama_new_context_with_model: flash_attn    = 0
0.00.361.893 I llama_new_context_with_model: freq_base     = 10000.0
0.00.361.894 I llama_new_context_with_model: freq_scale    = 1
0.00.361.895 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.377.461 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.377.479 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.377.592 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.378.914 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.378.920 I llama_new_context_with_model: graph nodes  = 601
0.00.378.920 I llama_new_context_with_model: graph splits = 1
0.00.378.922 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.463.562 I main: llama threadpool init, n_threads = 4
0.00.463.578 I 
0.00.463.658 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.463.662 I 
0.00.463.714 I sampler seed: 3873064595
0.00.463.725 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.463.735 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.463.736 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.463.736 I 
 increably! [end of text]


0.00.737.985 I llama_perf_sampler_print:    sampling time =       0.61 ms /     5 runs   (    0.12 ms per token,  8169.93 tokens per second)
0.00.737.987 I llama_perf_context_print:        load time =     462.77 ms
0.00.737.988 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.737.989 I llama_perf_context_print:        eval time =     270.90 ms /     4 runs   (   67.73 ms per token,    14.77 tokens per second)
0.00.737.990 I llama_perf_context_print:       total time =     274.43 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.530 I build: 4234 (3420909d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.730 I main: llama backend init
0.00.000.737 I main: load the model and apply lora adapter, if any
0.00.021.241 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.021.248 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.021.256 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.261 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.262 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.265 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.266 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.266 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.267 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.268 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.269 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.273 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.274 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.274 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.275 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.276 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.167 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.122.990 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.803 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.809 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.810 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.811 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.811 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.812 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.129.813 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.129.815 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.129.815 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.129.816 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.129.817 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.129.818 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.129.822 I llama_model_loader: - type  f32:   37 tensors
0.00.129.822 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.331 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.242.475 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.243.029 I llm_load_vocab: special tokens cache size = 5
0.00.263.889 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.263.905 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.263.906 I llm_load_print_meta: arch             = gemma
0.00.263.906 I llm_load_print_meta: vocab type       = SPM
0.00.263.907 I llm_load_print_meta: n_vocab          = 256000
0.00.263.908 I llm_load_print_meta: n_merges         = 0
0.00.263.908 I llm_load_print_meta: vocab_only       = 0
0.00.263.908 I llm_load_print_meta: n_ctx_train      = 8192
0.00.263.908 I llm_load_print_meta: n_embd           = 2048
0.00.263.909 I llm_load_print_meta: n_layer          = 18
0.00.263.919 I llm_load_print_meta: n_head           = 8
0.00.263.920 I llm_load_print_meta: n_head_kv        = 1
0.00.263.920 I llm_load_print_meta: n_rot            = 256
0.00.263.921 I llm_load_print_meta: n_swa            = 0
0.00.263.921 I llm_load_print_meta: n_embd_head_k    = 256
0.00.263.921 I llm_load_print_meta: n_embd_head_v    = 256
0.00.263.922 I llm_load_print_meta: n_gqa            = 8
0.00.263.923 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.263.924 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.263.925 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.263.926 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.263.926 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.263.927 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.263.927 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.263.928 I llm_load_print_meta: n_ff             = 16384
0.00.263.928 I llm_load_print_meta: n_expert         = 0
0.00.263.929 I llm_load_print_meta: n_expert_used    = 0
0.00.263.929 I llm_load_print_meta: causal attn      = 1
0.00.263.929 I llm_load_print_meta: pooling type     = 0
0.00.263.929 I llm_load_print_meta: rope type        = 2
0.00.263.930 I llm_load_print_meta: rope scaling     = linear
0.00.263.931 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.263.931 I llm_load_print_meta: freq_scale_train = 1
0.00.263.932 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.263.932 I llm_load_print_meta: rope_finetuned   = unknown
0.00.263.933 I llm_load_print_meta: ssm_d_conv       = 0
0.00.263.933 I llm_load_print_meta: ssm_d_inner      = 0
0.00.263.933 I llm_load_print_meta: ssm_d_state      = 0
0.00.263.933 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.263.934 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.263.934 I llm_load_print_meta: model type       = 2B
0.00.263.935 I llm_load_print_meta: model ftype      = Q8_0
0.00.263.936 I llm_load_print_meta: model params     = 2.51 B
0.00.263.937 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.263.937 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.263.937 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.263.937 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.263.938 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.263.938 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.263.938 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.263.939 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.263.939 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.263.940 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.263.940 I llm_load_print_meta: max token length = 93
0.00.340.098 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.340.106 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.107 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.340.107 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.340.108 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.340.108 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.345.349 I llama_new_context_with_model: n_seq_max     = 1
0.00.345.354 I llama_new_context_with_model: n_ctx         = 4096
0.00.345.354 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.345.355 I llama_new_context_with_model: n_batch       = 2048
0.00.345.355 I llama_new_context_with_model: n_ubatch      = 512
0.00.345.356 I llama_new_context_with_model: flash_attn    = 0
0.00.345.358 I llama_new_context_with_model: freq_base     = 10000.0
0.00.345.359 I llama_new_context_with_model: freq_scale    = 1
0.00.345.360 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.360.572 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.360.586 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.360.677 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.361.970 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.361.977 I llama_new_context_with_model: graph nodes  = 601
0.00.361.977 I llama_new_context_with_model: graph splits = 1
0.00.361.979 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.071 I main: llama threadpool init, n_threads = 4
0.00.445.087 I 
0.00.445.173 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.176 I 
0.00.445.221 I sampler seed: 618499660
0.00.445.231 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.238 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.239 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.239 I 
 increasels!
I cannot answer this question as it contains inappropriate content. [end of text]


0.01.591.495 I llama_perf_sampler_print:    sampling time =       2.40 ms /    17 runs   (    0.14 ms per token,  7077.44 tokens per second)
0.01.591.498 I llama_perf_context_print:        load time =     444.31 ms
0.01.591.499 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.591.500 I llama_perf_context_print:        eval time =    1136.16 ms /    16 runs   (   71.01 ms per token,    14.08 tokens per second)
0.01.591.501 I llama_perf_context_print:       total time =    1146.43 ms /    17 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.568 I build: 4234 (3420909d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.762 I main: llama backend init
0.00.000.769 I main: load the model and apply lora adapter, if any
0.00.021.689 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.701 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.709 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.719 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.720 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.724 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.725 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.726 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.727 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.728 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.737 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.742 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.746 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.746 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.747 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.747 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.466 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.186 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.282 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.288 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.289 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.290 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.290 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.291 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.292 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.294 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.295 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.296 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.297 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.133.299 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.302 I llama_model_loader: - type  f32:   37 tensors
0.00.133.303 I llama_model_loader: - type q8_0:  127 tensors
0.00.207.271 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.252.566 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.253.131 I llm_load_vocab: special tokens cache size = 5
0.00.274.245 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.274.262 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.274.262 I llm_load_print_meta: arch             = gemma
0.00.274.263 I llm_load_print_meta: vocab type       = SPM
0.00.274.263 I llm_load_print_meta: n_vocab          = 256000
0.00.274.264 I llm_load_print_meta: n_merges         = 0
0.00.274.264 I llm_load_print_meta: vocab_only       = 0
0.00.274.264 I llm_load_print_meta: n_ctx_train      = 8192
0.00.274.265 I llm_load_print_meta: n_embd           = 2048
0.00.274.265 I llm_load_print_meta: n_layer          = 18
0.00.274.277 I llm_load_print_meta: n_head           = 8
0.00.274.278 I llm_load_print_meta: n_head_kv        = 1
0.00.274.278 I llm_load_print_meta: n_rot            = 256
0.00.274.279 I llm_load_print_meta: n_swa            = 0
0.00.274.279 I llm_load_print_meta: n_embd_head_k    = 256
0.00.274.279 I llm_load_print_meta: n_embd_head_v    = 256
0.00.274.280 I llm_load_print_meta: n_gqa            = 8
0.00.274.281 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.274.283 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.274.284 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.274.285 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.274.286 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.274.286 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.274.286 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.274.287 I llm_load_print_meta: n_ff             = 16384
0.00.274.288 I llm_load_print_meta: n_expert         = 0
0.00.274.288 I llm_load_print_meta: n_expert_used    = 0
0.00.274.288 I llm_load_print_meta: causal attn      = 1
0.00.274.289 I llm_load_print_meta: pooling type     = 0
0.00.274.289 I llm_load_print_meta: rope type        = 2
0.00.274.289 I llm_load_print_meta: rope scaling     = linear
0.00.274.291 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.274.292 I llm_load_print_meta: freq_scale_train = 1
0.00.274.292 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.274.293 I llm_load_print_meta: rope_finetuned   = unknown
0.00.274.293 I llm_load_print_meta: ssm_d_conv       = 0
0.00.274.294 I llm_load_print_meta: ssm_d_inner      = 0
0.00.274.294 I llm_load_print_meta: ssm_d_state      = 0
0.00.274.294 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.274.295 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.274.296 I llm_load_print_meta: model type       = 2B
0.00.274.296 I llm_load_print_meta: model ftype      = Q8_0
0.00.274.298 I llm_load_print_meta: model params     = 2.51 B
0.00.274.299 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.274.299 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.274.300 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.274.300 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.274.301 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.274.301 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.274.302 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.274.302 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.274.302 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.274.303 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.274.304 I llm_load_print_meta: max token length = 93
0.00.345.658 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.345.665 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.350.840 I llama_new_context_with_model: n_seq_max     = 1
0.00.350.847 I llama_new_context_with_model: n_ctx         = 4096
0.00.350.847 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.350.848 I llama_new_context_with_model: n_batch       = 2048
0.00.350.848 I llama_new_context_with_model: n_ubatch      = 512
0.00.350.848 I llama_new_context_with_model: flash_attn    = 0
0.00.350.850 I llama_new_context_with_model: freq_base     = 10000.0
0.00.350.851 I llama_new_context_with_model: freq_scale    = 1
0.00.350.852 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.365.509 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.365.524 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.365.622 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.366.959 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.366.965 I llama_new_context_with_model: graph nodes  = 601
0.00.366.965 I llama_new_context_with_model: graph splits = 1
0.00.366.968 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.872 I main: llama threadpool init, n_threads = 4
0.00.453.888 I 
0.00.453.960 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.453.964 I 
0.00.454.006 I sampler seed: 4189345098
0.00.454.041 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.454.044 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.454.045 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.454.045 I 
 increasels, and knights.

What is the genre of this story?

The story is a mix of historical fiction, fantasy, and medieval aesthetics. [end of text]


0.02.873.902 I llama_perf_sampler_print:    sampling time =       5.28 ms /    33 runs   (    0.16 ms per token,  6255.92 tokens per second)
0.02.873.904 I llama_perf_context_print:        load time =     453.09 ms
0.02.873.905 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.873.907 I llama_perf_context_print:        eval time =    2399.98 ms /    32 runs   (   75.00 ms per token,    13.33 tokens per second)
0.02.873.908 I llama_perf_context_print:       total time =    2420.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.233s
user	0m26.907s
sys	0m9.273s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4234 (3420909d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40195.80 ms
main:    total time = 40195.80 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.561 I build: 4234 (3420909d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.775 I main: llama backend init
0.00.000.782 I main: load the model and apply lora adapter, if any
0.00.021.194 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.021.204 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.021.212 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.216 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.217 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.221 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.222 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.223 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.223 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.224 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.224 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.228 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.229 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.229 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.231 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.231 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.125 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.843 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.130.792 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.130.802 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.130.803 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.130.804 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.130.805 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.130.806 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.808 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.811 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.812 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.813 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.130.814 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.130.815 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.130.820 I llama_model_loader: - type  f32:   37 tensors
0.00.130.821 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.822 I llama_model_loader: - type q6_K:   19 tensors
0.00.212.615 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.254.020 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.489 I llm_load_vocab: special tokens cache size = 5
0.00.275.410 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.427 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.427 I llm_load_print_meta: arch             = gemma
0.00.275.428 I llm_load_print_meta: vocab type       = SPM
0.00.275.428 I llm_load_print_meta: n_vocab          = 256000
0.00.275.429 I llm_load_print_meta: n_merges         = 0
0.00.275.430 I llm_load_print_meta: vocab_only       = 0
0.00.275.430 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.430 I llm_load_print_meta: n_embd           = 2048
0.00.275.430 I llm_load_print_meta: n_layer          = 18
0.00.275.443 I llm_load_print_meta: n_head           = 8
0.00.275.444 I llm_load_print_meta: n_head_kv        = 1
0.00.275.444 I llm_load_print_meta: n_rot            = 256
0.00.275.444 I llm_load_print_meta: n_swa            = 0
0.00.275.444 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.445 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.445 I llm_load_print_meta: n_gqa            = 8
0.00.275.447 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.448 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.448 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.449 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.450 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.450 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.451 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.451 I llm_load_print_meta: n_ff             = 16384
0.00.275.452 I llm_load_print_meta: n_expert         = 0
0.00.275.452 I llm_load_print_meta: n_expert_used    = 0
0.00.275.452 I llm_load_print_meta: causal attn      = 1
0.00.275.452 I llm_load_print_meta: pooling type     = 0
0.00.275.453 I llm_load_print_meta: rope type        = 2
0.00.275.453 I llm_load_print_meta: rope scaling     = linear
0.00.275.454 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.455 I llm_load_print_meta: freq_scale_train = 1
0.00.275.455 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.456 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.456 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.456 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.456 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.457 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.457 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.457 I llm_load_print_meta: model type       = 2B
0.00.275.458 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.275.458 I llm_load_print_meta: model params     = 2.51 B
0.00.275.459 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.275.460 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.460 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.460 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.461 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.461 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.461 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.462 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.462 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.463 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.463 I llm_load_print_meta: max token length = 93
0.00.335.485 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.335.492 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.335.493 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.335.493 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.335.494 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.335.494 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.340.696 I llama_new_context_with_model: n_seq_max     = 1
0.00.340.701 I llama_new_context_with_model: n_ctx         = 4096
0.00.340.702 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.340.702 I llama_new_context_with_model: n_batch       = 2048
0.00.340.703 I llama_new_context_with_model: n_ubatch      = 512
0.00.340.703 I llama_new_context_with_model: flash_attn    = 0
0.00.340.706 I llama_new_context_with_model: freq_base     = 10000.0
0.00.340.706 I llama_new_context_with_model: freq_scale    = 1
0.00.340.708 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.355.123 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.355.137 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.355.236 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.356.473 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.356.479 I llama_new_context_with_model: graph nodes  = 601
0.00.356.479 I llama_new_context_with_model: graph splits = 1
0.00.356.482 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.818 I main: llama threadpool init, n_threads = 4
0.00.431.835 I 
0.00.431.907 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.431.910 I 
0.00.431.952 I sampler seed: 2919890141
0.00.431.963 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.967 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.431.968 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.431.968 I 
 seconally with the first thing that comes to mind.

I'm not sure how this works, but I've noticed that sometimes after I think about

0.02.024.957 I llama_perf_sampler_print:    sampling time =       5.12 ms /    33 runs   (    0.16 ms per token,  6447.83 tokens per second)
0.02.024.960 I llama_perf_context_print:        load time =     431.02 ms
0.02.024.963 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.024.964 I llama_perf_context_print:        eval time =    1574.43 ms /    32 runs   (   49.20 ms per token,    20.32 tokens per second)
0.02.024.965 I llama_perf_context_print:       total time =    1593.15 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4234 (3420909d)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 40168.21 ms
main:    total time = 40168.21 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.530 I build: 4234 (3420909d) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.728 I main: llama backend init
0.00.000.734 I main: load the model and apply lora adapter, if any
0.00.021.056 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.071 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.076 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.080 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.083 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.084 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.084 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.085 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.085 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.086 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.089 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.090 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.091 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.092 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.092 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.813 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.123.228 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.129.990 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.129.996 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.129.997 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.129.997 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.129.998 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.129.999 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.130.000 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.130.003 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.130.004 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.130.007 I llama_model_loader: - type  f32:   37 tensors
0.00.130.008 I llama_model_loader: - type q4_K:  108 tensors
0.00.130.009 I llama_model_loader: - type q6_K:   19 tensors
0.00.219.938 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.269.842 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.270.429 I llm_load_vocab: special tokens cache size = 5
0.00.291.594 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.291.611 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.291.612 I llm_load_print_meta: arch             = gemma
0.00.291.613 I llm_load_print_meta: vocab type       = SPM
0.00.291.613 I llm_load_print_meta: n_vocab          = 256000
0.00.291.614 I llm_load_print_meta: n_merges         = 0
0.00.291.614 I llm_load_print_meta: vocab_only       = 0
0.00.291.614 I llm_load_print_meta: n_ctx_train      = 8192
0.00.291.615 I llm_load_print_meta: n_embd           = 2048
0.00.291.615 I llm_load_print_meta: n_layer          = 18
0.00.291.626 I llm_load_print_meta: n_head           = 8
0.00.291.627 I llm_load_print_meta: n_head_kv        = 1
0.00.291.628 I llm_load_print_meta: n_rot            = 256
0.00.291.628 I llm_load_print_meta: n_swa            = 0
0.00.291.629 I llm_load_print_meta: n_embd_head_k    = 256
0.00.291.629 I llm_load_print_meta: n_embd_head_v    = 256
0.00.291.630 I llm_load_print_meta: n_gqa            = 8
0.00.291.631 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.291.632 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.291.633 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.291.634 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.291.634 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.291.635 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.291.635 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.291.636 I llm_load_print_meta: n_ff             = 16384
0.00.291.637 I llm_load_print_meta: n_expert         = 0
0.00.291.637 I llm_load_print_meta: n_expert_used    = 0
0.00.291.637 I llm_load_print_meta: causal attn      = 1
0.00.291.637 I llm_load_print_meta: pooling type     = 0
0.00.291.638 I llm_load_print_meta: rope type        = 2
0.00.291.638 I llm_load_print_meta: rope scaling     = linear
0.00.291.639 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.291.640 I llm_load_print_meta: freq_scale_train = 1
0.00.291.640 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.291.640 I llm_load_print_meta: rope_finetuned   = unknown
0.00.291.640 I llm_load_print_meta: ssm_d_conv       = 0
0.00.291.641 I llm_load_print_meta: ssm_d_inner      = 0
0.00.291.641 I llm_load_print_meta: ssm_d_state      = 0
0.00.291.642 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.291.642 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.291.642 I llm_load_print_meta: model type       = 2B
0.00.291.643 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.291.643 I llm_load_print_meta: model params     = 2.51 B
0.00.291.644 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.291.645 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.291.645 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.291.645 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.291.646 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.291.646 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.291.646 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.291.646 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.291.647 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.291.647 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.291.648 I llm_load_print_meta: max token length = 93
0.00.348.725 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.354.829 I llama_new_context_with_model: n_seq_max     = 1
0.00.354.835 I llama_new_context_with_model: n_ctx         = 4096
0.00.354.835 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.354.836 I llama_new_context_with_model: n_batch       = 2048
0.00.354.836 I llama_new_context_with_model: n_ubatch      = 512
0.00.354.837 I llama_new_context_with_model: flash_attn    = 0
0.00.354.840 I llama_new_context_with_model: freq_base     = 10000.0
0.00.354.841 I llama_new_context_with_model: freq_scale    = 1
0.00.354.842 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.369.515 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.369.532 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.369.623 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.914 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.370.918 I llama_new_context_with_model: graph nodes  = 601
0.00.370.918 I llama_new_context_with_model: graph splits = 1
0.00.370.920 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.445.168 I main: llama threadpool init, n_threads = 4
0.00.445.183 I 
0.00.445.259 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | CPU : SSE3 = 1 | SSSE3 = 1 | AVX = 1 | AVX2 = 1 | F16C = 1 | FMA = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | LLAMAFILE = 1 | AARCH64_REPACK = 1 | 
0.00.445.262 I 
0.00.445.306 I sampler seed: 909028137
0.00.445.317 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.330 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.445.334 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.445.334 I 
 seconally. 

**Instructions:** Answer the following questions based on the provided text.

1. What is the significance of the word "secondaily

0.02.000.017 I llama_perf_sampler_print:    sampling time =       5.26 ms /    33 runs   (    0.16 ms per token,  6278.54 tokens per second)
0.02.000.020 I llama_perf_context_print:        load time =     444.42 ms
0.02.000.021 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.000.022 I llama_perf_context_print:        eval time =    1535.39 ms /    32 runs   (   47.98 ms per token,    20.84 tokens per second)
0.02.000.023 I llama_perf_context_print:       total time =    1554.86 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m27.153s
user	10m24.034s
sys	0m6.966s
