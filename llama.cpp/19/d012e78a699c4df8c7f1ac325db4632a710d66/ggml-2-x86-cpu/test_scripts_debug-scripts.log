+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.616 I build: 4107 (19d012e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.820 I main: llama backend init
0.00.000.828 I main: load the model and apply lora adapter, if any
0.00.023.411 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.420 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.510 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.521 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.523 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.528 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.530 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.531 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.532 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.534 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.535 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.548 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.553 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.555 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.556 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.558 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.150.538 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.483 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.759 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.771 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.772 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.773 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.774 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.776 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.777 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.780 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.781 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.783 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.783 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.275.785 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.794 I llama_model_loader: - type  f32:   37 tensors
0.00.275.797 I llama_model_loader: - type q8_0:  127 tensors
0.00.459.159 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.521.338 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.522.339 I llm_load_vocab: special tokens cache size = 5
0.00.618.267 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.618.338 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.618.339 I llm_load_print_meta: arch             = gemma
0.00.618.340 I llm_load_print_meta: vocab type       = SPM
0.00.618.340 I llm_load_print_meta: n_vocab          = 256000
0.00.618.343 I llm_load_print_meta: n_merges         = 0
0.00.618.343 I llm_load_print_meta: vocab_only       = 0
0.00.618.343 I llm_load_print_meta: n_ctx_train      = 8192
0.00.618.344 I llm_load_print_meta: n_embd           = 2048
0.00.618.344 I llm_load_print_meta: n_layer          = 18
0.00.618.409 I llm_load_print_meta: n_head           = 8
0.00.618.416 I llm_load_print_meta: n_head_kv        = 1
0.00.618.418 I llm_load_print_meta: n_rot            = 256
0.00.618.419 I llm_load_print_meta: n_swa            = 0
0.00.618.430 I llm_load_print_meta: n_embd_head_k    = 256
0.00.618.431 I llm_load_print_meta: n_embd_head_v    = 256
0.00.618.436 I llm_load_print_meta: n_gqa            = 8
0.00.618.441 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.618.449 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.618.450 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.618.452 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.618.452 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.618.465 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.618.469 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.618.474 I llm_load_print_meta: n_ff             = 16384
0.00.618.474 I llm_load_print_meta: n_expert         = 0
0.00.618.475 I llm_load_print_meta: n_expert_used    = 0
0.00.618.475 I llm_load_print_meta: causal attn      = 1
0.00.618.475 I llm_load_print_meta: pooling type     = 0
0.00.618.476 I llm_load_print_meta: rope type        = 2
0.00.618.476 I llm_load_print_meta: rope scaling     = linear
0.00.618.478 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.618.478 I llm_load_print_meta: freq_scale_train = 1
0.00.618.479 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.618.480 I llm_load_print_meta: rope_finetuned   = unknown
0.00.618.480 I llm_load_print_meta: ssm_d_conv       = 0
0.00.618.481 I llm_load_print_meta: ssm_d_inner      = 0
0.00.618.490 I llm_load_print_meta: ssm_d_state      = 0
0.00.618.491 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.618.499 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.618.500 I llm_load_print_meta: model type       = 2B
0.00.618.501 I llm_load_print_meta: model ftype      = Q8_0
0.00.618.510 I llm_load_print_meta: model params     = 2.51 B
0.00.618.511 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.618.511 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.618.512 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.618.520 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.618.521 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.618.521 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.618.521 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.618.522 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.618.529 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.618.531 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.618.539 I llm_load_print_meta: max token length = 93
0.00.722.175 I llm_load_tensors:   CPU_Mapped model buffer size =   865.98 MiB
0.00.722.186 I llm_load_tensors:   CPU_Mapped model buffer size =   334.74 MiB
0.00.722.187 I llm_load_tensors:   CPU_Mapped model buffer size =   402.73 MiB
0.00.722.188 I llm_load_tensors:   CPU_Mapped model buffer size =   335.27 MiB
0.00.722.189 I llm_load_tensors:   CPU_Mapped model buffer size =   338.98 MiB
0.00.722.190 I llm_load_tensors:   CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.728.260 I llama_new_context_with_model: n_seq_max     = 1
0.00.728.267 I llama_new_context_with_model: n_ctx         = 4096
0.00.728.267 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.728.268 I llama_new_context_with_model: n_batch       = 2048
0.00.728.268 I llama_new_context_with_model: n_ubatch      = 512
0.00.728.269 I llama_new_context_with_model: flash_attn    = 0
0.00.728.271 I llama_new_context_with_model: freq_base     = 10000.0
0.00.728.272 I llama_new_context_with_model: freq_scale    = 1
0.00.728.273 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.742.658 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.742.698 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.742.826 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.745.570 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.745.575 I llama_new_context_with_model: graph nodes  = 601
0.00.745.575 I llama_new_context_with_model: graph splits = 1
0.00.745.599 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.352.222 I main: llama threadpool init, n_threads = 4
0.01.352.236 I 
0.01.352.355 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.352.359 I 
0.01.352.596 I sampler seed: 1129828295
0.01.352.609 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.352.615 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.352.619 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.352.619 I 
 increasities, and the like.

I cannot answer this question as it contains sexually suggestive content. [end of text]


0.10.237.183 I llama_perf_sampler_print:    sampling time =      32.37 ms /    22 runs   (    1.47 ms per token,   679.60 tokens per second)
0.10.237.186 I llama_perf_context_print:        load time =    1351.30 ms
0.10.237.188 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.237.189 I llama_perf_context_print:        eval time =    8826.02 ms /    21 runs   (  420.29 ms per token,     2.38 tokens per second)
0.10.237.190 I llama_perf_context_print:       total time =    8884.97 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.677 I build: 4107 (19d012e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.902 I main: llama backend init
0.00.000.910 I main: load the model and apply lora adapter, if any
0.00.023.825 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.023.933 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.949 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.951 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.957 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.958 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.960 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.962 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.963 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.964 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.975 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.979 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.980 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.982 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.983 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.891 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.132 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.275 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.283 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.284 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.285 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.286 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.288 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.289 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.292 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.293 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.294 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.295 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.275.297 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.305 I llama_model_loader: - type  f32:   37 tensors
0.00.275.307 I llama_model_loader: - type q8_0:  127 tensors
0.00.455.286 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.333 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.293 I llm_load_vocab: special tokens cache size = 5
0.00.619.350 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.619.415 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.619.416 I llm_load_print_meta: arch             = gemma
0.00.619.417 I llm_load_print_meta: vocab type       = SPM
0.00.619.418 I llm_load_print_meta: n_vocab          = 256000
0.00.619.420 I llm_load_print_meta: n_merges         = 0
0.00.619.420 I llm_load_print_meta: vocab_only       = 0
0.00.619.421 I llm_load_print_meta: n_ctx_train      = 8192
0.00.619.421 I llm_load_print_meta: n_embd           = 2048
0.00.619.421 I llm_load_print_meta: n_layer          = 18
0.00.619.485 I llm_load_print_meta: n_head           = 8
0.00.619.495 I llm_load_print_meta: n_head_kv        = 1
0.00.619.496 I llm_load_print_meta: n_rot            = 256
0.00.619.496 I llm_load_print_meta: n_swa            = 0
0.00.619.497 I llm_load_print_meta: n_embd_head_k    = 256
0.00.619.498 I llm_load_print_meta: n_embd_head_v    = 256
0.00.619.503 I llm_load_print_meta: n_gqa            = 8
0.00.619.508 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.619.513 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.619.514 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.619.515 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.619.517 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.619.517 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.619.517 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.619.523 I llm_load_print_meta: n_ff             = 16384
0.00.619.523 I llm_load_print_meta: n_expert         = 0
0.00.619.524 I llm_load_print_meta: n_expert_used    = 0
0.00.619.524 I llm_load_print_meta: causal attn      = 1
0.00.619.524 I llm_load_print_meta: pooling type     = 0
0.00.619.525 I llm_load_print_meta: rope type        = 2
0.00.619.526 I llm_load_print_meta: rope scaling     = linear
0.00.619.528 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.619.529 I llm_load_print_meta: freq_scale_train = 1
0.00.619.529 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.619.529 I llm_load_print_meta: rope_finetuned   = unknown
0.00.619.539 I llm_load_print_meta: ssm_d_conv       = 0
0.00.619.540 I llm_load_print_meta: ssm_d_inner      = 0
0.00.619.540 I llm_load_print_meta: ssm_d_state      = 0
0.00.619.553 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.619.554 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.619.561 I llm_load_print_meta: model type       = 2B
0.00.619.563 I llm_load_print_meta: model ftype      = Q8_0
0.00.619.573 I llm_load_print_meta: model params     = 2.51 B
0.00.619.573 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.619.574 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.619.575 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.619.575 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.619.576 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.619.576 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.619.577 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.619.578 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.619.584 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.619.585 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.619.585 I llm_load_print_meta: max token length = 93
0.00.717.576 I llm_load_tensors:   CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.723.527 I llama_new_context_with_model: n_seq_max     = 1
0.00.723.534 I llama_new_context_with_model: n_ctx         = 4096
0.00.723.535 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.723.535 I llama_new_context_with_model: n_batch       = 2048
0.00.723.536 I llama_new_context_with_model: n_ubatch      = 512
0.00.723.536 I llama_new_context_with_model: flash_attn    = 0
0.00.723.539 I llama_new_context_with_model: freq_base     = 10000.0
0.00.723.540 I llama_new_context_with_model: freq_scale    = 1
0.00.723.540 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.738.727 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.738.770 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.738.896 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.741.599 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.741.603 I llama_new_context_with_model: graph nodes  = 601
0.00.741.603 I llama_new_context_with_model: graph splits = 1
0.00.741.627 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.347.558 I main: llama threadpool init, n_threads = 4
0.01.347.573 I 
0.01.347.684 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.347.688 I 
0.01.347.915 I sampler seed: 3795628548
0.01.347.927 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.347.937 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.347.938 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.347.938 I 
 increasements. [end of text]


0.03.044.415 I llama_perf_sampler_print:    sampling time =       6.26 ms /     5 runs   (    1.25 ms per token,   798.72 tokens per second)
0.03.044.418 I llama_perf_context_print:        load time =    1346.54 ms
0.03.044.444 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.03.044.449 I llama_perf_context_print:        eval time =    1683.71 ms /     4 runs   (  420.93 ms per token,     2.38 tokens per second)
0.03.044.459 I llama_perf_context_print:       total time =    1696.87 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.656 I build: 4107 (19d012e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.853 I main: llama backend init
0.00.000.861 I main: load the model and apply lora adapter, if any
0.00.023.331 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.023.345 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.023.442 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.456 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.460 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.466 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.467 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.469 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.470 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.472 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.473 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.484 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.488 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.489 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.490 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.491 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.723 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.847 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.992 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.001 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.003 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.004 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.005 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.006 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.008 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.032 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.044 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.046 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.274.047 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.274.049 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.274.057 I llama_model_loader: - type  f32:   37 tensors
0.00.274.064 I llama_model_loader: - type q8_0:  127 tensors
0.00.460.840 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.777 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.668 I llm_load_vocab: special tokens cache size = 5
0.00.636.316 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.636.387 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.636.388 I llm_load_print_meta: arch             = gemma
0.00.636.389 I llm_load_print_meta: vocab type       = SPM
0.00.636.390 I llm_load_print_meta: n_vocab          = 256000
0.00.636.392 I llm_load_print_meta: n_merges         = 0
0.00.636.392 I llm_load_print_meta: vocab_only       = 0
0.00.636.393 I llm_load_print_meta: n_ctx_train      = 8192
0.00.636.393 I llm_load_print_meta: n_embd           = 2048
0.00.636.393 I llm_load_print_meta: n_layer          = 18
0.00.636.457 I llm_load_print_meta: n_head           = 8
0.00.636.464 I llm_load_print_meta: n_head_kv        = 1
0.00.636.465 I llm_load_print_meta: n_rot            = 256
0.00.636.465 I llm_load_print_meta: n_swa            = 0
0.00.636.466 I llm_load_print_meta: n_embd_head_k    = 256
0.00.636.466 I llm_load_print_meta: n_embd_head_v    = 256
0.00.636.471 I llm_load_print_meta: n_gqa            = 8
0.00.636.475 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.636.480 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.636.481 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.636.483 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.636.483 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.636.484 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.636.484 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.636.489 I llm_load_print_meta: n_ff             = 16384
0.00.636.505 I llm_load_print_meta: n_expert         = 0
0.00.636.506 I llm_load_print_meta: n_expert_used    = 0
0.00.636.506 I llm_load_print_meta: causal attn      = 1
0.00.636.506 I llm_load_print_meta: pooling type     = 0
0.00.636.507 I llm_load_print_meta: rope type        = 2
0.00.636.507 I llm_load_print_meta: rope scaling     = linear
0.00.636.509 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.636.509 I llm_load_print_meta: freq_scale_train = 1
0.00.636.510 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.636.510 I llm_load_print_meta: rope_finetuned   = unknown
0.00.636.511 I llm_load_print_meta: ssm_d_conv       = 0
0.00.636.511 I llm_load_print_meta: ssm_d_inner      = 0
0.00.636.511 I llm_load_print_meta: ssm_d_state      = 0
0.00.636.511 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.636.512 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.636.512 I llm_load_print_meta: model type       = 2B
0.00.636.513 I llm_load_print_meta: model ftype      = Q8_0
0.00.636.533 I llm_load_print_meta: model params     = 2.51 B
0.00.636.534 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.636.534 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.636.535 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.636.535 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.636.536 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.636.536 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.636.537 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.636.537 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.636.543 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.636.545 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.636.545 I llm_load_print_meta: max token length = 93
0.00.715.143 I llm_load_tensors:   CPU_Mapped model buffer size =   967.99 MiB
0.00.715.152 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.715.153 I llm_load_tensors:   CPU_Mapped model buffer size =   411.77 MiB
0.00.715.154 I llm_load_tensors:   CPU_Mapped model buffer size =   437.27 MiB
0.00.715.155 I llm_load_tensors:   CPU_Mapped model buffer size =   344.30 MiB
0.00.715.156 I llm_load_tensors:   CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.720.982 I llama_new_context_with_model: n_seq_max     = 1
0.00.720.989 I llama_new_context_with_model: n_ctx         = 4096
0.00.720.989 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.720.989 I llama_new_context_with_model: n_batch       = 2048
0.00.720.990 I llama_new_context_with_model: n_ubatch      = 512
0.00.720.990 I llama_new_context_with_model: flash_attn    = 0
0.00.720.993 I llama_new_context_with_model: freq_base     = 10000.0
0.00.720.994 I llama_new_context_with_model: freq_scale    = 1
0.00.720.995 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.736.137 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.736.176 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.736.306 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.738.915 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.738.919 I llama_new_context_with_model: graph nodes  = 601
0.00.738.919 I llama_new_context_with_model: graph splits = 1
0.00.738.942 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.348.780 I main: llama threadpool init, n_threads = 4
0.01.348.794 I 
0.01.348.904 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.348.908 I 
0.01.349.139 I sampler seed: 1514705161
0.01.349.152 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.349.159 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.349.162 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.349.162 I 
 increasities? 

I cannot find the requested information in the provided context. Therefore, I am unable to answer this question. [end of text]


0.12.835.103 I llama_perf_sampler_print:    sampling time =      41.46 ms /    28 runs   (    1.48 ms per token,   675.38 tokens per second)
0.12.835.108 I llama_perf_context_print:        load time =    1347.83 ms
0.12.835.110 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.835.112 I llama_perf_context_print:        eval time =   11410.26 ms /    27 runs   (  422.60 ms per token,     2.37 tokens per second)
0.12.835.113 I llama_perf_context_print:       total time =   11486.33 ms /    28 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4107 (19d012e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.898 I main: llama backend init
0.00.000.906 I main: load the model and apply lora adapter, if any
0.00.023.810 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.023.818 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.023.912 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.924 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.929 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.934 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.936 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.937 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.939 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.941 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.943 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.954 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.958 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.960 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.961 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.023.963 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.515 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.252.022 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.224 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.234 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.235 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.236 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.237 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.239 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.240 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.259 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.263 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.264 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.265 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.275.267 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.275 I llama_model_loader: - type  f32:   37 tensors
0.00.275.277 I llama_model_loader: - type q8_0:  127 tensors
0.00.453.835 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.519.023 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.520.031 I llm_load_vocab: special tokens cache size = 5
0.00.616.423 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.616.490 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.616.491 I llm_load_print_meta: arch             = gemma
0.00.616.492 I llm_load_print_meta: vocab type       = SPM
0.00.616.493 I llm_load_print_meta: n_vocab          = 256000
0.00.616.495 I llm_load_print_meta: n_merges         = 0
0.00.616.496 I llm_load_print_meta: vocab_only       = 0
0.00.616.496 I llm_load_print_meta: n_ctx_train      = 8192
0.00.616.496 I llm_load_print_meta: n_embd           = 2048
0.00.616.497 I llm_load_print_meta: n_layer          = 18
0.00.616.563 I llm_load_print_meta: n_head           = 8
0.00.616.570 I llm_load_print_meta: n_head_kv        = 1
0.00.616.571 I llm_load_print_meta: n_rot            = 256
0.00.616.571 I llm_load_print_meta: n_swa            = 0
0.00.616.572 I llm_load_print_meta: n_embd_head_k    = 256
0.00.616.572 I llm_load_print_meta: n_embd_head_v    = 256
0.00.616.577 I llm_load_print_meta: n_gqa            = 8
0.00.616.581 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.616.586 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.616.587 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.616.589 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.616.589 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.616.590 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.616.590 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.616.595 I llm_load_print_meta: n_ff             = 16384
0.00.616.596 I llm_load_print_meta: n_expert         = 0
0.00.616.596 I llm_load_print_meta: n_expert_used    = 0
0.00.616.596 I llm_load_print_meta: causal attn      = 1
0.00.616.598 I llm_load_print_meta: pooling type     = 0
0.00.616.598 I llm_load_print_meta: rope type        = 2
0.00.616.598 I llm_load_print_meta: rope scaling     = linear
0.00.616.600 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.616.601 I llm_load_print_meta: freq_scale_train = 1
0.00.616.601 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.616.602 I llm_load_print_meta: rope_finetuned   = unknown
0.00.616.603 I llm_load_print_meta: ssm_d_conv       = 0
0.00.616.603 I llm_load_print_meta: ssm_d_inner      = 0
0.00.616.604 I llm_load_print_meta: ssm_d_state      = 0
0.00.616.604 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.616.604 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.616.617 I llm_load_print_meta: model type       = 2B
0.00.616.619 I llm_load_print_meta: model ftype      = Q8_0
0.00.616.627 I llm_load_print_meta: model params     = 2.51 B
0.00.616.628 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.616.629 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.616.629 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.616.630 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.616.630 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.616.631 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.616.636 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.616.637 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.616.642 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.616.644 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.616.645 I llm_load_print_meta: max token length = 93
0.00.689.018 I llm_load_tensors:   CPU_Mapped model buffer size =  1904.18 MiB
0.00.689.027 I llm_load_tensors:   CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.694.859 I llama_new_context_with_model: n_seq_max     = 1
0.00.694.867 I llama_new_context_with_model: n_ctx         = 4096
0.00.694.867 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.694.867 I llama_new_context_with_model: n_batch       = 2048
0.00.694.868 I llama_new_context_with_model: n_ubatch      = 512
0.00.694.868 I llama_new_context_with_model: flash_attn    = 0
0.00.694.871 I llama_new_context_with_model: freq_base     = 10000.0
0.00.694.871 I llama_new_context_with_model: freq_scale    = 1
0.00.694.872 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.709.442 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.709.480 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.709.608 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.712.207 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.712.211 I llama_new_context_with_model: graph nodes  = 601
0.00.712.211 I llama_new_context_with_model: graph splits = 1
0.00.712.232 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.322.331 I main: llama threadpool init, n_threads = 4
0.01.322.346 I 
0.01.322.456 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.322.460 I 
0.01.322.690 I sampler seed: 961368727
0.01.322.701 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.322.710 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.322.711 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.322.712 I 
 increasements in the provided text are not applicable because the text does not contain any such information. [end of text]


0.09.844.145 I llama_perf_sampler_print:    sampling time =      30.83 ms /    21 runs   (    1.47 ms per token,   681.13 tokens per second)
0.09.844.148 I llama_perf_context_print:        load time =    1321.33 ms
0.09.844.150 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.09.844.151 I llama_perf_context_print:        eval time =    8465.70 ms /    20 runs   (  423.28 ms per token,     2.36 tokens per second)
0.09.844.157 I llama_perf_context_print:       total time =    8521.82 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m45.468s
user	2m15.100s
sys	0m9.273s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4107 (19d012e7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186298.37 ms
main:    total time = 186298.37 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.622 I build: 4107 (19d012e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.819 I main: llama backend init
0.00.000.827 I main: load the model and apply lora adapter, if any
0.00.023.177 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.023.187 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.023.276 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.023.287 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.023.289 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.023.294 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.023.296 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.023.298 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.023.307 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.023.311 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.023.312 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.023.317 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.023.318 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.023.320 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.023.321 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.023.322 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.377 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.250.139 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.273.329 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.273.338 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.273.339 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.273.340 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.273.342 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.273.343 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.273.344 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.273.348 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.273.349 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.273.350 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.273.351 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.273.353 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.273.360 I llama_model_loader: - type  f32:   37 tensors
0.00.273.362 I llama_model_loader: - type q4_K:  108 tensors
0.00.273.363 I llama_model_loader: - type q6_K:   19 tensors
0.00.447.544 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.508.086 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.509.010 I llm_load_vocab: special tokens cache size = 5
0.00.606.016 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.606.082 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.606.083 I llm_load_print_meta: arch             = gemma
0.00.606.084 I llm_load_print_meta: vocab type       = SPM
0.00.606.085 I llm_load_print_meta: n_vocab          = 256000
0.00.606.094 I llm_load_print_meta: n_merges         = 0
0.00.606.095 I llm_load_print_meta: vocab_only       = 0
0.00.606.095 I llm_load_print_meta: n_ctx_train      = 8192
0.00.606.096 I llm_load_print_meta: n_embd           = 2048
0.00.606.096 I llm_load_print_meta: n_layer          = 18
0.00.606.174 I llm_load_print_meta: n_head           = 8
0.00.606.183 I llm_load_print_meta: n_head_kv        = 1
0.00.606.183 I llm_load_print_meta: n_rot            = 256
0.00.606.184 I llm_load_print_meta: n_swa            = 0
0.00.606.184 I llm_load_print_meta: n_embd_head_k    = 256
0.00.606.185 I llm_load_print_meta: n_embd_head_v    = 256
0.00.606.189 I llm_load_print_meta: n_gqa            = 8
0.00.606.194 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.606.199 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.606.200 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.606.202 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.606.202 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.606.203 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.606.203 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.606.208 I llm_load_print_meta: n_ff             = 16384
0.00.606.208 I llm_load_print_meta: n_expert         = 0
0.00.606.209 I llm_load_print_meta: n_expert_used    = 0
0.00.606.210 I llm_load_print_meta: causal attn      = 1
0.00.606.213 I llm_load_print_meta: pooling type     = 0
0.00.606.213 I llm_load_print_meta: rope type        = 2
0.00.606.214 I llm_load_print_meta: rope scaling     = linear
0.00.606.215 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.606.216 I llm_load_print_meta: freq_scale_train = 1
0.00.606.216 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.606.216 I llm_load_print_meta: rope_finetuned   = unknown
0.00.606.217 I llm_load_print_meta: ssm_d_conv       = 0
0.00.606.217 I llm_load_print_meta: ssm_d_inner      = 0
0.00.606.217 I llm_load_print_meta: ssm_d_state      = 0
0.00.606.218 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.606.218 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.606.219 I llm_load_print_meta: model type       = 2B
0.00.606.220 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.606.231 I llm_load_print_meta: model params     = 2.51 B
0.00.606.232 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.606.233 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.606.234 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.606.234 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.606.243 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.606.244 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.606.244 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.606.245 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.606.251 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.606.252 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.606.253 I llm_load_print_meta: max token length = 93
0.00.667.920 I llm_load_tensors:   CPU_Mapped model buffer size =   604.15 MiB
0.00.667.930 I llm_load_tensors:   CPU_Mapped model buffer size =   185.62 MiB
0.00.667.931 I llm_load_tensors:   CPU_Mapped model buffer size =   221.61 MiB
0.00.667.932 I llm_load_tensors:   CPU_Mapped model buffer size =   185.89 MiB
0.00.667.933 I llm_load_tensors:   CPU_Mapped model buffer size =   187.86 MiB
0.00.667.933 I llm_load_tensors:   CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.673.744 I llama_new_context_with_model: n_seq_max     = 1
0.00.673.751 I llama_new_context_with_model: n_ctx         = 4096
0.00.673.751 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.673.751 I llama_new_context_with_model: n_batch       = 2048
0.00.673.752 I llama_new_context_with_model: n_ubatch      = 512
0.00.673.752 I llama_new_context_with_model: flash_attn    = 0
0.00.673.756 I llama_new_context_with_model: freq_base     = 10000.0
0.00.673.757 I llama_new_context_with_model: freq_scale    = 1
0.00.673.757 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.688.178 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.688.219 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.688.349 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.691.070 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.691.074 I llama_new_context_with_model: graph nodes  = 601
0.00.691.074 I llama_new_context_with_model: graph splits = 1
0.00.691.096 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.280.676 I main: llama threadpool init, n_threads = 4
0.01.280.694 I 
0.01.280.799 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.280.803 I 
0.01.281.033 I sampler seed: 1139553860
0.01.281.046 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.281.052 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.281.056 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.281.056 I 
 maneuvously,
My heart a captive, your smile a raven's eye.
Your words, a poisoned chalice, sweet and cold,


0.12.427.443 I llama_perf_sampler_print:    sampling time =      49.41 ms /    33 runs   (    1.50 ms per token,   667.94 tokens per second)
0.12.427.447 I llama_perf_context_print:        load time =    1279.76 ms
0.12.427.449 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.427.451 I llama_perf_context_print:        eval time =   11057.85 ms /    32 runs   (  345.56 ms per token,     2.89 tokens per second)
0.12.427.453 I llama_perf_context_print:       total time =   11146.78 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4107 (19d012e7)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 186242.16 ms
main:    total time = 186242.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.650 I build: 4107 (19d012e7) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.000.860 I main: load the model and apply lora adapter, if any
0.00.024.487 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.024.583 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.596 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.598 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.606 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.609 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.610 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.611 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.612 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.618 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.619 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.620 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.621 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.622 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.724 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.251.644 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.274.849 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.274.858 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.274.859 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.274.860 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.274.861 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.274.862 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.274.864 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.274.867 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.274.868 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.274.876 I llama_model_loader: - type  f32:   37 tensors
0.00.274.878 I llama_model_loader: - type q4_K:  108 tensors
0.00.274.879 I llama_model_loader: - type q6_K:   19 tensors
0.00.469.805 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.528.998 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.529.874 I llm_load_vocab: special tokens cache size = 5
0.00.627.040 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.627.105 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.627.110 I llm_load_print_meta: arch             = gemma
0.00.627.111 I llm_load_print_meta: vocab type       = SPM
0.00.627.111 I llm_load_print_meta: n_vocab          = 256000
0.00.627.114 I llm_load_print_meta: n_merges         = 0
0.00.627.115 I llm_load_print_meta: vocab_only       = 0
0.00.627.115 I llm_load_print_meta: n_ctx_train      = 8192
0.00.627.115 I llm_load_print_meta: n_embd           = 2048
0.00.627.116 I llm_load_print_meta: n_layer          = 18
0.00.627.191 I llm_load_print_meta: n_head           = 8
0.00.627.201 I llm_load_print_meta: n_head_kv        = 1
0.00.627.201 I llm_load_print_meta: n_rot            = 256
0.00.627.203 I llm_load_print_meta: n_swa            = 0
0.00.627.203 I llm_load_print_meta: n_embd_head_k    = 256
0.00.627.204 I llm_load_print_meta: n_embd_head_v    = 256
0.00.627.209 I llm_load_print_meta: n_gqa            = 8
0.00.627.213 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.627.218 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.627.220 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.627.221 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.627.222 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.627.222 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.627.223 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.627.227 I llm_load_print_meta: n_ff             = 16384
0.00.627.228 I llm_load_print_meta: n_expert         = 0
0.00.627.228 I llm_load_print_meta: n_expert_used    = 0
0.00.627.229 I llm_load_print_meta: causal attn      = 1
0.00.627.229 I llm_load_print_meta: pooling type     = 0
0.00.627.229 I llm_load_print_meta: rope type        = 2
0.00.627.230 I llm_load_print_meta: rope scaling     = linear
0.00.627.232 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.627.233 I llm_load_print_meta: freq_scale_train = 1
0.00.627.234 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.627.234 I llm_load_print_meta: rope_finetuned   = unknown
0.00.627.235 I llm_load_print_meta: ssm_d_conv       = 0
0.00.627.236 I llm_load_print_meta: ssm_d_inner      = 0
0.00.627.236 I llm_load_print_meta: ssm_d_state      = 0
0.00.627.236 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.627.236 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.627.238 I llm_load_print_meta: model type       = 2B
0.00.627.239 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.627.248 I llm_load_print_meta: model params     = 2.51 B
0.00.627.249 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.627.250 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.627.250 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.627.251 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.627.251 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.627.252 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.627.252 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.627.253 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.627.259 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.627.261 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.627.261 I llm_load_print_meta: max token length = 93
0.00.686.503 I llm_load_tensors:   CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.692.237 I llama_new_context_with_model: n_seq_max     = 1
0.00.692.244 I llama_new_context_with_model: n_ctx         = 4096
0.00.692.245 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.692.245 I llama_new_context_with_model: n_batch       = 2048
0.00.692.246 I llama_new_context_with_model: n_ubatch      = 512
0.00.692.246 I llama_new_context_with_model: flash_attn    = 0
0.00.692.249 I llama_new_context_with_model: freq_base     = 10000.0
0.00.692.250 I llama_new_context_with_model: freq_scale    = 1
0.00.692.250 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.707.249 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.707.289 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.707.415 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.709.912 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.709.916 I llama_new_context_with_model: graph nodes  = 601
0.00.709.917 I llama_new_context_with_model: graph splits = 1
0.00.709.938 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.299.662 I main: llama threadpool init, n_threads = 4
0.01.299.676 I 
0.01.299.784 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.299.788 I 
0.01.300.020 I sampler seed: 1211244634
0.01.300.034 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.300.040 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.300.044 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.300.044 I 
 seconary and conjunctive sentences are used to connect two or more clauses.

**Conjunctive Sentences:**

* Connects contrasting ideas.
* Expresses

0.12.445.204 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.85 tokens per second)
0.12.445.206 I llama_perf_context_print:        load time =    1298.71 ms
0.12.445.208 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.445.209 I llama_perf_context_print:        eval time =   11057.31 ms /    32 runs   (  345.54 ms per token,     2.89 tokens per second)
0.12.445.210 I llama_perf_context_print:       total time =   11145.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	6m40.424s
user	46m52.627s
sys	0m6.275s
