+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.661 I build: 4014 (1926d6e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.864 I main: llama backend init
0.00.002.809 I main: load the model and apply lora adapter, if any
0.00.025.954 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.965 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.026.060 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.073 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.075 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.081 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.083 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.084 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.086 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.087 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.088 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.096 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.098 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.099 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.100 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.102 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.745 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.829 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.396 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.405 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.406 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.407 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.408 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.410 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.411 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.415 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.416 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.417 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.418 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.419 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.427 I llama_model_loader: - type  f32:   37 tensors
0.00.266.429 I llama_model_loader: - type q8_0:  127 tensors
0.00.443.397 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.502.532 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.503.425 I llm_load_vocab: special tokens cache size = 5
0.00.599.549 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.599.619 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.599.620 I llm_load_print_meta: arch             = gemma
0.00.599.621 I llm_load_print_meta: vocab type       = SPM
0.00.599.622 I llm_load_print_meta: n_vocab          = 256000
0.00.599.624 I llm_load_print_meta: n_merges         = 0
0.00.599.625 I llm_load_print_meta: vocab_only       = 0
0.00.599.625 I llm_load_print_meta: n_ctx_train      = 8192
0.00.599.626 I llm_load_print_meta: n_embd           = 2048
0.00.599.626 I llm_load_print_meta: n_layer          = 18
0.00.599.691 I llm_load_print_meta: n_head           = 8
0.00.599.699 I llm_load_print_meta: n_head_kv        = 1
0.00.599.700 I llm_load_print_meta: n_rot            = 256
0.00.599.701 I llm_load_print_meta: n_swa            = 0
0.00.599.702 I llm_load_print_meta: n_embd_head_k    = 256
0.00.599.702 I llm_load_print_meta: n_embd_head_v    = 256
0.00.599.707 I llm_load_print_meta: n_gqa            = 8
0.00.599.712 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.599.717 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.599.719 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.599.721 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.599.721 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.599.721 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.599.722 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.599.727 I llm_load_print_meta: n_ff             = 16384
0.00.599.727 I llm_load_print_meta: n_expert         = 0
0.00.599.729 I llm_load_print_meta: n_expert_used    = 0
0.00.599.729 I llm_load_print_meta: causal attn      = 1
0.00.599.730 I llm_load_print_meta: pooling type     = 0
0.00.599.730 I llm_load_print_meta: rope type        = 2
0.00.599.741 I llm_load_print_meta: rope scaling     = linear
0.00.599.743 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.599.744 I llm_load_print_meta: freq_scale_train = 1
0.00.599.744 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.599.744 I llm_load_print_meta: rope_finetuned   = unknown
0.00.599.745 I llm_load_print_meta: ssm_d_conv       = 0
0.00.599.745 I llm_load_print_meta: ssm_d_inner      = 0
0.00.599.745 I llm_load_print_meta: ssm_d_state      = 0
0.00.599.750 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.599.750 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.599.751 I llm_load_print_meta: model type       = 2B
0.00.599.753 I llm_load_print_meta: model ftype      = Q8_0
0.00.599.753 I llm_load_print_meta: model params     = 2.51 B
0.00.599.763 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.599.764 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.599.764 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.599.777 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.599.777 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.599.786 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.599.787 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.599.787 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.599.794 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.599.795 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.599.796 I llm_load_print_meta: max token length = 93
0.00.702.734 I llm_load_tensors: CPU_Mapped model buffer size =   865.98 MiB
0.00.702.743 I llm_load_tensors: CPU_Mapped model buffer size =   334.74 MiB
0.00.702.745 I llm_load_tensors: CPU_Mapped model buffer size =   402.73 MiB
0.00.702.745 I llm_load_tensors: CPU_Mapped model buffer size =   335.27 MiB
0.00.702.746 I llm_load_tensors: CPU_Mapped model buffer size =   338.98 MiB
0.00.702.747 I llm_load_tensors: CPU_Mapped model buffer size =   261.96 MiB
..............................................................
0.00.708.611 I llama_new_context_with_model: n_seq_max     = 1
0.00.708.619 I llama_new_context_with_model: n_ctx         = 4096
0.00.708.619 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.708.619 I llama_new_context_with_model: n_batch       = 2048
0.00.708.620 I llama_new_context_with_model: n_ubatch      = 512
0.00.708.620 I llama_new_context_with_model: flash_attn    = 0
0.00.708.623 I llama_new_context_with_model: freq_base     = 10000.0
0.00.708.624 I llama_new_context_with_model: freq_scale    = 1
0.00.708.624 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.723.805 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.723.848 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.723.979 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.726.558 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.726.562 I llama_new_context_with_model: graph nodes  = 601
0.00.726.562 I llama_new_context_with_model: graph splits = 1
0.00.726.586 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.332.582 I main: llama threadpool init, n_threads = 4
0.01.332.596 I 
0.01.332.695 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.332.699 I 
0.01.332.924 I sampler seed: 2985094246
0.01.332.937 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.332.943 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.332.947 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.332.947 I 
 increasels, a mischievous young gnome who loves to play tricks.

**Scene:** A bustling marketplace filled with merchants selling exotic goods.

**Dialogue:**



0.14.811.871 I llama_perf_sampler_print:    sampling time =      49.27 ms /    33 runs   (    1.49 ms per token,   669.79 tokens per second)
0.14.811.873 I llama_perf_context_print:        load time =    1329.66 ms
0.14.811.875 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.811.889 I llama_perf_context_print:        eval time =   13388.78 ms /    32 runs   (  418.40 ms per token,     2.39 tokens per second)
0.14.811.891 I llama_perf_context_print:       total time =   13479.30 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.647 I build: 4014 (1926d6e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.852 I main: llama backend init
0.00.002.791 I main: load the model and apply lora adapter, if any
0.00.025.356 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.452 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.467 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.472 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.477 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.480 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.485 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.487 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.489 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.491 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.499 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.504 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.507 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.509 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.510 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.654 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.252 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.572 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.582 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.583 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.584 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.585 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.587 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.588 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.592 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.593 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.594 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.595 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.266.596 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.604 I llama_model_loader: - type  f32:   37 tensors
0.00.266.606 I llama_model_loader: - type q8_0:  127 tensors
0.00.461.584 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.522.756 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.523.717 I llm_load_vocab: special tokens cache size = 5
0.00.630.181 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.630.252 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.630.253 I llm_load_print_meta: arch             = gemma
0.00.630.254 I llm_load_print_meta: vocab type       = SPM
0.00.630.254 I llm_load_print_meta: n_vocab          = 256000
0.00.630.257 I llm_load_print_meta: n_merges         = 0
0.00.630.258 I llm_load_print_meta: vocab_only       = 0
0.00.630.259 I llm_load_print_meta: n_ctx_train      = 8192
0.00.630.259 I llm_load_print_meta: n_embd           = 2048
0.00.630.259 I llm_load_print_meta: n_layer          = 18
0.00.630.323 I llm_load_print_meta: n_head           = 8
0.00.630.352 I llm_load_print_meta: n_head_kv        = 1
0.00.630.353 I llm_load_print_meta: n_rot            = 256
0.00.630.354 I llm_load_print_meta: n_swa            = 0
0.00.630.354 I llm_load_print_meta: n_embd_head_k    = 256
0.00.630.355 I llm_load_print_meta: n_embd_head_v    = 256
0.00.630.365 I llm_load_print_meta: n_gqa            = 8
0.00.630.372 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.630.380 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.630.382 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.630.384 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.630.386 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.630.387 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.630.388 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.630.394 I llm_load_print_meta: n_ff             = 16384
0.00.630.395 I llm_load_print_meta: n_expert         = 0
0.00.630.396 I llm_load_print_meta: n_expert_used    = 0
0.00.630.396 I llm_load_print_meta: causal attn      = 1
0.00.630.397 I llm_load_print_meta: pooling type     = 0
0.00.630.404 I llm_load_print_meta: rope type        = 2
0.00.630.405 I llm_load_print_meta: rope scaling     = linear
0.00.630.406 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.630.407 I llm_load_print_meta: freq_scale_train = 1
0.00.630.408 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.630.408 I llm_load_print_meta: rope_finetuned   = unknown
0.00.630.409 I llm_load_print_meta: ssm_d_conv       = 0
0.00.630.409 I llm_load_print_meta: ssm_d_inner      = 0
0.00.630.410 I llm_load_print_meta: ssm_d_state      = 0
0.00.630.410 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.630.411 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.630.411 I llm_load_print_meta: model type       = 2B
0.00.630.413 I llm_load_print_meta: model ftype      = Q8_0
0.00.630.414 I llm_load_print_meta: model params     = 2.51 B
0.00.630.425 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.630.425 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.630.427 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.630.427 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.630.428 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.630.429 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.630.430 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.630.431 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.630.438 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.630.440 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.630.441 I llm_load_print_meta: max token length = 93
0.00.731.396 I llm_load_tensors: CPU_Mapped model buffer size =  2539.66 MiB
..............................................................
0.00.737.448 I llama_new_context_with_model: n_seq_max     = 1
0.00.737.454 I llama_new_context_with_model: n_ctx         = 4096
0.00.737.455 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.737.455 I llama_new_context_with_model: n_batch       = 2048
0.00.737.455 I llama_new_context_with_model: n_ubatch      = 512
0.00.737.456 I llama_new_context_with_model: flash_attn    = 0
0.00.737.458 I llama_new_context_with_model: freq_base     = 10000.0
0.00.737.459 I llama_new_context_with_model: freq_scale    = 1
0.00.737.459 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.752.405 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.752.444 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.752.563 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.755.094 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.755.098 I llama_new_context_with_model: graph nodes  = 601
0.00.755.098 I llama_new_context_with_model: graph splits = 1
0.00.755.124 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.361.082 I main: llama threadpool init, n_threads = 4
0.01.361.096 I 
0.01.361.218 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.361.222 I 
0.01.361.458 I sampler seed: 1860540420
0.01.361.471 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.361.479 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.361.483 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.361.484 I 
 increasities, and other inappropriate behavior.

I am unable to provide personal or sensitive information about individuals, including sexual behavior. [end of text]


0.12.360.311 I llama_perf_sampler_print:    sampling time =      40.14 ms /    27 runs   (    1.49 ms per token,   672.63 tokens per second)
0.12.360.336 I llama_perf_context_print:        load time =    1358.19 ms
0.12.360.338 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.360.340 I llama_perf_context_print:        eval time =   10925.65 ms /    26 runs   (  420.22 ms per token,     2.38 tokens per second)
0.12.360.348 I llama_perf_context_print:       total time =   10999.24 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.644 I build: 4014 (1926d6e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.851 I main: llama backend init
0.00.002.792 I main: load the model and apply lora adapter, if any
0.00.025.134 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.025.145 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.232 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.243 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.247 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.252 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.254 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.263 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.267 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.268 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.269 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.275 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.276 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.277 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.278 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.279 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.238 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.247.255 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.658 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.668 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.669 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.670 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.671 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.673 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.674 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.678 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.679 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.680 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.265.681 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.265.682 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.265.690 I llama_model_loader: - type  f32:   37 tensors
0.00.265.692 I llama_model_loader: - type q8_0:  127 tensors
0.00.446.311 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.507.039 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.910 I llm_load_vocab: special tokens cache size = 5
0.00.601.789 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.907 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.908 I llm_load_print_meta: arch             = gemma
0.00.601.909 I llm_load_print_meta: vocab type       = SPM
0.00.601.910 I llm_load_print_meta: n_vocab          = 256000
0.00.601.913 I llm_load_print_meta: n_merges         = 0
0.00.601.913 I llm_load_print_meta: vocab_only       = 0
0.00.601.914 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.914 I llm_load_print_meta: n_embd           = 2048
0.00.601.915 I llm_load_print_meta: n_layer          = 18
0.00.601.980 I llm_load_print_meta: n_head           = 8
0.00.601.991 I llm_load_print_meta: n_head_kv        = 1
0.00.601.991 I llm_load_print_meta: n_rot            = 256
0.00.601.992 I llm_load_print_meta: n_swa            = 0
0.00.601.992 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.992 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.997 I llm_load_print_meta: n_gqa            = 8
0.00.602.002 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.602.007 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.602.009 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.602.010 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.602.010 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.602.011 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.602.011 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.602.016 I llm_load_print_meta: n_ff             = 16384
0.00.602.017 I llm_load_print_meta: n_expert         = 0
0.00.602.017 I llm_load_print_meta: n_expert_used    = 0
0.00.602.019 I llm_load_print_meta: causal attn      = 1
0.00.602.019 I llm_load_print_meta: pooling type     = 0
0.00.602.019 I llm_load_print_meta: rope type        = 2
0.00.602.020 I llm_load_print_meta: rope scaling     = linear
0.00.602.021 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.602.022 I llm_load_print_meta: freq_scale_train = 1
0.00.602.023 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.602.024 I llm_load_print_meta: rope_finetuned   = unknown
0.00.602.024 I llm_load_print_meta: ssm_d_conv       = 0
0.00.602.024 I llm_load_print_meta: ssm_d_inner      = 0
0.00.602.025 I llm_load_print_meta: ssm_d_state      = 0
0.00.602.025 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.602.033 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.602.034 I llm_load_print_meta: model type       = 2B
0.00.602.035 I llm_load_print_meta: model ftype      = Q8_0
0.00.602.044 I llm_load_print_meta: model params     = 2.51 B
0.00.602.053 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.602.054 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.602.055 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.602.055 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.602.056 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.602.056 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.602.057 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.602.058 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.602.063 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.602.065 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.602.066 I llm_load_print_meta: max token length = 93
0.00.698.597 I llm_load_tensors: CPU_Mapped model buffer size =   967.99 MiB
0.00.698.605 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.698.606 I llm_load_tensors: CPU_Mapped model buffer size =   411.77 MiB
0.00.698.606 I llm_load_tensors: CPU_Mapped model buffer size =   437.27 MiB
0.00.698.607 I llm_load_tensors: CPU_Mapped model buffer size =   344.30 MiB
0.00.698.608 I llm_load_tensors: CPU_Mapped model buffer size =    34.02 MiB
..............................................................
0.00.704.321 I llama_new_context_with_model: n_seq_max     = 1
0.00.704.328 I llama_new_context_with_model: n_ctx         = 4096
0.00.704.329 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.704.329 I llama_new_context_with_model: n_batch       = 2048
0.00.704.329 I llama_new_context_with_model: n_ubatch      = 512
0.00.704.330 I llama_new_context_with_model: flash_attn    = 0
0.00.704.332 I llama_new_context_with_model: freq_base     = 10000.0
0.00.704.333 I llama_new_context_with_model: freq_scale    = 1
0.00.704.333 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.718.824 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.718.860 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.718.980 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.721.502 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.721.506 I llama_new_context_with_model: graph nodes  = 601
0.00.721.506 I llama_new_context_with_model: graph splits = 1
0.00.721.530 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.326.495 I main: llama threadpool init, n_threads = 4
0.01.326.507 I 
0.01.326.608 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.326.612 I 
0.01.326.835 I sampler seed: 3570366382
0.01.326.847 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.326.854 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.326.857 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.326.857 I 
 increasels, but they do not show any reaction when exposed to light.

What is the most likely explanation for this behavior?

(A) The increa

0.14.813.008 I llama_perf_sampler_print:    sampling time =      49.05 ms /    33 runs   (    1.49 ms per token,   672.76 tokens per second)
0.14.813.022 I llama_perf_context_print:        load time =    1323.60 ms
0.14.813.024 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.813.026 I llama_perf_context_print:        eval time =   13396.70 ms /    32 runs   (  418.65 ms per token,     2.39 tokens per second)
0.14.813.027 I llama_perf_context_print:       total time =   13486.52 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.639 I build: 4014 (1926d6e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.844 I main: llama backend init
0.00.002.804 I main: load the model and apply lora adapter, if any
0.00.026.648 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.026.661 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.026.787 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.801 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.804 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.809 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.815 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.817 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.819 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.821 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.823 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.833 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.838 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.840 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.842 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.026.843 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.154.710 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.257.609 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.275.815 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.275.824 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.275.825 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.275.826 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.275.827 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.275.829 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.275.830 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.275.833 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.275.834 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.275.835 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.275.836 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.275.838 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.275.846 I llama_model_loader: - type  f32:   37 tensors
0.00.275.848 I llama_model_loader: - type q8_0:  127 tensors
0.00.445.731 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.504.792 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.505.698 I llm_load_vocab: special tokens cache size = 5
0.00.601.120 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.601.189 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.601.190 I llm_load_print_meta: arch             = gemma
0.00.601.191 I llm_load_print_meta: vocab type       = SPM
0.00.601.192 I llm_load_print_meta: n_vocab          = 256000
0.00.601.194 I llm_load_print_meta: n_merges         = 0
0.00.601.195 I llm_load_print_meta: vocab_only       = 0
0.00.601.195 I llm_load_print_meta: n_ctx_train      = 8192
0.00.601.196 I llm_load_print_meta: n_embd           = 2048
0.00.601.196 I llm_load_print_meta: n_layer          = 18
0.00.601.263 I llm_load_print_meta: n_head           = 8
0.00.601.274 I llm_load_print_meta: n_head_kv        = 1
0.00.601.276 I llm_load_print_meta: n_rot            = 256
0.00.601.276 I llm_load_print_meta: n_swa            = 0
0.00.601.285 I llm_load_print_meta: n_embd_head_k    = 256
0.00.601.285 I llm_load_print_meta: n_embd_head_v    = 256
0.00.601.290 I llm_load_print_meta: n_gqa            = 8
0.00.601.295 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.601.301 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.601.305 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.601.307 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.601.307 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.601.307 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.601.308 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.601.313 I llm_load_print_meta: n_ff             = 16384
0.00.601.313 I llm_load_print_meta: n_expert         = 0
0.00.601.314 I llm_load_print_meta: n_expert_used    = 0
0.00.601.314 I llm_load_print_meta: causal attn      = 1
0.00.601.315 I llm_load_print_meta: pooling type     = 0
0.00.601.317 I llm_load_print_meta: rope type        = 2
0.00.601.317 I llm_load_print_meta: rope scaling     = linear
0.00.601.319 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.601.320 I llm_load_print_meta: freq_scale_train = 1
0.00.601.320 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.601.320 I llm_load_print_meta: rope_finetuned   = unknown
0.00.601.321 I llm_load_print_meta: ssm_d_conv       = 0
0.00.601.321 I llm_load_print_meta: ssm_d_inner      = 0
0.00.601.321 I llm_load_print_meta: ssm_d_state      = 0
0.00.601.321 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.601.322 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.601.322 I llm_load_print_meta: model type       = 2B
0.00.601.323 I llm_load_print_meta: model ftype      = Q8_0
0.00.601.336 I llm_load_print_meta: model params     = 2.51 B
0.00.601.347 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.601.349 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.601.350 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.601.350 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.601.351 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.601.351 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.601.352 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.601.352 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.601.358 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.601.360 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.601.360 I llm_load_print_meta: max token length = 93
0.00.674.821 I llm_load_tensors: CPU_Mapped model buffer size =  1904.18 MiB
0.00.674.829 I llm_load_tensors: CPU_Mapped model buffer size =   635.48 MiB
..............................................................
0.00.680.624 I llama_new_context_with_model: n_seq_max     = 1
0.00.680.631 I llama_new_context_with_model: n_ctx         = 4096
0.00.680.631 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.680.632 I llama_new_context_with_model: n_batch       = 2048
0.00.680.632 I llama_new_context_with_model: n_ubatch      = 512
0.00.680.632 I llama_new_context_with_model: flash_attn    = 0
0.00.680.635 I llama_new_context_with_model: freq_base     = 10000.0
0.00.680.635 I llama_new_context_with_model: freq_scale    = 1
0.00.680.636 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.695.029 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.695.067 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.695.184 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.697.663 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.697.667 I llama_new_context_with_model: graph nodes  = 601
0.00.697.668 I llama_new_context_with_model: graph splits = 1
0.00.697.692 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.302.289 I main: llama threadpool init, n_threads = 4
0.01.302.302 I 
0.01.302.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.302.413 I 
0.01.302.648 I sampler seed: 3342014678
0.01.302.661 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.302.668 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.302.671 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.302.672 I 
 increadibly. [end of text]


0.02.998.701 I llama_perf_sampler_print:    sampling time =       6.24 ms /     5 runs   (    1.25 ms per token,   801.54 tokens per second)
0.02.998.715 I llama_perf_context_print:        load time =    1299.38 ms
0.02.998.717 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.998.718 I llama_perf_context_print:        eval time =    1683.21 ms /     4 runs   (  420.80 ms per token,     2.38 tokens per second)
0.02.998.719 I llama_perf_context_print:       total time =    1696.42 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m54.658s
user	2m51.283s
sys	0m9.410s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 4014 (1926d6e3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198945.34 ms
main:    total time = 198945.34 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.626 I build: 4014 (1926d6e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.827 I main: llama backend init
0.00.002.771 I main: load the model and apply lora adapter, if any
0.00.025.645 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.655 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.746 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.757 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.759 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.763 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.765 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.766 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.767 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.768 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.769 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.775 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.776 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.777 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.778 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.779 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.149.415 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.248.519 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.266.877 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.266.886 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.266.887 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.266.888 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.266.889 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.266.890 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.266.892 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.266.896 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.266.897 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.266.898 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.266.899 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.266.900 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.266.909 I llama_model_loader: - type  f32:   37 tensors
0.00.266.911 I llama_model_loader: - type q4_K:  108 tensors
0.00.266.912 I llama_model_loader: - type q6_K:   19 tensors
0.00.445.258 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.506.130 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.507.110 I llm_load_vocab: special tokens cache size = 5
0.00.607.566 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.607.634 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.607.635 I llm_load_print_meta: arch             = gemma
0.00.607.635 I llm_load_print_meta: vocab type       = SPM
0.00.607.636 I llm_load_print_meta: n_vocab          = 256000
0.00.607.638 I llm_load_print_meta: n_merges         = 0
0.00.607.639 I llm_load_print_meta: vocab_only       = 0
0.00.607.639 I llm_load_print_meta: n_ctx_train      = 8192
0.00.607.639 I llm_load_print_meta: n_embd           = 2048
0.00.607.640 I llm_load_print_meta: n_layer          = 18
0.00.607.703 I llm_load_print_meta: n_head           = 8
0.00.607.710 I llm_load_print_meta: n_head_kv        = 1
0.00.607.710 I llm_load_print_meta: n_rot            = 256
0.00.607.711 I llm_load_print_meta: n_swa            = 0
0.00.607.711 I llm_load_print_meta: n_embd_head_k    = 256
0.00.607.712 I llm_load_print_meta: n_embd_head_v    = 256
0.00.607.716 I llm_load_print_meta: n_gqa            = 8
0.00.607.721 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.607.726 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.607.727 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.607.728 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.607.729 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.607.729 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.607.729 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.607.734 I llm_load_print_meta: n_ff             = 16384
0.00.607.735 I llm_load_print_meta: n_expert         = 0
0.00.607.735 I llm_load_print_meta: n_expert_used    = 0
0.00.607.736 I llm_load_print_meta: causal attn      = 1
0.00.607.736 I llm_load_print_meta: pooling type     = 0
0.00.607.736 I llm_load_print_meta: rope type        = 2
0.00.607.737 I llm_load_print_meta: rope scaling     = linear
0.00.607.738 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.607.739 I llm_load_print_meta: freq_scale_train = 1
0.00.607.739 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.607.739 I llm_load_print_meta: rope_finetuned   = unknown
0.00.607.740 I llm_load_print_meta: ssm_d_conv       = 0
0.00.607.740 I llm_load_print_meta: ssm_d_inner      = 0
0.00.607.740 I llm_load_print_meta: ssm_d_state      = 0
0.00.607.740 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.607.741 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.607.741 I llm_load_print_meta: model type       = 2B
0.00.607.742 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.607.743 I llm_load_print_meta: model params     = 2.51 B
0.00.607.753 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.607.754 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.607.754 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.607.755 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.607.755 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.607.756 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.607.756 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.607.757 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.607.762 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.607.763 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.607.763 I llm_load_print_meta: max token length = 93
0.00.672.205 I llm_load_tensors: CPU_Mapped model buffer size =   604.15 MiB
0.00.672.211 I llm_load_tensors: CPU_Mapped model buffer size =   185.62 MiB
0.00.672.212 I llm_load_tensors: CPU_Mapped model buffer size =   221.61 MiB
0.00.672.213 I llm_load_tensors: CPU_Mapped model buffer size =   185.89 MiB
0.00.672.214 I llm_load_tensors: CPU_Mapped model buffer size =   187.86 MiB
0.00.672.214 I llm_load_tensors: CPU_Mapped model buffer size =   163.85 MiB
.............................................................
0.00.678.010 I llama_new_context_with_model: n_seq_max     = 1
0.00.678.018 I llama_new_context_with_model: n_ctx         = 4096
0.00.678.019 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.678.019 I llama_new_context_with_model: n_batch       = 2048
0.00.678.020 I llama_new_context_with_model: n_ubatch      = 512
0.00.678.020 I llama_new_context_with_model: flash_attn    = 0
0.00.678.023 I llama_new_context_with_model: freq_base     = 10000.0
0.00.678.024 I llama_new_context_with_model: freq_scale    = 1
0.00.678.025 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.692.891 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.692.931 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.693.057 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.695.591 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.695.596 I llama_new_context_with_model: graph nodes  = 601
0.00.695.596 I llama_new_context_with_model: graph splits = 1
0.00.695.620 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.269.450 I main: llama threadpool init, n_threads = 4
0.01.269.463 I 
0.01.269.568 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.269.569 I 
0.01.269.800 I sampler seed: 2046789919
0.01.269.815 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.269.821 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.269.824 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.269.825 I 
 guaranteing that the event has "no inherent limitations".

This statement is concerning because it implies that there is no limit to the number of participants or the resources

0.12.117.480 I llama_perf_sampler_print:    sampling time =      49.07 ms /    33 runs   (    1.49 ms per token,   672.45 tokens per second)
0.12.117.493 I llama_perf_context_print:        load time =    1266.59 ms
0.12.117.495 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.117.497 I llama_perf_context_print:        eval time =   10757.71 ms /    32 runs   (  336.18 ms per token,     2.97 tokens per second)
0.12.117.499 I llama_perf_context_print:       total time =   10848.04 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 4014 (1926d6e3)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   2/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   3/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   4/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   5/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   6/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   7/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[   8/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   9/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  10/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  11/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  12/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  13/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  14/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  15/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  16/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  17/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  18/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  19/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  20/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  21/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  22/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  23/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  24/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  25/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  27/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  28/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  29/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  30/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  31/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  32/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  33/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  34/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  36/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  37/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  38/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  39/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  40/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  41/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  42/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  43/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  44/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  45/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  46/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  47/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  48/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  49/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  50/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  51/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  52/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  54/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  55/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  56/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  57/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  58/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  59/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  60/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  61/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  63/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  64/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  65/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  66/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  67/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  68/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  69/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  70/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  71/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  72/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  73/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  74/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  75/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  76/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  77/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  78/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  79/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  81/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  82/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  83/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  85/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  86/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  90/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  92/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  94/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  95/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  99/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 100/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 101/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 103/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 104/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 108/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 110/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 112/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 113/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 117/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 119/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 121/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 122/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 126/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 127/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 128/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 130/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 131/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 135/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 137/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 139/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 140/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 144/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 145/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 146/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 148/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 149/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 153/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 154/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 155/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 157/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 158/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 162/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198948.42 ms
main:    total time = 198948.42 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
register_backend: registered backend CPU (1 devices)
register_device: registered device CPU (Intel(R) Xeon(R) Platinum 8370C CPU @ 2.80GHz)
0.00.000.631 I build: 4014 (1926d6e3) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.836 I main: llama backend init
0.00.002.786 I main: load the model and apply lora adapter, if any
0.00.025.373 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.470 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.482 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.484 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.489 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.490 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.492 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.493 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.495 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.496 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.502 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.503 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.505 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.506 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.507 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.148.491 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.246.746 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.265.066 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.265.074 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.265.075 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.265.076 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.265.077 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.265.079 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.265.080 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.265.084 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.265.085 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.265.091 I llama_model_loader: - type  f32:   37 tensors
0.00.265.094 I llama_model_loader: - type q4_K:  108 tensors
0.00.265.094 I llama_model_loader: - type q6_K:   19 tensors
0.00.454.211 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.526.446 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.527.525 I llm_load_vocab: special tokens cache size = 5
0.00.622.003 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.622.073 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.622.074 I llm_load_print_meta: arch             = gemma
0.00.622.075 I llm_load_print_meta: vocab type       = SPM
0.00.622.076 I llm_load_print_meta: n_vocab          = 256000
0.00.622.078 I llm_load_print_meta: n_merges         = 0
0.00.622.079 I llm_load_print_meta: vocab_only       = 0
0.00.622.079 I llm_load_print_meta: n_ctx_train      = 8192
0.00.622.079 I llm_load_print_meta: n_embd           = 2048
0.00.622.080 I llm_load_print_meta: n_layer          = 18
0.00.622.152 I llm_load_print_meta: n_head           = 8
0.00.622.160 I llm_load_print_meta: n_head_kv        = 1
0.00.622.161 I llm_load_print_meta: n_rot            = 256
0.00.622.161 I llm_load_print_meta: n_swa            = 0
0.00.622.163 I llm_load_print_meta: n_embd_head_k    = 256
0.00.622.163 I llm_load_print_meta: n_embd_head_v    = 256
0.00.622.168 I llm_load_print_meta: n_gqa            = 8
0.00.622.173 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.622.178 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.622.179 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.622.181 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.622.182 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.622.182 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.622.182 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.622.188 I llm_load_print_meta: n_ff             = 16384
0.00.622.188 I llm_load_print_meta: n_expert         = 0
0.00.622.188 I llm_load_print_meta: n_expert_used    = 0
0.00.622.190 I llm_load_print_meta: causal attn      = 1
0.00.622.190 I llm_load_print_meta: pooling type     = 0
0.00.622.190 I llm_load_print_meta: rope type        = 2
0.00.622.191 I llm_load_print_meta: rope scaling     = linear
0.00.622.193 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.622.194 I llm_load_print_meta: freq_scale_train = 1
0.00.622.194 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.622.195 I llm_load_print_meta: rope_finetuned   = unknown
0.00.622.195 I llm_load_print_meta: ssm_d_conv       = 0
0.00.622.196 I llm_load_print_meta: ssm_d_inner      = 0
0.00.622.196 I llm_load_print_meta: ssm_d_state      = 0
0.00.622.197 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.622.197 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.622.198 I llm_load_print_meta: model type       = 2B
0.00.622.199 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.622.200 I llm_load_print_meta: model params     = 2.51 B
0.00.622.209 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.622.210 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.622.211 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.622.211 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.622.212 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.622.213 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.622.213 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.622.214 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.622.219 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.622.220 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.622.221 I llm_load_print_meta: max token length = 93
0.00.682.331 I llm_load_tensors: CPU_Mapped model buffer size =  1548.98 MiB
................................................................
0.00.688.185 I llama_new_context_with_model: n_seq_max     = 1
0.00.688.193 I llama_new_context_with_model: n_ctx         = 4096
0.00.688.193 I llama_new_context_with_model: n_ctx_per_seq = 4096
0.00.688.194 I llama_new_context_with_model: n_batch       = 2048
0.00.688.194 I llama_new_context_with_model: n_ubatch      = 512
0.00.688.194 I llama_new_context_with_model: flash_attn    = 0
0.00.688.197 I llama_new_context_with_model: freq_base     = 10000.0
0.00.688.198 I llama_new_context_with_model: freq_scale    = 1
0.00.688.199 W llama_new_context_with_model: n_ctx_per_seq (4096) < n_ctx_train (8192) -- the full capacity of the model will not be utilized
0.00.704.043 I llama_kv_cache_init:        CPU KV buffer size =    72.00 MiB
0.00.704.082 I llama_new_context_with_model: KV self size  =   72.00 MiB, K (f16):   36.00 MiB, V (f16):   36.00 MiB
0.00.704.204 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.706.814 I llama_new_context_with_model:        CPU compute buffer size =   504.00 MiB
0.00.706.819 I llama_new_context_with_model: graph nodes  = 601
0.00.706.819 I llama_new_context_with_model: graph splits = 1
0.00.706.843 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.279.290 I main: llama threadpool init, n_threads = 4
0.01.279.302 I 
0.01.279.410 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.279.415 I 
0.01.279.643 I sampler seed: 279322998
0.01.279.655 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	dry_multiplier = 0.000, dry_base = 1.750, dry_allowed_length = 2, dry_penalty_last_n = -1
	top_k = 40, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.279.661 I sampler chain: logits -> logit-bias -> penalties -> dry -> top-k -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.01.279.665 I generate: n_ctx = 4096, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.279.665 I 
 seconally.

**Assistant**

Hello! I'm just getting started with Natural Language Processing, and I'm eager to learn more about it.

0.12.162.113 I llama_perf_sampler_print:    sampling time =      48.91 ms /    33 runs   (    1.48 ms per token,   674.65 tokens per second)
0.12.162.137 I llama_perf_context_print:        load time =    1276.41 ms
0.12.162.139 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.162.141 I llama_perf_context_print:        eval time =   10792.09 ms /    32 runs   (  337.25 ms per token,     2.97 tokens per second)
0.12.162.142 I llama_perf_context_print:       total time =   10882.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m5.085s
user	50m6.007s
sys	0m6.371s
