+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.631 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.843 I main: llama backend init
0.00.002.817 I main: load the model and apply lora adapter, if any
0.00.024.796 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.981 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.069 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.080 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.081 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.085 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.086 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.087 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.088 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.088 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.089 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.096 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.097 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.099 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.099 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.101 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.603 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.184.378 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.196.366 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.196.374 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.196.375 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.196.376 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.196.377 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.196.378 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.196.379 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.196.382 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.196.383 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.196.384 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.196.385 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.196.386 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.196.395 I llama_model_loader: - type  f32:   37 tensors
0.00.196.398 I llama_model_loader: - type q8_0:  127 tensors
0.00.473.006 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.474.033 I llm_load_vocab: special tokens cache size = 5
0.00.531.139 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.531.201 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.531.202 I llm_load_print_meta: arch             = gemma
0.00.531.203 I llm_load_print_meta: vocab type       = SPM
0.00.531.204 I llm_load_print_meta: n_vocab          = 256000
0.00.531.206 I llm_load_print_meta: n_merges         = 0
0.00.531.207 I llm_load_print_meta: vocab_only       = 0
0.00.531.207 I llm_load_print_meta: n_ctx_train      = 8192
0.00.531.207 I llm_load_print_meta: n_embd           = 2048
0.00.531.208 I llm_load_print_meta: n_layer          = 18
0.00.531.242 I llm_load_print_meta: n_head           = 8
0.00.531.249 I llm_load_print_meta: n_head_kv        = 1
0.00.531.249 I llm_load_print_meta: n_rot            = 256
0.00.531.250 I llm_load_print_meta: n_swa            = 0
0.00.531.250 I llm_load_print_meta: n_embd_head_k    = 256
0.00.531.251 I llm_load_print_meta: n_embd_head_v    = 256
0.00.531.255 I llm_load_print_meta: n_gqa            = 8
0.00.531.260 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.531.264 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.531.266 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.531.267 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.531.267 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.531.268 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.531.268 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.531.272 I llm_load_print_meta: n_ff             = 16384
0.00.531.273 I llm_load_print_meta: n_expert         = 0
0.00.531.273 I llm_load_print_meta: n_expert_used    = 0
0.00.531.274 I llm_load_print_meta: causal attn      = 1
0.00.531.274 I llm_load_print_meta: pooling type     = 0
0.00.531.274 I llm_load_print_meta: rope type        = 2
0.00.531.275 I llm_load_print_meta: rope scaling     = linear
0.00.531.276 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.531.277 I llm_load_print_meta: freq_scale_train = 1
0.00.531.277 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.531.277 I llm_load_print_meta: rope_finetuned   = unknown
0.00.531.278 I llm_load_print_meta: ssm_d_conv       = 0
0.00.531.278 I llm_load_print_meta: ssm_d_inner      = 0
0.00.531.278 I llm_load_print_meta: ssm_d_state      = 0
0.00.531.279 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.531.279 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.531.279 I llm_load_print_meta: model type       = 2B
0.00.531.280 I llm_load_print_meta: model ftype      = Q8_0
0.00.531.281 I llm_load_print_meta: model params     = 2.51 B
0.00.531.282 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.531.282 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.531.283 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.531.283 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.531.284 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.531.284 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.531.285 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.531.285 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.531.286 I llm_load_print_meta: max token length = 93
0.00.531.469 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.630.567 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.630.578 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.630.579 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.630.580 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.630.580 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.630.581 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.636.233 I llama_new_context_with_model: n_ctx      = 8192
0.00.636.241 I llama_new_context_with_model: n_batch    = 2048
0.00.636.241 I llama_new_context_with_model: n_ubatch   = 512
0.00.636.242 I llama_new_context_with_model: flash_attn = 0
0.00.636.244 I llama_new_context_with_model: freq_base  = 10000.0
0.00.636.245 I llama_new_context_with_model: freq_scale = 1
0.00.666.546 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.666.592 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.666.705 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.668.096 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.668.103 I llama_new_context_with_model: graph nodes  = 601
0.00.668.104 I llama_new_context_with_model: graph splits = 1
0.00.668.119 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.278.572 I main: llama threadpool init, n_threads = 4
0.01.278.583 I 
0.01.278.676 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.278.680 I 
0.01.278.835 I sampler seed: 1911870652
0.01.278.846 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.278.851 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.278.852 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities, the narrator's reflections on the escalating situation, and the broader context of the issue. [end of text]


0.10.504.328 I llama_perf_sampler_print:    sampling time =      33.90 ms /    23 runs   (    1.47 ms per token,   678.49 tokens per second)
0.10.504.331 I llama_perf_context_print:        load time =    1275.67 ms
0.10.504.333 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.10.504.335 I llama_perf_context_print:        eval time =    9169.23 ms /    22 runs   (  416.78 ms per token,     2.40 tokens per second)
0.10.504.346 I llama_perf_context_print:       total time =    9225.76 ms /    23 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.646 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.893 I main: llama backend init
0.00.002.839 I main: load the model and apply lora adapter, if any
0.00.025.344 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.025.437 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.451 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.454 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.458 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.459 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.459 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.461 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.469 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.472 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.479 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.480 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.481 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.481 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.482 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.892 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.299 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.336 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.344 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.345 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.346 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.347 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.348 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.349 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.353 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.353 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.354 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.355 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.195.356 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.363 I llama_model_loader: - type  f32:   37 tensors
0.00.195.367 I llama_model_loader: - type q8_0:  127 tensors
0.00.463.778 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.464.831 I llm_load_vocab: special tokens cache size = 5
0.00.522.019 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.522.074 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.522.078 I llm_load_print_meta: arch             = gemma
0.00.522.079 I llm_load_print_meta: vocab type       = SPM
0.00.522.079 I llm_load_print_meta: n_vocab          = 256000
0.00.522.081 I llm_load_print_meta: n_merges         = 0
0.00.522.082 I llm_load_print_meta: vocab_only       = 0
0.00.522.082 I llm_load_print_meta: n_ctx_train      = 8192
0.00.522.082 I llm_load_print_meta: n_embd           = 2048
0.00.522.083 I llm_load_print_meta: n_layer          = 18
0.00.522.114 I llm_load_print_meta: n_head           = 8
0.00.522.123 I llm_load_print_meta: n_head_kv        = 1
0.00.522.123 I llm_load_print_meta: n_rot            = 256
0.00.522.124 I llm_load_print_meta: n_swa            = 0
0.00.522.124 I llm_load_print_meta: n_embd_head_k    = 256
0.00.522.124 I llm_load_print_meta: n_embd_head_v    = 256
0.00.522.129 I llm_load_print_meta: n_gqa            = 8
0.00.522.133 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.522.139 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.522.140 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.522.141 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.522.141 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.522.143 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.522.143 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.522.148 I llm_load_print_meta: n_ff             = 16384
0.00.522.149 I llm_load_print_meta: n_expert         = 0
0.00.522.150 I llm_load_print_meta: n_expert_used    = 0
0.00.522.150 I llm_load_print_meta: causal attn      = 1
0.00.522.151 I llm_load_print_meta: pooling type     = 0
0.00.522.151 I llm_load_print_meta: rope type        = 2
0.00.522.152 I llm_load_print_meta: rope scaling     = linear
0.00.522.154 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.522.154 I llm_load_print_meta: freq_scale_train = 1
0.00.522.155 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.522.155 I llm_load_print_meta: rope_finetuned   = unknown
0.00.522.156 I llm_load_print_meta: ssm_d_conv       = 0
0.00.522.156 I llm_load_print_meta: ssm_d_inner      = 0
0.00.522.156 I llm_load_print_meta: ssm_d_state      = 0
0.00.522.157 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.522.157 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.522.158 I llm_load_print_meta: model type       = 2B
0.00.522.159 I llm_load_print_meta: model ftype      = Q8_0
0.00.522.160 I llm_load_print_meta: model params     = 2.51 B
0.00.522.161 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.522.161 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.522.162 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.522.163 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.522.163 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.522.172 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.522.174 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.522.185 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.522.186 I llm_load_print_meta: max token length = 93
0.00.522.367 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.617.808 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.623.684 I llama_new_context_with_model: n_ctx      = 8192
0.00.623.693 I llama_new_context_with_model: n_batch    = 2048
0.00.623.693 I llama_new_context_with_model: n_ubatch   = 512
0.00.623.694 I llama_new_context_with_model: flash_attn = 0
0.00.623.696 I llama_new_context_with_model: freq_base  = 10000.0
0.00.623.697 I llama_new_context_with_model: freq_scale = 1
0.00.655.164 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.655.211 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.655.324 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.656.756 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.656.764 I llama_new_context_with_model: graph nodes  = 601
0.00.656.765 I llama_new_context_with_model: graph splits = 1
0.00.656.782 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.271.817 I main: llama threadpool init, n_threads = 4
0.01.271.827 I 
0.01.271.941 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.271.946 I 
0.01.272.114 I sampler seed: 2640681668
0.01.272.125 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.272.131 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.272.132 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities are not an appropriate subject for discussion, and should not be tolerated. [end of text]


0.08.500.336 I llama_perf_sampler_print:    sampling time =      26.14 ms /    18 runs   (    1.45 ms per token,   688.55 tokens per second)
0.08.500.338 I llama_perf_context_print:        load time =    1268.89 ms
0.08.500.340 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.500.353 I llama_perf_context_print:        eval time =    7183.93 ms /    17 runs   (  422.58 ms per token,     2.37 tokens per second)
0.08.500.354 I llama_perf_context_print:       total time =    7228.53 ms /    18 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.660 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.865 I main: llama backend init
0.00.002.818 I main: load the model and apply lora adapter, if any
0.00.024.728 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.942 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.025.038 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.050 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.052 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.058 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.067 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.068 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.071 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.071 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.072 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.079 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.080 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.080 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.081 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.082 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.097.357 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.210 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.310 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.320 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.321 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.322 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.323 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.324 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.325 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.328 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.329 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.330 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.198.330 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.198.331 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.198.342 I llama_model_loader: - type  f32:   37 tensors
0.00.198.348 I llama_model_loader: - type q8_0:  127 tensors
0.00.468.482 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.469.535 I llm_load_vocab: special tokens cache size = 5
0.00.527.309 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.527.370 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.527.371 I llm_load_print_meta: arch             = gemma
0.00.527.372 I llm_load_print_meta: vocab type       = SPM
0.00.527.372 I llm_load_print_meta: n_vocab          = 256000
0.00.527.375 I llm_load_print_meta: n_merges         = 0
0.00.527.375 I llm_load_print_meta: vocab_only       = 0
0.00.527.376 I llm_load_print_meta: n_ctx_train      = 8192
0.00.527.376 I llm_load_print_meta: n_embd           = 2048
0.00.527.376 I llm_load_print_meta: n_layer          = 18
0.00.527.410 I llm_load_print_meta: n_head           = 8
0.00.527.417 I llm_load_print_meta: n_head_kv        = 1
0.00.527.417 I llm_load_print_meta: n_rot            = 256
0.00.527.418 I llm_load_print_meta: n_swa            = 0
0.00.527.418 I llm_load_print_meta: n_embd_head_k    = 256
0.00.527.418 I llm_load_print_meta: n_embd_head_v    = 256
0.00.527.424 I llm_load_print_meta: n_gqa            = 8
0.00.527.428 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.527.434 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.527.435 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.527.436 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.527.436 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.527.437 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.527.437 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.527.442 I llm_load_print_meta: n_ff             = 16384
0.00.527.442 I llm_load_print_meta: n_expert         = 0
0.00.527.442 I llm_load_print_meta: n_expert_used    = 0
0.00.527.443 I llm_load_print_meta: causal attn      = 1
0.00.527.443 I llm_load_print_meta: pooling type     = 0
0.00.527.443 I llm_load_print_meta: rope type        = 2
0.00.527.444 I llm_load_print_meta: rope scaling     = linear
0.00.527.445 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.527.445 I llm_load_print_meta: freq_scale_train = 1
0.00.527.446 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.527.446 I llm_load_print_meta: rope_finetuned   = unknown
0.00.527.447 I llm_load_print_meta: ssm_d_conv       = 0
0.00.527.447 I llm_load_print_meta: ssm_d_inner      = 0
0.00.527.447 I llm_load_print_meta: ssm_d_state      = 0
0.00.527.447 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.527.448 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.527.448 I llm_load_print_meta: model type       = 2B
0.00.527.449 I llm_load_print_meta: model ftype      = Q8_0
0.00.527.451 I llm_load_print_meta: model params     = 2.51 B
0.00.527.453 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.527.453 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.527.454 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.527.455 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.527.456 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.527.457 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.527.458 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.527.460 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.527.460 I llm_load_print_meta: max token length = 93
0.00.527.651 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.603.265 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.603.275 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.603.276 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.603.277 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.603.277 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.603.278 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.609.143 I llama_new_context_with_model: n_ctx      = 8192
0.00.609.151 I llama_new_context_with_model: n_batch    = 2048
0.00.609.151 I llama_new_context_with_model: n_ubatch   = 512
0.00.609.152 I llama_new_context_with_model: flash_attn = 0
0.00.609.154 I llama_new_context_with_model: freq_base  = 10000.0
0.00.609.155 I llama_new_context_with_model: freq_scale = 1
0.00.638.814 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.638.856 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.638.987 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.640.431 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.640.439 I llama_new_context_with_model: graph nodes  = 601
0.00.640.440 I llama_new_context_with_model: graph splits = 1
0.00.640.458 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.285.235 I main: llama threadpool init, n_threads = 4
0.01.285.246 I 
0.01.285.346 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.285.350 I 
0.01.285.515 I sampler seed: 109383775
0.01.285.525 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.285.530 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.285.530 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities is a common experience for individuals undergoing chemotherapy.

**Answer the following questions about this experience:**

a) What is the cause of this experience?

0.14.756.889 I llama_perf_sampler_print:    sampling time =      49.12 ms /    33 runs   (    1.49 ms per token,   671.88 tokens per second)
0.14.756.893 I llama_perf_context_print:        load time =    1282.33 ms
0.14.756.895 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.756.896 I llama_perf_context_print:        eval time =   13388.40 ms /    32 runs   (  418.39 ms per token,     2.39 tokens per second)
0.14.756.897 I llama_perf_context_print:       total time =   13471.66 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.627 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.833 I main: llama backend init
0.00.002.770 I main: load the model and apply lora adapter, if any
0.00.024.398 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.591 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.674 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.683 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.685 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.688 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.689 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.690 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.691 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.692 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.692 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.698 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.699 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.700 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.701 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.702 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.149 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.151 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.137 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.145 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.146 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.147 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.147 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.149 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.150 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.154 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.154 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.155 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.156 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.194.157 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.165 I llama_model_loader: - type  f32:   37 tensors
0.00.194.170 I llama_model_loader: - type q8_0:  127 tensors
0.00.448.887 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.449.918 I llm_load_vocab: special tokens cache size = 5
0.00.506.878 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.506.938 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.506.940 I llm_load_print_meta: arch             = gemma
0.00.506.941 I llm_load_print_meta: vocab type       = SPM
0.00.506.942 I llm_load_print_meta: n_vocab          = 256000
0.00.506.944 I llm_load_print_meta: n_merges         = 0
0.00.506.945 I llm_load_print_meta: vocab_only       = 0
0.00.506.945 I llm_load_print_meta: n_ctx_train      = 8192
0.00.506.946 I llm_load_print_meta: n_embd           = 2048
0.00.506.946 I llm_load_print_meta: n_layer          = 18
0.00.506.981 I llm_load_print_meta: n_head           = 8
0.00.506.988 I llm_load_print_meta: n_head_kv        = 1
0.00.506.988 I llm_load_print_meta: n_rot            = 256
0.00.506.989 I llm_load_print_meta: n_swa            = 0
0.00.506.989 I llm_load_print_meta: n_embd_head_k    = 256
0.00.506.989 I llm_load_print_meta: n_embd_head_v    = 256
0.00.506.994 I llm_load_print_meta: n_gqa            = 8
0.00.506.998 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.507.003 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.507.004 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.507.005 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.507.006 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.507.006 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.507.007 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.507.011 I llm_load_print_meta: n_ff             = 16384
0.00.507.011 I llm_load_print_meta: n_expert         = 0
0.00.507.012 I llm_load_print_meta: n_expert_used    = 0
0.00.507.012 I llm_load_print_meta: causal attn      = 1
0.00.507.012 I llm_load_print_meta: pooling type     = 0
0.00.507.013 I llm_load_print_meta: rope type        = 2
0.00.507.013 I llm_load_print_meta: rope scaling     = linear
0.00.507.014 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.507.015 I llm_load_print_meta: freq_scale_train = 1
0.00.507.015 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.507.016 I llm_load_print_meta: rope_finetuned   = unknown
0.00.507.016 I llm_load_print_meta: ssm_d_conv       = 0
0.00.507.016 I llm_load_print_meta: ssm_d_inner      = 0
0.00.507.017 I llm_load_print_meta: ssm_d_state      = 0
0.00.507.017 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.507.017 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.507.018 I llm_load_print_meta: model type       = 2B
0.00.507.035 I llm_load_print_meta: model ftype      = Q8_0
0.00.507.036 I llm_load_print_meta: model params     = 2.51 B
0.00.507.037 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.507.038 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.507.038 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.507.039 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.507.039 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.507.040 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.507.040 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.507.041 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.507.041 I llm_load_print_meta: max token length = 93
0.00.507.229 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.578.445 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.578.454 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.584.004 I llama_new_context_with_model: n_ctx      = 8192
0.00.584.011 I llama_new_context_with_model: n_batch    = 2048
0.00.584.012 I llama_new_context_with_model: n_ubatch   = 512
0.00.584.012 I llama_new_context_with_model: flash_attn = 0
0.00.584.015 I llama_new_context_with_model: freq_base  = 10000.0
0.00.584.016 I llama_new_context_with_model: freq_scale = 1
0.00.613.493 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.613.534 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.613.643 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.615.042 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.615.048 I llama_new_context_with_model: graph nodes  = 601
0.00.615.049 I llama_new_context_with_model: graph splits = 1
0.00.615.065 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.227.068 I main: llama threadpool init, n_threads = 4
0.01.227.080 I 
0.01.227.173 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.227.176 I 
0.01.227.338 I sampler seed: 3802655248
0.01.227.349 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.227.354 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.227.355 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably, with a radiant smile that illuminated the room.

This was Beatrice, a beacon of warmth and kindness in the cold and unforgiving world of social

0.14.717.502 I llama_perf_sampler_print:    sampling time =      49.13 ms /    33 runs   (    1.49 ms per token,   671.62 tokens per second)
0.14.717.506 I llama_perf_context_print:        load time =    1224.22 ms
0.14.717.508 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.717.509 I llama_perf_context_print:        eval time =   13408.90 ms /    32 runs   (  419.03 ms per token,     2.39 tokens per second)
0.14.717.511 I llama_perf_context_print:       total time =   13490.45 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m57.996s
user	3m6.063s
sys	0m9.414s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3768 (19514d63)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198860.81 ms
main:    total time = 198860.81 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.618 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.810 I main: llama backend init
0.00.002.739 I main: load the model and apply lora adapter, if any
0.00.025.070 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.025.266 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.025.363 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.374 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.376 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.380 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.381 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.382 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.382 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.383 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.384 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.391 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.392 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.393 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.393 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.394 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.095.387 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.183.537 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.195.589 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.195.597 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.195.598 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.195.599 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.195.600 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.195.601 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.195.602 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.195.607 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.195.608 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.195.609 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.195.610 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.195.611 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.195.620 I llama_model_loader: - type  f32:   37 tensors
0.00.195.625 I llama_model_loader: - type q4_K:  108 tensors
0.00.195.625 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.274 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.318 I llm_load_vocab: special tokens cache size = 5
0.00.535.398 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.535.458 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.535.462 I llm_load_print_meta: arch             = gemma
0.00.535.462 I llm_load_print_meta: vocab type       = SPM
0.00.535.463 I llm_load_print_meta: n_vocab          = 256000
0.00.535.466 I llm_load_print_meta: n_merges         = 0
0.00.535.466 I llm_load_print_meta: vocab_only       = 0
0.00.535.467 I llm_load_print_meta: n_ctx_train      = 8192
0.00.535.467 I llm_load_print_meta: n_embd           = 2048
0.00.535.468 I llm_load_print_meta: n_layer          = 18
0.00.535.501 I llm_load_print_meta: n_head           = 8
0.00.535.511 I llm_load_print_meta: n_head_kv        = 1
0.00.535.511 I llm_load_print_meta: n_rot            = 256
0.00.535.512 I llm_load_print_meta: n_swa            = 0
0.00.535.512 I llm_load_print_meta: n_embd_head_k    = 256
0.00.535.512 I llm_load_print_meta: n_embd_head_v    = 256
0.00.535.517 I llm_load_print_meta: n_gqa            = 8
0.00.535.521 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.535.526 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.535.528 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.535.529 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.535.530 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.535.530 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.535.531 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.535.536 I llm_load_print_meta: n_ff             = 16384
0.00.535.536 I llm_load_print_meta: n_expert         = 0
0.00.535.547 I llm_load_print_meta: n_expert_used    = 0
0.00.535.549 I llm_load_print_meta: causal attn      = 1
0.00.535.549 I llm_load_print_meta: pooling type     = 0
0.00.535.550 I llm_load_print_meta: rope type        = 2
0.00.535.550 I llm_load_print_meta: rope scaling     = linear
0.00.535.552 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.535.552 I llm_load_print_meta: freq_scale_train = 1
0.00.535.553 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.535.554 I llm_load_print_meta: rope_finetuned   = unknown
0.00.535.555 I llm_load_print_meta: ssm_d_conv       = 0
0.00.535.568 I llm_load_print_meta: ssm_d_inner      = 0
0.00.535.569 I llm_load_print_meta: ssm_d_state      = 0
0.00.535.570 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.535.570 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.535.571 I llm_load_print_meta: model type       = 2B
0.00.535.573 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.535.574 I llm_load_print_meta: model params     = 2.51 B
0.00.535.575 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.535.575 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.535.576 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.535.577 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.535.577 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.535.577 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.535.579 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.535.579 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.535.580 I llm_load_print_meta: max token length = 93
0.00.535.760 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.595.886 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.595.897 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.595.898 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.595.898 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.595.899 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.595.899 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.601.645 I llama_new_context_with_model: n_ctx      = 8192
0.00.601.653 I llama_new_context_with_model: n_batch    = 2048
0.00.601.654 I llama_new_context_with_model: n_ubatch   = 512
0.00.601.654 I llama_new_context_with_model: flash_attn = 0
0.00.601.656 I llama_new_context_with_model: freq_base  = 10000.0
0.00.601.657 I llama_new_context_with_model: freq_scale = 1
0.00.631.093 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.631.134 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.631.255 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.632.708 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.632.715 I llama_new_context_with_model: graph nodes  = 601
0.00.632.715 I llama_new_context_with_model: graph splits = 1
0.00.632.731 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.211.372 I main: llama threadpool init, n_threads = 4
0.01.211.385 I 
0.01.211.478 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.211.482 I 
0.01.211.640 I sampler seed: 1778885162
0.01.211.651 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.211.655 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.211.656 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 fufilling music in the background.

The scene opens with a shot of a bustling marketplace in a vibrant city. People throng the stalls, buying and selling goods

0.12.188.722 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.06 tokens per second)
0.12.188.738 I llama_perf_context_print:        load time =    1208.55 ms
0.12.188.740 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.188.741 I llama_perf_context_print:        eval time =   10895.46 ms /    32 runs   (  340.48 ms per token,     2.94 tokens per second)
0.12.188.742 I llama_perf_context_print:       total time =   10977.36 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3768 (19514d63)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 198916.86 ms
main:    total time = 198916.87 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.642 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.846 I main: llama backend init
0.00.002.816 I main: load the model and apply lora adapter, if any
0.00.026.068 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.026.167 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.026.182 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.026.186 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.026.190 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.026.191 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.026.193 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.026.194 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.026.194 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.026.195 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.026.201 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.026.202 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.026.203 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.026.204 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.026.205 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.098.110 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.186.428 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.198.459 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.198.466 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.198.467 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.198.468 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.198.468 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.198.469 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.198.470 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.198.473 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.198.474 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.198.481 I llama_model_loader: - type  f32:   37 tensors
0.00.198.485 I llama_model_loader: - type q4_K:  108 tensors
0.00.198.486 I llama_model_loader: - type q6_K:   19 tensors
0.00.477.294 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.478.424 I llm_load_vocab: special tokens cache size = 5
0.00.535.470 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.535.538 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.535.539 I llm_load_print_meta: arch             = gemma
0.00.535.539 I llm_load_print_meta: vocab type       = SPM
0.00.535.540 I llm_load_print_meta: n_vocab          = 256000
0.00.535.543 I llm_load_print_meta: n_merges         = 0
0.00.535.543 I llm_load_print_meta: vocab_only       = 0
0.00.535.543 I llm_load_print_meta: n_ctx_train      = 8192
0.00.535.544 I llm_load_print_meta: n_embd           = 2048
0.00.535.544 I llm_load_print_meta: n_layer          = 18
0.00.535.579 I llm_load_print_meta: n_head           = 8
0.00.535.586 I llm_load_print_meta: n_head_kv        = 1
0.00.535.586 I llm_load_print_meta: n_rot            = 256
0.00.535.587 I llm_load_print_meta: n_swa            = 0
0.00.535.587 I llm_load_print_meta: n_embd_head_k    = 256
0.00.535.587 I llm_load_print_meta: n_embd_head_v    = 256
0.00.535.591 I llm_load_print_meta: n_gqa            = 8
0.00.535.596 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.535.601 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.535.602 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.535.603 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.535.604 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.535.604 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.535.605 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.535.609 I llm_load_print_meta: n_ff             = 16384
0.00.535.610 I llm_load_print_meta: n_expert         = 0
0.00.535.610 I llm_load_print_meta: n_expert_used    = 0
0.00.535.610 I llm_load_print_meta: causal attn      = 1
0.00.535.611 I llm_load_print_meta: pooling type     = 0
0.00.535.611 I llm_load_print_meta: rope type        = 2
0.00.535.611 I llm_load_print_meta: rope scaling     = linear
0.00.535.613 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.535.613 I llm_load_print_meta: freq_scale_train = 1
0.00.535.614 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.535.614 I llm_load_print_meta: rope_finetuned   = unknown
0.00.535.615 I llm_load_print_meta: ssm_d_conv       = 0
0.00.535.615 I llm_load_print_meta: ssm_d_inner      = 0
0.00.535.616 I llm_load_print_meta: ssm_d_state      = 0
0.00.535.616 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.535.616 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.535.617 I llm_load_print_meta: model type       = 2B
0.00.535.618 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.535.618 I llm_load_print_meta: model params     = 2.51 B
0.00.535.619 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.535.619 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.535.620 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.535.620 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.535.621 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.535.621 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.535.622 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.535.622 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.535.622 I llm_load_print_meta: max token length = 93
0.00.535.802 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.592.141 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.597.710 I llama_new_context_with_model: n_ctx      = 8192
0.00.597.717 I llama_new_context_with_model: n_batch    = 2048
0.00.597.718 I llama_new_context_with_model: n_ubatch   = 512
0.00.597.718 I llama_new_context_with_model: flash_attn = 0
0.00.597.721 I llama_new_context_with_model: freq_base  = 10000.0
0.00.597.722 I llama_new_context_with_model: freq_scale = 1
0.00.628.256 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.628.300 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.628.408 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.629.807 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.629.813 I llama_new_context_with_model: graph nodes  = 601
0.00.629.813 I llama_new_context_with_model: graph splits = 1
0.00.629.827 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.210.132 I main: llama threadpool init, n_threads = 4
0.01.210.143 I 
0.01.210.236 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.210.239 I 
0.01.210.419 I sampler seed: 3158961367
0.01.210.430 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.210.435 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.210.436 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically. I am unable to understand your question. Please rephrase it or provide additional context. [end of text]


0.08.334.971 I llama_perf_sampler_print:    sampling time =      32.26 ms /    22 runs   (    1.47 ms per token,   681.87 tokens per second)
0.08.334.975 I llama_perf_context_print:        load time =    1207.23 ms
0.08.334.987 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.08.334.989 I llama_perf_context_print:        eval time =    7070.79 ms /    21 runs   (  336.70 ms per token,     2.97 tokens per second)
0.08.334.991 I llama_perf_context_print:       total time =    7124.85 ms /    22 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m1.141s
user	49m52.811s
sys	0m6.331s
