+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.569 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.755 I main: llama backend init
0.00.001.842 I main: load the model and apply lora adapter, if any
0.00.022.307 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.355 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.365 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.370 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.374 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.378 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.378 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.379 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.380 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.380 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.381 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.385 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.385 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.386 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.386 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.387 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.637 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.112 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.932 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.938 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.939 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.940 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.941 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.942 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.943 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.947 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.947 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.948 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.949 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.950 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.954 I llama_model_loader: - type  f32:   37 tensors
0.00.131.956 I llama_model_loader: - type q8_0:  127 tensors
0.00.198.625 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.199.404 I llm_load_vocab: special tokens cache size = 5
0.00.217.954 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.217.969 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.217.969 I llm_load_print_meta: arch             = gemma
0.00.217.970 I llm_load_print_meta: vocab type       = SPM
0.00.217.970 I llm_load_print_meta: n_vocab          = 256000
0.00.217.971 I llm_load_print_meta: n_merges         = 0
0.00.217.971 I llm_load_print_meta: vocab_only       = 0
0.00.217.971 I llm_load_print_meta: n_ctx_train      = 8192
0.00.217.972 I llm_load_print_meta: n_embd           = 2048
0.00.217.972 I llm_load_print_meta: n_layer          = 18
0.00.217.984 I llm_load_print_meta: n_head           = 8
0.00.217.985 I llm_load_print_meta: n_head_kv        = 1
0.00.217.986 I llm_load_print_meta: n_rot            = 256
0.00.217.986 I llm_load_print_meta: n_swa            = 0
0.00.217.986 I llm_load_print_meta: n_embd_head_k    = 256
0.00.217.987 I llm_load_print_meta: n_embd_head_v    = 256
0.00.217.988 I llm_load_print_meta: n_gqa            = 8
0.00.217.989 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.217.990 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.217.991 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.217.992 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.217.992 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.217.993 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.217.993 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.217.994 I llm_load_print_meta: n_ff             = 16384
0.00.217.994 I llm_load_print_meta: n_expert         = 0
0.00.217.994 I llm_load_print_meta: n_expert_used    = 0
0.00.217.995 I llm_load_print_meta: causal attn      = 1
0.00.217.995 I llm_load_print_meta: pooling type     = 0
0.00.217.995 I llm_load_print_meta: rope type        = 2
0.00.217.996 I llm_load_print_meta: rope scaling     = linear
0.00.217.997 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.217.998 I llm_load_print_meta: freq_scale_train = 1
0.00.217.998 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.217.999 I llm_load_print_meta: rope_finetuned   = unknown
0.00.217.999 I llm_load_print_meta: ssm_d_conv       = 0
0.00.217.999 I llm_load_print_meta: ssm_d_inner      = 0
0.00.218.000 I llm_load_print_meta: ssm_d_state      = 0
0.00.218.000 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.218.000 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.218.000 I llm_load_print_meta: model type       = 2B
0.00.218.001 I llm_load_print_meta: model ftype      = Q8_0
0.00.218.002 I llm_load_print_meta: model params     = 2.51 B
0.00.218.002 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.218.003 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.218.003 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.218.004 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.218.004 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.218.004 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.218.005 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.218.005 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.218.006 I llm_load_print_meta: max token length = 93
0.00.218.025 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.317.163 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.317.171 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.317.172 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.317.172 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.317.173 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.317.173 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.322.325 I llama_new_context_with_model: n_ctx      = 8192
0.00.322.331 I llama_new_context_with_model: n_batch    = 2048
0.00.322.331 I llama_new_context_with_model: n_ubatch   = 512
0.00.322.332 I llama_new_context_with_model: flash_attn = 0
0.00.322.334 I llama_new_context_with_model: freq_base  = 10000.0
0.00.322.335 I llama_new_context_with_model: freq_scale = 1
0.00.352.778 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.352.792 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.352.892 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.353.770 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.353.779 I llama_new_context_with_model: graph nodes  = 601
0.00.353.779 I llama_new_context_with_model: graph splits = 1
0.00.353.781 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.444.975 I main: llama threadpool init, n_threads = 4
0.00.444.987 I 
0.00.445.056 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.445.060 I 
0.00.445.096 I sampler seed: 3327739488
0.00.445.105 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.445.107 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.445.108 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasements.

I cannot find the requested information in the provided context. Therefore, I am unable to provide an answer. [end of text]


0.02.287.285 I llama_perf_sampler_print:    sampling time =       4.10 ms /    27 runs   (    0.15 ms per token,  6585.37 tokens per second)
0.02.287.287 I llama_perf_context_print:        load time =     443.12 ms
0.02.287.288 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.287.290 I llama_perf_context_print:        eval time =    1826.83 ms /    26 runs   (   70.26 ms per token,    14.23 tokens per second)
0.02.287.290 I llama_perf_context_print:       total time =    1842.32 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.560 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.754 I main: llama backend init
0.00.001.841 I main: load the model and apply lora adapter, if any
0.00.022.058 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.073 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.081 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.082 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.086 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.087 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.087 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.088 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.088 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.089 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.093 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.094 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.094 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.095 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.095 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.184 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.663 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.554 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.561 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.562 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.563 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.563 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.565 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.566 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.569 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.570 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.571 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.572 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.131.574 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.578 I llama_model_loader: - type  f32:   37 tensors
0.00.131.581 I llama_model_loader: - type q8_0:  127 tensors
0.00.195.241 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.196.060 I llm_load_vocab: special tokens cache size = 5
0.00.214.563 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.214.578 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.214.579 I llm_load_print_meta: arch             = gemma
0.00.214.579 I llm_load_print_meta: vocab type       = SPM
0.00.214.580 I llm_load_print_meta: n_vocab          = 256000
0.00.214.580 I llm_load_print_meta: n_merges         = 0
0.00.214.580 I llm_load_print_meta: vocab_only       = 0
0.00.214.581 I llm_load_print_meta: n_ctx_train      = 8192
0.00.214.581 I llm_load_print_meta: n_embd           = 2048
0.00.214.581 I llm_load_print_meta: n_layer          = 18
0.00.214.595 I llm_load_print_meta: n_head           = 8
0.00.214.596 I llm_load_print_meta: n_head_kv        = 1
0.00.214.596 I llm_load_print_meta: n_rot            = 256
0.00.214.597 I llm_load_print_meta: n_swa            = 0
0.00.214.597 I llm_load_print_meta: n_embd_head_k    = 256
0.00.214.597 I llm_load_print_meta: n_embd_head_v    = 256
0.00.214.598 I llm_load_print_meta: n_gqa            = 8
0.00.214.599 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.214.600 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.214.601 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.214.602 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.214.603 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.214.603 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.214.603 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.214.604 I llm_load_print_meta: n_ff             = 16384
0.00.214.604 I llm_load_print_meta: n_expert         = 0
0.00.214.605 I llm_load_print_meta: n_expert_used    = 0
0.00.214.605 I llm_load_print_meta: causal attn      = 1
0.00.214.605 I llm_load_print_meta: pooling type     = 0
0.00.214.605 I llm_load_print_meta: rope type        = 2
0.00.214.606 I llm_load_print_meta: rope scaling     = linear
0.00.214.607 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.214.608 I llm_load_print_meta: freq_scale_train = 1
0.00.214.609 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.214.610 I llm_load_print_meta: rope_finetuned   = unknown
0.00.214.610 I llm_load_print_meta: ssm_d_conv       = 0
0.00.214.610 I llm_load_print_meta: ssm_d_inner      = 0
0.00.214.611 I llm_load_print_meta: ssm_d_state      = 0
0.00.214.611 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.214.611 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.214.612 I llm_load_print_meta: model type       = 2B
0.00.214.612 I llm_load_print_meta: model ftype      = Q8_0
0.00.214.613 I llm_load_print_meta: model params     = 2.51 B
0.00.214.614 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.214.614 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.214.615 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.214.615 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.214.616 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.214.616 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.214.617 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.214.617 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.214.617 I llm_load_print_meta: max token length = 93
0.00.214.635 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.311.363 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.316.369 I llama_new_context_with_model: n_ctx      = 8192
0.00.316.375 I llama_new_context_with_model: n_batch    = 2048
0.00.316.376 I llama_new_context_with_model: n_ubatch   = 512
0.00.316.376 I llama_new_context_with_model: flash_attn = 0
0.00.316.379 I llama_new_context_with_model: freq_base  = 10000.0
0.00.316.380 I llama_new_context_with_model: freq_scale = 1
0.00.346.077 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.346.094 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.346.184 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.347.056 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.347.062 I llama_new_context_with_model: graph nodes  = 601
0.00.347.063 I llama_new_context_with_model: graph splits = 1
0.00.347.064 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.435.613 I main: llama threadpool init, n_threads = 4
0.00.435.624 I 
0.00.435.697 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.435.701 I 
0.00.435.737 I sampler seed: 3502417519
0.00.435.747 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.435.750 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.435.750 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increasities. 

I am unable to generate a response that meets your requirements because it contains sexually suggestive language. My purpose is to assist with tasks and questions

0.02.643.179 I llama_perf_sampler_print:    sampling time =       5.04 ms /    33 runs   (    0.15 ms per token,  6547.62 tokens per second)
0.02.643.182 I llama_perf_context_print:        load time =     433.75 ms
0.02.643.184 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.643.186 I llama_perf_context_print:        eval time =    2188.33 ms /    32 runs   (   68.39 ms per token,    14.62 tokens per second)
0.02.643.187 I llama_perf_context_print:       total time =    2207.57 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.603 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.808 I main: llama backend init
0.00.001.898 I main: load the model and apply lora adapter, if any
0.00.022.093 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.143 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.151 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.156 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.157 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.161 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.162 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.162 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.164 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.165 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.165 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.169 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.170 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.171 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.171 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.172 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.760 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.188 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.133.139 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.133.145 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.133.146 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.133.146 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.133.147 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.133.148 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.133.149 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.133.151 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.133.152 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.133.152 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.133.153 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.133.153 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.133.157 I llama_model_loader: - type  f32:   37 tensors
0.00.133.160 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.753 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.204.544 I llm_load_vocab: special tokens cache size = 5
0.00.223.075 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.223.089 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.223.090 I llm_load_print_meta: arch             = gemma
0.00.223.090 I llm_load_print_meta: vocab type       = SPM
0.00.223.091 I llm_load_print_meta: n_vocab          = 256000
0.00.223.091 I llm_load_print_meta: n_merges         = 0
0.00.223.092 I llm_load_print_meta: vocab_only       = 0
0.00.223.092 I llm_load_print_meta: n_ctx_train      = 8192
0.00.223.092 I llm_load_print_meta: n_embd           = 2048
0.00.223.093 I llm_load_print_meta: n_layer          = 18
0.00.223.104 I llm_load_print_meta: n_head           = 8
0.00.223.105 I llm_load_print_meta: n_head_kv        = 1
0.00.223.105 I llm_load_print_meta: n_rot            = 256
0.00.223.106 I llm_load_print_meta: n_swa            = 0
0.00.223.106 I llm_load_print_meta: n_embd_head_k    = 256
0.00.223.107 I llm_load_print_meta: n_embd_head_v    = 256
0.00.223.107 I llm_load_print_meta: n_gqa            = 8
0.00.223.108 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.223.109 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.223.110 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.223.111 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.223.112 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.223.112 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.223.113 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.223.114 I llm_load_print_meta: n_ff             = 16384
0.00.223.114 I llm_load_print_meta: n_expert         = 0
0.00.223.114 I llm_load_print_meta: n_expert_used    = 0
0.00.223.114 I llm_load_print_meta: causal attn      = 1
0.00.223.115 I llm_load_print_meta: pooling type     = 0
0.00.223.115 I llm_load_print_meta: rope type        = 2
0.00.223.115 I llm_load_print_meta: rope scaling     = linear
0.00.223.117 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.223.118 I llm_load_print_meta: freq_scale_train = 1
0.00.223.118 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.223.119 I llm_load_print_meta: rope_finetuned   = unknown
0.00.223.119 I llm_load_print_meta: ssm_d_conv       = 0
0.00.223.119 I llm_load_print_meta: ssm_d_inner      = 0
0.00.223.119 I llm_load_print_meta: ssm_d_state      = 0
0.00.223.119 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.223.120 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.223.120 I llm_load_print_meta: model type       = 2B
0.00.223.121 I llm_load_print_meta: model ftype      = Q8_0
0.00.223.122 I llm_load_print_meta: model params     = 2.51 B
0.00.223.123 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.223.123 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.223.123 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.223.124 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.223.124 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.223.124 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.223.125 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.223.125 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.223.126 I llm_load_print_meta: max token length = 93
0.00.223.156 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.297.946 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.297.955 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.297.956 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.297.956 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.297.957 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.297.958 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.303.100 I llama_new_context_with_model: n_ctx      = 8192
0.00.303.106 I llama_new_context_with_model: n_batch    = 2048
0.00.303.107 I llama_new_context_with_model: n_ubatch   = 512
0.00.303.107 I llama_new_context_with_model: flash_attn = 0
0.00.303.110 I llama_new_context_with_model: freq_base  = 10000.0
0.00.303.110 I llama_new_context_with_model: freq_scale = 1
0.00.332.809 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.332.823 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.332.928 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.333.851 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.333.859 I llama_new_context_with_model: graph nodes  = 601
0.00.333.859 I llama_new_context_with_model: graph splits = 1
0.00.333.861 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.427.002 I main: llama threadpool init, n_threads = 4
0.00.427.016 I 
0.00.427.091 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.427.094 I 
0.00.427.122 I sampler seed: 1370440378
0.00.427.131 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.427.142 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.427.143 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically, as the sun descends below the horizon, casting long shadows across the land. [end of text]


0.01.806.984 I llama_perf_sampler_print:    sampling time =       2.83 ms /    20 runs   (    0.14 ms per token,  7077.14 tokens per second)
0.01.806.986 I llama_perf_context_print:        load time =     425.09 ms
0.01.806.987 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.806.989 I llama_perf_context_print:        eval time =    1368.39 ms /    19 runs   (   72.02 ms per token,    13.88 tokens per second)
0.01.806.989 I llama_perf_context_print:       total time =    1379.99 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.528 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.740 I main: llama backend init
0.00.001.871 I main: load the model and apply lora adapter, if any
0.00.021.777 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.826 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.835 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.841 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.842 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.846 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.848 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.849 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.850 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.851 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.851 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.861 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.862 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.863 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.864 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.865 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.048.932 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.211 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.059 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.067 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.068 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.069 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.069 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.070 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.071 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.073 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.074 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.074 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.075 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.132.076 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.080 I llama_model_loader: - type  f32:   37 tensors
0.00.132.083 I llama_model_loader: - type q8_0:  127 tensors
0.00.200.554 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.201.360 I llm_load_vocab: special tokens cache size = 5
0.00.220.013 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.220.027 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.220.028 I llm_load_print_meta: arch             = gemma
0.00.220.028 I llm_load_print_meta: vocab type       = SPM
0.00.220.029 I llm_load_print_meta: n_vocab          = 256000
0.00.220.029 I llm_load_print_meta: n_merges         = 0
0.00.220.030 I llm_load_print_meta: vocab_only       = 0
0.00.220.031 I llm_load_print_meta: n_ctx_train      = 8192
0.00.220.031 I llm_load_print_meta: n_embd           = 2048
0.00.220.031 I llm_load_print_meta: n_layer          = 18
0.00.220.043 I llm_load_print_meta: n_head           = 8
0.00.220.044 I llm_load_print_meta: n_head_kv        = 1
0.00.220.044 I llm_load_print_meta: n_rot            = 256
0.00.220.045 I llm_load_print_meta: n_swa            = 0
0.00.220.045 I llm_load_print_meta: n_embd_head_k    = 256
0.00.220.045 I llm_load_print_meta: n_embd_head_v    = 256
0.00.220.046 I llm_load_print_meta: n_gqa            = 8
0.00.220.047 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.220.048 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.220.049 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.220.050 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.220.050 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.220.050 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.220.051 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.220.052 I llm_load_print_meta: n_ff             = 16384
0.00.220.052 I llm_load_print_meta: n_expert         = 0
0.00.220.052 I llm_load_print_meta: n_expert_used    = 0
0.00.220.052 I llm_load_print_meta: causal attn      = 1
0.00.220.053 I llm_load_print_meta: pooling type     = 0
0.00.220.053 I llm_load_print_meta: rope type        = 2
0.00.220.053 I llm_load_print_meta: rope scaling     = linear
0.00.220.054 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.220.055 I llm_load_print_meta: freq_scale_train = 1
0.00.220.055 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.220.056 I llm_load_print_meta: rope_finetuned   = unknown
0.00.220.056 I llm_load_print_meta: ssm_d_conv       = 0
0.00.220.056 I llm_load_print_meta: ssm_d_inner      = 0
0.00.220.057 I llm_load_print_meta: ssm_d_state      = 0
0.00.220.057 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.220.057 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.220.058 I llm_load_print_meta: model type       = 2B
0.00.220.058 I llm_load_print_meta: model ftype      = Q8_0
0.00.220.059 I llm_load_print_meta: model params     = 2.51 B
0.00.220.060 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.220.060 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.220.061 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.220.061 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.220.062 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.220.062 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.220.062 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.220.063 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.220.063 I llm_load_print_meta: max token length = 93
0.00.220.088 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.290.597 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.290.603 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.295.756 I llama_new_context_with_model: n_ctx      = 8192
0.00.295.763 I llama_new_context_with_model: n_batch    = 2048
0.00.295.764 I llama_new_context_with_model: n_ubatch   = 512
0.00.295.764 I llama_new_context_with_model: flash_attn = 0
0.00.295.767 I llama_new_context_with_model: freq_base  = 10000.0
0.00.295.768 I llama_new_context_with_model: freq_scale = 1
0.00.325.383 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.325.401 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.325.511 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.326.423 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.326.430 I llama_new_context_with_model: graph nodes  = 601
0.00.326.430 I llama_new_context_with_model: graph splits = 1
0.00.326.433 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.431.363 I main: llama threadpool init, n_threads = 4
0.00.431.374 I 
0.00.431.454 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.431.458 I 
0.00.431.494 I sampler seed: 1666311567
0.00.431.506 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.431.514 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.431.515 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increably. [end of text]


0.00.738.560 I llama_perf_sampler_print:    sampling time =       0.63 ms /     5 runs   (    0.13 ms per token,  7898.89 tokens per second)
0.00.738.575 I llama_perf_context_print:        load time =     429.48 ms
0.00.738.576 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.00.738.578 I llama_perf_context_print:        eval time =     303.78 ms /     4 runs   (   75.95 ms per token,    13.17 tokens per second)
0.00.738.580 I llama_perf_context_print:       total time =     307.20 ms /     5 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m17.942s
user	0m25.681s
sys	0m9.523s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3768 (19514d63)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32099.29 ms
main:    total time = 32099.29 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.528 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.724 I main: llama backend init
0.00.001.932 I main: load the model and apply lora adapter, if any
0.00.021.996 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.040 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.048 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.053 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.053 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.056 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.057 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.058 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.058 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.059 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.059 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.062 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.063 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.063 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.064 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.064 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.486 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.582 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.443 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.449 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.449 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.450 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.450 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.451 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.452 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.455 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.455 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.456 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.456 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.457 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.461 I llama_model_loader: - type  f32:   37 tensors
0.00.132.463 I llama_model_loader: - type q4_K:  108 tensors
0.00.132.464 I llama_model_loader: - type q6_K:   19 tensors
0.00.196.894 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.605 I llm_load_vocab: special tokens cache size = 5
0.00.215.927 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.215.941 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.215.941 I llm_load_print_meta: arch             = gemma
0.00.215.942 I llm_load_print_meta: vocab type       = SPM
0.00.215.942 I llm_load_print_meta: n_vocab          = 256000
0.00.215.943 I llm_load_print_meta: n_merges         = 0
0.00.215.943 I llm_load_print_meta: vocab_only       = 0
0.00.215.943 I llm_load_print_meta: n_ctx_train      = 8192
0.00.215.944 I llm_load_print_meta: n_embd           = 2048
0.00.215.944 I llm_load_print_meta: n_layer          = 18
0.00.215.955 I llm_load_print_meta: n_head           = 8
0.00.215.956 I llm_load_print_meta: n_head_kv        = 1
0.00.215.957 I llm_load_print_meta: n_rot            = 256
0.00.215.957 I llm_load_print_meta: n_swa            = 0
0.00.215.958 I llm_load_print_meta: n_embd_head_k    = 256
0.00.215.958 I llm_load_print_meta: n_embd_head_v    = 256
0.00.215.959 I llm_load_print_meta: n_gqa            = 8
0.00.215.960 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.215.961 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.215.961 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.215.963 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.215.963 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.215.963 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.215.964 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.215.964 I llm_load_print_meta: n_ff             = 16384
0.00.215.965 I llm_load_print_meta: n_expert         = 0
0.00.215.965 I llm_load_print_meta: n_expert_used    = 0
0.00.215.965 I llm_load_print_meta: causal attn      = 1
0.00.215.966 I llm_load_print_meta: pooling type     = 0
0.00.215.966 I llm_load_print_meta: rope type        = 2
0.00.215.966 I llm_load_print_meta: rope scaling     = linear
0.00.215.968 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.215.968 I llm_load_print_meta: freq_scale_train = 1
0.00.215.969 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.215.969 I llm_load_print_meta: rope_finetuned   = unknown
0.00.215.969 I llm_load_print_meta: ssm_d_conv       = 0
0.00.215.970 I llm_load_print_meta: ssm_d_inner      = 0
0.00.215.970 I llm_load_print_meta: ssm_d_state      = 0
0.00.215.970 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.215.971 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.215.971 I llm_load_print_meta: model type       = 2B
0.00.215.972 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.215.973 I llm_load_print_meta: model params     = 2.51 B
0.00.215.974 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.215.974 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.215.975 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.215.975 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.215.975 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.215.976 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.215.976 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.215.977 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.215.977 I llm_load_print_meta: max token length = 93
0.00.215.992 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.275.111 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.275.117 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.275.118 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.275.118 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.275.119 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.275.119 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.280.082 I llama_new_context_with_model: n_ctx      = 8192
0.00.280.088 I llama_new_context_with_model: n_batch    = 2048
0.00.280.089 I llama_new_context_with_model: n_ubatch   = 512
0.00.280.089 I llama_new_context_with_model: flash_attn = 0
0.00.280.091 I llama_new_context_with_model: freq_base  = 10000.0
0.00.280.092 I llama_new_context_with_model: freq_scale = 1
0.00.308.921 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.308.937 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.309.037 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.309.931 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.309.938 I llama_new_context_with_model: graph nodes  = 601
0.00.309.939 I llama_new_context_with_model: graph splits = 1
0.00.309.940 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.392.027 I main: llama threadpool init, n_threads = 4
0.00.392.039 I 
0.00.392.116 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.392.119 I 
0.00.392.147 I sampler seed: 2777982407
0.00.392.156 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.392.158 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.392.159 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 increamically, but the time was of no consequence.

What is the meaning of the passage?

The passage conveys a sense of:

a) Time

0.02.017.566 I llama_perf_sampler_print:    sampling time =       4.59 ms /    33 runs   (    0.14 ms per token,  7181.72 tokens per second)
0.02.017.568 I llama_perf_context_print:        load time =     390.08 ms
0.02.017.569 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.017.571 I llama_perf_context_print:        eval time =    1607.74 ms /    32 runs   (   50.24 ms per token,    19.90 tokens per second)
0.02.017.571 I llama_perf_context_print:       total time =    1625.55 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3768 (19514d63)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32040.46 ms
main:    total time = 32040.46 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.469 I build: 3768 (19514d63) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.660 I main: llama backend init
0.00.001.795 I main: load the model and apply lora adapter, if any
0.00.021.948 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.960 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.967 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.968 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.972 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.972 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.973 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.974 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.974 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.974 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.978 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.979 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.979 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.979 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.980 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.198 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.942 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.846 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.853 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.853 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.854 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.855 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.856 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.857 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.860 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.860 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.864 I llama_model_loader: - type  f32:   37 tensors
0.00.131.866 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.867 I llama_model_loader: - type q6_K:   19 tensors
0.00.197.166 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.197.893 I llm_load_vocab: special tokens cache size = 5
0.00.216.388 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.216.402 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.216.403 I llm_load_print_meta: arch             = gemma
0.00.216.403 I llm_load_print_meta: vocab type       = SPM
0.00.216.404 I llm_load_print_meta: n_vocab          = 256000
0.00.216.405 I llm_load_print_meta: n_merges         = 0
0.00.216.405 I llm_load_print_meta: vocab_only       = 0
0.00.216.405 I llm_load_print_meta: n_ctx_train      = 8192
0.00.216.406 I llm_load_print_meta: n_embd           = 2048
0.00.216.406 I llm_load_print_meta: n_layer          = 18
0.00.216.418 I llm_load_print_meta: n_head           = 8
0.00.216.419 I llm_load_print_meta: n_head_kv        = 1
0.00.216.419 I llm_load_print_meta: n_rot            = 256
0.00.216.419 I llm_load_print_meta: n_swa            = 0
0.00.216.419 I llm_load_print_meta: n_embd_head_k    = 256
0.00.216.420 I llm_load_print_meta: n_embd_head_v    = 256
0.00.216.421 I llm_load_print_meta: n_gqa            = 8
0.00.216.422 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.216.422 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.216.423 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.216.425 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.216.425 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.216.425 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.216.426 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.216.427 I llm_load_print_meta: n_ff             = 16384
0.00.216.427 I llm_load_print_meta: n_expert         = 0
0.00.216.427 I llm_load_print_meta: n_expert_used    = 0
0.00.216.428 I llm_load_print_meta: causal attn      = 1
0.00.216.428 I llm_load_print_meta: pooling type     = 0
0.00.216.428 I llm_load_print_meta: rope type        = 2
0.00.216.428 I llm_load_print_meta: rope scaling     = linear
0.00.216.430 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.216.431 I llm_load_print_meta: freq_scale_train = 1
0.00.216.432 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.216.433 I llm_load_print_meta: rope_finetuned   = unknown
0.00.216.433 I llm_load_print_meta: ssm_d_conv       = 0
0.00.216.433 I llm_load_print_meta: ssm_d_inner      = 0
0.00.216.434 I llm_load_print_meta: ssm_d_state      = 0
0.00.216.435 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.216.435 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.216.435 I llm_load_print_meta: model type       = 2B
0.00.216.436 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.216.437 I llm_load_print_meta: model params     = 2.51 B
0.00.216.437 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.216.438 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.216.438 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.216.438 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.216.439 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.216.439 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.216.440 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.216.440 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.216.440 I llm_load_print_meta: max token length = 93
0.00.216.457 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.272.770 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.277.684 I llama_new_context_with_model: n_ctx      = 8192
0.00.277.690 I llama_new_context_with_model: n_batch    = 2048
0.00.277.690 I llama_new_context_with_model: n_ubatch   = 512
0.00.277.691 I llama_new_context_with_model: flash_attn = 0
0.00.277.692 I llama_new_context_with_model: freq_base  = 10000.0
0.00.277.693 I llama_new_context_with_model: freq_scale = 1
0.00.307.925 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.307.940 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.308.034 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.308.876 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.308.884 I llama_new_context_with_model: graph nodes  = 601
0.00.308.884 I llama_new_context_with_model: graph splits = 1
0.00.308.886 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.389.192 I main: llama threadpool init, n_threads = 4
0.00.389.204 I 
0.00.389.276 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.389.276 I 
0.00.389.303 I sampler seed: 3383727448
0.00.389.309 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.389.312 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.00.389.313 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1

 seconally.

**Answer:** I am not able to provide medical or health advice, including medication or treatment recommendations. For medical advice, please consult a qualified

0.02.000.052 I llama_perf_sampler_print:    sampling time =       4.65 ms /    33 runs   (    0.14 ms per token,  7101.36 tokens per second)
0.02.000.055 I llama_perf_context_print:        load time =     387.38 ms
0.02.000.056 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.000.057 I llama_perf_context_print:        eval time =    1593.17 ms /    32 runs   (   49.79 ms per token,    20.09 tokens per second)
0.02.000.058 I llama_perf_context_print:       total time =    1610.87 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.997s
user	8m14.760s
sys	0m6.958s
