+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.591 I build: 3964 (1905ba1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.817 I main: llama backend init
0.00.001.961 I main: load the model and apply lora adapter, if any
0.00.022.264 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.328 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.336 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.342 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.343 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.348 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.352 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.353 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.354 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.355 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.356 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.361 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.371 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.372 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.373 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.374 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.746 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.003 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.829 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.835 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.836 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.836 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.837 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.838 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.838 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.841 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.841 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.841 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.842 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.132.843 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.847 I llama_model_loader: - type  f32:   37 tensors
0.00.132.850 I llama_model_loader: - type q8_0:  127 tensors
0.00.211.162 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.253.864 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.254.405 I llm_load_vocab: special tokens cache size = 5
0.00.275.322 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.275.338 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.275.339 I llm_load_print_meta: arch             = gemma
0.00.275.340 I llm_load_print_meta: vocab type       = SPM
0.00.275.340 I llm_load_print_meta: n_vocab          = 256000
0.00.275.341 I llm_load_print_meta: n_merges         = 0
0.00.275.341 I llm_load_print_meta: vocab_only       = 0
0.00.275.341 I llm_load_print_meta: n_ctx_train      = 8192
0.00.275.341 I llm_load_print_meta: n_embd           = 2048
0.00.275.342 I llm_load_print_meta: n_layer          = 18
0.00.275.353 I llm_load_print_meta: n_head           = 8
0.00.275.354 I llm_load_print_meta: n_head_kv        = 1
0.00.275.355 I llm_load_print_meta: n_rot            = 256
0.00.275.355 I llm_load_print_meta: n_swa            = 0
0.00.275.355 I llm_load_print_meta: n_embd_head_k    = 256
0.00.275.356 I llm_load_print_meta: n_embd_head_v    = 256
0.00.275.357 I llm_load_print_meta: n_gqa            = 8
0.00.275.358 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.275.359 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.275.360 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.275.361 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.275.361 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.275.362 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.275.362 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.275.363 I llm_load_print_meta: n_ff             = 16384
0.00.275.363 I llm_load_print_meta: n_expert         = 0
0.00.275.363 I llm_load_print_meta: n_expert_used    = 0
0.00.275.364 I llm_load_print_meta: causal attn      = 1
0.00.275.364 I llm_load_print_meta: pooling type     = 0
0.00.275.364 I llm_load_print_meta: rope type        = 2
0.00.275.365 I llm_load_print_meta: rope scaling     = linear
0.00.275.366 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.275.367 I llm_load_print_meta: freq_scale_train = 1
0.00.275.367 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.275.367 I llm_load_print_meta: rope_finetuned   = unknown
0.00.275.368 I llm_load_print_meta: ssm_d_conv       = 0
0.00.275.368 I llm_load_print_meta: ssm_d_inner      = 0
0.00.275.368 I llm_load_print_meta: ssm_d_state      = 0
0.00.275.368 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.275.369 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.275.369 I llm_load_print_meta: model type       = 2B
0.00.275.370 I llm_load_print_meta: model ftype      = Q8_0
0.00.275.370 I llm_load_print_meta: model params     = 2.51 B
0.00.275.371 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.275.371 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.275.372 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.275.372 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.275.373 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.275.373 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.275.373 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.275.374 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.275.374 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.275.374 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.275.375 I llm_load_print_meta: max token length = 93
0.00.275.400 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.376.987 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.376.995 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.376.996 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.376.996 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.376.997 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.376.997 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.382.146 I llama_new_context_with_model: n_ctx      = 8192
0.00.382.153 I llama_new_context_with_model: n_batch    = 2048
0.00.382.153 I llama_new_context_with_model: n_ubatch   = 512
0.00.382.154 I llama_new_context_with_model: flash_attn = 0
0.00.382.156 I llama_new_context_with_model: freq_base  = 10000.0
0.00.382.157 I llama_new_context_with_model: freq_scale = 1
0.00.410.858 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.410.873 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.410.969 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.411.863 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.411.871 I llama_new_context_with_model: graph nodes  = 601
0.00.411.871 I llama_new_context_with_model: graph splits = 1
0.00.411.873 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.502.200 I main: llama threadpool init, n_threads = 4
0.00.502.213 I 
0.00.502.302 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.502.305 I 
0.00.502.348 I sampler seed: 54000221
0.00.502.359 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.502.363 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.502.364 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.502.364 I 
 increasels, the creatures that haunt the swamps.

The rustling reeds and the gurgling water were the only sounds to be heard. A deep, gutt

0.02.741.884 I llama_perf_sampler_print:    sampling time =       4.99 ms /    33 runs   (    0.15 ms per token,  6619.86 tokens per second)
0.02.741.887 I llama_perf_context_print:        load time =     500.22 ms
0.02.741.888 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.741.889 I llama_perf_context_print:        eval time =    2220.38 ms /    32 runs   (   69.39 ms per token,    14.41 tokens per second)
0.02.741.890 I llama_perf_context_print:       total time =    2239.69 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.568 I build: 3964 (1905ba1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.773 I main: llama backend init
0.00.001.915 I main: load the model and apply lora adapter, if any
0.00.022.004 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.022.015 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.022 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.023 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.027 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.028 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.029 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.030 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.030 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.031 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.036 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.037 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.038 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.039 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.040 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.611 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.433 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.310 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.317 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.318 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.319 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.319 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.320 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.321 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.323 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.323 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.324 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.324 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.132.326 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.329 I llama_model_loader: - type  f32:   37 tensors
0.00.132.333 I llama_model_loader: - type q8_0:  127 tensors
0.00.209.965 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.257.904 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.258.515 I llm_load_vocab: special tokens cache size = 5
0.00.279.449 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.279.464 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.279.465 I llm_load_print_meta: arch             = gemma
0.00.279.466 I llm_load_print_meta: vocab type       = SPM
0.00.279.466 I llm_load_print_meta: n_vocab          = 256000
0.00.279.466 I llm_load_print_meta: n_merges         = 0
0.00.279.467 I llm_load_print_meta: vocab_only       = 0
0.00.279.467 I llm_load_print_meta: n_ctx_train      = 8192
0.00.279.467 I llm_load_print_meta: n_embd           = 2048
0.00.279.468 I llm_load_print_meta: n_layer          = 18
0.00.279.478 I llm_load_print_meta: n_head           = 8
0.00.279.479 I llm_load_print_meta: n_head_kv        = 1
0.00.279.479 I llm_load_print_meta: n_rot            = 256
0.00.279.480 I llm_load_print_meta: n_swa            = 0
0.00.279.480 I llm_load_print_meta: n_embd_head_k    = 256
0.00.279.480 I llm_load_print_meta: n_embd_head_v    = 256
0.00.279.481 I llm_load_print_meta: n_gqa            = 8
0.00.279.482 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.279.483 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.279.484 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.279.485 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.279.485 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.279.486 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.279.486 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.279.487 I llm_load_print_meta: n_ff             = 16384
0.00.279.487 I llm_load_print_meta: n_expert         = 0
0.00.279.488 I llm_load_print_meta: n_expert_used    = 0
0.00.279.488 I llm_load_print_meta: causal attn      = 1
0.00.279.488 I llm_load_print_meta: pooling type     = 0
0.00.279.488 I llm_load_print_meta: rope type        = 2
0.00.279.489 I llm_load_print_meta: rope scaling     = linear
0.00.279.490 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.279.491 I llm_load_print_meta: freq_scale_train = 1
0.00.279.491 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.279.492 I llm_load_print_meta: rope_finetuned   = unknown
0.00.279.492 I llm_load_print_meta: ssm_d_conv       = 0
0.00.279.492 I llm_load_print_meta: ssm_d_inner      = 0
0.00.279.492 I llm_load_print_meta: ssm_d_state      = 0
0.00.279.493 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.279.493 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.279.493 I llm_load_print_meta: model type       = 2B
0.00.279.494 I llm_load_print_meta: model ftype      = Q8_0
0.00.279.494 I llm_load_print_meta: model params     = 2.51 B
0.00.279.495 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.279.496 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.279.496 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.279.496 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.279.497 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.279.497 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.279.497 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.279.497 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.279.498 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.279.498 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.279.498 I llm_load_print_meta: max token length = 93
0.00.279.519 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.372.836 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.377.902 I llama_new_context_with_model: n_ctx      = 8192
0.00.377.909 I llama_new_context_with_model: n_batch    = 2048
0.00.377.909 I llama_new_context_with_model: n_ubatch   = 512
0.00.377.910 I llama_new_context_with_model: flash_attn = 0
0.00.377.912 I llama_new_context_with_model: freq_base  = 10000.0
0.00.377.913 I llama_new_context_with_model: freq_scale = 1
0.00.406.937 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.406.951 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.407.044 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.407.901 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.407.909 I llama_new_context_with_model: graph nodes  = 601
0.00.407.910 I llama_new_context_with_model: graph splits = 1
0.00.407.912 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.495.409 I main: llama threadpool init, n_threads = 4
0.00.495.423 I 
0.00.495.519 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.495.523 I 
0.00.495.571 I sampler seed: 4016637888
0.00.495.582 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.495.587 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.495.587 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.495.587 I 
 increasively in complexity, and you need to explain the reasoning behind the increased complexity.

1. A simple calculator with addition and subtraction functions.
2.

0.02.659.748 I llama_perf_sampler_print:    sampling time =       4.90 ms /    33 runs   (    0.15 ms per token,  6737.44 tokens per second)
0.02.659.751 I llama_perf_context_print:        load time =     493.47 ms
0.02.659.752 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.659.754 I llama_perf_context_print:        eval time =    2144.53 ms /    32 runs   (   67.02 ms per token,    14.92 tokens per second)
0.02.659.755 I llama_perf_context_print:       total time =    2164.35 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.535 I build: 3964 (1905ba1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.733 I main: llama backend init
0.00.001.850 I main: load the model and apply lora adapter, if any
0.00.021.961 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.022.011 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.022.018 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.023 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.024 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.027 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.028 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.028 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.029 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.029 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.030 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.034 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.035 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.036 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.036 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.022.037 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.278 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.126.134 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.132.945 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.132.951 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.132.952 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.132.953 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.132.953 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.132.954 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.132.954 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.132.957 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.132.957 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.132.958 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.132.959 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.132.960 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.132.963 I llama_model_loader: - type  f32:   37 tensors
0.00.132.966 I llama_model_loader: - type q8_0:  127 tensors
0.00.206.603 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.247.110 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.247.693 I llm_load_vocab: special tokens cache size = 5
0.00.268.711 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.268.729 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.268.729 I llm_load_print_meta: arch             = gemma
0.00.268.730 I llm_load_print_meta: vocab type       = SPM
0.00.268.731 I llm_load_print_meta: n_vocab          = 256000
0.00.268.731 I llm_load_print_meta: n_merges         = 0
0.00.268.731 I llm_load_print_meta: vocab_only       = 0
0.00.268.732 I llm_load_print_meta: n_ctx_train      = 8192
0.00.268.732 I llm_load_print_meta: n_embd           = 2048
0.00.268.732 I llm_load_print_meta: n_layer          = 18
0.00.268.743 I llm_load_print_meta: n_head           = 8
0.00.268.744 I llm_load_print_meta: n_head_kv        = 1
0.00.268.744 I llm_load_print_meta: n_rot            = 256
0.00.268.745 I llm_load_print_meta: n_swa            = 0
0.00.268.745 I llm_load_print_meta: n_embd_head_k    = 256
0.00.268.745 I llm_load_print_meta: n_embd_head_v    = 256
0.00.268.746 I llm_load_print_meta: n_gqa            = 8
0.00.268.747 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.268.748 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.268.749 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.268.750 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.268.750 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.268.751 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.268.751 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.268.752 I llm_load_print_meta: n_ff             = 16384
0.00.268.752 I llm_load_print_meta: n_expert         = 0
0.00.268.753 I llm_load_print_meta: n_expert_used    = 0
0.00.268.753 I llm_load_print_meta: causal attn      = 1
0.00.268.753 I llm_load_print_meta: pooling type     = 0
0.00.268.754 I llm_load_print_meta: rope type        = 2
0.00.268.754 I llm_load_print_meta: rope scaling     = linear
0.00.268.756 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.268.756 I llm_load_print_meta: freq_scale_train = 1
0.00.268.757 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.268.757 I llm_load_print_meta: rope_finetuned   = unknown
0.00.268.757 I llm_load_print_meta: ssm_d_conv       = 0
0.00.268.757 I llm_load_print_meta: ssm_d_inner      = 0
0.00.268.758 I llm_load_print_meta: ssm_d_state      = 0
0.00.268.758 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.268.758 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.268.759 I llm_load_print_meta: model type       = 2B
0.00.268.760 I llm_load_print_meta: model ftype      = Q8_0
0.00.268.761 I llm_load_print_meta: model params     = 2.51 B
0.00.268.761 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.268.762 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.268.762 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.268.763 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.268.763 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.268.763 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.268.764 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.268.764 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.268.764 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.268.765 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.268.765 I llm_load_print_meta: max token length = 93
0.00.268.784 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.345.746 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.345.753 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.345.754 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.345.755 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.345.755 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.345.756 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.350.742 I llama_new_context_with_model: n_ctx      = 8192
0.00.350.748 I llama_new_context_with_model: n_batch    = 2048
0.00.350.748 I llama_new_context_with_model: n_ubatch   = 512
0.00.350.749 I llama_new_context_with_model: flash_attn = 0
0.00.350.751 I llama_new_context_with_model: freq_base  = 10000.0
0.00.350.752 I llama_new_context_with_model: freq_scale = 1
0.00.378.985 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.379.001 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.379.093 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.380.024 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.380.034 I llama_new_context_with_model: graph nodes  = 601
0.00.380.034 I llama_new_context_with_model: graph splits = 1
0.00.380.036 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.474.304 I main: llama threadpool init, n_threads = 4
0.00.474.320 I 
0.00.474.409 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.474.412 I 
0.00.474.455 I sampler seed: 3254936252
0.00.474.465 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.474.468 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.474.469 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.474.469 I 
 increasities, and the complexities of human interaction are depicted in a nuanced and evocative way. [end of text]


0.01.814.312 I llama_perf_sampler_print:    sampling time =       3.25 ms /    20 runs   (    0.16 ms per token,  6148.17 tokens per second)
0.01.814.315 I llama_perf_context_print:        load time =     472.43 ms
0.01.814.316 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.814.317 I llama_perf_context_print:        eval time =    1327.85 ms /    19 runs   (   69.89 ms per token,    14.31 tokens per second)
0.01.814.318 I llama_perf_context_print:       total time =    1340.02 ms /    20 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.576 I build: 3964 (1905ba1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.770 I main: llama backend init
0.00.001.895 I main: load the model and apply lora adapter, if any
0.00.021.809 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.021.854 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.021.866 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.873 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.874 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.879 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.882 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.883 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.883 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.884 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.884 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.888 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.889 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.889 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.890 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.021.890 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.466 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.124.719 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.493 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.499 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.499 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.500 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.501 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.501 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.502 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.504 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.505 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.505 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.506 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.131.507 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.510 I llama_model_loader: - type  f32:   37 tensors
0.00.131.513 I llama_model_loader: - type q8_0:  127 tensors
0.00.203.953 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.329 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.834 I llm_load_vocab: special tokens cache size = 5
0.00.265.871 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.887 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.888 I llm_load_print_meta: arch             = gemma
0.00.265.889 I llm_load_print_meta: vocab type       = SPM
0.00.265.889 I llm_load_print_meta: n_vocab          = 256000
0.00.265.890 I llm_load_print_meta: n_merges         = 0
0.00.265.890 I llm_load_print_meta: vocab_only       = 0
0.00.265.890 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.891 I llm_load_print_meta: n_embd           = 2048
0.00.265.891 I llm_load_print_meta: n_layer          = 18
0.00.265.902 I llm_load_print_meta: n_head           = 8
0.00.265.903 I llm_load_print_meta: n_head_kv        = 1
0.00.265.903 I llm_load_print_meta: n_rot            = 256
0.00.265.904 I llm_load_print_meta: n_swa            = 0
0.00.265.904 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.904 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.905 I llm_load_print_meta: n_gqa            = 8
0.00.265.906 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.907 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.908 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.909 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.909 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.910 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.910 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.911 I llm_load_print_meta: n_ff             = 16384
0.00.265.911 I llm_load_print_meta: n_expert         = 0
0.00.265.911 I llm_load_print_meta: n_expert_used    = 0
0.00.265.912 I llm_load_print_meta: causal attn      = 1
0.00.265.912 I llm_load_print_meta: pooling type     = 0
0.00.265.912 I llm_load_print_meta: rope type        = 2
0.00.265.913 I llm_load_print_meta: rope scaling     = linear
0.00.265.914 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.914 I llm_load_print_meta: freq_scale_train = 1
0.00.265.915 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.915 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.915 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.915 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.916 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.916 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.916 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.917 I llm_load_print_meta: model type       = 2B
0.00.265.917 I llm_load_print_meta: model ftype      = Q8_0
0.00.265.918 I llm_load_print_meta: model params     = 2.51 B
0.00.265.919 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.265.919 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.919 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.920 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.920 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.920 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.921 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.921 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.921 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.922 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.922 I llm_load_print_meta: max token length = 93
0.00.265.943 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.336.095 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.336.102 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.341.015 I llama_new_context_with_model: n_ctx      = 8192
0.00.341.021 I llama_new_context_with_model: n_batch    = 2048
0.00.341.022 I llama_new_context_with_model: n_ubatch   = 512
0.00.341.022 I llama_new_context_with_model: flash_attn = 0
0.00.341.024 I llama_new_context_with_model: freq_base  = 10000.0
0.00.341.025 I llama_new_context_with_model: freq_scale = 1
0.00.369.943 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.369.958 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.370.052 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.370.910 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.370.918 I llama_new_context_with_model: graph nodes  = 601
0.00.370.918 I llama_new_context_with_model: graph splits = 1
0.00.370.920 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.467.497 I main: llama threadpool init, n_threads = 4
0.00.467.514 I 
0.00.467.598 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.467.603 I 
0.00.467.649 I sampler seed: 1487915395
0.00.467.660 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.467.663 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.467.663 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.467.663 I 
 increasities to provide a captivating and memorable experience for players. [end of text]


0.01.452.071 I llama_perf_sampler_print:    sampling time =       2.23 ms /    14 runs   (    0.16 ms per token,  6286.48 tokens per second)
0.01.452.074 I llama_perf_context_print:        load time =     465.58 ms
0.01.452.078 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.452.081 I llama_perf_context_print:        eval time =     975.18 ms /    13 runs   (   75.01 ms per token,    13.33 tokens per second)
0.01.452.082 I llama_perf_context_print:       total time =     984.58 ms /    14 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	0m18.808s
user	0m29.789s
sys	0m9.385s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-release/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3964 (1905ba1a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 32073.44 ms
main:    total time = 32073.44 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.557 I build: 3964 (1905ba1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.752 I main: llama backend init
0.00.001.867 I main: load the model and apply lora adapter, if any
0.00.022.036 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.022.086 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.022.098 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.022.103 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.022.103 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.022.108 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.022.109 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.022.110 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.022.110 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.022.111 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.022.111 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.022.115 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.022.116 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.022.116 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.022.117 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.022.117 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.050.184 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.139 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.904 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.910 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.911 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.911 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.912 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.913 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.913 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.915 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.916 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.916 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.131.917 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.131.918 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.131.921 I llama_model_loader: - type  f32:   37 tensors
0.00.131.924 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.925 I llama_model_loader: - type q6_K:   19 tensors
0.00.204.007 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.244.421 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.244.938 I llm_load_vocab: special tokens cache size = 5
0.00.265.945 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.265.961 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.265.962 I llm_load_print_meta: arch             = gemma
0.00.265.962 I llm_load_print_meta: vocab type       = SPM
0.00.265.963 I llm_load_print_meta: n_vocab          = 256000
0.00.265.963 I llm_load_print_meta: n_merges         = 0
0.00.265.963 I llm_load_print_meta: vocab_only       = 0
0.00.265.964 I llm_load_print_meta: n_ctx_train      = 8192
0.00.265.964 I llm_load_print_meta: n_embd           = 2048
0.00.265.964 I llm_load_print_meta: n_layer          = 18
0.00.265.977 I llm_load_print_meta: n_head           = 8
0.00.265.977 I llm_load_print_meta: n_head_kv        = 1
0.00.265.978 I llm_load_print_meta: n_rot            = 256
0.00.265.978 I llm_load_print_meta: n_swa            = 0
0.00.265.978 I llm_load_print_meta: n_embd_head_k    = 256
0.00.265.979 I llm_load_print_meta: n_embd_head_v    = 256
0.00.265.980 I llm_load_print_meta: n_gqa            = 8
0.00.265.981 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.265.981 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.265.982 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.265.983 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.265.983 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.265.984 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.265.984 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.265.985 I llm_load_print_meta: n_ff             = 16384
0.00.265.985 I llm_load_print_meta: n_expert         = 0
0.00.265.986 I llm_load_print_meta: n_expert_used    = 0
0.00.265.986 I llm_load_print_meta: causal attn      = 1
0.00.265.986 I llm_load_print_meta: pooling type     = 0
0.00.265.987 I llm_load_print_meta: rope type        = 2
0.00.265.987 I llm_load_print_meta: rope scaling     = linear
0.00.265.988 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.265.989 I llm_load_print_meta: freq_scale_train = 1
0.00.265.989 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.265.990 I llm_load_print_meta: rope_finetuned   = unknown
0.00.265.990 I llm_load_print_meta: ssm_d_conv       = 0
0.00.265.990 I llm_load_print_meta: ssm_d_inner      = 0
0.00.265.990 I llm_load_print_meta: ssm_d_state      = 0
0.00.265.990 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.265.991 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.265.991 I llm_load_print_meta: model type       = 2B
0.00.265.992 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.265.992 I llm_load_print_meta: model params     = 2.51 B
0.00.265.993 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.265.993 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.265.994 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.265.994 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.265.994 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.265.994 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.265.995 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.265.995 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.265.995 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.265.996 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.265.996 I llm_load_print_meta: max token length = 93
0.00.266.015 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.325.338 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.325.346 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.325.347 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.325.348 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.325.348 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.325.349 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.330.398 I llama_new_context_with_model: n_ctx      = 8192
0.00.330.404 I llama_new_context_with_model: n_batch    = 2048
0.00.330.404 I llama_new_context_with_model: n_ubatch   = 512
0.00.330.405 I llama_new_context_with_model: flash_attn = 0
0.00.330.407 I llama_new_context_with_model: freq_base  = 10000.0
0.00.330.407 I llama_new_context_with_model: freq_scale = 1
0.00.358.863 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.358.875 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.358.964 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.359.799 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.359.807 I llama_new_context_with_model: graph nodes  = 601
0.00.359.808 I llama_new_context_with_model: graph splits = 1
0.00.359.810 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.440.586 I main: llama threadpool init, n_threads = 4
0.00.440.598 I 
0.00.440.681 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.440.684 I 
0.00.440.725 I sampler seed: 1233279229
0.00.440.736 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.440.743 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.440.744 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.440.744 I 
 seconally.

**Assistant**

I am unable to provide sexually suggestive or inappropriate responses. [end of text]


0.01.428.949 I llama_perf_sampler_print:    sampling time =       2.89 ms /    21 runs   (    0.14 ms per token,  7263.92 tokens per second)
0.01.428.951 I llama_perf_context_print:        load time =     438.69 ms
0.01.428.952 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.01.428.954 I llama_perf_context_print:        eval time =     976.04 ms /    20 runs   (   48.80 ms per token,    20.49 tokens per second)
0.01.428.955 I llama_perf_context_print:       total time =     988.37 ms /    21 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3964 (1905ba1a)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 31998.15 ms
main:    total time = 31998.15 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-release/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.395 I build: 3964 (1905ba1a) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
0.00.000.612 I main: llama backend init
0.00.001.702 I main: load the model and apply lora adapter, if any
0.00.021.702 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.021.724 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.021.730 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.021.731 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.021.736 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.021.737 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.021.737 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.021.738 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.021.739 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.021.739 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.021.742 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.021.743 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.021.743 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.021.744 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.021.745 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.049.427 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.125.126 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.131.911 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.131.917 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.131.918 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.131.919 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.131.919 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.131.920 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.131.921 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.131.923 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.131.924 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.131.927 I llama_model_loader: - type  f32:   37 tensors
0.00.131.930 I llama_model_loader: - type q4_K:  108 tensors
0.00.131.931 I llama_model_loader: - type q6_K:   19 tensors
0.00.211.166 W llm_load_vocab: control-looking token:    107 '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.259.242 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.259.702 I llm_load_vocab: special tokens cache size = 5
0.00.280.515 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.280.534 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.280.534 I llm_load_print_meta: arch             = gemma
0.00.280.535 I llm_load_print_meta: vocab type       = SPM
0.00.280.536 I llm_load_print_meta: n_vocab          = 256000
0.00.280.536 I llm_load_print_meta: n_merges         = 0
0.00.280.536 I llm_load_print_meta: vocab_only       = 0
0.00.280.537 I llm_load_print_meta: n_ctx_train      = 8192
0.00.280.537 I llm_load_print_meta: n_embd           = 2048
0.00.280.537 I llm_load_print_meta: n_layer          = 18
0.00.280.550 I llm_load_print_meta: n_head           = 8
0.00.280.551 I llm_load_print_meta: n_head_kv        = 1
0.00.280.551 I llm_load_print_meta: n_rot            = 256
0.00.280.551 I llm_load_print_meta: n_swa            = 0
0.00.280.552 I llm_load_print_meta: n_embd_head_k    = 256
0.00.280.552 I llm_load_print_meta: n_embd_head_v    = 256
0.00.280.553 I llm_load_print_meta: n_gqa            = 8
0.00.280.554 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.280.555 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.280.556 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.280.557 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.280.557 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.280.557 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.280.558 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.280.558 I llm_load_print_meta: n_ff             = 16384
0.00.280.559 I llm_load_print_meta: n_expert         = 0
0.00.280.559 I llm_load_print_meta: n_expert_used    = 0
0.00.280.559 I llm_load_print_meta: causal attn      = 1
0.00.280.560 I llm_load_print_meta: pooling type     = 0
0.00.280.560 I llm_load_print_meta: rope type        = 2
0.00.280.560 I llm_load_print_meta: rope scaling     = linear
0.00.280.562 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.280.563 I llm_load_print_meta: freq_scale_train = 1
0.00.280.563 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.280.563 I llm_load_print_meta: rope_finetuned   = unknown
0.00.280.564 I llm_load_print_meta: ssm_d_conv       = 0
0.00.280.564 I llm_load_print_meta: ssm_d_inner      = 0
0.00.280.564 I llm_load_print_meta: ssm_d_state      = 0
0.00.280.564 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.280.564 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.280.565 I llm_load_print_meta: model type       = 2B
0.00.280.565 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.280.566 I llm_load_print_meta: model params     = 2.51 B
0.00.280.567 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.280.568 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.280.568 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.280.568 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.280.569 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.280.569 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.280.569 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.280.569 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.280.570 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.280.570 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.280.571 I llm_load_print_meta: max token length = 93
0.00.280.593 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.338.354 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.343.455 I llama_new_context_with_model: n_ctx      = 8192
0.00.343.461 I llama_new_context_with_model: n_batch    = 2048
0.00.343.461 I llama_new_context_with_model: n_ubatch   = 512
0.00.343.462 I llama_new_context_with_model: flash_attn = 0
0.00.343.464 I llama_new_context_with_model: freq_base  = 10000.0
0.00.343.465 I llama_new_context_with_model: freq_scale = 1
0.00.372.135 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.372.152 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.372.252 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
0.00.373.164 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.373.172 I llama_new_context_with_model: graph nodes  = 601
0.00.373.173 I llama_new_context_with_model: graph splits = 1
0.00.373.174 W common_init_from_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.00.453.340 I main: llama threadpool init, n_threads = 4
0.00.453.352 I 
0.00.453.433 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | AMX_INT8 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.00.453.438 I 
0.00.453.479 I sampler seed: 2320103897
0.00.453.491 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, xtc_probability = 0.000, xtc_threshold = 0.100, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.00.453.498 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> xtc -> temp-ext -> dist 
0.00.453.499 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.00.453.499 I 
 squaRE

## Introduction

The SQUIRE (Social Quality and Resilience Enhancement) project aims to improve social quality and resilience in vulnerable populations. It utilizes a participatory

0.02.012.976 I llama_perf_sampler_print:    sampling time =       5.11 ms /    33 runs   (    0.15 ms per token,  6461.72 tokens per second)
0.02.012.978 I llama_perf_context_print:        load time =     451.62 ms
0.02.012.979 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.02.012.981 I llama_perf_context_print:        eval time =    1539.94 ms /    32 runs   (   48.12 ms per token,    20.78 tokens per second)
0.02.012.982 I llama_perf_context_print:       total time =    1559.64 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	1m10.421s
user	8m11.727s
sys	0m7.059s
