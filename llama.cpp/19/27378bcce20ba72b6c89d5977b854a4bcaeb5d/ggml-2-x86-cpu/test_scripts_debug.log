+ cd ./examples/gguf-split
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/gguf-split
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/gguf-split
+ rm -f '/mnt/llama.cpp/models/gguf-split/ggml-model-split*.gguf' '/mnt/llama.cpp/models/gguf-split/ggml-model-merge*.gguf'
+ cd /mnt/llama.cpp/models/gguf-split
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/gguf-split/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf --n-predict 32
0.00.000.654 I build: 3854 (1927378b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.854 I main: llama backend init
0.00.002.790 I main: load the model and apply lora adapter, if any
0.00.024.394 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.581 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.665 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.676 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.677 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.681 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.682 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.685 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.687 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.687 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.689 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.695 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.696 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.697 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.698 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.699 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.486 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.179.920 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.191.879 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.191.886 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.191.887 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.191.888 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.191.889 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.191.890 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.191.891 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.191.894 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.191.895 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.191.896 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.191.896 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.191.897 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.191.906 I llama_model_loader: - type  f32:   37 tensors
0.00.191.910 I llama_model_loader: - type q8_0:  127 tensors
0.00.331.377 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.359.477 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.360.660 I llm_load_vocab: special tokens cache size = 5
0.00.418.660 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.418.720 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.418.721 I llm_load_print_meta: arch             = gemma
0.00.418.722 I llm_load_print_meta: vocab type       = SPM
0.00.418.723 I llm_load_print_meta: n_vocab          = 256000
0.00.418.726 I llm_load_print_meta: n_merges         = 0
0.00.418.726 I llm_load_print_meta: vocab_only       = 0
0.00.418.727 I llm_load_print_meta: n_ctx_train      = 8192
0.00.418.727 I llm_load_print_meta: n_embd           = 2048
0.00.418.727 I llm_load_print_meta: n_layer          = 18
0.00.418.790 I llm_load_print_meta: n_head           = 8
0.00.418.797 I llm_load_print_meta: n_head_kv        = 1
0.00.418.798 I llm_load_print_meta: n_rot            = 256
0.00.418.798 I llm_load_print_meta: n_swa            = 0
0.00.418.798 I llm_load_print_meta: n_embd_head_k    = 256
0.00.418.799 I llm_load_print_meta: n_embd_head_v    = 256
0.00.418.804 I llm_load_print_meta: n_gqa            = 8
0.00.418.809 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.418.814 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.418.815 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.418.817 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.418.817 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.418.818 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.418.818 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.418.823 I llm_load_print_meta: n_ff             = 16384
0.00.418.824 I llm_load_print_meta: n_expert         = 0
0.00.418.824 I llm_load_print_meta: n_expert_used    = 0
0.00.418.824 I llm_load_print_meta: causal attn      = 1
0.00.418.824 I llm_load_print_meta: pooling type     = 0
0.00.418.825 I llm_load_print_meta: rope type        = 2
0.00.418.825 I llm_load_print_meta: rope scaling     = linear
0.00.418.826 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.418.827 I llm_load_print_meta: freq_scale_train = 1
0.00.418.827 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.418.828 I llm_load_print_meta: rope_finetuned   = unknown
0.00.418.828 I llm_load_print_meta: ssm_d_conv       = 0
0.00.418.830 I llm_load_print_meta: ssm_d_inner      = 0
0.00.418.830 I llm_load_print_meta: ssm_d_state      = 0
0.00.418.831 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.418.842 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.418.843 I llm_load_print_meta: model type       = 2B
0.00.418.844 I llm_load_print_meta: model ftype      = Q8_0
0.00.418.845 I llm_load_print_meta: model params     = 2.51 B
0.00.418.846 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.418.847 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.418.847 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.418.848 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.418.852 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.418.853 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.418.853 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.418.854 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.418.860 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.418.861 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.418.862 I llm_load_print_meta: max token length = 93
0.00.419.042 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.519.045 I llm_load_tensors:        CPU buffer size =   865.98 MiB
0.00.519.055 I llm_load_tensors:        CPU buffer size =   334.74 MiB
0.00.519.056 I llm_load_tensors:        CPU buffer size =   402.73 MiB
0.00.519.056 I llm_load_tensors:        CPU buffer size =   335.27 MiB
0.00.519.057 I llm_load_tensors:        CPU buffer size =   338.98 MiB
0.00.519.057 I llm_load_tensors:        CPU buffer size =   261.96 MiB
.............................................................
0.00.524.743 I llama_new_context_with_model: n_ctx      = 8192
0.00.524.749 I llama_new_context_with_model: n_batch    = 2048
0.00.524.750 I llama_new_context_with_model: n_ubatch   = 512
0.00.524.750 I llama_new_context_with_model: flash_attn = 0
0.00.524.753 I llama_new_context_with_model: freq_base  = 10000.0
0.00.524.754 I llama_new_context_with_model: freq_scale = 1
0.00.553.792 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.553.833 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.553.953 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.555.336 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.555.342 I llama_new_context_with_model: graph nodes  = 601
0.00.555.343 I llama_new_context_with_model: graph splits = 1
0.00.555.360 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.168.045 I main: llama threadpool init, n_threads = 4
0.01.168.056 I 
0.01.168.147 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.168.151 I 
0.01.168.322 I sampler seed: 1406041725
0.01.168.332 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.168.336 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.168.338 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.168.338 I 
 increasels to the human ear, thereby creating a sensation of hearing.

The acoustical phenomenon that underlies this sensation is known as transduction. Transduction involves the

0.14.584.313 I llama_perf_sampler_print:    sampling time =      49.36 ms /    33 runs   (    1.50 ms per token,   668.63 tokens per second)
0.14.584.319 I llama_perf_context_print:        load time =    1165.17 ms
0.14.584.320 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.584.322 I llama_perf_context_print:        eval time =   13333.45 ms /    32 runs   (  416.67 ms per token,     2.40 tokens per second)
0.14.584.323 I llama_perf_context_print:       total time =   13416.28 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --merge /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf -> /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: reading metadata /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf ...[3Ddone
gguf_merge: writing tensors /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf ...[3Ddone
gguf_merge: /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf merged from 6 split with 164 tensors.
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf --n-predict 32
0.00.000.657 I build: 3854 (1927378b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.857 I main: llama backend init
0.00.002.810 I main: load the model and apply lora adapter, if any
0.00.024.780 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf (version GGUF V3 (latest))
0.00.024.868 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.881 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.883 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.887 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.887 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.888 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.889 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.890 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.891 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.897 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.898 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.899 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.907 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.908 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.541 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.063 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.200 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.207 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.208 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.209 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.210 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.211 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.212 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.215 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.216 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.217 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.217 I llama_model_loader: - kv  25:                                split.count u16              = 0
0.00.192.218 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.227 I llama_model_loader: - type  f32:   37 tensors
0.00.192.232 I llama_model_loader: - type q8_0:  127 tensors
0.00.338.158 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.359.755 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.360.757 I llm_load_vocab: special tokens cache size = 5
0.00.430.200 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.430.260 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.430.261 I llm_load_print_meta: arch             = gemma
0.00.430.262 I llm_load_print_meta: vocab type       = SPM
0.00.430.263 I llm_load_print_meta: n_vocab          = 256000
0.00.430.265 I llm_load_print_meta: n_merges         = 0
0.00.430.266 I llm_load_print_meta: vocab_only       = 0
0.00.430.266 I llm_load_print_meta: n_ctx_train      = 8192
0.00.430.267 I llm_load_print_meta: n_embd           = 2048
0.00.430.267 I llm_load_print_meta: n_layer          = 18
0.00.430.329 I llm_load_print_meta: n_head           = 8
0.00.430.336 I llm_load_print_meta: n_head_kv        = 1
0.00.430.337 I llm_load_print_meta: n_rot            = 256
0.00.430.337 I llm_load_print_meta: n_swa            = 0
0.00.430.338 I llm_load_print_meta: n_embd_head_k    = 256
0.00.430.338 I llm_load_print_meta: n_embd_head_v    = 256
0.00.430.343 I llm_load_print_meta: n_gqa            = 8
0.00.430.347 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.430.353 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.430.354 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.430.356 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.430.357 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.430.357 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.430.358 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.430.363 I llm_load_print_meta: n_ff             = 16384
0.00.430.364 I llm_load_print_meta: n_expert         = 0
0.00.430.364 I llm_load_print_meta: n_expert_used    = 0
0.00.430.364 I llm_load_print_meta: causal attn      = 1
0.00.430.365 I llm_load_print_meta: pooling type     = 0
0.00.430.365 I llm_load_print_meta: rope type        = 2
0.00.430.365 I llm_load_print_meta: rope scaling     = linear
0.00.430.367 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.430.368 I llm_load_print_meta: freq_scale_train = 1
0.00.430.368 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.430.368 I llm_load_print_meta: rope_finetuned   = unknown
0.00.430.378 I llm_load_print_meta: ssm_d_conv       = 0
0.00.430.379 I llm_load_print_meta: ssm_d_inner      = 0
0.00.430.379 I llm_load_print_meta: ssm_d_state      = 0
0.00.430.380 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.430.380 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.430.381 I llm_load_print_meta: model type       = 2B
0.00.430.383 I llm_load_print_meta: model ftype      = Q8_0
0.00.430.396 I llm_load_print_meta: model params     = 2.51 B
0.00.430.397 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.430.398 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.430.399 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.430.399 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.430.400 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.430.400 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.430.409 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.430.410 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.430.423 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.430.424 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.430.432 I llm_load_print_meta: max token length = 93
0.00.430.603 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.527.232 I llm_load_tensors:        CPU buffer size =  2539.66 MiB
.............................................................
0.00.532.823 I llama_new_context_with_model: n_ctx      = 8192
0.00.532.830 I llama_new_context_with_model: n_batch    = 2048
0.00.532.831 I llama_new_context_with_model: n_ubatch   = 512
0.00.532.831 I llama_new_context_with_model: flash_attn = 0
0.00.532.834 I llama_new_context_with_model: freq_base  = 10000.0
0.00.532.835 I llama_new_context_with_model: freq_scale = 1
0.00.562.591 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.562.636 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.562.755 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.564.175 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.564.181 I llama_new_context_with_model: graph nodes  = 601
0.00.564.181 I llama_new_context_with_model: graph splits = 1
0.00.564.198 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.177.637 I main: llama threadpool init, n_threads = 4
0.01.177.648 I 
0.01.177.741 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.177.745 I 
0.01.177.914 I sampler seed: 565809407
0.01.177.924 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.177.929 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.177.930 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.177.930 I 
 increasities. 

I do not understand the context of this sentence. Could you please provide more information or context so I can understand the meaning? [end of text]


0.14.336.098 I llama_perf_sampler_print:    sampling time =      48.10 ms /    32 runs   (    1.50 ms per token,   665.28 tokens per second)
0.14.336.123 I llama_perf_context_print:        load time =    1174.75 ms
0.14.336.124 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.336.126 I llama_perf_context_print:        eval time =   13078.55 ms /    31 runs   (  421.89 ms per token,     2.37 tokens per second)
0.14.336.127 I llama_perf_context_print:       total time =   13158.47 ms /    32 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 32 --no-tensor-first-split /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors
n_split: 7
split 00001: n_tensors = 0, total_size = 6M
split 00002: n_tensors = 32, total_size = 1015M
split 00003: n_tensors = 32, total_size = 361M
split 00004: n_tensors = 32, total_size = 431M
split 00005: n_tensors = 32, total_size = 458M
split 00006: n_tensors = 32, total_size = 361M
split 00007: n_tensors = 4, total_size = 35M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf ... gguf_split: 7 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf --n-predict 32
0.00.000.703 I build: 3854 (1927378b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.915 I main: llama backend init
0.00.002.854 I main: load the model and apply lora adapter, if any
0.00.024.676 I llama_model_loader: additional 6 GGUFs metadata loaded.
0.00.024.866 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf (version GGUF V3 (latest))
0.00.024.962 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.974 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.976 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.981 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.986 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.987 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.988 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.990 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.991 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.999 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.000 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.002 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.004 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.025.006 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.948 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.656 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.731 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.738 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.739 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.740 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.741 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.742 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.743 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.747 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.747 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.748 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.749 I llama_model_loader: - kv  25:                                split.count u16              = 7
0.00.192.750 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.758 I llama_model_loader: - type  f32:   37 tensors
0.00.192.762 I llama_model_loader: - type q8_0:  127 tensors
0.00.331.878 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.354.891 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.355.929 I llm_load_vocab: special tokens cache size = 5
0.00.423.790 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.423.857 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.423.858 I llm_load_print_meta: arch             = gemma
0.00.423.859 I llm_load_print_meta: vocab type       = SPM
0.00.423.860 I llm_load_print_meta: n_vocab          = 256000
0.00.423.862 I llm_load_print_meta: n_merges         = 0
0.00.423.863 I llm_load_print_meta: vocab_only       = 0
0.00.423.863 I llm_load_print_meta: n_ctx_train      = 8192
0.00.423.864 I llm_load_print_meta: n_embd           = 2048
0.00.423.864 I llm_load_print_meta: n_layer          = 18
0.00.423.927 I llm_load_print_meta: n_head           = 8
0.00.423.936 I llm_load_print_meta: n_head_kv        = 1
0.00.423.937 I llm_load_print_meta: n_rot            = 256
0.00.423.938 I llm_load_print_meta: n_swa            = 0
0.00.423.939 I llm_load_print_meta: n_embd_head_k    = 256
0.00.423.939 I llm_load_print_meta: n_embd_head_v    = 256
0.00.423.946 I llm_load_print_meta: n_gqa            = 8
0.00.423.952 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.423.959 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.423.961 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.423.962 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.423.964 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.423.965 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.423.966 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.423.972 I llm_load_print_meta: n_ff             = 16384
0.00.423.973 I llm_load_print_meta: n_expert         = 0
0.00.423.974 I llm_load_print_meta: n_expert_used    = 0
0.00.423.975 I llm_load_print_meta: causal attn      = 1
0.00.423.975 I llm_load_print_meta: pooling type     = 0
0.00.423.976 I llm_load_print_meta: rope type        = 2
0.00.423.977 I llm_load_print_meta: rope scaling     = linear
0.00.423.979 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.423.980 I llm_load_print_meta: freq_scale_train = 1
0.00.423.981 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.423.986 I llm_load_print_meta: rope_finetuned   = unknown
0.00.423.987 I llm_load_print_meta: ssm_d_conv       = 0
0.00.423.987 I llm_load_print_meta: ssm_d_inner      = 0
0.00.423.988 I llm_load_print_meta: ssm_d_state      = 0
0.00.423.998 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.423.999 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.424.001 I llm_load_print_meta: model type       = 2B
0.00.424.003 I llm_load_print_meta: model ftype      = Q8_0
0.00.424.004 I llm_load_print_meta: model params     = 2.51 B
0.00.424.005 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.424.006 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.424.007 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.424.007 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.424.008 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.424.012 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.424.013 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.424.014 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.424.022 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.424.037 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.424.037 I llm_load_print_meta: max token length = 93
0.00.424.226 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.502.231 I llm_load_tensors:        CPU buffer size =   967.99 MiB
0.00.502.241 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.502.242 I llm_load_tensors:        CPU buffer size =   411.77 MiB
0.00.502.243 I llm_load_tensors:        CPU buffer size =   437.27 MiB
0.00.502.244 I llm_load_tensors:        CPU buffer size =   344.30 MiB
0.00.502.244 I llm_load_tensors:        CPU buffer size =    34.02 MiB
.............................................................
0.00.508.113 I llama_new_context_with_model: n_ctx      = 8192
0.00.508.121 I llama_new_context_with_model: n_batch    = 2048
0.00.508.122 I llama_new_context_with_model: n_ubatch   = 512
0.00.508.122 I llama_new_context_with_model: flash_attn = 0
0.00.508.125 I llama_new_context_with_model: freq_base  = 10000.0
0.00.508.125 I llama_new_context_with_model: freq_scale = 1
0.00.537.507 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.537.554 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.537.689 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.539.095 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.539.103 I llama_new_context_with_model: graph nodes  = 601
0.00.539.104 I llama_new_context_with_model: graph splits = 1
0.00.539.124 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.186.484 I main: llama threadpool init, n_threads = 4
0.01.186.495 I 
0.01.186.601 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.186.604 I 
0.01.186.788 I sampler seed: 2125391456
0.01.186.799 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.186.805 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.186.806 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.186.807 I 
 increasels with a penchant for the absurd.

**Prompt:** Imagine a world where magic is commonplace, but its power is capricious and unpredictable. Imagine creatures that

0.14.639.682 I llama_perf_sampler_print:    sampling time =      49.47 ms /    33 runs   (    1.50 ms per token,   667.14 tokens per second)
0.14.639.685 I llama_perf_context_print:        load time =    1183.54 ms
0.14.639.686 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.14.639.688 I llama_perf_context_print:        eval time =   13370.78 ms /    32 runs   (  417.84 ms per token,     2.39 tokens per second)
0.14.639.703 I llama_perf_context_print:       total time =   13453.21 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-size 2G /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G
n_split: 2
split 00001: n_tensors = 109, total_size = 2002M
split 00002: n_tensors = 55, total_size = 666M
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf ... done
Writing file /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf ... gguf_split: 2 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf --n-predict 32
0.00.000.635 I build: 3854 (1927378b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.839 I main: llama backend init
0.00.002.761 I main: load the model and apply lora adapter, if any
0.00.024.331 I llama_model_loader: additional 1 GGUFs metadata loaded.
0.00.024.510 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf (version GGUF V3 (latest))
0.00.024.591 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.601 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.603 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.606 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.608 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.617 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.621 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.622 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.622 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.631 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.632 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.633 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.634 I llama_model_loader: - kv  11:                          general.file_type u32              = 7
0.00.024.635 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.094.380 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.182.238 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.194.270 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.194.276 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.194.277 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.194.278 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.194.279 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.194.280 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.194.281 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.194.284 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.194.285 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.194.286 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.194.286 I llama_model_loader: - kv  25:                                split.count u16              = 2
0.00.194.287 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.194.296 I llama_model_loader: - type  f32:   37 tensors
0.00.194.300 I llama_model_loader: - type q8_0:  127 tensors
0.00.332.877 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.354.184 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.355.171 I llm_load_vocab: special tokens cache size = 5
0.00.412.597 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.412.649 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.412.650 I llm_load_print_meta: arch             = gemma
0.00.412.651 I llm_load_print_meta: vocab type       = SPM
0.00.412.651 I llm_load_print_meta: n_vocab          = 256000
0.00.412.654 I llm_load_print_meta: n_merges         = 0
0.00.412.654 I llm_load_print_meta: vocab_only       = 0
0.00.412.655 I llm_load_print_meta: n_ctx_train      = 8192
0.00.412.655 I llm_load_print_meta: n_embd           = 2048
0.00.412.656 I llm_load_print_meta: n_layer          = 18
0.00.412.719 I llm_load_print_meta: n_head           = 8
0.00.412.734 I llm_load_print_meta: n_head_kv        = 1
0.00.412.734 I llm_load_print_meta: n_rot            = 256
0.00.412.735 I llm_load_print_meta: n_swa            = 0
0.00.412.735 I llm_load_print_meta: n_embd_head_k    = 256
0.00.412.735 I llm_load_print_meta: n_embd_head_v    = 256
0.00.412.740 I llm_load_print_meta: n_gqa            = 8
0.00.412.744 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.412.749 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.412.751 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.412.752 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.412.753 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.412.753 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.412.754 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.412.759 I llm_load_print_meta: n_ff             = 16384
0.00.412.761 I llm_load_print_meta: n_expert         = 0
0.00.412.761 I llm_load_print_meta: n_expert_used    = 0
0.00.412.762 I llm_load_print_meta: causal attn      = 1
0.00.412.763 I llm_load_print_meta: pooling type     = 0
0.00.412.763 I llm_load_print_meta: rope type        = 2
0.00.412.763 I llm_load_print_meta: rope scaling     = linear
0.00.412.765 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.412.766 I llm_load_print_meta: freq_scale_train = 1
0.00.412.766 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.412.767 I llm_load_print_meta: rope_finetuned   = unknown
0.00.412.767 I llm_load_print_meta: ssm_d_conv       = 0
0.00.412.768 I llm_load_print_meta: ssm_d_inner      = 0
0.00.412.769 I llm_load_print_meta: ssm_d_state      = 0
0.00.412.769 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.412.769 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.412.770 I llm_load_print_meta: model type       = 2B
0.00.412.771 I llm_load_print_meta: model ftype      = Q8_0
0.00.412.772 I llm_load_print_meta: model params     = 2.51 B
0.00.412.773 I llm_load_print_meta: model size       = 2.48 GiB (8.50 BPW) 
0.00.412.773 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.412.774 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.412.774 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.412.775 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.412.775 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.412.776 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.412.776 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.412.783 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.412.784 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.412.784 I llm_load_print_meta: max token length = 93
0.00.412.951 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.484.298 I llm_load_tensors:        CPU buffer size =  1904.18 MiB
0.00.484.307 I llm_load_tensors:        CPU buffer size =   635.48 MiB
.............................................................
0.00.490.002 I llama_new_context_with_model: n_ctx      = 8192
0.00.490.008 I llama_new_context_with_model: n_batch    = 2048
0.00.490.009 I llama_new_context_with_model: n_ubatch   = 512
0.00.490.009 I llama_new_context_with_model: flash_attn = 0
0.00.490.012 I llama_new_context_with_model: freq_base  = 10000.0
0.00.490.013 I llama_new_context_with_model: freq_scale = 1
0.00.518.601 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.518.644 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.518.759 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.520.165 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.520.171 I llama_new_context_with_model: graph nodes  = 601
0.00.520.171 I llama_new_context_with_model: graph splits = 1
0.00.520.187 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.133.254 I main: llama threadpool init, n_threads = 4
0.01.133.265 I 
0.01.133.357 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.133.361 I 
0.01.133.533 I sampler seed: 1683723990
0.01.133.544 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.133.549 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.133.550 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.133.552 I 
 increasities. 

I cannot answer this question as it contains sexually suggestive content that is not appropriate for me to discuss. [end of text]


0.12.063.167 I llama_perf_sampler_print:    sampling time =      40.26 ms /    27 runs   (    1.49 ms per token,   670.59 tokens per second)
0.12.063.170 I llama_perf_context_print:        load time =    1130.41 ms
0.12.063.172 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.063.173 I llama_perf_context_print:        eval time =   10862.30 ms /    26 runs   (  417.78 ms per token,     2.39 tokens per second)
0.12.063.174 I llama_perf_context_print:       total time =   10929.92 ms /    27 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/gguf-split/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00001-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-2G-00002-of-00002.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00001-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00002-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00003-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00004-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00005-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00006-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-split-32-tensors-00007-of-00007.gguf /mnt/llama.cpp/models/gguf-split/ggml-model-merge.gguf

real	1m5.209s
user	3m35.903s
sys	0m9.364s
+ cd ./examples/quantize
+ bash tests.sh /home/ggml/work/llama.cpp/build-ci-debug/bin /mnt/llama.cpp/models
+ SPLIT=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split
+ QUANTIZE=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize
+ MAIN=/home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli
+ WORK_PATH=/mnt/llama.cpp/models/quantize
+++ dirname tests.sh
++ realpath ./../../
+ ROOT_DIR=/home/ggml/work/llama.cpp
+ mkdir -p /mnt/llama.cpp/models/quantize
+ rm -f '/mnt/llama.cpp/models/quantize/ggml-model-split*.gguf' '/mnt/llama.cpp/models/quantize/ggml-model-requant*.gguf'
+ cd /mnt/llama.cpp/models/quantize
+ /home/ggml/work/llama.cpp/scripts/hf.sh --repo ggml-org/gemma-1.1-2b-it-Q8_0-GGUF --file gemma-1.1-2b-it.Q8_0.gguf
[+] attempting to download gemma-1.1-2b-it.Q8_0.gguf
[+] wget -q --show-progress -c -O ./gemma-1.1-2b-it.Q8_0.gguf https://huggingface.co/ggml-org/gemma-1.1-2b-it-Q8_0-GGUF/resolve/main/gemma-1.1-2b-it.Q8_0.gguf
./gemma-1.1-2b-it.Q8_0.gguf
+ echo PASS
PASS
+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-gguf-split --split-max-tensors 28 /mnt/llama.cpp/models/quantize/gemma-1.1-2b-it.Q8_0.gguf /mnt/llama.cpp/models/quantize/ggml-model-split
n_split: 6
split 00001: n_tensors = 28, total_size = 914M
split 00002: n_tensors = 28, total_size = 351M
split 00003: n_tensors = 28, total_size = 422M
split 00004: n_tensors = 28, total_size = 351M
split 00005: n_tensors = 28, total_size = 355M
split 00006: n_tensors = 24, total_size = 274M
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf ... done
Writing file /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf ... gguf_split: 6 gguf split written with a total of 164 tensors.
done
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize --keep-split /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant.gguf Q4_K
main: build = 3854 (1927378b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200208.00 ms
main:    total time = 200208.00 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf --n-predict 32
0.00.000.543 I build: 3854 (1927378b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.000.744 I main: llama backend init
0.00.002.670 I main: load the model and apply lora adapter, if any
0.00.024.449 I llama_model_loader: additional 5 GGUFs metadata loaded.
0.00.024.627 I llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf (version GGUF V3 (latest))
0.00.024.716 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.024.729 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.024.731 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.024.734 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.024.738 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.024.739 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.024.739 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.024.740 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.024.741 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.024.747 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.024.748 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.024.749 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.024.749 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.024.750 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.092.687 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.180.465 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.192.761 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.192.768 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.192.769 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.192.770 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.192.771 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.192.772 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.192.773 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.192.776 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.192.777 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.192.778 I llama_model_loader: - kv  24:                                   split.no u16              = 0
0.00.192.778 I llama_model_loader: - kv  25:                                split.count u16              = 6
0.00.192.779 I llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
0.00.192.787 I llama_model_loader: - type  f32:   37 tensors
0.00.192.792 I llama_model_loader: - type q4_K:  108 tensors
0.00.192.793 I llama_model_loader: - type q6_K:   19 tensors
0.00.333.853 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.356.070 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.357.050 I llm_load_vocab: special tokens cache size = 5
0.00.416.100 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.416.154 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.416.158 I llm_load_print_meta: arch             = gemma
0.00.416.158 I llm_load_print_meta: vocab type       = SPM
0.00.416.159 I llm_load_print_meta: n_vocab          = 256000
0.00.416.162 I llm_load_print_meta: n_merges         = 0
0.00.416.162 I llm_load_print_meta: vocab_only       = 0
0.00.416.163 I llm_load_print_meta: n_ctx_train      = 8192
0.00.416.163 I llm_load_print_meta: n_embd           = 2048
0.00.416.163 I llm_load_print_meta: n_layer          = 18
0.00.416.225 I llm_load_print_meta: n_head           = 8
0.00.416.234 I llm_load_print_meta: n_head_kv        = 1
0.00.416.236 I llm_load_print_meta: n_rot            = 256
0.00.416.236 I llm_load_print_meta: n_swa            = 0
0.00.416.236 I llm_load_print_meta: n_embd_head_k    = 256
0.00.416.237 I llm_load_print_meta: n_embd_head_v    = 256
0.00.416.241 I llm_load_print_meta: n_gqa            = 8
0.00.416.246 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.416.251 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.416.255 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.416.256 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.416.257 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.416.257 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.416.257 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.416.263 I llm_load_print_meta: n_ff             = 16384
0.00.416.263 I llm_load_print_meta: n_expert         = 0
0.00.416.264 I llm_load_print_meta: n_expert_used    = 0
0.00.416.265 I llm_load_print_meta: causal attn      = 1
0.00.416.265 I llm_load_print_meta: pooling type     = 0
0.00.416.265 I llm_load_print_meta: rope type        = 2
0.00.416.266 I llm_load_print_meta: rope scaling     = linear
0.00.416.268 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.416.268 I llm_load_print_meta: freq_scale_train = 1
0.00.416.269 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.416.270 I llm_load_print_meta: rope_finetuned   = unknown
0.00.416.270 I llm_load_print_meta: ssm_d_conv       = 0
0.00.416.271 I llm_load_print_meta: ssm_d_inner      = 0
0.00.416.271 I llm_load_print_meta: ssm_d_state      = 0
0.00.416.273 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.416.273 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.416.274 I llm_load_print_meta: model type       = 2B
0.00.416.275 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.416.276 I llm_load_print_meta: model params     = 2.51 B
0.00.416.284 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.416.285 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.416.288 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.416.289 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.416.289 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.416.290 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.416.290 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.416.291 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.416.297 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.416.300 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.416.301 I llm_load_print_meta: max token length = 93
0.00.416.472 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.477.006 I llm_load_tensors:        CPU buffer size =   604.15 MiB
0.00.477.013 I llm_load_tensors:        CPU buffer size =   185.62 MiB
0.00.477.014 I llm_load_tensors:        CPU buffer size =   221.61 MiB
0.00.477.014 I llm_load_tensors:        CPU buffer size =   185.89 MiB
0.00.477.015 I llm_load_tensors:        CPU buffer size =   187.86 MiB
0.00.477.016 I llm_load_tensors:        CPU buffer size =   163.85 MiB
........................................................
0.00.482.475 I llama_new_context_with_model: n_ctx      = 8192
0.00.482.482 I llama_new_context_with_model: n_batch    = 2048
0.00.482.483 I llama_new_context_with_model: n_ubatch   = 512
0.00.482.484 I llama_new_context_with_model: flash_attn = 0
0.00.482.486 I llama_new_context_with_model: freq_base  = 10000.0
0.00.482.487 I llama_new_context_with_model: freq_scale = 1
0.00.511.445 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.511.486 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.511.604 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.512.993 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.513.000 I llama_new_context_with_model: graph nodes  = 601
0.00.513.000 I llama_new_context_with_model: graph splits = 1
0.00.513.017 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.097.390 I main: llama threadpool init, n_threads = 4
0.01.097.402 I 
0.01.097.495 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.097.498 I 
0.01.097.669 I sampler seed: 4086802900
0.01.097.680 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.097.684 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.097.685 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.097.685 I 
 squaRED BULLS

**Summary:**

The Squashed Bull is a popular meme that features a photo of a bull that has been squashed by a pair

0.12.001.535 I llama_perf_sampler_print:    sampling time =      49.31 ms /    33 runs   (    1.49 ms per token,   669.18 tokens per second)
0.12.001.539 I llama_perf_context_print:        load time =    1094.64 ms
0.12.001.552 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.001.555 I llama_perf_context_print:        eval time =   10822.03 ms /    32 runs   (  338.19 ms per token,     2.96 tokens per second)
0.12.001.556 I llama_perf_context_print:       total time =   10904.16 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-quantize --allow-requantize /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf Q4_K
main: build = 3854 (1927378b)
main: built with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu
main: quantizing '/mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf' to '/mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf' as Q4_K
llama_model_loader: additional 5 GGUFs metadata loaded.
llama_model_loader: loaded meta data with 27 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf (version GGUF V3 (latest))
llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
llama_model_loader: - kv   0:                       general.architecture str              = gemma
llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
llama_model_loader: - kv  11:                          general.file_type u32              = 7
llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
llama_model_loader: - kv  23:               general.quantization_version u32              = 2
llama_model_loader: - kv  24:                                   split.no u16              = 0
llama_model_loader: - kv  25:                                split.count u16              = 6
llama_model_loader: - kv  26:                        split.tensors.count i32              = 164
llama_model_loader: - type  f32:   37 tensors
llama_model_loader: - type q8_0:  127 tensors
[   1/ 164]                    token_embd.weight - [ 2048, 256000,     1,     1], type =   q8_0, converting to q6_K .. size =   531.25 MiB ->   410.16 MiB
[   2/ 164]               blk.0.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   3/ 164]                blk.0.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[   4/ 164]                blk.0.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   5/ 164]                  blk.0.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[   6/ 164]                blk.0.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[   7/ 164]                  blk.0.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[   8/ 164]             blk.0.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[   9/ 164]                  blk.0.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  10/ 164]                  blk.0.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  11/ 164]               blk.1.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  12/ 164]                blk.1.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  13/ 164]                blk.1.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  14/ 164]                  blk.1.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  15/ 164]                blk.1.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  16/ 164]                  blk.1.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  17/ 164]             blk.1.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  18/ 164]                  blk.1.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  19/ 164]                  blk.1.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  20/ 164]              blk.10.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  21/ 164]               blk.10.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  22/ 164]               blk.10.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  23/ 164]                 blk.10.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  24/ 164]               blk.10.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  25/ 164]                 blk.10.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  26/ 164]            blk.10.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  27/ 164]                 blk.10.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  28/ 164]                 blk.10.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  29/ 164]              blk.11.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  30/ 164]               blk.11.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  31/ 164]               blk.11.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  32/ 164]                 blk.11.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  33/ 164]               blk.11.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  34/ 164]                 blk.11.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  35/ 164]            blk.11.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  36/ 164]                 blk.11.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  37/ 164]                 blk.11.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  38/ 164]              blk.12.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  39/ 164]               blk.12.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  40/ 164]               blk.12.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  41/ 164]                 blk.12.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  42/ 164]               blk.12.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  43/ 164]                 blk.12.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  44/ 164]            blk.12.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  45/ 164]                 blk.12.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  46/ 164]                 blk.12.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  47/ 164]              blk.13.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  48/ 164]               blk.13.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  49/ 164]               blk.13.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  50/ 164]                 blk.13.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  51/ 164]               blk.13.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  52/ 164]                 blk.13.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  53/ 164]            blk.13.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  54/ 164]                 blk.13.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  55/ 164]                 blk.13.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  56/ 164]              blk.14.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  57/ 164]               blk.14.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  58/ 164]               blk.14.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  59/ 164]                 blk.14.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  60/ 164]               blk.14.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  61/ 164]                 blk.14.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  62/ 164]            blk.14.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  63/ 164]                 blk.14.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  64/ 164]                 blk.14.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  65/ 164]              blk.15.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  66/ 164]               blk.15.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[  67/ 164]               blk.15.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  68/ 164]                 blk.15.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  69/ 164]               blk.15.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  70/ 164]                 blk.15.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  71/ 164]            blk.15.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  72/ 164]                 blk.15.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  73/ 164]                 blk.15.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  74/ 164]              blk.16.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  75/ 164]               blk.16.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  76/ 164]               blk.16.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  77/ 164]                 blk.16.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  78/ 164]               blk.16.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  79/ 164]                 blk.16.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  80/ 164]            blk.16.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  81/ 164]                 blk.16.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  82/ 164]                 blk.16.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  83/ 164]               blk.17.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  84/ 164]                 blk.17.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  85/ 164]                 blk.17.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  86/ 164]            blk.17.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  87/ 164]                 blk.17.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  88/ 164]                 blk.17.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  89/ 164]               blk.2.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  90/ 164]                blk.2.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  91/ 164]                blk.2.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  92/ 164]                  blk.2.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[  93/ 164]                blk.2.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  94/ 164]                  blk.2.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[  95/ 164]             blk.2.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  96/ 164]                  blk.2.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[  97/ 164]                  blk.2.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[  98/ 164]               blk.3.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[  99/ 164]                blk.3.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 100/ 164]                blk.3.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 101/ 164]                  blk.3.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 102/ 164]                blk.3.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 103/ 164]                  blk.3.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 104/ 164]             blk.3.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 105/ 164]                  blk.3.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 106/ 164]                  blk.3.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 107/ 164]               blk.4.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 108/ 164]                blk.4.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 109/ 164]                blk.4.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 110/ 164]                  blk.4.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 111/ 164]                blk.4.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 112/ 164]                  blk.4.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 113/ 164]             blk.4.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 114/ 164]                  blk.4.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 115/ 164]                  blk.4.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 116/ 164]               blk.5.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 117/ 164]                blk.5.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 118/ 164]                blk.5.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 119/ 164]                  blk.5.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 120/ 164]                blk.5.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 121/ 164]                  blk.5.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 122/ 164]             blk.5.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 123/ 164]                  blk.5.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 124/ 164]                  blk.5.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 125/ 164]               blk.6.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 126/ 164]                blk.6.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 127/ 164]                blk.6.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 128/ 164]                  blk.6.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 129/ 164]                blk.6.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 130/ 164]                  blk.6.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 131/ 164]             blk.6.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 132/ 164]                  blk.6.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 133/ 164]                  blk.6.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 134/ 164]               blk.7.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 135/ 164]                blk.7.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 136/ 164]                blk.7.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 137/ 164]                  blk.7.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 138/ 164]                blk.7.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 139/ 164]                  blk.7.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 140/ 164]             blk.7.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 141/ 164]                  blk.7.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 142/ 164]                  blk.7.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 143/ 164]               blk.8.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 144/ 164]                blk.8.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 145/ 164]                blk.8.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 146/ 164]                  blk.8.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 147/ 164]                blk.8.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 148/ 164]                  blk.8.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 149/ 164]             blk.8.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 150/ 164]                  blk.8.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 151/ 164]                  blk.8.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 152/ 164]               blk.9.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 153/ 164]                blk.9.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 154/ 164]                blk.9.ffn_gate.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 155/ 164]                  blk.9.ffn_up.weight - [ 2048, 16384,     1,     1], type =   q8_0, converting to q4_K .. size =    34.00 MiB ->    18.00 MiB
[ 156/ 164]                blk.9.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 157/ 164]                  blk.9.attn_k.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q4_K .. size =     0.53 MiB ->     0.28 MiB
[ 158/ 164]             blk.9.attn_output.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 159/ 164]                  blk.9.attn_q.weight - [ 2048,  2048,     1,     1], type =   q8_0, converting to q4_K .. size =     4.25 MiB ->     2.25 MiB
[ 160/ 164]                  blk.9.attn_v.weight - [ 2048,   256,     1,     1], type =   q8_0, converting to q6_K .. size =     0.53 MiB ->     0.41 MiB
[ 161/ 164]              blk.17.attn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 162/ 164]               blk.17.ffn_down.weight - [16384,  2048,     1,     1], type =   q8_0, converting to q6_K .. size =    34.00 MiB ->    26.25 MiB
[ 163/ 164]               blk.17.ffn_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
[ 164/ 164]                   output_norm.weight - [ 2048,     1,     1,     1], type =    f32, size =    0.008 MB
llama_model_quantize_internal: model size  =  2539.66 MB
llama_model_quantize_internal: quant size  =  1548.98 MB

main: quantize time = 200087.16 ms
main:    total time = 200087.16 ms
+ echo PASS
PASS
+ echo

+ /home/ggml/work/llama.cpp/build-ci-debug/bin/llama-cli --model /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf --n-predict 32
0.00.000.637 I build: 3854 (1927378b) with cc (Ubuntu 11.4.0-1ubuntu1~22.04) 11.4.0 for x86_64-linux-gnu (debug)
0.00.001.527 I main: llama backend init
0.00.003.468 I main: load the model and apply lora adapter, if any
0.00.025.325 I llama_model_loader: loaded meta data with 24 key-value pairs and 164 tensors from /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf (version GGUF V3 (latest))
0.00.025.426 I llama_model_loader: Dumping metadata keys/values. Note: KV overrides do not apply in this output.
0.00.025.440 I llama_model_loader: - kv   0:                       general.architecture str              = gemma
0.00.025.446 I llama_model_loader: - kv   1:                               general.name str              = gemma-1.1-2b-it
0.00.025.450 I llama_model_loader: - kv   2:                       gemma.context_length u32              = 8192
0.00.025.452 I llama_model_loader: - kv   3:                     gemma.embedding_length u32              = 2048
0.00.025.454 I llama_model_loader: - kv   4:                          gemma.block_count u32              = 18
0.00.025.455 I llama_model_loader: - kv   5:                  gemma.feed_forward_length u32              = 16384
0.00.025.457 I llama_model_loader: - kv   6:                 gemma.attention.head_count u32              = 8
0.00.025.459 I llama_model_loader: - kv   7:              gemma.attention.head_count_kv u32              = 1
0.00.025.466 I llama_model_loader: - kv   8:     gemma.attention.layer_norm_rms_epsilon f32              = 0.000001
0.00.025.471 I llama_model_loader: - kv   9:                 gemma.attention.key_length u32              = 256
0.00.025.472 I llama_model_loader: - kv  10:               gemma.attention.value_length u32              = 256
0.00.025.473 I llama_model_loader: - kv  11:                          general.file_type u32              = 15
0.00.025.479 I llama_model_loader: - kv  12:                       tokenizer.ggml.model str              = llama
0.00.093.844 I llama_model_loader: - kv  13:                      tokenizer.ggml.tokens arr[str,256000]  = ["<pad>", "<eos>", "<bos>", "<unk>", ...
0.00.181.524 I llama_model_loader: - kv  14:                      tokenizer.ggml.scores arr[f32,256000]  = [0.000000, 0.000000, 0.000000, 0.0000...
0.00.193.516 I llama_model_loader: - kv  15:                  tokenizer.ggml.token_type arr[i32,256000]  = [3, 3, 3, 2, 1, 1, 1, 1, 1, 1, 1, 1, ...
0.00.193.524 I llama_model_loader: - kv  16:                tokenizer.ggml.bos_token_id u32              = 2
0.00.193.525 I llama_model_loader: - kv  17:                tokenizer.ggml.eos_token_id u32              = 1
0.00.193.526 I llama_model_loader: - kv  18:            tokenizer.ggml.unknown_token_id u32              = 3
0.00.193.526 I llama_model_loader: - kv  19:            tokenizer.ggml.padding_token_id u32              = 0
0.00.193.527 I llama_model_loader: - kv  20:               tokenizer.ggml.add_bos_token bool             = true
0.00.193.528 I llama_model_loader: - kv  21:               tokenizer.ggml.add_eos_token bool             = false
0.00.193.532 I llama_model_loader: - kv  22:                    tokenizer.chat_template str              = {{ bos_token }}{% if messages[0]['rol...
0.00.193.533 I llama_model_loader: - kv  23:               general.quantization_version u32              = 2
0.00.193.541 I llama_model_loader: - type  f32:   37 tensors
0.00.193.545 I llama_model_loader: - type q4_K:  108 tensors
0.00.193.546 I llama_model_loader: - type q6_K:   19 tensors
0.00.338.826 W llm_load_vocab: control-looking token: '<end_of_turn>' was not control-type; this is probably a bug in the model. its type will be overridden
0.00.360.695 W llm_load_vocab: special_eos_id is not in special_eog_ids - the tokenizer config may be incorrect
0.00.361.689 I llm_load_vocab: special tokens cache size = 5
0.00.419.322 I llm_load_vocab: token to piece cache size = 1.6014 MB
0.00.419.383 I llm_load_print_meta: format           = GGUF V3 (latest)
0.00.419.384 I llm_load_print_meta: arch             = gemma
0.00.419.385 I llm_load_print_meta: vocab type       = SPM
0.00.419.386 I llm_load_print_meta: n_vocab          = 256000
0.00.419.388 I llm_load_print_meta: n_merges         = 0
0.00.419.389 I llm_load_print_meta: vocab_only       = 0
0.00.419.389 I llm_load_print_meta: n_ctx_train      = 8192
0.00.419.390 I llm_load_print_meta: n_embd           = 2048
0.00.419.390 I llm_load_print_meta: n_layer          = 18
0.00.419.451 I llm_load_print_meta: n_head           = 8
0.00.419.458 I llm_load_print_meta: n_head_kv        = 1
0.00.419.459 I llm_load_print_meta: n_rot            = 256
0.00.419.459 I llm_load_print_meta: n_swa            = 0
0.00.419.460 I llm_load_print_meta: n_embd_head_k    = 256
0.00.419.460 I llm_load_print_meta: n_embd_head_v    = 256
0.00.419.484 I llm_load_print_meta: n_gqa            = 8
0.00.419.491 I llm_load_print_meta: n_embd_k_gqa     = 256
0.00.419.498 I llm_load_print_meta: n_embd_v_gqa     = 256
0.00.419.500 I llm_load_print_meta: f_norm_eps       = 0.0e+00
0.00.419.502 I llm_load_print_meta: f_norm_rms_eps   = 1.0e-06
0.00.419.504 I llm_load_print_meta: f_clamp_kqv      = 0.0e+00
0.00.419.505 I llm_load_print_meta: f_max_alibi_bias = 0.0e+00
0.00.419.505 I llm_load_print_meta: f_logit_scale    = 0.0e+00
0.00.419.515 I llm_load_print_meta: n_ff             = 16384
0.00.419.519 I llm_load_print_meta: n_expert         = 0
0.00.419.520 I llm_load_print_meta: n_expert_used    = 0
0.00.419.520 I llm_load_print_meta: causal attn      = 1
0.00.419.521 I llm_load_print_meta: pooling type     = 0
0.00.419.522 I llm_load_print_meta: rope type        = 2
0.00.419.523 I llm_load_print_meta: rope scaling     = linear
0.00.419.525 I llm_load_print_meta: freq_base_train  = 10000.0
0.00.419.526 I llm_load_print_meta: freq_scale_train = 1
0.00.419.527 I llm_load_print_meta: n_ctx_orig_yarn  = 8192
0.00.419.528 I llm_load_print_meta: rope_finetuned   = unknown
0.00.419.528 I llm_load_print_meta: ssm_d_conv       = 0
0.00.419.528 I llm_load_print_meta: ssm_d_inner      = 0
0.00.419.529 I llm_load_print_meta: ssm_d_state      = 0
0.00.419.530 I llm_load_print_meta: ssm_dt_rank      = 0
0.00.419.530 I llm_load_print_meta: ssm_dt_b_c_rms   = 0
0.00.419.531 I llm_load_print_meta: model type       = 2B
0.00.419.535 I llm_load_print_meta: model ftype      = Q4_K - Medium
0.00.419.536 I llm_load_print_meta: model params     = 2.51 B
0.00.419.537 I llm_load_print_meta: model size       = 1.51 GiB (5.18 BPW) 
0.00.419.538 I llm_load_print_meta: general.name     = gemma-1.1-2b-it
0.00.419.539 I llm_load_print_meta: BOS token        = 2 '<bos>'
0.00.419.539 I llm_load_print_meta: EOS token        = 1 '<eos>'
0.00.419.540 I llm_load_print_meta: UNK token        = 3 '<unk>'
0.00.419.551 I llm_load_print_meta: PAD token        = 0 '<pad>'
0.00.419.552 I llm_load_print_meta: LF token         = 227 '<0x0A>'
0.00.419.553 I llm_load_print_meta: EOT token        = 107 '<end_of_turn>'
0.00.419.560 I llm_load_print_meta: EOG token        = 1 '<eos>'
0.00.419.562 I llm_load_print_meta: EOG token        = 107 '<end_of_turn>'
0.00.419.563 I llm_load_print_meta: max token length = 93
0.00.419.781 I llm_load_tensors: ggml ctx size =    0.08 MiB
0.00.479.085 I llm_load_tensors:        CPU buffer size =  1548.98 MiB
........................................................
0.00.484.673 I llama_new_context_with_model: n_ctx      = 8192
0.00.484.681 I llama_new_context_with_model: n_batch    = 2048
0.00.484.681 I llama_new_context_with_model: n_ubatch   = 512
0.00.484.682 I llama_new_context_with_model: flash_attn = 0
0.00.484.684 I llama_new_context_with_model: freq_base  = 10000.0
0.00.484.684 I llama_new_context_with_model: freq_scale = 1
0.00.514.096 I llama_kv_cache_init:        CPU KV buffer size =   144.00 MiB
0.00.514.142 I llama_new_context_with_model: KV self size  =  144.00 MiB, K (f16):   72.00 MiB, V (f16):   72.00 MiB
0.00.514.259 I llama_new_context_with_model:        CPU  output buffer size =     0.98 MiB
ggml_gallocr_reserve_n: reallocating CPU buffer from size 0.00 MiB to 508.00 MiB
0.00.515.695 I llama_new_context_with_model:        CPU compute buffer size =   508.00 MiB
0.00.515.708 I llama_new_context_with_model: graph nodes  = 601
0.00.515.709 I llama_new_context_with_model: graph splits = 1
0.00.515.728 W llama_init_from_gpt_params: warming up the model with an empty run - please wait ... (--no-warmup to disable)
0.01.102.703 I main: llama threadpool init, n_threads = 4
0.01.102.715 I 
0.01.102.823 I system_info: n_threads = 4 (n_threads_batch = 4) / 8 | AVX = 1 | AVX_VNNI = 0 | AVX2 = 1 | AVX512 = 1 | AVX512_VBMI = 1 | AVX512_VNNI = 1 | AVX512_BF16 = 0 | FMA = 1 | NEON = 0 | SVE = 0 | ARM_FMA = 0 | F16C = 1 | FP16_VA = 0 | RISCV_VECT = 0 | WASM_SIMD = 0 | BLAS = 0 | SSE3 = 1 | SSSE3 = 1 | VSX = 0 | MATMUL_INT8 = 0 | LLAMAFILE = 1 | 
0.01.102.828 I 
0.01.103.008 I sampler seed: 4217752647
0.01.103.018 I sampler params: 
	repeat_last_n = 64, repeat_penalty = 1.000, frequency_penalty = 0.000, presence_penalty = 0.000
	top_k = 40, tfs_z = 1.000, top_p = 0.950, min_p = 0.050, typical_p = 1.000, temp = 0.800
	mirostat = 0, mirostat_lr = 0.100, mirostat_ent = 5.000
0.01.103.024 I sampler chain: logits -> logit-bias -> penalties -> top-k -> tail-free -> typical -> top-p -> min-p -> temp-ext -> softmax -> dist 
0.01.103.025 I generate: n_ctx = 8192, n_batch = 2048, n_predict = 32, n_keep = 1
0.01.103.025 I 
 seconally.

I am not sure how to write the answer.

Can you please help me with this?

I need help understanding how to answer the

0.12.137.518 I llama_perf_sampler_print:    sampling time =      49.18 ms /    33 runs   (    1.49 ms per token,   671.06 tokens per second)
0.12.137.522 I llama_perf_context_print:        load time =    1099.15 ms
0.12.137.524 I llama_perf_context_print: prompt eval time =       0.00 ms /     1 tokens (    0.00 ms per token,      inf tokens per second)
0.12.137.538 I llama_perf_context_print:        eval time =   10953.32 ms /    32 runs   (  342.29 ms per token,     2.92 tokens per second)
0.12.137.540 I llama_perf_context_print:       total time =   11034.83 ms /    33 tokens
+ echo PASS
PASS
+ echo

+ rm -f /mnt/llama.cpp/models/quantize/ggml-model-split-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-split-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00001-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00002-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00003-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00004-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00005-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-00006-of-00006.gguf /mnt/llama.cpp/models/quantize/ggml-model-requant-merge.gguf

real	7m7.443s
user	50m16.797s
sys	0m6.463s
